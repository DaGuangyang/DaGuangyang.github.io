[{"title":"FTP服务","url":"/2021/09/03/Linux/FTP%E6%9C%8D%E5%8A%A1/","content":"<p><img src=\"https://i.loli.net/2021/08/02/cX51yi4KrLYRfJU.jpg\" alt=\"linux.jpg\">  </p>\n<span id=\"more\"></span>\n<h1 id=\"FTP服务\"><a href=\"#FTP服务\" class=\"headerlink\" title=\"FTP服务\"></a>FTP服务</h1><h2 id=\"FTP简介\"><a href=\"#FTP简介\" class=\"headerlink\" title=\"FTP简介\"></a>FTP简介</h2><p>FTP（File Transfer Protocol，文件传输协议） 是 TCP/IP 协议组中的协议之一，FTP协议包括两个组成部分，其一为FTP服务器，其二为FTP客户端，其中FTP服务器用来存储文件，用户可以使用FTP客户端通过FTP协议访问位于FTP服务器上的资源，在开发网站的时候，通常利用FTP协议把网页或程序传到Web服务器上，由于FTP传输效率非常高，在网络上传输大的文件时，一般也采用该协议，默认情况下FTP协议使用TCP端口中的 20和21这两个端口，其中20用于传输数据，21用于传输控制信息，但是，是否使用20作为传输数据的端口与FTP使用的传输模式有关，如果采用主动模式，那么数据传输端口就是20；如果采用被动模式，则具体最终使用哪个端口要服务器端和客户端协商决定  </p>\n<h2 id=\"工作模式\"><a href=\"#工作模式\" class=\"headerlink\" title=\"工作模式\"></a>工作模式</h2><ol>\n<li>FTP连接及传输模式  <ul>\n<li>控制连接：TCP 21，用于发送FTP命令  </li>\n<li>数据连接：TCP 20，用于上传、下载数据  </li>\n</ul>\n</li>\n<li>数据连接的建立类型  <ul>\n<li>主动模式：服务器从20端口主动向客户端发起连接  </li>\n<li>被动模式：服务器在指定范围内某个端口被动等待客户端连接  </li>\n</ul>\n</li>\n</ol>\n","categories":["Linux"],"tags":["FTP"]},{"title":"Namespace","url":"/2022/06/29/Linux/Linux%E4%B9%8BNamespace/","content":"<p><img src=\"https://i.loli.net/2021/08/02/cX51yi4KrLYRfJU.jpg\" alt=\"linux.jpg\">  </p>\n<span id=\"more\"></span>\n<h1 id=\"Namespace\"><a href=\"#Namespace\" class=\"headerlink\" title=\"Namespace\"></a>Namespace</h1><h2 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念\"></a>概念</h2><p>Linux namespace是Kernel的一个功能，可以将一些系统资源进行隔离。Namespace 是 Linux 内核用来隔离内核资源的方式。通过 namespace 可以让一些进程只能看到与自己相关的一部分资源，而另外一些进程也只能看到与它们自己相关的资源，这两拨进程根本就感觉不到对方的存在。Linux namespaces 是对全局系统资源的一种封装隔离，使得处于不同 namespace 的进程拥有独立的全局系统资源，改变一个 namespace 中的系统资源只会影响当前 namespace 里的进程，对其他 namespace 中的进程没有影响。  </p>\n<p>用户可以创建指定类型的namespace，并将程序放入该namespace中，表示从前的系统中隔离出一个进程的运行环境，在此运行环境中的进程将认为自己拥有该namespace中的独立资源。 实际即使没有手动创建namespace，Linux系统开机后也会创建一个默认的namespace，称为 <strong>root namespace</strong>，所有进程默认都运行在root namespace中，每个进程都认为自己拥有该namespace中所有的全局资源。<br>每一个namespace都是基于当前内核，<strong>root namespace直接基于内核</strong>，<strong>用户创建的namespace运行环境基于当前所在的namespace</strong>，不直接基于内核是因为namespace可能会修改某些运行时内核参数。  </p>\n<h2 id=\"namespace资源类型\"><a href=\"#namespace资源类型\" class=\"headerlink\" title=\"namespace资源类型\"></a>namespace资源类型</h2><p>每种资源都是随着Linux内核版本更新逐渐加入的，所以有些内核版本可能不具备某种namespace  </p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">namespace类型</th>\n<th align=\"center\">隔离的资源</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">IPC</td>\n<td align=\"center\">SystemV IPC(信号量、消息队列、共享内存)和POSIX消息队列</td>\n</tr>\n<tr>\n<td align=\"center\">Network</td>\n<td align=\"center\">网络设备、网络栈、端口</td>\n</tr>\n<tr>\n<td align=\"center\">Mount</td>\n<td align=\"center\">文件系统挂载点</td>\n</tr>\n<tr>\n<td align=\"center\">PID</td>\n<td align=\"center\">进程编号</td>\n</tr>\n<tr>\n<td align=\"center\">User</td>\n<td align=\"center\">用户和用户组</td>\n</tr>\n<tr>\n<td align=\"center\">UTS</td>\n<td align=\"center\">主机名和NIS域名</td>\n</tr>\n<tr>\n<td align=\"center\">Cgroup</td>\n<td align=\"center\">Cgroup的根目录</td>\n</tr>\n</tbody></table>\n<h2 id=\"查看进程所在的namespace\"><a href=\"#查看进程所在的namespace\" class=\"headerlink\" title=\"查看进程所在的namespace\"></a>查看进程所在的namespace</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">]# ll /proc/$$/ns  &amp;&amp; ll /proc/1/ns</span><br><span class=\"line\">total 0</span><br><span class=\"line\">lrwxrwxrwx 1 root root 0 Jul  4 12:08 ipc -&gt; ipc:[4026531839]</span><br><span class=\"line\">lrwxrwxrwx 1 root root 0 Jul  4 12:08 mnt -&gt; mnt:[4026531840]</span><br><span class=\"line\">lrwxrwxrwx 1 root root 0 Jul  4 11:35 net -&gt; net:[4026531956]</span><br><span class=\"line\">lrwxrwxrwx 1 root root 0 Jul  4 11:35 pid -&gt; pid:[4026531836]</span><br><span class=\"line\">lrwxrwxrwx 1 root root 0 Jul  4 12:08 user -&gt; user:[4026531837]</span><br><span class=\"line\">lrwxrwxrwx 1 root root 0 Jul  4 12:08 uts -&gt; uts:[4026531838]</span><br><span class=\"line\">total 0</span><br><span class=\"line\">lrwxrwxrwx 1 root root 0 Jul  4 11:18 ipc -&gt; ipc:[4026531839]</span><br><span class=\"line\">lrwxrwxrwx 1 root root 0 Jul  4 11:18 mnt -&gt; mnt:[4026531840]</span><br><span class=\"line\">lrwxrwxrwx 1 root root 0 Jun 30 23:28 net -&gt; net:[4026531956]</span><br><span class=\"line\">lrwxrwxrwx 1 root root 0 Jun 30 23:28 pid -&gt; pid:[4026531836]</span><br><span class=\"line\">lrwxrwxrwx 1 root root 0 Jul  4 11:18 user -&gt; user:[4026531837]</span><br><span class=\"line\">lrwxrwxrwx 1 root root 0 Jul  4 11:18 uts -&gt; uts:[4026531838]</span><br></pre></td></tr></table></figure>\n<p>路径下的文件都是软连接，指向的文件名中的数字表示namespace的inode，如果不同进程对应的文件的inode相同说明两个进程是在同一个namespace中。  </p>\n<h2 id=\"Cgroup\"><a href=\"#Cgroup\" class=\"headerlink\" title=\"Cgroup\"></a>Cgroup</h2><p>Cgroups(Control Groups) 是Linux内核提供的一种可以限制、记录、隔离进程组（process groups）所使用的物理资源（如：cpu,memory,IO等等）的机制。可以对一组进程及将来的子进程的资源的限制、控制和统计的能力，这些资源包括CPU，内存，存储，网络等。通过Cgroups，可以方便的限制某个进程的资源占用，并且可以实时的监控进程的监控和统计信息。Cgroups也是LXC为实现虚拟化所使用的资源管理手段，可以说没有cgroups就没有LXC (Linux Container)。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">]#</span><span class=\"bash\"> ll /sys/fs/cgroup/</span></span><br><span class=\"line\">total 0</span><br><span class=\"line\">drwxr-xr-x 2 root root  0 Jun 30 23:27 blkio                        #​​​定​​​输​​​入​​​/输​​​出​​​限​​​制​​​</span><br><span class=\"line\">lrwxrwxrwx 1 root root 11 Jun 30 23:27 cpu -&gt; cpu,cpuacct           #使​​​用​​​调​​​度​​​程​​​序​​​提​​​供​​​对​​​CPU的​​​cgroup任​​​务访​​问</span><br><span class=\"line\">​lrwxrwxrwx 1 root root 11 Jun 30 23:27 cpuacct -&gt; cpu,cpuacct       #自​​​动​​​生​​​成​​​cgroup中​​​任​​​务​​​所​​​使​​​用​​​的​​​CPU报​​​告</span><br><span class=\"line\">drwxr-xr-x 3 root root  0 Jun 30 23:27 cpu,cpuacct</span><br><span class=\"line\">drwxr-xr-x 2 root root  0 Jun 30 23:27 cpuset                       #​​​为​​​cgroup中​​​的​​​任​​​务​​​分​​​配​​​独​​​立​​​CPU（在​​​多​​​核​​​系​​​统​​​）和​​​内​​​存​​​节​​​点​​​</span><br><span class=\"line\">drwxr-xr-x 2 root root  0 Jun 30 23:27 devices                      #允​​​许​​​或​​​者​​​拒​​​绝​​​ cgroup 中​​​的​​​任​​​务​​​访​​​问​​​设​​​备</span><br><span class=\"line\">drwxr-xr-x 2 root root  0 Jun 30 23:27 freezer                      #挂​​​起​​​或​​​者​​​恢​​​复​​​ cgroup 中​​​的​​​任​​​务</span><br><span class=\"line\">drwxr-xr-x 2 root root  0 Jun 30 23:27 hugetlb                      #主要针对于HugeTLB系统进行限制，这是一个大页文件系统</span><br><span class=\"line\">drwxr-xr-x 3 root root  0 Jun 30 23:27 memory                       #设​​​定​​​ cgroup 中​​​任​​​务​​​使​​​用​​​的​​​内​​​存​​​限​​​制​​​，并​​​自​​​动​​​生​​​成​​​​​内​​​存​​​资​​​源使用​​​报​​​告</span><br><span class=\"line\">lrwxrwxrwx 1 root root 16 Jun 30 23:27 net_cls -&gt; net_cls,net_prio</span><br><span class=\"line\">drwxr-xr-x 2 root root  0 Jun 30 23:27 net_cls,net_prio</span><br><span class=\"line\">lrwxrwxrwx 1 root root 16 Jun 30 23:27 net_prio -&gt; net_cls,net_prio</span><br><span class=\"line\">drwxr-xr-x 2 root root  0 Jun 30 23:27 perf_event</span><br><span class=\"line\">drwxr-xr-x 2 root root  0 Jun 30 23:27 pids</span><br><span class=\"line\">drwxr-xr-x 4 root root  0 Jun 30 23:27 systemd</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Cgroup分配限制资源\"><a href=\"#Cgroup分配限制资源\" class=\"headerlink\" title=\"Cgroup分配限制资源\"></a>Cgroup分配限制资源</h3><p>拿menory为例，进入<code>/sys/fs/cgroup/memory</code>下创建<code>test</code>，这样就相当创建一个menory的控制组，进入到test下会发现自动创建了许多文件，每个文件对应不同的限制条件，再将需要进行限制进程的PID添加到tasks中，这样就对这个进程的menory进行了限制，需要删除的话将这个目录删除即可  </p>\n","categories":["Linux"],"tags":["namespace"]},{"title":"Cobbler自动化部署","url":"/2021/09/23/Linux/Cobbler%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2/","content":"<p><img src=\"/2021/09/23/Linux/Cobbler%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2/Cobbler.png\" alt=\"cobbler\">  </p>\n<span id=\"more\"></span>\n\n<h2 id=\"cobbler安装\"><a href=\"#cobbler安装\" class=\"headerlink\" title=\"cobbler安装\"></a>cobbler安装</h2><p>虚拟机网卡使用建议使用NAT模式，并且将NAT模式的DHCP服务关闭。<br><img src=\"/2021/09/23/Linux/Cobbler%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2/DHCP%E6%9C%8D%E5%8A%A1.png\" alt=\"DHCP服务\">  </p>\n<ol>\n<li><strong>环境准备</strong><br>将主机的防火墙和selinux关闭。  </li>\n<li><strong>安装cobbler</strong><br>这里使用阿里镜像站中的epel源进行安装。  <figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">yum -y install cobbler cobbler-web tftp-server dhcp httpd xinetd</span><br><span class=\"line\">systemctl start httpd cobblerd</span><br><span class=\"line\">systemctl enable httpd cobblerd</span><br></pre></td></tr></table></figure></li>\n<li><strong>查看安装后的相关文件</strong>  <figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">/etc/cobbler                  # 配置文件目录</span><br><span class=\"line\">/etc/cobbler/settings         # cobbler主配置文件，这个文件是YAML格式，Cobbler是python写的程序。</span><br><span class=\"line\">/etc/cobbler/dhcp.template    # DHCP服务的配置模板</span><br><span class=\"line\">/etc/cobbler/tftpd.template   # tftp服务的配置模板</span><br><span class=\"line\">/etc/cobbler/rsync.template   # rsync服务的配置模板</span><br><span class=\"line\">/etc/cobbler/iso              # iso模板配置文件目录 </span><br><span class=\"line\">/etc/cobbler/pxe              # pxe模板文件目录</span><br><span class=\"line\">/etc/cobbler/power            # 电源的配置文件目录</span><br><span class=\"line\">/etc/cobbler/users.conf       # Web服务授权配置文件</span><br><span class=\"line\">/etc/cobbler/users.digest     # 用于web访问的用户名密码配置文件</span><br><span class=\"line\">/etc/cobbler/dnsmasq.template # DNS服务的配置模板</span><br><span class=\"line\">/etc/cobbler/modules.conf     # Cobbler模块配置文件</span><br><span class=\"line\">/var/lib/cobbler              # Cobbler数据目录</span><br><span class=\"line\">/var/lib/cobbler/config       # 配置文件</span><br><span class=\"line\">/var/lib/cobbler/kickstarts   # 默认存放kickstart文件</span><br><span class=\"line\">/var/lib/cobbler/loaders      # 存放的各种引导程序</span><br><span class=\"line\">/var/www/cobbler              # 系统安装镜像目录</span><br><span class=\"line\">/var/www/cobbler/ks_mirror    # 导入的系统镜像列表</span><br><span class=\"line\">/var/www/cobbler/images       # 导入的系统镜像启动文件</span><br><span class=\"line\">/var/www/cobbler/repo_mirror  # yum源存储目录</span><br><span class=\"line\">/var/log/cobbler              # 日志目录</span><br><span class=\"line\">/var/log/cobbler/install.log  # 客户端系统安装日志</span><br><span class=\"line\">/var/log/cobbler/cobbler.log  # cobbler日志</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h2 id=\"配置cobbler\"><a href=\"#配置cobbler\" class=\"headerlink\" title=\"配置cobbler\"></a>配置cobbler</h2><ol>\n<li><strong>检查cobbler</strong>  <figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">~]# cobbler check</span><br><span class=\"line\">The following are potential configuration items that you may want to fix:</span><br><span class=\"line\"></span><br><span class=\"line\">1 : The &#x27;server&#x27; field in /etc/cobbler/settings must be set to something other than localhost, or kickstarting features will not work.  This should be a resolvable hostname or IP for the boot server as reachable by all machines that will use it.</span><br><span class=\"line\">2 : For PXE to be functional, the &#x27;next_server&#x27; field in /etc/cobbler/settings must be set to something other than 127.0.0.1, and should match the IP of the boot server on the PXE network.</span><br><span class=\"line\">3 : change &#x27;disable&#x27; to &#x27;no&#x27; in /etc/xinetd.d/tftp</span><br><span class=\"line\">4 : Some network boot-loaders are missing from /var/lib/cobbler/loaders, you may run &#x27;cobbler get-loaders&#x27; to download them, or, if you only want to handle x86/x86_64 netbooting, you may ensure that you have installed a *recent* version of the syslinux package installed and can ignore this message entirely.  Files in this directory, should you want to support all architectures, should include pxelinux.0, menu.c32, elilo.efi, and yaboot. The &#x27;cobbler get-loaders&#x27; command is the easiest way to resolve these requirements.</span><br><span class=\"line\">5 : enable and start rsyncd.service with systemctl</span><br><span class=\"line\">6 : debmirror package is not installed, it will be required to manage debian deployments and repositories</span><br><span class=\"line\">7 : ksvalidator was not found, install pykickstart</span><br><span class=\"line\">8 : The default password used by the sample templates for newly installed machines (default_password_crypted in /etc/cobbler/settings) is still set to &#x27;cobbler&#x27; and should be changed, try: &quot;openssl passwd -1 -salt &#x27;random-phrase-here&#x27; &#x27;your-password-here&#x27;&quot; to generate new one</span><br><span class=\"line\">9 : fencing tools were not found, and are required to use the (optional) power management features. install cman or fence-agents to use them</span><br><span class=\"line\"></span><br><span class=\"line\">Restart cobblerd and then run &#x27;cobbler sync&#x27; to apply changes.</span><br></pre></td></tr></table></figure>\n上面列出来的问题需要进行修改,cobbler的配置都存储在<code>/etc/cobbler/settings</code>。  <figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">1. server   修改/etc/cobbler/settings</span><br><span class=\"line\">server: 192.168.27.3</span><br><span class=\"line\"></span><br><span class=\"line\">2. next_server   修改/etc/cobbler/settings</span><br><span class=\"line\">next_server: 192.168.27.3</span><br><span class=\"line\"></span><br><span class=\"line\">3. tftp_server   修改/etc/xinetd.d/tftp</span><br><span class=\"line\">disable = no</span><br><span class=\"line\"></span><br><span class=\"line\">4. boot-loaders</span><br><span class=\"line\">cobbler get-loaders</span><br><span class=\"line\"></span><br><span class=\"line\">5. rsyncd</span><br><span class=\"line\">systemctl start rsyncd</span><br><span class=\"line\">systemctl enable rsyncd</span><br><span class=\"line\"></span><br><span class=\"line\">6. debmirror 可忽略</span><br><span class=\"line\"></span><br><span class=\"line\">7. pykickstart </span><br><span class=\"line\">yum -y install pykickstart</span><br><span class=\"line\"></span><br><span class=\"line\">8. 设置后面安装系统的初始化登录密码</span><br><span class=\"line\">openssl passwd -1 -salt `openssl rand -hex 4` &#x27;admin&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">9. fencing tools</span><br><span class=\"line\">yum -y install fence-agents</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h2 id=\"配置DHCP\"><a href=\"#配置DHCP\" class=\"headerlink\" title=\"配置DHCP\"></a>配置DHCP</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">1.修改/etc/cobbler/settings</span><br><span class=\"line\">manage_dhcp = 1 </span><br><span class=\"line\"></span><br><span class=\"line\">2. vim /etc/cobbler/dhcp.template</span><br><span class=\"line\">subnet 192.168.27.0 netmask 255.255.255.0 &#123;         #分配的网段和掩码</span><br><span class=\"line\">     option routers             192.168.27.1;       #网关地址</span><br><span class=\"line\">     option domain-name-servers 8.8.8.8;            #dns地址</span><br><span class=\"line\">     option subnet-mask         255.255.255.0;      #分配的IP的掩码</span><br><span class=\"line\">     range dynamic-bootp        192.168.27.100 192.168.27.254;      #分配的IP的范围</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"同步cobbler配置\"><a href=\"#同步cobbler配置\" class=\"headerlink\" title=\"同步cobbler配置\"></a>同步cobbler配置</h2><p>同步cobbler配置，它会根据配置自动修改dhcp等服务。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">cobbler sync</span><br></pre></td></tr></table></figure>\n<p>同步完成后就可以创建一个新的虚拟机开启后，查看是否可以从DHCP中拉取到。  </p>\n<h2 id=\"cobbler命令\"><a href=\"#cobbler命令\" class=\"headerlink\" title=\"cobbler命令\"></a>cobbler命令</h2><table>\n<thead>\n<tr>\n<th align=\"left\">命令</th>\n<th align=\"left\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">cobbler check</td>\n<td align=\"left\">核对当前设置是否有问题</td>\n</tr>\n<tr>\n<td align=\"left\">cobbler list</td>\n<td align=\"left\">列出所有的cobbler元素</td>\n</tr>\n<tr>\n<td align=\"left\">cobbler report</td>\n<td align=\"left\">列出元素的详细信息</td>\n</tr>\n<tr>\n<td align=\"left\">cobbler sync</td>\n<td align=\"left\">同步配置到数据目录，更改配置最好都执行一下</td>\n</tr>\n<tr>\n<td align=\"left\">cobbler reposync</td>\n<td align=\"left\">同步yum仓库</td>\n</tr>\n<tr>\n<td align=\"left\">cobbler distro</td>\n<td align=\"left\">查看导入的发行版系统信息</td>\n</tr>\n<tr>\n<td align=\"left\">cobbler system</td>\n<td align=\"left\">查看添加的系统信息</td>\n</tr>\n<tr>\n<td align=\"left\">cobbler profile</td>\n<td align=\"left\">查看配置信息</td>\n</tr>\n</tbody></table>\n<h2 id=\"cobbler安装配置centos\"><a href=\"#cobbler安装配置centos\" class=\"headerlink\" title=\"cobbler安装配置centos\"></a>cobbler安装配置centos</h2><h3 id=\"将镜像挂载\"><a href=\"#将镜像挂载\" class=\"headerlink\" title=\"将镜像挂载\"></a>将镜像挂载</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">mkdir /mnt/cdrom </span><br><span class=\"line\">mount /dev/cdrom /mnt/cdrom</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"导入镜像\"><a href=\"#导入镜像\" class=\"headerlink\" title=\"导入镜像\"></a>导入镜像</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">cobbler import --path=/mnt/cdrom --name=centos7.6 --arch=x86_64</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"查看导入后镜像信息\"><a href=\"#查看导入后镜像信息\" class=\"headerlink\" title=\"查看导入后镜像信息\"></a>查看导入后镜像信息</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">cobbler distro report --name=centos7.6-x86_64</span><br><span class=\"line\"></span><br><span class=\"line\">Name                           : centos7.6-x86_64</span><br><span class=\"line\">Architecture                   : x86_64</span><br><span class=\"line\">TFTP Boot Files                : &#123;&#125;</span><br><span class=\"line\">Breed                          : redhat</span><br><span class=\"line\">Comment                        : </span><br><span class=\"line\">Fetchable Files                : &#123;&#125;</span><br><span class=\"line\">Initrd                         : /var/www/cobbler/ks_mirror/centos7.6-x86_64/images/pxeboot/initrd.img</span><br><span class=\"line\">Kernel                         : /var/www/cobbler/ks_mirror/centos7.6-x86_64/images/pxeboot/vmlinuz</span><br><span class=\"line\">Kernel Options                 : &#123;&#125;</span><br><span class=\"line\">Kernel Options (Post Install)  : &#123;&#125;</span><br><span class=\"line\">Kickstart Metadata             : &#123;&#x27;tree&#x27;: &#x27;http://@@http_server@@/cblr/links/centos7.6-x86_64&#x27;&#125;</span><br><span class=\"line\">Management Classes             : []</span><br><span class=\"line\">OS Version                     : rhel6</span><br><span class=\"line\">Owners                         : [&#x27;admin&#x27;]</span><br><span class=\"line\">Red Hat Management Key         : &lt;&lt;inherit&gt;&gt;</span><br><span class=\"line\">Red Hat Management Server      : &lt;&lt;inherit&gt;&gt;</span><br><span class=\"line\">Template Files                 : &#123;&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"查看profile信息\"><a href=\"#查看profile信息\" class=\"headerlink\" title=\"查看profile信息\"></a>查看profile信息</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@clone cdrom]# cobbler profile report --name=centos7.6-x86_64</span><br><span class=\"line\">Name                           : centos7.6-x86_64</span><br><span class=\"line\">TFTP Boot Files                : &#123;&#125;</span><br><span class=\"line\">Comment                        : </span><br><span class=\"line\">DHCP Tag                       : default</span><br><span class=\"line\">Distribution                   : centos7.6-x86_64</span><br><span class=\"line\">Enable gPXE?                   : 0</span><br><span class=\"line\">Enable PXE Menu?               : 1</span><br><span class=\"line\">Fetchable Files                : &#123;&#125;</span><br><span class=\"line\">Kernel Options                 : &#123;&#125;</span><br><span class=\"line\">Kernel Options (Post Install)  : &#123;&#125;</span><br><span class=\"line\">Kickstart                      : /var/lib/cobbler/kickstarts/centos7.ks</span><br><span class=\"line\">Kickstart Metadata             : &#123;&#125;</span><br><span class=\"line\">Management Classes             : []</span><br><span class=\"line\">Management Parameters          : &lt;&lt;inherit&gt;&gt;</span><br><span class=\"line\">Name Servers                   : []</span><br><span class=\"line\">Name Servers Search Path       : []</span><br><span class=\"line\">Owners                         : [&#x27;admin&#x27;]</span><br><span class=\"line\">Parent Profile                 : </span><br><span class=\"line\">Internal proxy                 : </span><br><span class=\"line\">Red Hat Management Key         : &lt;&lt;inherit&gt;&gt;</span><br><span class=\"line\">Red Hat Management Server      : &lt;&lt;inherit&gt;&gt;</span><br><span class=\"line\">Repos                          : []</span><br><span class=\"line\">Server Override                : &lt;&lt;inherit&gt;&gt;</span><br><span class=\"line\">Template Files                 : &#123;&#125;</span><br><span class=\"line\">Virt Auto Boot                 : 1</span><br><span class=\"line\">Virt Bridge                    : xenbr0</span><br><span class=\"line\">Virt CPUs                      : 1</span><br><span class=\"line\">Virt Disk Driver Type          : raw</span><br><span class=\"line\">Virt File Size(GB)             : 5</span><br><span class=\"line\">Virt Path                      : </span><br><span class=\"line\">Virt RAM (MB)                  : 512</span><br><span class=\"line\">Virt Type                      : kvm</span><br></pre></td></tr></table></figure>\n<h3 id=\"copy一份profile文件-ks-，进行修改\"><a href=\"#copy一份profile文件-ks-，进行修改\" class=\"headerlink\" title=\"copy一份profile文件(ks)，进行修改\"></a>copy一份profile文件(ks)，进行修改</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">cd /var/lib/cobbler/kickstarts/</span><br><span class=\"line\">cp sample_end.ks centos7.ks</span><br><span class=\"line\">vim centos7.ks</span><br><span class=\"line\"></span><br><span class=\"line\"># This kickstart file should only be used with EL &gt; 5 and/or Fedora &gt; 7.</span><br><span class=\"line\"># For older versions please use the sample.ks kickstart file.</span><br><span class=\"line\"></span><br><span class=\"line\">#platform=x86, AMD64, or Intel EM64T</span><br><span class=\"line\"># System authorization information</span><br><span class=\"line\">auth  --useshadow  --enablemd5</span><br><span class=\"line\"># System bootloader configuration</span><br><span class=\"line\">bootloader --location=mbr</span><br><span class=\"line\"># Partition clearing information</span><br><span class=\"line\">clearpart --all --initlabel</span><br><span class=\"line\"># Use text mode install</span><br><span class=\"line\">text      ## 使用文本模式安装</span><br><span class=\"line\"># Firewall configuration</span><br><span class=\"line\">firewall --disable   ## 防火墙选项</span><br><span class=\"line\"># Run the Setup Agent on first boot</span><br><span class=\"line\">firstboot --disable</span><br><span class=\"line\"># System keyboard</span><br><span class=\"line\">keyboard us    ## 选择键盘</span><br><span class=\"line\"># System language</span><br><span class=\"line\">lang en_US     ## 选择语言</span><br><span class=\"line\"># Use network installation</span><br><span class=\"line\">url --url=$tree</span><br><span class=\"line\"># If any cobbler repo definitions were referenced in the kickstart profile, include them here.</span><br><span class=\"line\">$yum_repo_stanza</span><br><span class=\"line\"># Network information</span><br><span class=\"line\">$SNIPPET(&#x27;network_config&#x27;)</span><br><span class=\"line\"># Reboot after installation</span><br><span class=\"line\">reboot</span><br><span class=\"line\"></span><br><span class=\"line\">#Root password</span><br><span class=\"line\">rootpw --iscrypted $default_password_crypted   </span><br><span class=\"line\"># SELinux configuration  </span><br><span class=\"line\">selinux --disabled  ## SELinux配置</span><br><span class=\"line\"># Do not configure the X Window System</span><br><span class=\"line\">skipx</span><br><span class=\"line\"># System timezone</span><br><span class=\"line\">timezone  America/New_York</span><br><span class=\"line\"># Install OS instead of upgrade</span><br><span class=\"line\">install        ##安装系统而不是升级</span><br><span class=\"line\"># Clear the Master Boot Record</span><br><span class=\"line\">zerombr</span><br><span class=\"line\"># Allow anaconda to partition the system as needed</span><br><span class=\"line\">autopart</span><br><span class=\"line\"></span><br><span class=\"line\">%pre</span><br><span class=\"line\">$SNIPPET(&#x27;log_ks_pre&#x27;)</span><br><span class=\"line\">$SNIPPET(&#x27;kickstart_start&#x27;)</span><br><span class=\"line\">$SNIPPET(&#x27;pre_install_network_config&#x27;)</span><br><span class=\"line\"># Enable installation monitoring</span><br><span class=\"line\">$SNIPPET(&#x27;pre_anamon&#x27;)</span><br><span class=\"line\">%end</span><br><span class=\"line\"></span><br><span class=\"line\">%packages  ## 想安装的软件包</span><br><span class=\"line\">$SNIPPET(&#x27;func_install_if_enabled&#x27;)</span><br><span class=\"line\">tree</span><br><span class=\"line\">vim</span><br><span class=\"line\">nmap</span><br><span class=\"line\">wget</span><br><span class=\"line\">lftp</span><br><span class=\"line\">net-tools</span><br><span class=\"line\">lrzsz</span><br><span class=\"line\">telnet</span><br><span class=\"line\">%end</span><br><span class=\"line\"></span><br><span class=\"line\">%post --nochroot</span><br><span class=\"line\">$SNIPPET(&#x27;log_ks_post_nochroot&#x27;)</span><br><span class=\"line\">%end</span><br><span class=\"line\"></span><br><span class=\"line\">%post</span><br><span class=\"line\">$SNIPPET(&#x27;log_ks_post&#x27;)</span><br><span class=\"line\"># Start yum configuration</span><br><span class=\"line\">$yum_config_stanza</span><br><span class=\"line\"># End yum configuration</span><br><span class=\"line\">$SNIPPET(&#x27;post_install_kernel_options&#x27;)</span><br><span class=\"line\">$SNIPPET(&#x27;post_install_network_config&#x27;)</span><br><span class=\"line\">$SNIPPET(&#x27;func_register_if_enabled&#x27;)</span><br><span class=\"line\">$SNIPPET(&#x27;download_config_files&#x27;)</span><br><span class=\"line\">$SNIPPET(&#x27;koan_environment&#x27;)</span><br><span class=\"line\">$SNIPPET(&#x27;redhat_register&#x27;)</span><br><span class=\"line\">$SNIPPET(&#x27;cobbler_register&#x27;)</span><br><span class=\"line\"># Enable post-install boot notification</span><br><span class=\"line\">$SNIPPET(&#x27;post_anamon&#x27;)</span><br><span class=\"line\"># Start final steps</span><br><span class=\"line\">$SNIPPET(&#x27;kickstart_done&#x27;)</span><br><span class=\"line\"># End final steps</span><br><span class=\"line\">%end</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"编辑centos7-6镜像所使用的kickstart文件\"><a href=\"#编辑centos7-6镜像所使用的kickstart文件\" class=\"headerlink\" title=\"编辑centos7.6镜像所使用的kickstart文件\"></a>编辑centos7.6镜像所使用的kickstart文件</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">cobbler profile edit --name=centos7.6-x86_64 --kickstart=/var/lib/cobbler/kickstarts/centos7.ks</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"同步cobbler配置-1\"><a href=\"#同步cobbler配置-1\" class=\"headerlink\" title=\"同步cobbler配置\"></a>同步cobbler配置</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">cobbler sync</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"创建一个虚拟机进行测试\"><a href=\"#创建一个虚拟机进行测试\" class=\"headerlink\" title=\"创建一个虚拟机进行测试\"></a>创建一个虚拟机进行测试</h3><p>创建的虚拟内存要大于2G<br><img src=\"/2021/09/23/Linux/Cobbler%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2/test.png\" alt=\"test\"><br>选中后回车即可进行安装。</p>\n","categories":["Linux"],"tags":["cobbler"]},{"title":"Linux学习","url":"/2021/07/31/Linux/Linux%E5%AD%A6%E4%B9%A0/","content":"<p><img src=\"https://i.loli.net/2021/08/02/cX51yi4KrLYRfJU.jpg\" alt=\"linux.jpg\">  </p>\n<span id=\"more\"></span>\n<h1 id=\"Linux命令查看网站\"><a href=\"#Linux命令查看网站\" class=\"headerlink\" title=\"Linux命令查看网站\"></a>Linux命令查看网站</h1><p><a href=\"https://man.linuxde.net/\">Linux命令大全</a><br><a href=\"http://linux.51yip.com/\">Linux命令手册</a><br><a href=\"https://www.linuxcool.com/\">Linux命令大全(手册)</a>  </p>\n<h1 id=\"Linux命令\"><a href=\"#Linux命令\" class=\"headerlink\" title=\"Linux命令\"></a>Linux命令</h1><h2 id=\"文件及目录管理命令\"><a href=\"#文件及目录管理命令\" class=\"headerlink\" title=\"文件及目录管理命令\"></a>文件及目录管理命令</h2><h3 id=\"mkdir\"><a href=\"#mkdir\" class=\"headerlink\" title=\"mkdir\"></a>mkdir</h3><p><strong>作用</strong>：创建目录<br><strong>常用参数</strong>:  </p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>-p</td>\n<td>递归创建多级目录</td>\n</tr>\n<tr>\n<td>-m</td>\n<td>建立目录的同时设置目录的权限</td>\n</tr>\n<tr>\n<td>-z</td>\n<td>设置安全上下文</td>\n</tr>\n<tr>\n<td>-v</td>\n<td>显示目录的创建过程</td>\n</tr>\n</tbody></table>\n<h3 id=\"rm\"><a href=\"#rm\" class=\"headerlink\" title=\"rm\"></a>rm</h3><p><strong>作用</strong>：删除<br><strong>常用参数</strong>:  </p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>-f</td>\n<td>忽略不存在的文件，不会出现警告信息</td>\n</tr>\n<tr>\n<td>-i</td>\n<td>删除前会询问用户是否操作</td>\n</tr>\n<tr>\n<td>-r/R</td>\n<td>递归删除</td>\n</tr>\n<tr>\n<td>-v</td>\n<td>显示指令的详细执行过程</td>\n</tr>\n</tbody></table>\n<h3 id=\"mv\"><a href=\"#mv\" class=\"headerlink\" title=\"mv\"></a>mv</h3><p><strong>作用</strong>：移动文件、文件名重命名<br><strong>常用参数</strong>:  </p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>-i</td>\n<td>若存在同名文件，则向用户询问是否覆盖</td>\n</tr>\n<tr>\n<td>-f</td>\n<td>覆盖已有文件时，不进行任何提示</td>\n</tr>\n<tr>\n<td>-b</td>\n<td>当文件存在时，覆盖前为其创建一个备份</td>\n</tr>\n<tr>\n<td>-u</td>\n<td>当源文件比目标文件新，或者目标文件不存在时，才执行移动此操作</td>\n</tr>\n</tbody></table>\n<h3 id=\"cp\"><a href=\"#cp\" class=\"headerlink\" title=\"cp\"></a>cp</h3><p><strong>作用</strong>：复制文件<br><strong>常用参数</strong>:  </p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>-f</td>\n<td>若目标文件已存在，则会直接覆盖原文件</td>\n</tr>\n<tr>\n<td>-i</td>\n<td>若目标文件已存在，则会询问是否覆盖</td>\n</tr>\n<tr>\n<td>-p</td>\n<td>保留源文件或目录的所有属性</td>\n</tr>\n<tr>\n<td>-r</td>\n<td>递归复制文件和目录</td>\n</tr>\n<tr>\n<td>-d</td>\n<td>当复制符号连接时，把目标文件或目录也建立为符号连接，并指向与源文件或目录连接原始文件或目录</td>\n</tr>\n<tr>\n<td>-l</td>\n<td>对源文件建立硬连接，而非复制文件</td>\n</tr>\n<tr>\n<td>-s</td>\n<td>对源文件建立符号连接，而非复制文件</td>\n</tr>\n<tr>\n<td>-b</td>\n<td>覆盖已存在的文件目标前将目标文件备份</td>\n</tr>\n<tr>\n<td>-v</td>\n<td>详细显示cp命令执行的操作过程</td>\n</tr>\n<tr>\n<td>-a</td>\n<td>等价于“dpr”选项</td>\n</tr>\n</tbody></table>\n<h3 id=\"touch\"><a href=\"#touch\" class=\"headerlink\" title=\"touch\"></a>touch</h3><p><strong>功能</strong>：1.更新文件时间标签   2.创建空文件</p>\n<h3 id=\"dd\"><a href=\"#dd\" class=\"headerlink\" title=\"dd\"></a>dd</h3><p><strong>作用</strong>：复制文件并对原文件的内容进行转换和格式化处理<br><strong>常用参数</strong>:  </p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>bs=&lt;字节数&gt;</td>\n<td>将 ibs（输入）与 obs（输出）设成指定的字节数；</td>\n</tr>\n<tr>\n<td>cbs=&lt;字节数&gt;</td>\n<td>转换时，每次只转换指定的字节数；</td>\n</tr>\n<tr>\n<td>conv=&lt;关键字&gt;</td>\n<td>指定文件转换的方式；</td>\n</tr>\n<tr>\n<td>count=&lt;区块数&gt;</td>\n<td>仅读取指定的区块数；</td>\n</tr>\n<tr>\n<td>ibs=&lt;字节数&gt;</td>\n<td>每次读取的字节数；</td>\n</tr>\n<tr>\n<td>obs=&lt;字节数&gt;</td>\n<td>每次输出的字节数；</td>\n</tr>\n<tr>\n<td>of=&lt;文件&gt;</td>\n<td>输出到文件；如果不指定of，默认就会将stdout作为默认输出。</td>\n</tr>\n<tr>\n<td>if=&lt;文件&gt;</td>\n<td>输入文件；如果不指定if，默认就会从stdin中读取输入。</td>\n</tr>\n<tr>\n<td>seek=&lt;区块数&gt;</td>\n<td>一开始输出时，跳过指定的区块数；</td>\n</tr>\n<tr>\n<td>skip=&lt;区块数&gt;</td>\n<td>一开始读取时，跳过指定的区块数；</td>\n</tr>\n</tbody></table>\n<p><strong>示例</strong>：<br>以上命令可以看出dd命令来测试内存操作速度  </p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> dd <span class=\"keyword\">if</span>=/dev/zero of=test.txt bs=5M count=1   <span class=\"comment\">#/dev/zero 是一个字符设备，会不断返回0值字节（\\0）。</span></span></span><br><span class=\"line\">记录了1+0 的读入</span><br><span class=\"line\">记录了1+0 的写出</span><br><span class=\"line\">5242880字节(5.2 MB)已复制，0.0135829 秒，386 MB/秒</span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> du -sh test.txt</span> </span><br><span class=\"line\">5.0M  test.txt</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"file\"><a href=\"#file\" class=\"headerlink\" title=\"file\"></a>file</h3><p><strong>作用</strong>：探测给定文件的类型<br><strong>常用参数</strong>：  </p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>-b</td>\n<td>列出辨识结果时，不显示文件名称</td>\n</tr>\n<tr>\n<td>-i</td>\n<td>显示MIME类别</td>\n</tr>\n</tbody></table>\n<h2 id=\"查找文件及目录\"><a href=\"#查找文件及目录\" class=\"headerlink\" title=\"查找文件及目录\"></a>查找文件及目录</h2><h3 id=\"find\"><a href=\"#find\" class=\"headerlink\" title=\"find\"></a>find</h3><p><strong>作用</strong>：查找文件及目录<br><strong>常用参数</strong>：</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>-amin &lt;分钟&gt;、-atime &lt;24小时数&gt;</td>\n<td>访问时间,用户最近一次访问时间。</td>\n</tr>\n<tr>\n<td>-cmin &lt;分钟&gt;、-ctime &lt;24小时数&gt;</td>\n<td>修改时间,文件最后一次修改时间。</td>\n</tr>\n<tr>\n<td>-mmin &lt;分钟&gt;、-mtime &lt;24小时数&gt;</td>\n<td>变化时间,文件数据元（例如权限等）最后一次修改时间。</td>\n</tr>\n<tr>\n<td>-name &lt;范本样式&gt;</td>\n<td>指定字符串作为寻找文件或目录的范本样式，可使用正则表达式进行匹配</td>\n</tr>\n<tr>\n<td>-iname &lt;范本样式&gt;</td>\n<td>此参数的效果和指定“-name”参数类似，但忽略字符大小写的差别</td>\n</tr>\n<tr>\n<td>-size &lt;文件大小&gt;</td>\n<td>查找符合指定的文件大小的文件</td>\n</tr>\n<tr>\n<td>-type &lt;文件类型&gt;</td>\n<td>只寻找符合指定的文件类型的文件</td>\n</tr>\n<tr>\n<td>-empty</td>\n<td>寻找文件大小为0 Byte的文件，或目录下没有任何子目录或文件的空目录</td>\n</tr>\n</tbody></table>\n<p><strong>示例</strong>：<br><strong>根据文件或者正则表达式进行匹配</strong>  </p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 在/home目录下查找以.txt结尾的文件名</span></span><br><span class=\"line\">find /home -name &quot;*.txt&quot;</span><br><span class=\"line\">find /home -iname &quot;*.txt&quot;  #忽略大小写</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 当前目录及子目录下查找所有以.txt和.pdf结尾的文件</span></span><br><span class=\"line\">find . \\( -name &quot;*.txt&quot; -o -name &quot;*.pdf&quot; \\)</span><br><span class=\"line\">find . -name &quot;*.txt&quot; -o -name &quot;*.pdf&quot;</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 匹配文件路径或者文件</span></span><br><span class=\"line\">find /usr/ -path &quot;*local*&quot;</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 基于正则表达式匹配文件路径</span></span><br><span class=\"line\">find . -regex &quot;.*\\(\\.txt\\|\\.pdf\\)$&quot;</span><br><span class=\"line\">find . -iregex &quot;.*\\(\\.txt\\|\\.pdf\\)$&quot;</span><br></pre></td></tr></table></figure>\n\n<p><strong>否定参数</strong>  </p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 找出/home下不是以.txt结尾的文件</span></span><br><span class=\"line\">find /home ! -name &quot;*.txt&quot;</span><br></pre></td></tr></table></figure>\n\n<p><strong>根据文件类型进行搜索</strong><br><code>find . -type 类型参数</code>  </p>\n<ul>\n<li>f 普通文件  </li>\n<li>l 符号连接</li>\n<li>d 目录</li>\n<li>c 字符设备</li>\n<li>b 块设备</li>\n<li>s 套接字</li>\n<li>p 管道文件</li>\n</ul>\n<p><strong>根据文件时间戳进行搜索</strong><br><code>find . -type f 时间戳</code><br>UNIX/Linux文件系统每个文件都有三种时间戳：<br><strong>访问时间（-atime/天，-amin/分钟）</strong>：用户最近一次访问时间。<br><strong>修改时间（-mtime/天，-mmin/分钟）</strong>：文件最后一次修改时间。<br><strong>变化时间（-ctime/天，-cmin/分钟）</strong>：文件数据元（例如权限等）最后一次修改时间。  </p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">搜索最近七天内被访问过的所有文件</span></span><br><span class=\"line\">find . -type f -atime -7</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">搜索恰好在七天前被访问过的所有文件</span></span><br><span class=\"line\">find . -type f -atime 7</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">搜索超过七天内被访问过的所有文件</span></span><br><span class=\"line\">find . -type f -atime +7</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">搜索访问时间超过10分钟的所有文件</span></span><br><span class=\"line\">find . -type f -amin +10</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">找出比file.log修改时间更长的所有文件</span></span><br><span class=\"line\">find . -type f -newer file.log</span><br></pre></td></tr></table></figure>\n\n<p><strong>根据文件大小进行匹配</strong><br><code>find . -type f -size 文件大小单元</code><br>文件大小单元：  </p>\n<ul>\n<li>b —— 块（512字节）  </li>\n<li>c —— 字节  </li>\n<li>w —— 字（2字节）  </li>\n<li>k —— 千字节  </li>\n<li>M —— 兆字节  </li>\n<li>G —— 吉字节  </li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 搜索大于10KB的文件</span></span><br><span class=\"line\">find . -type f -size +10k</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 搜索小于10KB的文件</span></span><br><span class=\"line\">find . -type f -size -10k</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">搜索等于10KB的文件</span></span><br><span class=\"line\">find . -type f -size 10k</span><br></pre></td></tr></table></figure>\n\n<p><strong>删除匹配文件</strong>  </p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 删除当前目录下所有.txt文件</span></span><br><span class=\"line\">find . -type f -name &quot;*.txt&quot; -delete</span><br></pre></td></tr></table></figure>\n\n<p><strong>借助exec选项与其他命令结合使用</strong>  </p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 找出当前目录下所有root的文件，并把所有权更改为用户tom</span></span><br><span class=\"line\">find .-type f -user root -exec chown tom &#123;&#125; \\;    </span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> &#123;&#125; 用于与-<span class=\"built_in\">exec</span>选项结合使用来匹配所有文件，然后会被替换为相应的文件名</span></span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 找出自己家目录下所有的.txt文件并删除</span></span><br><span class=\"line\">find $HOME/. -name &quot;*.txt&quot; -ok rm &#123;&#125; \\;</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> -ok和-<span class=\"built_in\">exec</span>行为一样，不过它会给出提示，是否执行相应的操作。</span></span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 将30天前的.<span class=\"built_in\">log</span>文件移动到old目录中</span></span><br><span class=\"line\">find . -type f -mtime +30 -name &quot;*.log&quot; -exec cp &#123;&#125; old \\;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"locate\"><a href=\"#locate\" class=\"headerlink\" title=\"locate\"></a>locate</h3><p><strong>作用</strong>：locate命令其实是find -name的另一种写法，但是要比后者快得多，原因在于它不搜索具体目录，而是搜索一个数据库<code>/var/lib/locatedb</code>，这个数据库中含有本地所有文件信息。Linux系统自动创建这个数据库，并且每天自动更新一次，所以使用locate命令查不到最新变动过的文件。为了避免这种情况，可以在使用locate之前，先使用<code>updatedb</code>命令，手动更新数据库。  </p>\n<h2 id=\"查看文件内容\"><a href=\"#查看文件内容\" class=\"headerlink\" title=\"查看文件内容\"></a>查看文件内容</h2><h3 id=\"cat\"><a href=\"#cat\" class=\"headerlink\" title=\"cat\"></a>cat</h3><p><strong>作用</strong>：连接文件并打印到标准输出设备上<br><strong>常用参数</strong>:  </p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>-n</td>\n<td>由1开始对所有输出的行数编号</td>\n</tr>\n<tr>\n<td>-A</td>\n<td>显示不可打印字符，行尾显示“$”</td>\n</tr>\n</tbody></table>\n<h3 id=\"head\"><a href=\"#head\" class=\"headerlink\" title=\"head\"></a>head</h3><p><strong>作用</strong>：用于显示文件的开头的内容，默认显示头10行。<br><strong>常用参数</strong>:  </p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>-n &lt;数字&gt;</td>\n<td>指定显示头部内容的行数</td>\n</tr>\n<tr>\n<td>-v</td>\n<td>显示文件名</td>\n</tr>\n</tbody></table>\n<h3 id=\"tail\"><a href=\"#tail\" class=\"headerlink\" title=\"tail\"></a>tail</h3><p><strong>作用</strong>：用于显示文件的尾部内容，默认显示尾10行。<br><strong>常用参数</strong>:  </p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>-f</td>\n<td>显示文件最新追加的内容。</td>\n</tr>\n<tr>\n<td>-n &lt;数字&gt;</td>\n<td>输出文件的尾部N（N位数字）行内容</td>\n</tr>\n<tr>\n<td>-v</td>\n<td>显示文件名</td>\n</tr>\n</tbody></table>\n<h3 id=\"more\"><a href=\"#more\" class=\"headerlink\" title=\"more\"></a>more</h3><p><strong>作用</strong>：它以全屏幕的方式按页显示文本文件的内容<br><strong>按键说明</strong></p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>按Space键</td>\n<td>显示文本的下一屏内容。</td>\n</tr>\n<tr>\n<td>按Enier键</td>\n<td>只显示文本的下一行内容。</td>\n</tr>\n<tr>\n<td>按斜线符/</td>\n<td>接着输入一个模式，可以在文本中寻找下一个相匹配的模式。</td>\n</tr>\n<tr>\n<td>按H键</td>\n<td>显示帮助屏，该屏上有相关的帮助信息。</td>\n</tr>\n<tr>\n<td>按B键</td>\n<td>显示上一屏内容。</td>\n</tr>\n<tr>\n<td>按Q键</td>\n<td>退出rnore命令。</td>\n</tr>\n</tbody></table>\n<h2 id=\"查找文件内容\"><a href=\"#查找文件内容\" class=\"headerlink\" title=\"查找文件内容\"></a>查找文件内容</h2><h3 id=\"grep\"><a href=\"#grep\" class=\"headerlink\" title=\"grep\"></a>grep</h3><p><strong>作用</strong>：能使用正则表达式搜索文本，并把匹配的行打印出来。<br><strong>常用参数</strong>：  </p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>-v</td>\n<td>反转查找</td>\n</tr>\n<tr>\n<td>-r</td>\n<td>递归搜索</td>\n</tr>\n<tr>\n<td>-n</td>\n<td>列出所有的匹配行，显示行号</td>\n</tr>\n<tr>\n<td>-E</td>\n<td>正则表达式，与egrep 效果相同</td>\n</tr>\n<tr>\n<td>-i</td>\n<td>忽略字符大小写</td>\n</tr>\n<tr>\n<td>-e</td>\n<td>匹配多个，grep -e “a” -e “b”</td>\n</tr>\n<tr>\n<td>-q</td>\n<td>静默输出，命令运行成功返回0，失败则返回非0值</td>\n</tr>\n<tr>\n<td>-A &lt; n &gt;</td>\n<td>匹配文本之后n行</td>\n</tr>\n<tr>\n<td>-B &lt; n &gt;</td>\n<td>匹配文本之前n行</td>\n</tr>\n<tr>\n<td>-C &lt; n &gt;</td>\n<td>匹配文本前后各n行</td>\n</tr>\n</tbody></table>\n<h2 id=\"文本处理\"><a href=\"#文本处理\" class=\"headerlink\" title=\"文本处理\"></a>文本处理</h2><h3 id=\"xargs\"><a href=\"#xargs\" class=\"headerlink\" title=\"xargs\"></a>xargs</h3><p><strong>作用</strong>：xargs能够处理管道或者stdin并将其转换成特定命令的命令参数  </p>\n","categories":["Linux"],"tags":["Linux"]},{"title":"Rsync+sersync实现实时同步","url":"/2021/09/01/Linux/Rsync/","content":"<p><img src=\"https://i.loli.net/2021/08/02/cX51yi4KrLYRfJU.jpg\" alt=\"linux.jpg\">  </p>\n<span id=\"more\"></span>\n<h1 id=\"rsync\"><a href=\"#rsync\" class=\"headerlink\" title=\"rsync\"></a>rsync</h1><h2 id=\"rsync介绍\"><a href=\"#rsync介绍\" class=\"headerlink\" title=\"rsync介绍\"></a>rsync介绍</h2><p>Rsync 是一种快速且非常通用的文件复制工具。它可以在本地、通过任何远程 shell 复制到另一台主机或从远程 rsync 守护程序复制到/从另一个主机复制。它提供了大量选项来控制其行为的各个方面，并允许非常灵活地指定要复制的文件集。它以其增量传输算法而闻名，该算法通过仅发送源文件与目标中现有文件之间的差异来减少通过网络发送的数据量。Rsync 广泛用于备份和镜像，并作为日常使用的改进复制命令。<br>Rsync具有本地与远程两台主机之间的数据快速复制同步镜像、远程备份等功能，该功能类似scp，但是优于scp功能，还具有本地不同分区目录之间全量及增量复制数据。<br>Rsync同步数据镜像时，通过“quick check”算法，仅同步大小或最后修改时间发生变化的文件或目录，当然也可以根据权限，属主等属性变化的同步，所以可以实现快速同步。<br><strong>rsync 具有如下的基本特性：</strong>  </p>\n<ol>\n<li>可以镜像保存整个目录树和文件系统</li>\n<li>可以很容易做到保持原来文件的权限、时间、软硬链接等</li>\n<li>无须特殊权限即可安装</li>\n<li>优化的流程，文件传输效率高</li>\n<li>可以使用 rsh、ssh 方式来传输文件，当然也可以通过直接的 socket 连接</li>\n<li>支持匿名传输，以方便进行网站镜象</li>\n</ol>\n<h1 id=\"sersync\"><a href=\"#sersync\" class=\"headerlink\" title=\"sersync\"></a>sersync</h1><h2 id=\"sersync介绍\"><a href=\"#sersync介绍\" class=\"headerlink\" title=\"sersync介绍\"></a>sersync介绍</h2><p>sersync是基于inotify开发的，类似于inotify-tools的工具，Sersync可以记录下被监听目录中发生变化的（包括增加、删除、修改）具体某一个文件或者某一个目录的名字，然后使用rsync同步的时候，只同步发生变化的文件或者目录，因此效率更高。<br>主要应用场景为数据体积大，并且文件很多。  </p>\n<h1 id=\"Rsync-Sersync实时同步\"><a href=\"#Rsync-Sersync实时同步\" class=\"headerlink\" title=\"Rsync+Sersync实时同步\"></a>Rsync+Sersync实时同步</h1><h2 id=\"实验环境\"><a href=\"#实验环境\" class=\"headerlink\" title=\"实验环境\"></a>实验环境</h2><p>实验实现从将test1的文件同步到test2中  </p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">主机名</th>\n<th align=\"center\">IP</th>\n<th align=\"center\">部署服务</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">test1</td>\n<td align=\"center\">192.168.27.5</td>\n<td align=\"center\">Rsync client + Sersync server</td>\n</tr>\n<tr>\n<td align=\"center\">test2</td>\n<td align=\"center\">192.168.27.5</td>\n<td align=\"center\">Rsync server</td>\n</tr>\n<tr>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n</tr>\n</tbody></table>\n<h2 id=\"rysnc-部署\"><a href=\"#rysnc-部署\" class=\"headerlink\" title=\"rysnc 部署\"></a>rysnc 部署</h2><p>在<strong>test1</strong>与<strong>test2</strong>中安装<strong>rsync</strong>。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">yum install -y rsync</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"test2中的操作\"><a href=\"#test2中的操作\" class=\"headerlink\" title=\"test2中的操作\"></a>test2中的操作</h2><h3 id=\"Rsync-server配置\"><a href=\"#Rsync-server配置\" class=\"headerlink\" title=\"Rsync server配置\"></a>Rsync server配置</h3><p>[root@test2 ~]# vim /etc/rsyncd.conf  </p>\n<figure class=\"highlight ini\"><table><tr><td class=\"code\"><pre><span class=\"line\">log <span class=\"attr\">file</span> = /var/log/rsyncd.log </span><br><span class=\"line\"><span class=\"comment\">#日志文件位置，启动rsync后自动产生这个文件，无需提前创建</span></span><br><span class=\"line\">pid <span class=\"attr\">file</span> = /var/run/rsyncd.pid  </span><br><span class=\"line\"><span class=\"comment\">#pid文件的存放位置</span></span><br><span class=\"line\">lock <span class=\"attr\">file</span> = /var/run/rsync.lock  </span><br><span class=\"line\"><span class=\"comment\">#支持max connections参数的锁文件</span></span><br><span class=\"line\">secrets <span class=\"attr\">file</span> = /etc/rsyncd.password  </span><br><span class=\"line\"><span class=\"comment\">#用户认证配置文件，里面保存用户名称和密码，后面会创建这个文件</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">[backup]</span> </span><br><span class=\"line\"><span class=\"comment\">#自定义名称</span></span><br><span class=\"line\"><span class=\"attr\">path</span> = /home/backup/ </span><br><span class=\"line\"><span class=\"comment\">#rsync服务端数据目录路径 需要手动创建</span></span><br><span class=\"line\"><span class=\"attr\">comment</span> = backup </span><br><span class=\"line\"><span class=\"comment\">#模块名称与[backup]自定义名称相同</span></span><br><span class=\"line\"><span class=\"attr\">uid</span> = root </span><br><span class=\"line\"><span class=\"comment\">#设置rsync运行权限为root</span></span><br><span class=\"line\"><span class=\"attr\">gid</span> = root </span><br><span class=\"line\"><span class=\"comment\">#设置rsync运行权限为root</span></span><br><span class=\"line\"><span class=\"attr\">port</span>=<span class=\"number\">873</span>  </span><br><span class=\"line\"><span class=\"comment\">#默认端口</span></span><br><span class=\"line\">use <span class=\"attr\">chroot</span> = <span class=\"literal\">no</span> </span><br><span class=\"line\"><span class=\"comment\">#默认为true，修改为no，增加对目录文件软连接的备份</span></span><br><span class=\"line\">read <span class=\"attr\">only</span> = <span class=\"literal\">no</span>  </span><br><span class=\"line\"><span class=\"comment\">#设置rsync服务端文件为读写权限</span></span><br><span class=\"line\"><span class=\"attr\">list</span> = <span class=\"literal\">no</span> </span><br><span class=\"line\"><span class=\"comment\">#不显示rsync服务端资源列表</span></span><br><span class=\"line\">max <span class=\"attr\">connections</span> = <span class=\"number\">200</span> </span><br><span class=\"line\"><span class=\"comment\">#最大连接数</span></span><br><span class=\"line\"><span class=\"attr\">timeout</span> = <span class=\"number\">600</span>  </span><br><span class=\"line\"><span class=\"comment\">#设置超时时间</span></span><br><span class=\"line\">auth <span class=\"attr\">users</span> = rsync_backup </span><br><span class=\"line\"><span class=\"comment\">#执行数据同步的用户名，可以设置多个，用英文状态下逗号隔开</span></span><br><span class=\"line\">hosts <span class=\"attr\">allow</span> = <span class=\"number\">192.168</span>.<span class=\"number\">0.0</span>/<span class=\"number\">24</span>  </span><br><span class=\"line\"><span class=\"comment\">#允许进行数据同步的客户端IP地址，可以设置多个，用英文状态下逗号隔开</span></span><br><span class=\"line\">hosts <span class=\"attr\">deny</span> = <span class=\"number\">0.0</span>.<span class=\"number\">0.0</span>/<span class=\"number\">32</span> </span><br><span class=\"line\"><span class=\"comment\">#禁止数据同步的客户端IP地址，可以设置多个，用英文状态下逗号隔开</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"创建用户认证文件\"><a href=\"#创建用户认证文件\" class=\"headerlink\" title=\"创建用户认证文件\"></a>创建用户认证文件</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@test2 ~]# vim /etc/rsyncd.password</span><br><span class=\"line\">rsync_backup:123456789</span><br></pre></td></tr></table></figure>\n<h3 id=\"修改密码文件权限\"><a href=\"#修改密码文件权限\" class=\"headerlink\" title=\"修改密码文件权限\"></a>修改密码文件权限</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@test2 ~]# chmod 600 /etc/rsyncd.password</span><br></pre></td></tr></table></figure>\n<h3 id=\"启动rsync\"><a href=\"#启动rsync\" class=\"headerlink\" title=\"启动rsync\"></a>启动rsync</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@test2 ~]# rsync --daemon</span><br></pre></td></tr></table></figure>\n<h3 id=\"查看服务是否启动\"><a href=\"#查看服务是否启动\" class=\"headerlink\" title=\"查看服务是否启动\"></a>查看服务是否启动</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@test2 ~]# ps  axu |grep rsync</span><br><span class=\"line\">[root@test2 ~]# netstat -nlp |grep 873</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"test1中的操作\"><a href=\"#test1中的操作\" class=\"headerlink\" title=\"test1中的操作\"></a>test1中的操作</h2><h3 id=\"test1中创建密码文件\"><a href=\"#test1中创建密码文件\" class=\"headerlink\" title=\"test1中创建密码文件\"></a>test1中创建密码文件</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@test1 ~]# vim  /etc/rsyncd.password</span><br><span class=\"line\">123456789</span><br></pre></td></tr></table></figure>\n<h3 id=\"test1中修改密码文件权限\"><a href=\"#test1中修改密码文件权限\" class=\"headerlink\" title=\"test1中修改密码文件权限\"></a>test1中修改密码文件权限</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@test1 ~]# chmod 600 /etc/rsyncd.password</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h2><h3 id=\"在test1中推送文件到test2\"><a href=\"#在test1中推送文件到test2\" class=\"headerlink\" title=\"在test1中推送文件到test2\"></a>在test1中推送文件到test2</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@test1 test1_backup]# ll</span><br><span class=\"line\">总用量 0</span><br><span class=\"line\">-rw-r--r-- 1 root root 0 9月   2 00:04 test.txt</span><br><span class=\"line\">[root@test1 test1_backup]# rsync -avzP test.txt  rsync_backup@192.168.27.6::backup --password-file=/etc/rsyncd.password</span><br><span class=\"line\">sending incremental file list</span><br><span class=\"line\">test.txt</span><br><span class=\"line\">              0 100%    0.00kB/s    0:00:00 (xfr#1, to-chk=0/1)</span><br><span class=\"line\"></span><br><span class=\"line\">sent 91 bytes  received 43 bytes  268.00 bytes/sec</span><br><span class=\"line\">total size is 0  speedup is 0.00</span><br></pre></td></tr></table></figure>\n<h3 id=\"在test1中从test2中拉取文件\"><a href=\"#在test1中从test2中拉取文件\" class=\"headerlink\" title=\"在test1中从test2中拉取文件\"></a>在test1中从test2中拉取文件</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@test1 test1_backup]# rsync -avzP  rsync_backup@192.168.27.6::backup /home/test1_backup --password-file=/etc/rsyncd.password</span><br><span class=\"line\">receiving incremental file list</span><br><span class=\"line\">test.txt</span><br><span class=\"line\">              0 100%    0.00kB/s    0:00:00 (xfr#1, to-chk=0/2)</span><br><span class=\"line\"></span><br><span class=\"line\">sent 50 bytes  received 122 bytes  344.00 bytes/sec</span><br><span class=\"line\">total size is 0  speedup is 0.00</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"sersync部署\"><a href=\"#sersync部署\" class=\"headerlink\" title=\"sersync部署\"></a>sersync部署</h2><p>在<strong>test1</strong>中部署sersync  </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@test1 ~]# wget  https://storage.googleapis.com/google-code-archive-downloads/v2/code.google.com/sersync/sersync2.5.4_64bit_binary_stable_final.tar.gz</span><br><span class=\"line\">[root@test1 ~]# mkdir /usr/local/sersync</span><br><span class=\"line\">[root@test1 ~]# tar zxvf sersync2.5.4_64bit_binary_stable_final.tar.gz</span><br><span class=\"line\">[root@test1 ~]# mv GNU-Linux-x86  /usr/local/sersync</span><br><span class=\"line\">[root@test1 ~]# cd /usr/local/sersync/GNU-Linux-x86</span><br><span class=\"line\">[root@test1 GNU-Linux-x86]# cp confxml.xml confxml.xml.bak</span><br></pre></td></tr></table></figure>\n<h3 id=\"修改-confxml-xml文件\"><a href=\"#修改-confxml-xml文件\" class=\"headerlink\" title=\"修改 confxml.xml文件\"></a>修改 <strong>confxml.xml</strong>文件</h3><figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;ISO-8859-1&quot;?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span> <span class=\"attr\">version</span>=<span class=\"string\">&quot;2.5&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">host</span> <span class=\"attr\">hostip</span>=<span class=\"string\">&quot;localhost&quot;</span> <span class=\"attr\">port</span>=<span class=\"string\">&quot;8008&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">host</span>&gt;</span>   </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">debug</span> <span class=\"attr\">start</span>=<span class=\"string\">&quot;false&quot;</span>/&gt;</span>     # 开启DUBUG模式 </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">fileSystem</span> <span class=\"attr\">xfs</span>=<span class=\"string\">&quot;false&quot;</span>/&gt;</span>  # 开启xfs文件系统</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">filter</span> <span class=\"attr\">start</span>=<span class=\"string\">&quot;false&quot;</span>&gt;</span>     # 同步时忽略推送的文件(正则表达式),默认关闭 </span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">exclude</span> <span class=\"attr\">expression</span>=<span class=\"string\">&quot;(.*)\\.svn&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">exclude</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">exclude</span> <span class=\"attr\">expression</span>=<span class=\"string\">&quot;(.*)\\.gz&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">exclude</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">exclude</span> <span class=\"attr\">expression</span>=<span class=\"string\">&quot;^info/*&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">exclude</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">exclude</span> <span class=\"attr\">expression</span>=<span class=\"string\">&quot;^static/*&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">exclude</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">filter</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">inotify</span>&gt;</span>     # 设置要监控的事件</span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">delete</span> <span class=\"attr\">start</span>=<span class=\"string\">&quot;true&quot;</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">createFolder</span> <span class=\"attr\">start</span>=<span class=\"string\">&quot;true&quot;</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">createFile</span> <span class=\"attr\">start</span>=<span class=\"string\">&quot;false&quot;</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">closeWrite</span> <span class=\"attr\">start</span>=<span class=\"string\">&quot;true&quot;</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">moveFrom</span> <span class=\"attr\">start</span>=<span class=\"string\">&quot;true&quot;</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">moveTo</span> <span class=\"attr\">start</span>=<span class=\"string\">&quot;true&quot;</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">attrib</span> <span class=\"attr\">start</span>=<span class=\"string\">&quot;false&quot;</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">modify</span> <span class=\"attr\">start</span>=<span class=\"string\">&quot;false&quot;</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">inotify</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">sersync</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">localpath</span> <span class=\"attr\">watch</span>=<span class=\"string\">&quot;/home/test1_backup&quot;</span>&gt;</span>         # 本地监视目录路径</span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">remote</span> <span class=\"attr\">ip</span>=<span class=\"string\">&quot;192.168.27.6&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;backup&quot;</span>/&gt;</span>  #定义同步Server ip和模块</span><br><span class=\"line\">            <span class=\"comment\">&lt;!--&lt;remote ip=&quot;192.168.8.39&quot; name=&quot;tongbu&quot;/&gt;--&gt;</span></span><br><span class=\"line\">            <span class=\"comment\">&lt;!--&lt;remote ip=&quot;192.168.8.40&quot; name=&quot;tongbu&quot;/&gt;--&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">localpath</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">rsync</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">commonParams</span> <span class=\"attr\">params</span>=<span class=\"string\">&quot;-artuz&quot;</span>/&gt;</span>   # rsync指令参数</span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">auth</span> <span class=\"attr\">start</span>=<span class=\"string\">&quot;true&quot;</span> <span class=\"attr\">users</span>=<span class=\"string\">&quot;rsync_backup&quot;</span> <span class=\"attr\">passwordfile</span>=<span class=\"string\">&quot;/etc/rsyncd.password&quot;</span>/&gt;</span>  # rsync同步认证</span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">userDefinedPort</span> <span class=\"attr\">start</span>=<span class=\"string\">&quot;false&quot;</span> <span class=\"attr\">port</span>=<span class=\"string\">&quot;874&quot;</span>/&gt;</span><span class=\"comment\">&lt;!-- port=874 --&gt;</span>   # 设置rsync远程服务端口，非默认端口需要打开自定义(若开启rsync+ssh, 则这里需定义SSH端口)</span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">timeout</span> <span class=\"attr\">start</span>=<span class=\"string\">&quot;false&quot;</span> <span class=\"attr\">time</span>=<span class=\"string\">&quot;100&quot;</span>/&gt;</span><span class=\"comment\">&lt;!-- timeout=100 --&gt;</span>        # 设置超时时间</span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">ssh</span> <span class=\"attr\">start</span>=<span class=\"string\">&quot;false&quot;</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">rsync</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">failLog</span> <span class=\"attr\">path</span>=<span class=\"string\">&quot;/tmp/rsync_fail_log.sh&quot;</span> <span class=\"attr\">timeToExecute</span>=<span class=\"string\">&quot;60&quot;</span>/&gt;</span><span class=\"comment\">&lt;!--default every 60mins execute once--&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">crontab</span> <span class=\"attr\">start</span>=<span class=\"string\">&quot;false&quot;</span> <span class=\"attr\">schedule</span>=<span class=\"string\">&quot;600&quot;</span>&gt;</span><span class=\"comment\">&lt;!--600mins--&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">crontabfilter</span> <span class=\"attr\">start</span>=<span class=\"string\">&quot;false&quot;</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">exclude</span> <span class=\"attr\">expression</span>=<span class=\"string\">&quot;*.php&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">exclude</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">exclude</span> <span class=\"attr\">expression</span>=<span class=\"string\">&quot;info/*&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">exclude</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">crontabfilter</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">crontab</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">plugin</span> <span class=\"attr\">start</span>=<span class=\"string\">&quot;false&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;command&quot;</span>/&gt;</span>    # 设置sersync传输后调用name指定的插件脚本，默认关闭</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">sersync</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">plugin</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;command&quot;</span>&gt;</span>  # 插件脚本范例</span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">param</span> <span class=\"attr\">prefix</span>=<span class=\"string\">&quot;/bin/sh&quot;</span> <span class=\"attr\">suffix</span>=<span class=\"string\">&quot;&quot;</span> <span class=\"attr\">ignoreError</span>=<span class=\"string\">&quot;true&quot;</span>/&gt;</span>        <span class=\"comment\">&lt;!--prefix /opt/tongbu/mmm.sh suffix--&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">filter</span> <span class=\"attr\">start</span>=<span class=\"string\">&quot;false&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">include</span> <span class=\"attr\">expression</span>=<span class=\"string\">&quot;(.*)\\.php&quot;</span>/&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">include</span> <span class=\"attr\">expression</span>=<span class=\"string\">&quot;(.*)\\.sh&quot;</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">filter</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">plugin</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;socket&quot;</span>&gt;</span>  # 插件脚本范例</span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">localpath</span> <span class=\"attr\">watch</span>=<span class=\"string\">&quot;/opt/tongbu&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">deshost</span> <span class=\"attr\">ip</span>=<span class=\"string\">&quot;192.168.138.20&quot;</span> <span class=\"attr\">port</span>=<span class=\"string\">&quot;8009&quot;</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">localpath</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">plugin</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;refreshCDN&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">localpath</span> <span class=\"attr\">watch</span>=<span class=\"string\">&quot;/data0/htdocs/cms.xoyo.com/site/&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">cdninfo</span> <span class=\"attr\">domainname</span>=<span class=\"string\">&quot;ccms.chinacache.com&quot;</span> <span class=\"attr\">port</span>=<span class=\"string\">&quot;80&quot;</span> <span class=\"attr\">username</span>=<span class=\"string\">&quot;xxxx&quot;</span> <span class=\"attr\">passwd</span>=<span class=\"string\">&quot;xxxx&quot;</span>/&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">sendurl</span> <span class=\"attr\">base</span>=<span class=\"string\">&quot;http://pic.xoyo.com/cms&quot;</span>/&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">regexurl</span> <span class=\"attr\">regex</span>=<span class=\"string\">&quot;false&quot;</span> <span class=\"attr\">match</span>=<span class=\"string\">&quot;cms.xoyo.com/site([/a-zA-Z0-9]*).xoyo.com/images&quot;</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">localpath</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"启动sersync\"><a href=\"#启动sersync\" class=\"headerlink\" title=\"启动sersync\"></a>启动sersync</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@test1 GNU-Linux-x86]# /usr/local/sersync/GNU-Linux-x86/sersync2 -d -r -o /usr/local/sersync/GNU-Linux-x86/confxml.xml</span><br></pre></td></tr></table></figure>\n<p>如果要停止直接kill掉进程即可  </p>\n","categories":["Linux"],"tags":["rsync"]},{"title":"性能分析","url":"/2022/03/24/Linux/%E6%80%A7%E8%83%BD%E5%88%86%E6%9E%90/","content":"<p><img src=\"https://i.loli.net/2021/08/02/cX51yi4KrLYRfJU.jpg\" alt=\"linux.jpg\">  </p>\n<span id=\"more\"></span>\n<h2 id=\"vmstat\"><a href=\"#vmstat\" class=\"headerlink\" title=\"vmstat\"></a>vmstat</h2><p>其含义为虚拟内存状态，属于sysstat包。  </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\"> ~]# vmstat 1  4  </span><br><span class=\"line\">procs -----------memory---------- ---swap-- -----io---- -system-- ------cpu-----</span><br><span class=\"line\"> r  b   swpd   free   buff  cache   si   so    bi    bo   in   cs us sy id wa st</span><br><span class=\"line\"> 2  0      0 434196   2124 379168    0    0     8     3  105  195  0  1 98  0  0</span><br><span class=\"line\"> 3  0      0 434196   2124 379168    0    0     0     0   74  168  1  1 98  0  0</span><br><span class=\"line\"> 2  0      0 434208   2124 379168    0    0     0     0  114  204  0  1 99  0  0</span><br><span class=\"line\"> 1  0      0 434200   2124 379168    0    0     0     0  102  181  0  2 98  0  0</span><br></pre></td></tr></table></figure>\n<p>每1秒检测一次，检测四次。  </p>\n<h3 id=\"字段说明\"><a href=\"#字段说明\" class=\"headerlink\" title=\"字段说明\"></a>字段说明</h3><p><strong>procs 字段</strong>  </p>\n<ul>\n<li>r:运行队列中进程数量  </li>\n<li>b:等待IO的进程数量  </li>\n</ul>\n<p><strong>memory 字段</strong>  </p>\n<ul>\n<li>swpd：使用虚拟内存大小  </li>\n<li>free：空闲物理内存大小  </li>\n<li>buff：用作缓冲内存的大小  </li>\n<li>cache：用作缓存的大小  </li>\n</ul>\n<p><strong>swap</strong>  </p>\n<ul>\n<li>si:每秒从交换区写到内存的大小，由磁盘调入内存  </li>\n<li>so：每秒写入交换区的内存大小，由内存调入磁盘  </li>\n</ul>\n<p><strong>IO</strong>  </p>\n<ul>\n<li>bi：每秒读取的块数  </li>\n<li>bo：每秒写入的块数  </li>\n</ul>\n<p><strong>system</strong><br>in：每秒中断数，包括时钟中断<br>cs：每秒上下文切换数  </p>\n<p><strong>cpu</strong><br>us：用户进程执行时间百分比<br>sy：内核系统进程执行时间百分比<br>id：空闲时间百分比<br>wa：IO等待时间百分比  </p>\n<h2 id=\"iostat\"><a href=\"#iostat\" class=\"headerlink\" title=\"iostat\"></a>iostat</h2><p>属于sysstat包，用于监视系统输入输出设备和CPU的IO情况，是查看IO最基本的工具  </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">~]# iostat -x /dev/sda1</span><br><span class=\"line\">Linux 3.10.0-957.el7.x86_64 (test3)     2022年06月08日  _x86_64_        (1 CPU)</span><br><span class=\"line\"></span><br><span class=\"line\">avg-cpu:  %user   %nice %system %iowait  %steal   %idle</span><br><span class=\"line\">           0.39    0.00    1.14    0.03    0.00   98.44</span><br><span class=\"line\"></span><br><span class=\"line\">Device:         rrqm/s   wrqm/s     r/s     w/s    rkB/s    wkB/s avgrq-sz avgqu-sz   await r_await w_await  svctm  %util</span><br><span class=\"line\">sda1              0.00     0.00    0.01    0.00     0.12     0.04    31.63     0.00    1.83    1.05   41.40   1.71   0.00</span><br></pre></td></tr></table></figure>\n<h3 id=\"字段说明-1\"><a href=\"#字段说明-1\" class=\"headerlink\" title=\"字段说明\"></a>字段说明</h3><p>||||</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">Device</th>\n<th align=\"center\">rrqm/s</th>\n<th align=\"center\">wrqm/s</th>\n<th align=\"center\">r/s</th>\n<th align=\"center\">w/s</th>\n<th align=\"center\">rkB/s</th>\n<th align=\"center\">wkB/s</th>\n<th align=\"center\">avgrq-sz</th>\n<th align=\"center\">avgqu-sz</th>\n<th align=\"center\">await</th>\n<th align=\"center\">r_await</th>\n<th align=\"center\">w_await</th>\n<th align=\"center\">svctm</th>\n<th align=\"center\">%util</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">设备名称</td>\n<td align=\"center\">每秒需要读取需求</td>\n<td align=\"center\">每秒需要写入需求</td>\n<td align=\"center\">实际读取需求</td>\n<td align=\"center\">实际写入需求</td>\n<td align=\"center\">实际读取的大小</td>\n<td align=\"center\">实际写入的大小</td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\">等待IO</td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\">IO需求完成的平均时间</td>\n<td align=\"center\">IO消耗的CPU百分比</td>\n</tr>\n</tbody></table>\n<h2 id=\"dstat\"><a href=\"#dstat\" class=\"headerlink\" title=\"dstat\"></a>dstat</h2><p>属于dstat包</p>\n<h2 id=\"iotop\"><a href=\"#iotop\" class=\"headerlink\" title=\"iotop\"></a>iotop</h2><p>安装iotop</p>\n<h2 id=\"pidstat\"><a href=\"#pidstat\" class=\"headerlink\" title=\"pidstat\"></a>pidstat</h2><p>安装sysstat</p>\n<h2 id=\"top\"><a href=\"#top\" class=\"headerlink\" title=\"top\"></a>top</h2><h2 id=\"htop\"><a href=\"#htop\" class=\"headerlink\" title=\"htop\"></a>htop</h2><p>安装htop</p>\n<h2 id=\"mpstat\"><a href=\"#mpstat\" class=\"headerlink\" title=\"mpstat\"></a>mpstat</h2><p>安装sysstat</p>\n<h2 id=\"netstat\"><a href=\"#netstat\" class=\"headerlink\" title=\"netstat\"></a>netstat</h2><h2 id=\"ps\"><a href=\"#ps\" class=\"headerlink\" title=\"ps\"></a>ps</h2><h2 id=\"strace\"><a href=\"#strace\" class=\"headerlink\" title=\"strace\"></a>strace</h2><p>安装strace</p>\n<h2 id=\"uptime\"><a href=\"#uptime\" class=\"headerlink\" title=\"uptime\"></a>uptime</h2><h2 id=\"lsof\"><a href=\"#lsof\" class=\"headerlink\" title=\"lsof\"></a>lsof</h2><h2 id=\"perf\"><a href=\"#perf\" class=\"headerlink\" title=\"perf\"></a>perf</h2>","categories":["Linux"],"tags":["性能分析"]},{"title":"Supervisor进程守护监控","url":"/2021/09/02/Linux/Supervisor%E8%BF%9B%E7%A8%8B%E5%AE%88%E6%8A%A4%E7%9B%91%E6%8E%A7/","content":"<p><img src=\"https://i.loli.net/2021/08/02/cX51yi4KrLYRfJU.jpg\" alt=\"linux.jpg\">  </p>\n<span id=\"more\"></span>\n<h1 id=\"Supervisor\"><a href=\"#Supervisor\" class=\"headerlink\" title=\"Supervisor\"></a>Supervisor</h1><p><a href=\"http://supervisord.org/\">Supervisor官网</a>  </p>\n<h2 id=\"Supervisor简介\"><a href=\"#Supervisor简介\" class=\"headerlink\" title=\"Supervisor简介\"></a>Supervisor简介</h2><p>Supervisor是用Python开发的一套通用的进程管理程序，能将一个普通的命令行进程变为后台daemon，并监控进程状态，异常退出时能自动重启。它是通过fork/exec的方式把这些被管理的进程当作supervisor的子进程来启动，这样只要在supervisor的配置文件中，把要管理的进程的可执行文件的路径写进去即可。也实现当子进程挂掉的时候，父进程可以准确获取子进程挂掉的信息的，可以选择是否自己启动和报警。supervisor还提供了一个功能，可以为supervisord或者每个子进程，设置一个非root的user，这个user就可以管理它对应的进程。  </p>\n<h2 id=\"安装方式\"><a href=\"#安装方式\" class=\"headerlink\" title=\"安装方式\"></a>安装方式</h2><ol>\n<li>通过pip安装  <figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">pip install supervisor</span><br></pre></td></tr></table></figure></li>\n<li>通过yum安装  <figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">yum install -y supervisor</span><br></pre></td></tr></table></figure></li>\n<li>通过apt安装  <figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">apt-get install supervisor</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h2 id=\"介绍Supervisor\"><a href=\"#介绍Supervisor\" class=\"headerlink\" title=\"介绍Supervisor\"></a>介绍Supervisor</h2><ul>\n<li><strong>supervisord</strong><br>运行 Supervisor 时会启动一个进程 supervisord，它负责启动所管理的进程，并将所管理的进程作为自己的子进程来启动，而且可以在所管理的进程出现崩溃时自动重启。  </li>\n<li><strong>supervisorctl</strong><br>是命令行管理工具，可以用来执行 stop、start、restart 等命令，来对这些子进程进行管理。supervisor是所有进程的父进程，管理着启动的子进程，supervisor以子进程的PID来管理子进程，当子进程异常退出时supervisor可以收到相应的信号量。  </li>\n</ul>\n<h2 id=\"创建配置文件\"><a href=\"#创建配置文件\" class=\"headerlink\" title=\"创建配置文件\"></a>创建配置文件</h2><p>安装完成后执行<code>echo_supervisord_conf</code>,会将Supervisor的示例配置文件打印到终端标准输出。<br>然后使用root权限可以将示例配置文件重定向输出到<code>echo_supervisord_conf &gt; /etc/supervisord.conf</code>中，若没有root权限或者要将配置文件放在其他目录中可以执行<code>echo_supervisor_conf &gt; /xxx/supervisord.conf</code>中，启动supervisord时指明配置文件即可<code>superisord -c /xxx/supervisord.conf</code>。  </p>\n<h2 id=\"配置文件详解\"><a href=\"#配置文件详解\" class=\"headerlink\" title=\"配置文件详解\"></a>配置文件详解</h2><p>/etc/supervisord.conf，/etc/supervisord.d中可以编写子进程的配置文件，也就是/etc/supervisord.conf中的[program:xxx]模块(例如创建test.conf)</p>\n<figure class=\"highlight ini\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">[unix_http_server]</span></span><br><span class=\"line\"><span class=\"attr\">file</span>=/var/run/supervisor/supervisor.sock   <span class=\"comment\">; socket 路径,supervisorctl 会使用，注意修改，默认为/tmp下容易被删除</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">;chmod=0700                 ; socket 文件的权限</span></span><br><span class=\"line\"><span class=\"comment\">;chown=nobody:nogroup       ; socket 所属用户及组</span></span><br><span class=\"line\"><span class=\"comment\">;username=user              ; 用户名</span></span><br><span class=\"line\"><span class=\"comment\">;password=123               ; 密码</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"section\">[inet_http_server]</span>         <span class=\"comment\">; 是否启用服务，默认是关闭的（启用的话可以看到supervisor 管理的服务状态）</span></span><br><span class=\"line\"><span class=\"attr\">port</span>=<span class=\"number\">127.0</span>.<span class=\"number\">0.1</span>:<span class=\"number\">9001</span>        <span class=\"comment\">; 监听的IP及端口</span></span><br><span class=\"line\"><span class=\"attr\">username</span>=user              <span class=\"comment\">; 用户名</span></span><br><span class=\"line\"><span class=\"attr\">password</span>=<span class=\"number\">123</span>               <span class=\"comment\">; 密码</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"section\">[supervisord]</span>               <span class=\"comment\">; supervisord 全局配置</span></span><br><span class=\"line\"><span class=\"attr\">logfile</span>=/var/log/supervisor/supervisord.log  <span class=\"comment\">; supervisor 日志路径，注意修改，默认为/tmp下容易被删除</span></span><br><span class=\"line\"><span class=\"attr\">logfile_maxbytes</span>=<span class=\"number\">50</span>MB       <span class=\"comment\">; 单个日志文件最大数</span></span><br><span class=\"line\"><span class=\"attr\">logfile_backups</span>=<span class=\"number\">10</span>          <span class=\"comment\">; 保留多少个日志文件（默认10个）</span></span><br><span class=\"line\"><span class=\"attr\">loglevel</span>=info               <span class=\"comment\">; (log level;default info; others: debug,warn,trace)</span></span><br><span class=\"line\"><span class=\"attr\">pidfile</span>=/var/run/supervisord.pid <span class=\"comment\">; pid 文件路径，注意修改，默认为/tmp下容易被删除</span></span><br><span class=\"line\"><span class=\"attr\">nodaemon</span>=<span class=\"literal\">false</span>              <span class=\"comment\">; 启动是否丢到前台，设置为false ，表示以daemon 的方式启动</span></span><br><span class=\"line\"><span class=\"attr\">minfds</span>=<span class=\"number\">1024</span>                 <span class=\"comment\">; 最小文件打开数，对应系统limit.conf 中的nofile ,默认最小为1024，最大为4096</span></span><br><span class=\"line\"><span class=\"attr\">minprocs</span>=<span class=\"number\">200</span>                <span class=\"comment\">; 最小的进程打开数，对应系统的limit.conf 中的nproc,默认为200</span></span><br><span class=\"line\"><span class=\"comment\">;umask=022                  ; (process file creation umask;default 022)</span></span><br><span class=\"line\"><span class=\"comment\">;user=chrism                 ; 启动supervisord 服务的用户，默认为root</span></span><br><span class=\"line\"><span class=\"comment\">;identifier=supervisor       ; (supervisord identifier, default is &#x27;supervisor&#x27;)</span></span><br><span class=\"line\"><span class=\"comment\">;directory=/tmp              ; 这里的目录指的是服务的工作目录</span></span><br><span class=\"line\"><span class=\"comment\">;nocleanup=true              ; (don&#x27;t clean up tempfiles at start;default false)</span></span><br><span class=\"line\"><span class=\"comment\">;childlogdir=/tmp            ; (&#x27;AUTO&#x27; child log dir, default $TEMP)</span></span><br><span class=\"line\"><span class=\"comment\">;environment=KEY=value       ; (key value pairs to add to environment)</span></span><br><span class=\"line\"><span class=\"comment\">;strip_ansi=false            ; (strip ansi escape codes in logs; def. false)</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">; the below section must remain in the config file for RPC</span></span><br><span class=\"line\"><span class=\"comment\">; (supervisorctl/web interface) to work, additional interfaces may be</span></span><br><span class=\"line\"><span class=\"comment\">; added by defining them in separate rpcinterface: sections</span></span><br><span class=\"line\"><span class=\"section\">[rpcinterface:supervisor]</span></span><br><span class=\"line\"><span class=\"attr\">supervisor.rpcinterface_factory</span> = supervisor.rpcinterface:make_main_rpcinterface</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"section\">[supervisorctl]</span></span><br><span class=\"line\"><span class=\"attr\">serverurl</span>=unix:///var/run/supervisor/supervisor.sock <span class=\"comment\">; 通过UNIX socket连接supervisord，路径与unix_http_server部分的file一致</span></span><br><span class=\"line\"><span class=\"comment\">;serverurl=http://127.0.0.1:9001 ; 通过HTTP的方式连接supervisord</span></span><br><span class=\"line\"><span class=\"comment\">;username=chris              ; should be same as http_username if set</span></span><br><span class=\"line\"><span class=\"comment\">;password=123                ; should be same as http_password if set</span></span><br><span class=\"line\"><span class=\"comment\">;prompt=mysupervisor         ; cmd line prompt (default &quot;supervisor&quot;)</span></span><br><span class=\"line\"><span class=\"comment\">;history_file=~/.sc_history  ; use readline history if available</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">; The below sample program section shows all possible program subsection values,</span></span><br><span class=\"line\"><span class=\"comment\">; create one or more &#x27;real&#x27; program: sections to be able to control them under</span></span><br><span class=\"line\"><span class=\"comment\">; supervisor.</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">;[program:theprogramname]      ; 定义一个守护进程 </span></span><br><span class=\"line\"><span class=\"comment\">;command=/bin/cat              ; 启动程序使用的命令，可以是绝对路径或者相对路径</span></span><br><span class=\"line\"><span class=\"comment\">;process_name=%(program_name)s ; 一个python字符串表达式，用来表示supervisor进程启动的这个的名称，默认值是%(program_name)s</span></span><br><span class=\"line\"><span class=\"comment\">;numprocs=1                    ; Supervisor启动这个程序的多个实例，如果numprocs&gt;1，则process_name的表达式必须包含%(process_num)s，默认是1</span></span><br><span class=\"line\"><span class=\"comment\">;directory=/tmp                ; supervisord在生成子进程的时候会切换到该目录</span></span><br><span class=\"line\"><span class=\"comment\">;umask=022                     ; umask for process (default None)</span></span><br><span class=\"line\"><span class=\"comment\">;priority=999                  ; 权重，可以控制程序启动和关闭时的顺序，权重越低：越早启动，越晚关闭。默认值是999</span></span><br><span class=\"line\"><span class=\"comment\">;autostart=true                ; 如果设置为true，当supervisord启动的时候，进程会自动启动</span></span><br><span class=\"line\"><span class=\"comment\">;autorestart=true              ; 设置为随 supervisord 重启而重启，值可以是false、true、unexpected。false：进程不会自动重启,unexpected：进程意外杀死后才重启</span></span><br><span class=\"line\"><span class=\"comment\">;startsecs=10                  ; 程序启动后等待多长时间后才认为程序启动成功，默认是10秒</span></span><br><span class=\"line\"><span class=\"comment\">;startretries=3                ; supervisord尝试启动一个程序时尝试的次数。默认是3</span></span><br><span class=\"line\"><span class=\"comment\">;exitcodes=0,2                 ; 一个预期的退出返回码，默认是0,2。</span></span><br><span class=\"line\"><span class=\"comment\">;stopsignal=QUIT               ; 当收到stop请求的时候，发送信号给程序，默认是TERM信号，也可以是 HUP, INT, QUIT, KILL, USR1, or USR2</span></span><br><span class=\"line\"><span class=\"comment\">;stopwaitsecs=10               ; 在操作系统给supervisord发送SIGCHILD信号时等待的时间</span></span><br><span class=\"line\"><span class=\"comment\">;user=chrism                   ; 如果supervisord以root运行，则会使用这个设置用户启动子程序</span></span><br><span class=\"line\"><span class=\"comment\">;redirect_stderr=true          ; 如果设置为true，进程则会把标准错误输出到supervisord后台的标准输出文件描述符</span></span><br><span class=\"line\"><span class=\"comment\">;stdout_logfile=/a/path        ; 把进程的标准输出写入文件中，如果stdout_logfile没有设置或者设置为AUTO，则supervisor会自动选择一个文件位置</span></span><br><span class=\"line\"><span class=\"comment\">;stdout_logfile_maxbytes=1MB   ; 标准输出log文件达到多少后自动进行轮转，单位是KB、MB、GB。如果设置为0则表示不限制日志文件大小</span></span><br><span class=\"line\"><span class=\"comment\">;stdout_logfile_backups=10     ; 标准输出日志轮转备份的数量，默认是10，如果设置为0，则不备份</span></span><br><span class=\"line\"><span class=\"comment\">;stdout_capture_maxbytes=1MB   ; 当进程处于stderr capture mode模式的时候，写入FIFO队列的最大bytes值，单位可以是KB、MB、GB</span></span><br><span class=\"line\"><span class=\"comment\">;stdout_events_enabled=false   ; 如果设置为true，当进程在写它的stderr</span></span><br><span class=\"line\"><span class=\"comment\">;stderr_logfile=/a/path        ; 把进程的错误日志输出一个文件中，除非redirect_stderr参数被设置为true</span></span><br><span class=\"line\"><span class=\"comment\">;stderr_logfile_maxbytes=1MB   ; 错误log文件达到多少后自动进行轮转，单位是KB、MB、GB。如果设置为0则表示不限制日志文件大小</span></span><br><span class=\"line\"><span class=\"comment\">;stderr_logfile_backups=10     ; 错误日志轮转备份的数量，默认是10，如果设置为0，则不备份</span></span><br><span class=\"line\"><span class=\"comment\">;stderr_capture_maxbytes=1MB   ; 当进程处于stderr capture mode模式的时候，写入FIFO队列的最大bytes值，单位可以是KB、MB、GB</span></span><br><span class=\"line\"><span class=\"comment\">;stderr_events_enabled=false   ; 如果设置为true，当进程在写它的stderr到文件描述符的时候，PROCESS_LOG_STDERR事件会被触发</span></span><br><span class=\"line\"><span class=\"comment\">;environment=A=1,B=2           ; 一个k/v对的list列表</span></span><br><span class=\"line\"><span class=\"comment\">;serverurl=AUTO                ; 是否允许子进程和内部的HTTP服务通讯，如果设置为AUTO，supervisor会自动的构造一个url</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">; The below sample eventlistener section shows all possible</span></span><br><span class=\"line\"><span class=\"comment\">; eventlistener subsection values, create one or more &#x27;real&#x27;</span></span><br><span class=\"line\"><span class=\"comment\">; eventlistener: sections to be able to handle event notifications</span></span><br><span class=\"line\"><span class=\"comment\">; sent by supervisor.</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">;这个地方是自定义一个守护进程</span></span><br><span class=\"line\"><span class=\"section\">[program:test]</span></span><br><span class=\"line\"><span class=\"attr\">user</span>=root</span><br><span class=\"line\"><span class=\"attr\">directory</span>=/home/supervisor_test</span><br><span class=\"line\"><span class=\"attr\">command</span>=/bin/bash /home/supervisor_test/test.sh</span><br><span class=\"line\"><span class=\"attr\">stdout_logfile</span>=/home/supervisor_test/test.txt    </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">;[eventlistener:theeventlistenername]</span></span><br><span class=\"line\"><span class=\"comment\">;command=/bin/eventlistener    ; the program (relative uses PATH, can take args)</span></span><br><span class=\"line\"><span class=\"comment\">;process_name=%(program_name)s ; process_name expr (default %(program_name)s)</span></span><br><span class=\"line\"><span class=\"comment\">;numprocs=1                    ; number of processes copies to start (def 1)</span></span><br><span class=\"line\"><span class=\"comment\">;events=EVENT                  ; event notif. types to subscribe to (req&#x27;d)</span></span><br><span class=\"line\"><span class=\"comment\">;buffer_size=10                ; event buffer queue size (default 10)</span></span><br><span class=\"line\"><span class=\"comment\">;directory=/tmp                ; directory to cwd to before exec (def no cwd)</span></span><br><span class=\"line\"><span class=\"comment\">;umask=022                     ; umask for process (default None)</span></span><br><span class=\"line\"><span class=\"comment\">;priority=-1                   ; the relative start priority (default -1)</span></span><br><span class=\"line\"><span class=\"comment\">;autostart=true                ; start at supervisord start (default: true)</span></span><br><span class=\"line\"><span class=\"comment\">;startsecs=1                   ; # of secs prog must stay up to be running (def. 1)</span></span><br><span class=\"line\"><span class=\"comment\">;startretries=3                ; max # of serial start failures when starting (default 3)</span></span><br><span class=\"line\"><span class=\"comment\">;autorestart=unexpected        ; autorestart if exited after running (def: unexpected)</span></span><br><span class=\"line\"><span class=\"comment\">;exitcodes=0,2                 ; &#x27;expected&#x27; exit codes used with autorestart (default 0,2)</span></span><br><span class=\"line\"><span class=\"comment\">;stopsignal=QUIT               ; signal used to kill process (default TERM)</span></span><br><span class=\"line\"><span class=\"comment\">;stopwaitsecs=10               ; max num secs to wait b4 SIGKILL (default 10)</span></span><br><span class=\"line\"><span class=\"comment\">;stopasgroup=false             ; send stop signal to the UNIX process group (default false)</span></span><br><span class=\"line\"><span class=\"comment\">;killasgroup=false             ; SIGKILL the UNIX process group (def false)</span></span><br><span class=\"line\"><span class=\"comment\">;user=chrism                   ; setuid to this UNIX account to run the program</span></span><br><span class=\"line\"><span class=\"comment\">;redirect_stderr=false         ; redirect_stderr=true is not allowed for eventlisteners</span></span><br><span class=\"line\"><span class=\"comment\">;stdout_logfile=/a/path        ; stdout log path, NONE for none; default AUTO</span></span><br><span class=\"line\"><span class=\"comment\">;stdout_logfile_maxbytes=1MB   ; max # logfile bytes b4 rotation (default 50MB)</span></span><br><span class=\"line\"><span class=\"comment\">;stdout_logfile_backups=10     ; # of stdout logfile backups (0 means none, default 10)</span></span><br><span class=\"line\"><span class=\"comment\">;stdout_events_enabled=false   ; emit events on stdout writes (default false)</span></span><br><span class=\"line\"><span class=\"comment\">;stderr_logfile=/a/path        ; stderr log path, NONE for none; default AUTO</span></span><br><span class=\"line\"><span class=\"comment\">;stderr_logfile_maxbytes=1MB   ; max # logfile bytes b4 rotation (default 50MB)</span></span><br><span class=\"line\"><span class=\"comment\">;stderr_logfile_backups=10     ; # of stderr logfile backups (0 means none, default 10)</span></span><br><span class=\"line\"><span class=\"comment\">;stderr_events_enabled=false   ; emit events on stderr writes (default false)</span></span><br><span class=\"line\"><span class=\"comment\">;environment=A=&quot;1&quot;,B=&quot;2&quot;       ; process environment additions</span></span><br><span class=\"line\"><span class=\"comment\">;serverurl=AUTO                ; override serverurl computation (childutils)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">; The sample group section below shows all possible group values.  Create one</span></span><br><span class=\"line\"><span class=\"comment\">; or more &#x27;real&#x27; group: sections to create &quot;heterogeneous&quot; process groups.</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">;[group:thegroupname]   ;定义一个组</span></span><br><span class=\"line\"><span class=\"comment\">;programs=progname1,progname2  ; 组内的成员模块有哪些   </span></span><br><span class=\"line\"><span class=\"comment\">;priority=999                  ; the relative start priority (default 999)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">; The [include] section can just contain the &quot;files&quot; setting.  This</span></span><br><span class=\"line\"><span class=\"comment\">; setting can list multiple files (separated by whitespace or</span></span><br><span class=\"line\"><span class=\"comment\">; newlines).  It can also contain wildcards.  The filenames are</span></span><br><span class=\"line\"><span class=\"comment\">; interpreted as relative to this file.  Included files *cannot*</span></span><br><span class=\"line\"><span class=\"comment\">; include files themselves.</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">;[include]</span></span><br><span class=\"line\"><span class=\"comment\">;files = relative/directory/*.ini</span></span><br></pre></td></tr></table></figure>\n\n<p>编写一个简单的死循环脚本</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">!/bin/bash</span></span><br><span class=\"line\">while true</span><br><span class=\"line\">do</span><br><span class=\"line\">  date  &gt;&gt; /home/supervisor_test/test.txt</span><br><span class=\"line\">  sleep 10s</span><br><span class=\"line\">  date &gt;&gt; /home/supervisor_test/test.txt</span><br><span class=\"line\">  sleep 10s</span><br><span class=\"line\">done</span><br></pre></td></tr></table></figure>\n<p>此处的配置文件中启动了web，可以在web中进行查看进程状态以及相关操作</p>\n<h2 id=\"启动Supervisor\"><a href=\"#启动Supervisor\" class=\"headerlink\" title=\"启动Supervisor\"></a>启动Supervisor</h2><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">supervisord   # 此处因为配置文件为默认的/etc/supervisord.conf,若使用其他配置文件需要加 -c 配置文件路径</span><br><span class=\"line\">supervisord -c /xxx/xxxx</span><br></pre></td></tr></table></figure>\n<p><strong>注意</strong>在启动时可能会出现以下错误  </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">Error: Another program is already listening on a port that one of our HTTP servers is configured to use.  Shut this program down first before starting supervisord.For help, use /usr/bin/supervisord -h</span><br></pre></td></tr></table></figure>\n<p>这表示已经supervisor已经启动，若配置进行了修改可以使用<code>supervisorctl update</code>  </p>\n<h2 id=\"supervisorctl命令讲解\"><a href=\"#supervisorctl命令讲解\" class=\"headerlink\" title=\"supervisorctl命令讲解\"></a>supervisorctl命令讲解</h2><ul>\n<li>supervisorctl ：进入到交互式命令行，在交互式命令行中以下命令可以不加supervisorctl直接执行</li>\n<li>supervisorctl shutdown ：停止supervisord  </li>\n<li>supervisorctl status ：查看监控进程的状态  </li>\n<li>supervisorctl stop xxx ：停止xxx模块的进程  </li>\n<li>supervisorctl start xxx ：启动xxx模块的进程  </li>\n<li>supervisorctl restart xxx ：重启xxx模块的进程</li>\n<li>supervisorctl stop all ：停止所有监控的进程  </li>\n<li>supervisorctl update ：更新新的配置到supervisord（不会重启原来已运行的程序）  </li>\n<li>supervisorctl reload ：载入所有配置文件，并按新的配置启动、管理所有进程（会重启原来已运行的程序）  </li>\n</ul>\n<p><strong>注意执行supervisorctl时可能会出现以下报错</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">unix:///var/run/supervisor/supervisor.sock no such file</span><br></pre></td></tr></table></figure>\n<p>这表示supervisord服务可能没有启动，需要先启动supervisord</p>\n","categories":["Linux"],"tags":["Supervisor"]},{"title":"文本三剑客","url":"/2021/12/25/Linux/%E6%96%87%E6%9C%AC%E4%B8%89%E5%89%91%E5%AE%A2/","content":"<p><img src=\"https://i.loli.net/2021/08/02/cX51yi4KrLYRfJU.jpg\" alt=\"linux.jpg\">  </p>\n<span id=\"more\"></span>\n<h1 id=\"文本三剑客之grep\"><a href=\"#文本三剑客之grep\" class=\"headerlink\" title=\"文本三剑客之grep\"></a>文本三剑客之grep</h1><p>grep家族总共有三个：<strong>grep</strong>、<strong>egrep</strong>、<strong>fgrep</strong>  </p>\n<h2 id=\"语法\"><a href=\"#语法\" class=\"headerlink\" title=\"语法\"></a>语法</h2><p>grep [option] pattern file  </p>\n<h2 id=\"参数\"><a href=\"#参数\" class=\"headerlink\" title=\"参数\"></a>参数</h2><table>\n<thead>\n<tr>\n<th align=\"center\">参数</th>\n<th align=\"center\">描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">-a</td>\n<td align=\"center\">不要忽略二进制的数据</td>\n</tr>\n<tr>\n<td align=\"center\">-A &lt;显示行数n&gt;</td>\n<td align=\"center\">除了显示符合范本样式的那一列之外，并显示该行之后n行的内容</td>\n</tr>\n<tr>\n<td align=\"center\">-B &lt;显示行数n&gt;</td>\n<td align=\"center\">除了显示符合样式的那一行之外，并显示该行之前n行的内容</td>\n</tr>\n<tr>\n<td align=\"center\">-c</td>\n<td align=\"center\">计算符合样式的列数</td>\n</tr>\n<tr>\n<td align=\"center\">-C &lt;显示行数n&gt;</td>\n<td align=\"center\">除了显示符合样式的那一行之外，并显示该行之前后n行的内容</td>\n</tr>\n<tr>\n<td align=\"center\">-E</td>\n<td align=\"center\">将样式为扩展的正则表达式来使用，相当于egrep</td>\n</tr>\n<tr>\n<td align=\"center\">-i</td>\n<td align=\"center\">忽略大小写</td>\n</tr>\n<tr>\n<td align=\"center\">-o</td>\n<td align=\"center\">只显示符合匹配的部分</td>\n</tr>\n<tr>\n<td align=\"center\">-q</td>\n<td align=\"center\">不显示任何信息，在脚本中判断时使用</td>\n</tr>\n<tr>\n<td align=\"center\">-v</td>\n<td align=\"center\">显示不包含匹配文本的所有行</td>\n</tr>\n<tr>\n<td align=\"center\">-n</td>\n<td align=\"center\">在显示符合样式的那一行之前，标示出该行的列数编号</td>\n</tr>\n<tr>\n<td align=\"center\">-r</td>\n<td align=\"center\">以递归的方式查找符合条件的文件</td>\n</tr>\n</tbody></table>\n<h1 id=\"文本三剑客之awk\"><a href=\"#文本三剑客之awk\" class=\"headerlink\" title=\"文本三剑客之awk\"></a>文本三剑客之awk</h1><h2 id=\"语法-1\"><a href=\"#语法-1\" class=\"headerlink\" title=\"语法\"></a>语法</h2><p><code>awk [option] &#39;BEGIN&#123; commands &#125; pattern &#123; commands &#125; END&#123; commands &#125;&#39;</code><br>第一段：开始块（可选），关键字 BEGIN 必须大写，读输入文件之前执行的代码段，只在开始时执行一次，一般是在开始块中初始化一些变量<br>第二段：主体块（必须），主循环执行输入文件的代码段，每输入一行都执行一次，主体之前可以使用正则表达式进行过滤行，只对符合表达式的行执行主体块。<br>第三段：结束块（可选），关键字END必须大写，与开始块类似  </p>\n<h2 id=\"参数-1\"><a href=\"#参数-1\" class=\"headerlink\" title=\"参数\"></a>参数</h2><table>\n<thead>\n<tr>\n<th align=\"center\">参数</th>\n<th align=\"center\">描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">-F</td>\n<td align=\"center\">指定文件字段分隔符，相当于内建变量FS</td>\n</tr>\n<tr>\n<td align=\"center\">-v var=value</td>\n<td align=\"center\">定义变量，一个-v只能定义一个变量</td>\n</tr>\n</tbody></table>\n<h2 id=\"内建变量\"><a href=\"#内建变量\" class=\"headerlink\" title=\"内建变量\"></a>内建变量</h2><table>\n<thead>\n<tr>\n<th align=\"center\">参数</th>\n<th align=\"center\">描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">$n</td>\n<td align=\"center\">当前记录的第n个字段，字段间由FS分隔</td>\n</tr>\n<tr>\n<td align=\"center\">$0</td>\n<td align=\"center\">当前输入的完成行</td>\n</tr>\n<tr>\n<td align=\"center\">NR</td>\n<td align=\"center\">当前处理行的行号，从1开始</td>\n</tr>\n<tr>\n<td align=\"center\">FNR</td>\n<td align=\"center\">各文件分别计数的行号</td>\n</tr>\n<tr>\n<td align=\"center\">FILENAME</td>\n<td align=\"center\">当前文件的文件名</td>\n</tr>\n<tr>\n<td align=\"center\">FS</td>\n<td align=\"center\">字段分隔符,将输入的每一行以FS进行分割</td>\n</tr>\n<tr>\n<td align=\"center\">RS</td>\n<td align=\"center\">记录分隔符,将对象文件以RS划分每一行</td>\n</tr>\n<tr>\n<td align=\"center\">OFS</td>\n<td align=\"center\">输出字段分隔符，默认值与输入字段分隔符一致</td>\n</tr>\n<tr>\n<td align=\"center\">ORS</td>\n<td align=\"center\">输出记录分隔符(默认值是一个换行符)</td>\n</tr>\n<tr>\n<td align=\"center\">IGNORECASE</td>\n<td align=\"center\">忽略如果为真，则进行忽略大小写的匹配，可以将该参数直接定义为</td>\n</tr>\n<tr>\n<td align=\"center\">NF</td>\n<td align=\"center\">字段的数目</td>\n</tr>\n</tbody></table>\n<h2 id=\"使用正则，字符串匹配\"><a href=\"#使用正则，字符串匹配\" class=\"headerlink\" title=\"使用正则，字符串匹配\"></a>使用正则，字符串匹配</h2><p>在主体块前使用正则表达式，<code>~</code>表示正则表达式开始，若不指定第几段，该<code>~</code>可以省略，<code>/ /</code>表示要匹配的正则表达式  </p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 打印第一段中有v字符的行以及行号</span></span><br><span class=\"line\">awk &#x27;$1 ~ /v/ &#123;print NR,$0&#125;&#x27; test.txt</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 忽略大小写进行匹配</span></span><br><span class=\"line\">awk &#x27;BEGIN&#123; IGNORECASE=1 &#125; /P/ &#123;print $0&#125;&#x27; test.txt</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 反向匹配</span></span><br><span class=\"line\">awk &#x27;$1 !~ /p/ &#123;print NR,$0&#125;&#x27; test.txt</span><br><span class=\"line\">awk &#x27;!/p/ &#123;print NR,$0&#125;&#x27; test.txt</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"条件语句与循环\"><a href=\"#条件语句与循环\" class=\"headerlink\" title=\"条件语句与循环\"></a>条件语句与循环</h2><h3 id=\"if判断\"><a href=\"#if判断\" class=\"headerlink\" title=\"if判断\"></a>if判断</h3><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">if ( ) &#123;&#125; else if () &#123;&#125; else &#123;&#125;</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 判断行号是否为10，</span></span><br><span class=\"line\">awk &#x27;&#123;if (NR==10)&#123;print NR,$0&#125; else &#123;print NR,&quot;NO&quot;&#125;&#125;&#x27; test.txt</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"for循环\"><a href=\"#for循环\" class=\"headerlink\" title=\"for循环\"></a>for循环</h3><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">for (i = 1; i &lt;= 5; ++i) print i </span><br></pre></td></tr></table></figure>\n\n<h3 id=\"while循环\"><a href=\"#while循环\" class=\"headerlink\" title=\"while循环\"></a>while循环</h3><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">i=1 ; while (i &lt; 100) &#123;print i;++i&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"文本三剑客之sed\"><a href=\"#文本三剑客之sed\" class=\"headerlink\" title=\"文本三剑客之sed\"></a>文本三剑客之sed</h1><h2 id=\"参数-2\"><a href=\"#参数-2\" class=\"headerlink\" title=\"参数\"></a>参数</h2><table>\n<thead>\n<tr>\n<th align=\"center\">参数</th>\n<th align=\"center\">描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">-n</td>\n<td align=\"center\">只有被sed处理过的行才会被列出来</td>\n</tr>\n<tr>\n<td align=\"center\">-i</td>\n<td align=\"center\">直接对原文件进行修改</td>\n</tr>\n<tr>\n<td align=\"center\">-r</td>\n<td align=\"center\">支持扩展正则表达式</td>\n</tr>\n</tbody></table>\n","categories":["Linux"],"tags":["grep"]},{"title":"正则表达式","url":"/2021/08/02/Linux/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/","content":"<p><img src=\"https://i.loli.net/2021/08/02/cX51yi4KrLYRfJU.jpg\" alt=\"linux.jpg\">  </p>\n<span id=\"more\"></span>\n<h1 id=\"正则表达式\"><a href=\"#正则表达式\" class=\"headerlink\" title=\"正则表达式\"></a>正则表达式</h1><h2 id=\"正则表达式的分类\"><a href=\"#正则表达式的分类\" class=\"headerlink\" title=\"正则表达式的分类\"></a>正则表达式的分类</h2><ol>\n<li>基本的正则表达式（Basic Regular Expression 又叫Basic RegEx 简称BREs）  </li>\n<li>扩展的正则表达式（Extended Regular Expression 又叫Extended RegEx 简称EREs）  </li>\n<li>Perl的正则表达式（Perl Regular Expression 又叫Perl RegEx 简称PREs）  </li>\n</ol>\n<h2 id=\"基本组成部分\"><a href=\"#基本组成部分\" class=\"headerlink\" title=\"基本组成部分\"></a>基本组成部分</h2><table>\n<thead>\n<tr>\n<th>正则表达式</th>\n<th>描述</th>\n<th>示例</th>\n<th>Basic RegEx</th>\n<th>Extended RegEx</th>\n<th>Python RegEx</th>\n<th>Perl regEx</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>\\</td>\n<td>转义符，将特殊字符进行转义，忽略其特殊意义</td>\n<td>a.b匹配a.b，但不能匹配ajb，.被转义为特殊意义</td>\n<td>\\</td>\n<td>\\</td>\n<td>\\</td>\n<td>\\</td>\n</tr>\n<tr>\n<td>^</td>\n<td>匹配行首，awk中，^则是匹配字符串的开始</td>\n<td>^tux匹配以tux开头的行</td>\n<td>^</td>\n<td>^</td>\n<td>^</td>\n<td>^</td>\n</tr>\n<tr>\n<td>$</td>\n<td>匹配行尾，awk中，$则是匹配字符串的结尾</td>\n<td>tux$匹配以tux结尾的行</td>\n<td>$</td>\n<td>$</td>\n<td>$</td>\n<td>$</td>\n</tr>\n<tr>\n<td>.</td>\n<td>匹配除换行符\\n之外的任意单个字符，awk则中可以</td>\n<td>ab.匹配abc或bad，不可匹配abcd或abde，只能匹配单字符</td>\n<td>.</td>\n<td>.</td>\n<td>.</td>\n<td>.</td>\n</tr>\n<tr>\n<td>[ ]</td>\n<td>匹配包含在[字符]之中的任意一个字符</td>\n<td>coo[kl]可以匹配cook或cool</td>\n<td>[ ]</td>\n<td>[ ]</td>\n<td>[ ]</td>\n<td>[ ]</td>\n</tr>\n<tr>\n<td>[^]</td>\n<td>匹配[^字符]之外的任意一个字符</td>\n<td>123[^45]不可以匹配1234或1235，1236、1237都可以</td>\n<td>[^]</td>\n<td>[^]</td>\n<td>[^]</td>\n<td>[^]</td>\n</tr>\n<tr>\n<td>[-]</td>\n<td>匹配[]中指定范围内的任意一个字符，要写成递增</td>\n<td>[0-9]可以匹配1、2或3等其中任意一个数字</td>\n<td>[-]</td>\n<td>[-]</td>\n<td>[-]</td>\n<td>[-]</td>\n</tr>\n<tr>\n<td>?</td>\n<td>匹配之前的项1次或者0次</td>\n<td>colou?r可以匹配color或者colour，不能匹配colouur</td>\n<td>不支持</td>\n<td>?</td>\n<td>?</td>\n<td>?</td>\n</tr>\n<tr>\n<td>+</td>\n<td>匹配之前的项1次或者多次</td>\n<td>sa-6+匹配sa-6、sa-666，不能匹配sa-</td>\n<td>不支持</td>\n<td>+</td>\n<td>+</td>\n<td>+</td>\n</tr>\n<tr>\n<td>*</td>\n<td>匹配之前的项0次或者多次</td>\n<td>co* l匹配cl、col、cool、coool等</td>\n<td>*</td>\n<td>*</td>\n<td>*</td>\n<td>*</td>\n</tr>\n<tr>\n<td>( )</td>\n<td>匹配表达式，创建一个用于匹配的子串</td>\n<td>ma(tri)?匹配max或maxtrix</td>\n<td>不支持</td>\n<td>( )</td>\n<td>( )</td>\n<td>( )</td>\n</tr>\n<tr>\n<td>{n}</td>\n<td>匹配之前的项n次，n是可以为0的正整数</td>\n<td>[0-9]{3}匹配任意一个三位数，可以扩展为[0-9][0-9][0-9]</td>\n<td>不支持</td>\n<td>{n}</td>\n<td>{n}</td>\n<td>{n}</td>\n</tr>\n<tr>\n<td>{n,}</td>\n<td>之前的项至少需要匹配n次</td>\n<td>[0-9]{2,}匹配任意一个两位数或更多位数</td>\n<td>不支持</td>\n<td>{n,}</td>\n<td>{n,}</td>\n<td>{n,}</td>\n</tr>\n<tr>\n<td>{n,m}</td>\n<td>指定之前的项至少匹配n次，最多匹配m次，n&lt;=m</td>\n<td>[0-9]{2,5}匹配从两位数到五位数之间的任意一个数字</td>\n<td>不支持</td>\n<td>{n,m}</td>\n<td>{n,m}</td>\n<td>{n,m}</td>\n</tr>\n<tr>\n<td>|</td>\n<td>交替匹配|两边的任意一项</td>\n<td>ab(c|d)匹配abc或abd</td>\n<td>不支持</td>\n<td>|</td>\n<td>|</td>\n<td>|</td>\n</tr>\n</tbody></table>\n<h2 id=\"POSIX字符类\"><a href=\"#POSIX字符类\" class=\"headerlink\" title=\"POSIX字符类\"></a>POSIX字符类</h2><p>POSIX字符类是一个形如[:…:]的特殊元序列（meta sequence），他可以用于匹配特定的字符范围。  </p>\n<table>\n<thead>\n<tr>\n<th>正则表达式</th>\n<th>描述</th>\n<th>示例</th>\n<th>Basic RegEx</th>\n<th>Extended RegEx</th>\n<th>Python RegEx</th>\n<th>Perl regEx</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>[:alnum:]</td>\n<td>匹配任意一个字母或数字字符</td>\n<td>[[:alnum:]]+</td>\n<td>[:alnum:]</td>\n<td>[:alnum:]</td>\n<td>[:alnum:]</td>\n<td>[:alnum:]</td>\n</tr>\n<tr>\n<td>[:alpha:]</td>\n<td>匹配任意一个字母字符（包括大小写字母）</td>\n<td>[[:alpha:]]{4}</td>\n<td>[:alpha:]</td>\n<td>[:alpha:]</td>\n<td>[:alpha:]</td>\n<td>[:alpha:]</td>\n</tr>\n<tr>\n<td>[:blank:]</td>\n<td>空格与制表符（横向和纵向）</td>\n<td>[[:blank:]]*</td>\n<td>[:blank:]</td>\n<td>[:blank:]</td>\n<td>[:blank:]</td>\n<td>[:blank:]</td>\n</tr>\n<tr>\n<td>[:digit:]</td>\n<td>匹配任意一个数字字符</td>\n<td>[[:digit:]]?</td>\n<td>[:digit:]</td>\n<td>[:digit:]</td>\n<td>[:digit:]</td>\n<td>[:digit:]</td>\n</tr>\n<tr>\n<td>[:lower:]</td>\n<td>匹配小写字母</td>\n<td>[[:lower:]]{5,}</td>\n<td>[:lower:]</td>\n<td>[:lower:]</td>\n<td>[:lower:]</td>\n<td>[:lower:]</td>\n</tr>\n<tr>\n<td>[:upper:]</td>\n<td>匹配大写字母</td>\n<td>([[:upper:]]+)?</td>\n<td>[:upper:]</td>\n<td>[:upper:]</td>\n<td>[:upper:]</td>\n<td>[:upper:]</td>\n</tr>\n<tr>\n<td>[:punct:]</td>\n<td>匹配标点符号</td>\n<td>[[:punct:]]</td>\n<td>[:punct:]</td>\n<td>[:punct:]</td>\n<td>[:punct:]</td>\n<td>[:punct:]</td>\n</tr>\n<tr>\n<td>[:space:]</td>\n<td>匹配一个包括换行符、回车等在内的所有空白符</td>\n<td>[[:space:]]+</td>\n<td>[:space:]</td>\n<td>[:space:]</td>\n<td>[:space:]</td>\n<td>[:space:]</td>\n</tr>\n<tr>\n<td>[:graph:]</td>\n<td>匹配任何一个可以看得见的且可以打印的字符</td>\n<td>[[:graph:]]</td>\n<td>[:graph:]</td>\n<td>[:graph:]</td>\n<td>[:graph:]</td>\n<td>[:graph:]</td>\n</tr>\n<tr>\n<td>[:xdigit:]</td>\n<td>任何一个十六进制数（即：0-9，a-f，A-F）</td>\n<td>[[:xdigit:]]+</td>\n<td>[:xdigit:]</td>\n<td>[:xdigit:]</td>\n<td>[:xdigit:]</td>\n<td>[:xdigit:]</td>\n</tr>\n<tr>\n<td>[:cntrl:]</td>\n<td>任何一个控制字符（ASCII字符集中的前32个字符)</td>\n<td>[[:cntrl:]]</td>\n<td>[:cntrl:]</td>\n<td>[:cntrl:]</td>\n<td>[:cntrl:]</td>\n<td>[:cntrl:]</td>\n</tr>\n<tr>\n<td>[:print:]</td>\n<td>任何一个可以打印的字符</td>\n<td>[[:print:]]</td>\n<td>[:print:]</td>\n<td>[:print:]</td>\n<td>[:print:]</td>\n<td>[:print:]</td>\n</tr>\n</tbody></table>\n<h2 id=\"元字符\"><a href=\"#元字符\" class=\"headerlink\" title=\"元字符\"></a>元字符</h2><p>元字符（meta character）是一种Perl风格的正则表达式，只有一部分文本处理工具支持它，并不是所有的文本处理工具都支持。  </p>\n<table>\n<thead>\n<tr>\n<th>正则表达式</th>\n<th>描述</th>\n<th>示例</th>\n<th>Basic RegEx</th>\n<th>Extended RegEx</th>\n<th>Python RegEx</th>\n<th>Perl regEx</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>\\b</td>\n<td>单词边界</td>\n<td>\\bcool\\b 匹配cool，不匹配coolant</td>\n<td>\\b</td>\n<td>\\b</td>\n<td>\\b</td>\n<td>\\b</td>\n</tr>\n<tr>\n<td>\\B</td>\n<td>非单词边界</td>\n<td>cool\\B 匹配coolant，不匹配cool</td>\n<td>\\B</td>\n<td>\\B</td>\n<td>\\B</td>\n<td>\\B</td>\n</tr>\n<tr>\n<td>\\d</td>\n<td>单个数字字符</td>\n<td>b\\db 匹配b2b，不匹配bcb</td>\n<td>不支持</td>\n<td>不支持</td>\n<td>\\d</td>\n<td>\\d</td>\n</tr>\n<tr>\n<td>\\D</td>\n<td>单个非数字字符</td>\n<td>b\\Db 匹配bcb，不匹配b2b</td>\n<td>不支持</td>\n<td>不支持</td>\n<td>\\D</td>\n<td>\\D</td>\n</tr>\n<tr>\n<td>\\w</td>\n<td>单个单词字符（字母、数字与_）</td>\n<td>\\w 匹配1或a，不匹配&amp;</td>\n<td>\\w</td>\n<td>\\w</td>\n<td>\\w</td>\n<td>\\w</td>\n</tr>\n<tr>\n<td>\\W</td>\n<td>单个非单词字符</td>\n<td>\\W 匹配&amp;，不匹配1或a</td>\n<td>\\W</td>\n<td>\\W</td>\n<td>\\W</td>\n<td>\\W</td>\n</tr>\n<tr>\n<td>\\n</td>\n<td>换行符</td>\n<td>\\n 匹配一个新行</td>\n<td>不支持</td>\n<td>不支持</td>\n<td>\\n</td>\n<td>\\n</td>\n</tr>\n<tr>\n<td>\\s</td>\n<td>单个空白字符</td>\n<td>x\\sx 匹配x x，不匹配xx</td>\n<td>不支持</td>\n<td>不支持</td>\n<td>\\s</td>\n<td>\\s</td>\n</tr>\n<tr>\n<td>\\S</td>\n<td>单个非空白字符</td>\n<td>x\\S\\x 匹配xkx，不匹配xx</td>\n<td>不支持</td>\n<td>不支持</td>\n<td>\\S</td>\n<td>\\S</td>\n</tr>\n<tr>\n<td>\\r</td>\n<td>回车</td>\n<td>\\r 匹配回车</td>\n<td>不支持</td>\n<td>不支持</td>\n<td>\\r</td>\n<td>\\r</td>\n</tr>\n<tr>\n<td>\\t</td>\n<td>横向制表符</td>\n<td>\\t 匹配一个横向制表符</td>\n<td>不支持</td>\n<td>不支持</td>\n<td>\\t</td>\n<td>\\t</td>\n</tr>\n<tr>\n<td>\\v</td>\n<td>垂直制表符</td>\n<td>\\v 匹配一个垂直制表符</td>\n<td>不支持</td>\n<td>不支持</td>\n<td>\\v</td>\n<td>\\v</td>\n</tr>\n<tr>\n<td>\\f</td>\n<td>换页符</td>\n<td>\\f 匹配一个换页符</td>\n<td>不支持</td>\n<td>不支持</td>\n<td>\\f</td>\n<td>\\f</td>\n</tr>\n</tbody></table>\n","categories":["Linux"],"tags":["正则表达式"]},{"title":"虚拟机配置本地源","url":"/2022/03/20/Linux/%E8%99%9A%E6%8B%9F%E6%9C%BA%E9%85%8D%E7%BD%AE%E6%9C%AC%E5%9C%B0%E6%BA%90/","content":"<p><img src=\"https://i.loli.net/2021/08/02/cX51yi4KrLYRfJU.jpg\" alt=\"linux.jpg\">  </p>\n<span id=\"more\"></span>\n<h2 id=\"1-确保虚拟机加载了本地镜像\"><a href=\"#1-确保虚拟机加载了本地镜像\" class=\"headerlink\" title=\"1.确保虚拟机加载了本地镜像\"></a>1.确保虚拟机加载了本地镜像</h2><p><img src=\"/2022/03/20/Linux/%E8%99%9A%E6%8B%9F%E6%9C%BA%E9%85%8D%E7%BD%AE%E6%9C%AC%E5%9C%B0%E6%BA%90/%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%8A%A0%E8%BD%BD%E6%9C%AC%E5%9C%B0%E9%95%9C%E5%83%8F.png\" alt=\"虚拟机加载本地镜像\"></p>\n<h2 id=\"2-手动挂载镜像\"><a href=\"#2-手动挂载镜像\" class=\"headerlink\" title=\"2.手动挂载镜像\"></a>2.手动挂载镜像</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">mkdir /mnt/cdrom</span><br><span class=\"line\">mount /dev/cdrom /mnt/cdrom</span><br></pre></td></tr></table></figure>\n<h2 id=\"3-配置源文件\"><a href=\"#3-配置源文件\" class=\"headerlink\" title=\"3.配置源文件\"></a>3.配置源文件</h2><p>/etc/yum.repos.d/local.repo</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">[local]</span><br><span class=\"line\">name=local - repo</span><br><span class=\"line\">baseurl=file:///mnt/cdrom</span><br><span class=\"line\">enabled=1</span><br><span class=\"line\">gpgcheck=1</span><br><span class=\"line\">gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-CentOS-7</span><br></pre></td></tr></table></figure>\n<p><strong>[serid]</strong> : 仓库名，可自定义，但不能重复<br><strong>name</strong> ：随意起<br><strong>baseurl</strong>：指定yum源所在文件，软件包所在文件<br><strong>enabled</strong>：是否启用，1启用，0不启用<br><strong>gpgcheck</strong>：否进行gpg校验<br><strong>gpgkey</strong>：后面接的是gpgkey的地址，如果前面定义gpgcheck=1的话</p>\n<h2 id=\"4-为保证下次重启后还能够正常使用本地源，将-dev-cdrom设置开机挂载即可\"><a href=\"#4-为保证下次重启后还能够正常使用本地源，将-dev-cdrom设置开机挂载即可\" class=\"headerlink\" title=\"4.为保证下次重启后还能够正常使用本地源，将/dev/cdrom设置开机挂载即可\"></a>4.为保证下次重启后还能够正常使用本地源，将/dev/cdrom设置开机挂载即可</h2>","categories":["Linux"],"tags":["本地源"]},{"title":"1-Kubernetes基本概念","url":"/2022/06/27/K8s/1-Kubernetes%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/","content":"<p><img src=\"https://s2.loli.net/2022/06/27/5UbYtS64yAIPXzM.jpg\" alt=\"k8s.jpg\">  </p>\n<span id=\"more\"></span>\n<h1 id=\"K8S概述\"><a href=\"#K8S概述\" class=\"headerlink\" title=\"K8S概述\"></a>K8S概述</h1><p>k8s是谷歌开源的容器化集群管理系统<br>使用k8s进行容器化应用部署<br>使用k8s利于应用扩展<br>k8s目标是让部署容器化应用更加简洁和高效  </p>\n<h1 id=\"K8S特性\"><a href=\"#K8S特性\" class=\"headerlink\" title=\"K8S特性\"></a>K8S特性</h1><ol>\n<li>自动装箱：基于容器对应用运行环境的资源配置要求自动化部署应用容器  </li>\n<li>自我修复（自愈能力）：当容器失败时，会对容器进行重启  </li>\n<li>水平扩展：对应用容器进行规模扩大或者规模剪裁  </li>\n<li>服务发现：通过K8S自身实现服务发现和负载均衡  </li>\n<li>滚动更新：进行一次性或者批量式更新  </li>\n<li>版本回退：历史版本即时回退  </li>\n<li>秘钥和配置管理：在不需要重新构建镜像的情况下，可以部署和更新秘钥和应用配置，类似热部署  </li>\n<li>存储编排：自动实现存储系统挂载和应用，存储系统可以来自于本地目录、网络存储、公有云存储服务  </li>\n<li>批处理：一次性任务、定时任务</li>\n</ol>\n<h1 id=\"K8S集群架构组件\"><a href=\"#K8S集群架构组件\" class=\"headerlink\" title=\"K8S集群架构组件\"></a>K8S集群架构组件</h1><p><img src=\"/2022/06/27/K8s/1-Kubernetes%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/k8s%E6%9E%B6%E6%9E%84%E5%9B%BE.png\" alt=\"K8s架构图\">  </p>\n<h2 id=\"master组件\"><a href=\"#master组件\" class=\"headerlink\" title=\"master组件\"></a>master组件</h2><ol>\n<li>APIserver：集群统一入口，以restful方式，交给etcd存储  </li>\n<li>scheduler：资源调度，选择node节点部署应用  </li>\n<li>controller-manager：处理集群中常规后台任务，一个资源对应一个控制器  </li>\n<li>etcd：存储系统，用于保存集群相关的数据   </li>\n</ol>\n<h2 id=\"node组件\"><a href=\"#node组件\" class=\"headerlink\" title=\"node组件\"></a>node组件</h2><ol>\n<li>kubelet：master在node中的代表，管理本机容器  </li>\n<li>kube-proxy：提供网络代理，负载均衡  </li>\n</ol>\n<h2 id=\"其他插件说明\"><a href=\"#其他插件说明\" class=\"headerlink\" title=\"其他插件说明\"></a>其他插件说明</h2><ol>\n<li>COREDNS：可以为集群中的SVC创建一个域名IP的对应关系解析</li>\n<li>DASHBOARD：给 K8S 集群提供一个 B/S 结构访问体系</li>\n<li>INGRESS CONTROLLER：官方只能实现四层代理，INGRESS 可以实现七层代理</li>\n<li>FEDERATION：提供一个可以跨集群中心多K8S统一管理功能</li>\n<li>PROMETHEUS：提供K8S集群的监控能力</li>\n<li>ELK：提供 K8S 集群日志统一分析介入平台</li>\n<li>Flannel：网络插件，Flannel可分配的IP地址段资源保存在ETCD中，监控ETCD中每个pod的实际地址，并在内存中建立维护pod节点路由表  </li>\n</ol>\n<h1 id=\"K8S核心概念\"><a href=\"#K8S核心概念\" class=\"headerlink\" title=\"K8S核心概念\"></a>K8S核心概念</h1><ol>\n<li>pod  </li>\n</ol>\n<ul>\n<li>最小部署单元  </li>\n<li>一组容器的集合  </li>\n<li>pod内共享网络  </li>\n<li>生命周期是短暂的（服务器重启后就找不到了）  </li>\n</ul>\n<ol start=\"2\">\n<li>controller  </li>\n</ol>\n<ul>\n<li>确保预期的pod副本数量（replicaSet）  </li>\n<li>一次性任务和定时任务（job和cronjob）  </li>\n<li>有状态应用部署（statefulSet）与无状态应用部署（Depoltment）（无状态应用部署即无部署或使用条件，有条件应用部署反之）  </li>\n<li>确保所有的node同时运行一个pod（DaemonSet）  </li>\n</ul>\n<ol start=\"3\">\n<li>service  </li>\n</ol>\n<ul>\n<li>定义一组pod的访问规则  </li>\n<li>pod的负载均衡，提供一个或多个pod的稳定的访问地址  </li>\n</ul>\n<ol start=\"4\">\n<li>volume  </li>\n</ol>\n<ul>\n<li>声明在pod中可以访问的文件目录  </li>\n<li>可以被挂载到一个或多个容器指定路径下</li>\n<li>支持多种后端存储  </li>\n</ul>\n<ol start=\"5\">\n<li>deployment  </li>\n</ol>\n<ul>\n<li>定义一组pod副本数目，版本等  </li>\n<li>通过控制器controller维持pod数目  </li>\n<li>通过控制器以指定的策略控制版本  </li>\n</ul>\n<ol start=\"6\">\n<li>label  </li>\n</ol>\n<ul>\n<li>标签，用于对对象资源查询、筛选  </li>\n</ul>\n<ol start=\"7\">\n<li>namespace  </li>\n</ol>\n<ul>\n<li>命名空间，逻辑隔离  </li>\n<li>一个集群内部的逻辑隔离机制（鉴权、资源）  </li>\n<li>每一个资源都属于一个namespace  </li>\n<li>同一个namespace中所有资源不能重复  </li>\n<li>不同namespace中的资源名可以重复  </li>\n</ul>\n<h1 id=\"完整流程\"><a href=\"#完整流程\" class=\"headerlink\" title=\"完整流程\"></a>完整流程</h1><ol>\n<li>通过kubectl提交一个创建replication controller（RC），亲通过APIserver写入到etcd中  </li>\n<li>controller-manager通过APIserver监听到此RC  </li>\n<li>分析之后发现集群中还没有它对应的pod  </li>\n<li>根据RC中的pod模板定义一个生成pod对象，通过APIserver写入到etcd中  </li>\n<li>此事件被scheduler发现，立即执行一个复杂的调度流程，为这个pod选定一个node，然后通过APIserver将这一事件写入到etcd中  </li>\n<li>目标node上云心给的kubelet进程通过APIserver检测到这个新的pod，并按照他的定义启动该pod，并进行管理  </li>\n<li>随后通过kubectl提交一个新的映射到该pod的service的创建请求  </li>\n<li>controller-manager通过label标签查询到关联的pod实例，然后生成service的endpoints信息，并通过APIserver写入到etcd中  </li>\n<li>所有node上运行的proxy进程通过APIserver查询并监听service对象与对应的endpoints信息，建立一个软件方式的负载均衡来实现service访问到后端pod的流量转发功能  </li>\n</ol>\n<p>endpoints：endpoint是k8s集群中的一个资源对象，存储在etcd中，用来记录一个service对应的所有pod的访问地址。service配置selector，endpoint controller才会自动创建对应的endpoint对象；否则，不会生成endpoint对象  </p>\n","categories":["Kubernetes"],"tags":["K8s基本概念"]},{"title":"2-K8S集群部署","url":"/2022/06/27/K8s/2-K8S%E9%9B%86%E7%BE%A4%E9%83%A8%E7%BD%B2/","content":"<p><img src=\"https://s2.loli.net/2022/06/27/5UbYtS64yAIPXzM.jpg\" alt=\"k8s.jpg\">  </p>\n<span id=\"more\"></span>\n\n<h1 id=\"测试环境硬件要求\"><a href=\"#测试环境硬件要求\" class=\"headerlink\" title=\"测试环境硬件要求\"></a>测试环境硬件要求</h1><ul>\n<li>master：2核、4G、20G  </li>\n<li>node：4核 8G 40G  </li>\n</ul>\n<h1 id=\"k8s集群搭建方式\"><a href=\"#k8s集群搭建方式\" class=\"headerlink\" title=\"k8s集群搭建方式\"></a>k8s集群搭建方式</h1><ol>\n<li>kubeadm<br>kubeadm是一个k8s部署工具，提供kubeadm init和kubeadm join  </li>\n<li>二进制包<br>下载发行版二进制包，手动部署每个组件，组成k8s  </li>\n</ol>\n<h1 id=\"kubeadm部署方式介绍\"><a href=\"#kubeadm部署方式介绍\" class=\"headerlink\" title=\"kubeadm部署方式介绍\"></a>kubeadm部署方式介绍</h1><p>kubeadm是官方社区推出的一个用于快速部署k8s集群的工具，这个工具能通过两条指令完成一个k8s集群的部署<br>第一、创建一个master节点  kubeadm init<br>第二、将node节点加入到当前集群中 kubeadm join  </p>\n<h2 id=\"安装部署要求\"><a href=\"#安装部署要求\" class=\"headerlink\" title=\"安装部署要求\"></a>安装部署要求</h2><ol>\n<li>硬件配置：2G或更多，2个CPU或更多，硬盘30G或更多  </li>\n<li>集群中所有机器网络互通  </li>\n<li>可以访问外网，需要拉取镜像  </li>\n<li>禁止swap分区  </li>\n</ol>\n<h2 id=\"安装步骤\"><a href=\"#安装步骤\" class=\"headerlink\" title=\"安装步骤\"></a>安装步骤</h2><ol>\n<li>在所有节点上安装docker、kubeadm  </li>\n<li>部署k8s master  </li>\n<li>部署容器网络插件  </li>\n<li>部署k8s node节点，将节点加入到k8s集群中  </li>\n<li>部署 dashboard web页面，可视化查看k8s资源  </li>\n</ol>\n<h2 id=\"准备环境\"><a href=\"#准备环境\" class=\"headerlink\" title=\"准备环境\"></a>准备环境</h2><table>\n<thead>\n<tr>\n<th align=\"center\">角色</th>\n<th align=\"center\">IP</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">master</td>\n<td align=\"center\">192.168.27.8</td>\n</tr>\n<tr>\n<td align=\"center\">node1</td>\n<td align=\"center\">192.168.27.9</td>\n</tr>\n<tr>\n<td align=\"center\">node1</td>\n<td align=\"center\">192.168.27.10</td>\n</tr>\n</tbody></table>\n<h2 id=\"系统初始化\"><a href=\"#系统初始化\" class=\"headerlink\" title=\"系统初始化\"></a>系统初始化</h2><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">关闭防火墙</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> systemctl stop firewalld</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> systemctl <span class=\"built_in\">disable</span> firewalld</span></span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">关闭 selinux</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> sed -i <span class=\"string\">&#x27;s/enforcing/disabled/&#x27;</span> /etc/selinux/config <span class=\"comment\"># 永久</span></span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> setenforce 0 <span class=\"comment\"># 临时</span></span></span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">关闭 swap</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> swapoff -a <span class=\"comment\"># 临时</span></span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> vim /etc/fstab <span class=\"comment\"># 永久</span></span></span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">主机名</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> hostnamectl set-hostname &lt;hostname&gt;</span></span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">在 master 添加 hosts</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> cat &gt;&gt; /etc/hosts &lt;&lt; <span class=\"string\">EOF</span></span></span><br><span class=\"line\">192.168.27.8 k8s-master</span><br><span class=\"line\">192.168.27.9 k8s-node1</span><br><span class=\"line\">192.168.27.10 k8s-node2</span><br><span class=\"line\">EOF</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"string\">将桥接的 IPv4 流量传递到 iptables 的链</span></span>  </span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"><span class=\"string\"> cat &gt; /etc/sysctl.d/k8s.conf &lt;&lt; EOF</span></span></span><br><span class=\"line\">net.bridge.bridge-nf-call-ip6tables = 1</span><br><span class=\"line\">net.bridge.bridge-nf-call-iptables = 1</span><br><span class=\"line\">EOF</span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> sysctl --system <span class=\"comment\"># 生效</span></span></span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">时间同步</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> yum install ntpdate -y</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> ntpdate time.windows.com</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"所有节点安装docker-kubeadm-kubelet\"><a href=\"#所有节点安装docker-kubeadm-kubelet\" class=\"headerlink\" title=\"所有节点安装docker/kubeadm/kubelet\"></a>所有节点安装docker/kubeadm/kubelet</h2><ol>\n<li><p>安装docker  </p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">wget https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo -O /etc/yum.repos.d/docker-ce.repo</span><br><span class=\"line\">yum -y install docker-ce-18.06.1.ce-3.el7</span><br><span class=\"line\">systemctl enable docker &amp;&amp; systemctl start docker</span><br><span class=\"line\">docker --version</span><br></pre></td></tr></table></figure></li>\n<li><p>设置镜像加速器  </p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo mkdir -p /etc/docker</span><br><span class=\"line\">sudo tee /etc/docker/daemon.json &lt;&lt;-&#x27;EOF&#x27;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;registry-mirrors&quot;: [&quot;https://det35a19.mirror.aliyuncs.com&quot;]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">EOF</span><br><span class=\"line\">sudo systemctl daemon-reload</span><br><span class=\"line\">sudo systemctl restart docker</span><br></pre></td></tr></table></figure></li>\n<li><p>添加k8s软件源<br>使用的是阿里云镜像</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">cat &lt;&lt;EOF &gt; /etc/yum.repos.d/kubernetes.repo</span><br><span class=\"line\">[kubernetes]</span><br><span class=\"line\">name=Kubernetes</span><br><span class=\"line\">baseurl=https://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64/</span><br><span class=\"line\">enabled=1</span><br><span class=\"line\">gpgcheck=1</span><br><span class=\"line\">repo_gpgcheck=1</span><br><span class=\"line\">gpgkey=https://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg https://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpg</span><br><span class=\"line\">EOF</span><br></pre></td></tr></table></figure></li>\n<li><p>安装kubelet/kubeadm/kubectl  </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">yum install -y kubelet kubeadm kubectl</span><br><span class=\"line\">systemctl enable kubelet &amp;&amp; systemctl start kubelet</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h2 id=\"部署k8s-master\"><a href=\"#部署k8s-master\" class=\"headerlink\" title=\"部署k8s master\"></a>部署k8s master</h2><ol>\n<li>在master节点执行  <figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">apiserver后的IP为master节点IP</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">image-repository指定阿里云镜像仓库</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">指定k8s版本</span></span><br><span class=\"line\"> kubeadm init \\</span><br><span class=\"line\">--apiserver-advertise-address=192.168.27.8 \\    </span><br><span class=\"line\">--image-repository registry.aliyuncs.com/google_containers \\</span><br><span class=\"line\">--kubernetes-version v1.17.0 \\</span><br><span class=\"line\">--service-cidr=10.96.0.0/12 \\</span><br><span class=\"line\">--pod-network-cidr=10.244.0.0/16</span><br></pre></td></tr></table></figure></li>\n</ol>\n<p><strong>执行完成后会在末尾显示kubeadm join….内容，此为node节点添加到集群中时使用的命令，有效时长为24小时,过期后就需要重新创建token</strong>  </p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">kubeadm token create --print-join-command</span><br><span class=\"line\">kubeadm token list</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>根据上一步执行提示执行以下命令  <figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">mkdir -p $HOME/.kube</span><br><span class=\"line\">sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config</span><br><span class=\"line\">sudo chown $(id -u):$(id -g) $HOME/.kube/config</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h2 id=\"安装pod网络插件\"><a href=\"#安装pod网络插件\" class=\"headerlink\" title=\"安装pod网络插件\"></a>安装pod网络插件</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">kubectl apply –f https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-sflannel.yml</span><br><span class=\"line\"></span><br><span class=\"line\">kubectl get pods -n kube-system </span><br></pre></td></tr></table></figure>\n<p>因为是国外的源，可能会失败，可以尝试多试几次或者找国内的源  </p>\n<h2 id=\"将node节点加入到k8s集群中\"><a href=\"#将node节点加入到k8s集群中\" class=\"headerlink\" title=\"将node节点加入到k8s集群中\"></a>将node节点加入到k8s集群中</h2><p>在执行kubeadm init 后末尾显示的命令在其他node中执行  </p>\n<h2 id=\"测试k8s集群\"><a href=\"#测试k8s集群\" class=\"headerlink\" title=\"测试k8s集群\"></a>测试k8s集群</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">kubectl create deployment nginx --image=nginx</span><br><span class=\"line\">kubectl expose deployment nginx --port=80 --type=NodePort</span><br><span class=\"line\">kubectl get pod,svc</span><br></pre></td></tr></table></figure>\n<p>访问地址：http://NodeIP:Port  </p>\n<h1 id=\"二进制方式部署【待】\"><a href=\"#二进制方式部署【待】\" class=\"headerlink\" title=\"二进制方式部署【待】\"></a>二进制方式部署【待】</h1><h2 id=\"安装部署要求-1\"><a href=\"#安装部署要求-1\" class=\"headerlink\" title=\"安装部署要求\"></a>安装部署要求</h2><ol>\n<li>硬件配置：2G或更多，2个CPU或更多，硬盘30G或更多  </li>\n<li>集群中所有机器网络互通  </li>\n<li>可以访问外网，需要拉取镜像  </li>\n<li>禁止swap分区  </li>\n</ol>\n<h2 id=\"准备环境-1\"><a href=\"#准备环境-1\" class=\"headerlink\" title=\"准备环境\"></a>准备环境</h2><h3 id=\"软件环境\"><a href=\"#软件环境\" class=\"headerlink\" title=\"软件环境\"></a>软件环境</h3><table>\n<thead>\n<tr>\n<th align=\"center\">软件</th>\n<th align=\"center\">版本</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">docker</td>\n<td align=\"center\">19-ce</td>\n</tr>\n<tr>\n<td align=\"center\">kubernetes</td>\n<td align=\"center\">1.19</td>\n</tr>\n</tbody></table>\n<h3 id=\"服务器规划\"><a href=\"#服务器规划\" class=\"headerlink\" title=\"服务器规划\"></a>服务器规划</h3><table>\n<thead>\n<tr>\n<th align=\"center\">角色</th>\n<th align=\"center\">IP</th>\n<th align=\"center\">组件</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">k8s-master</td>\n<td align=\"center\">192.168.27.8</td>\n<td align=\"center\">kube-apiserver，kube-controller-manager，kube-scheduler，etcd</td>\n</tr>\n<tr>\n<td align=\"center\">k8s-node1</td>\n<td align=\"center\">192.168.27.9</td>\n<td align=\"center\">kubelet，kube-proxy，docker etcd</td>\n</tr>\n<tr>\n<td align=\"center\">k8s-node2</td>\n<td align=\"center\">192.168.27.10</td>\n<td align=\"center\">kubelet，kube-proxy，docker，etcd</td>\n</tr>\n</tbody></table>\n<h2 id=\"系统初始化-1\"><a href=\"#系统初始化-1\" class=\"headerlink\" title=\"系统初始化\"></a>系统初始化</h2><p>相关操作与kuneadm部署中系统初始化一样  </p>\n<h2 id=\"部署etcd集群\"><a href=\"#部署etcd集群\" class=\"headerlink\" title=\"部署etcd集群\"></a>部署etcd集群</h2><p>etcd是一个分布式的键值存储系统，kubernetes使用功能etcd进行数据存储</p>\n","categories":["Kubernetes"],"tags":["K8S集群部署"]},{"title":"3-k8s集群管理工具kubectl","url":"/2022/06/28/K8s/3-k8s%E9%9B%86%E7%BE%A4%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7kubectl/","content":"<p><img src=\"https://s2.loli.net/2022/06/27/5UbYtS64yAIPXzM.jpg\" alt=\"k8s.jpg\">  </p>\n<span id=\"more\"></span>\n<h1 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h1><p>kubectl是k8s集群的命令行工具，通过kubectl能够对集群本身进行管理，并能够在集群上进行容器化应用的安装和部署  </p>\n<h1 id=\"命令格式\"><a href=\"#命令格式\" class=\"headerlink\" title=\"命令格式\"></a>命令格式</h1><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">kubectl [command] [type] [name] [flags]</span><br></pre></td></tr></table></figure>\n<p><strong>参数</strong><br><strong>command</strong>：指定要对资源执行的操作，例如：create、get、describe、delete<br><strong>type</strong>：指定资源类型，资源类型是大小写敏感的，可以使用单数、复数、缩略的形式<br><strong>name</strong>：资源的名称，大小写敏感，且可以省略，省略则会显示所有的资源<br><strong>flags</strong>：指定可选参数  </p>\n<h2 id=\"kubectl中的简写\"><a href=\"#kubectl中的简写\" class=\"headerlink\" title=\"kubectl中的简写\"></a>kubectl中的简写</h2><p>certificatesigningrequests (缩写 csr)<br>componentstatuses (缩写 cs)<br>configmaps (缩写 cm)<br>customresourcedefinition (缩写 crd)<br><strong>daemonsets (缩写 ds)</strong><br><strong>deployments (缩写 deploy)</strong><br>endpoints (缩写 ep)<br>events (缩写 ev)<br>horizontalpodautoscalers (缩写 hpa)<br>ingresses (缩写 ing)<br>limitranges (缩写 limits)<br>namespaces (缩写 ns)<br>networkpolicies (缩写 netpol)<br><strong>nodes (缩写 no)</strong><br>persistentvolumeclaims (缩写 pvc)<br>persistentvolumes (缩写 pv)<br>poddisruptionbudgets (缩写 pdb)<br><strong>pods (缩写 po)</strong><br>podsecuritypolicies (缩写 psp)<br><strong>replicasets (缩写 rs)</strong><br>replicationcontrollers (缩写 rc)<br>resourcequotas (缩写 quota)<br>serviceaccounts (缩写 sa)<br><strong>services (缩写 svc)</strong><br><strong>statefulsets (缩写 sts)</strong><br>storageclasses (缩写 sc)</p>\n<h2 id=\"获取帮助信息\"><a href=\"#获取帮助信息\" class=\"headerlink\" title=\"获取帮助信息\"></a>获取帮助信息</h2><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 获取kubectl帮助信息</span></span><br><span class=\"line\">kubectl --help</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 获取某个命令的介绍和使用</span>  </span><br><span class=\"line\">kubectl get --help</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"基础命令\"><a href=\"#基础命令\" class=\"headerlink\" title=\"基础命令\"></a>基础命令</h2><table>\n<thead>\n<tr>\n<th align=\"center\">命令</th>\n<th align=\"center\">介绍</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">create</td>\n<td align=\"center\">通过文件名或者标准输入创建资源</td>\n</tr>\n<tr>\n<td align=\"center\">expose</td>\n<td align=\"center\">使用 replication controller, service, deployment 或者 pod并暴露它作为一个 新的 Kubernetes Service</td>\n</tr>\n<tr>\n<td align=\"center\">run</td>\n<td align=\"center\">在集群中运行一个指定镜像</td>\n</tr>\n<tr>\n<td align=\"center\">set</td>\n<td align=\"center\">在对象上设定特定的功能</td>\n</tr>\n<tr>\n<td align=\"center\">get</td>\n<td align=\"center\">显示一个或多个资源</td>\n</tr>\n<tr>\n<td align=\"center\">edit</td>\n<td align=\"center\">编辑一个资源</td>\n</tr>\n<tr>\n<td align=\"center\">delete</td>\n<td align=\"center\">通过文件名、标准输入、资源名、标签来删除资源</td>\n</tr>\n</tbody></table>\n<h2 id=\"create\"><a href=\"#create\" class=\"headerlink\" title=\"create\"></a>create</h2><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">kubectl create -f FILENAEM  #使用yaml文件创建资源</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"部署命令\"><a href=\"#部署命令\" class=\"headerlink\" title=\"部署命令\"></a>部署命令</h2><table>\n<thead>\n<tr>\n<th align=\"center\">命令</th>\n<th align=\"center\">介绍</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">rollout</td>\n<td align=\"center\">管理资源的发布</td>\n</tr>\n<tr>\n<td align=\"center\">scale</td>\n<td align=\"center\">为deployment、replicaSet、replicaController、job设置一个新的副本数量</td>\n</tr>\n<tr>\n<td align=\"center\">autoscale</td>\n<td align=\"center\">动调整一个 Deployment, ReplicaSet, 或者 ReplicationController的副本数量</td>\n</tr>\n</tbody></table>\n<h2 id=\"集群管理命令\"><a href=\"#集群管理命令\" class=\"headerlink\" title=\"集群管理命令\"></a>集群管理命令</h2><table>\n<thead>\n<tr>\n<th align=\"center\">命令</th>\n<th align=\"center\">介绍</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">certificate</td>\n<td align=\"center\">修改证书资源</td>\n</tr>\n<tr>\n<td align=\"center\">cluster-info</td>\n<td align=\"center\">显示集群信息</td>\n</tr>\n<tr>\n<td align=\"center\">top</td>\n<td align=\"center\">显示资源</td>\n</tr>\n<tr>\n<td align=\"center\">cordon</td>\n<td align=\"center\">标记 node 为不可被调度</td>\n</tr>\n<tr>\n<td align=\"center\">uncordon</td>\n<td align=\"center\">标记 node 为 可被调度</td>\n</tr>\n<tr>\n<td align=\"center\">drain</td>\n<td align=\"center\">驱逐节点上的应用，准备下线维护</td>\n</tr>\n<tr>\n<td align=\"center\">taint</td>\n<td align=\"center\">更新一个或者多个 node 上的 taints</td>\n</tr>\n</tbody></table>\n<h2 id=\"故障和调试命令\"><a href=\"#故障和调试命令\" class=\"headerlink\" title=\"故障和调试命令\"></a>故障和调试命令</h2><table>\n<thead>\n<tr>\n<th align=\"center\">命令</th>\n<th align=\"center\">介绍</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">describe</td>\n<td align=\"center\">显示特定资源或资源组的详细信息</td>\n</tr>\n<tr>\n<td align=\"center\">log</td>\n<td align=\"center\">输出容器在 pod 中的日志</td>\n</tr>\n<tr>\n<td align=\"center\">attach</td>\n<td align=\"center\">连接到现有容器中一个正在运行的进程</td>\n</tr>\n<tr>\n<td align=\"center\">exec</td>\n<td align=\"center\">执行命令到容器</td>\n</tr>\n<tr>\n<td align=\"center\">port-forward</td>\n<td align=\"center\">将一个或多个本地端口转发到pod</td>\n</tr>\n<tr>\n<td align=\"center\">proxy</td>\n<td align=\"center\">运行一个 proxy 到 Kubernetes API server</td>\n</tr>\n<tr>\n<td align=\"center\">cp</td>\n<td align=\"center\">拷贝文件或目录到容器中</td>\n</tr>\n<tr>\n<td align=\"center\">auth</td>\n<td align=\"center\">检查授权</td>\n</tr>\n</tbody></table>\n<h2 id=\"其他命令\"><a href=\"#其他命令\" class=\"headerlink\" title=\"其他命令\"></a>其他命令</h2><table>\n<thead>\n<tr>\n<th align=\"center\">命令</th>\n<th align=\"center\">介绍</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">apply</td>\n<td align=\"center\">通过文件名或标准输入对资源应用的配置</td>\n</tr>\n<tr>\n<td align=\"center\">patch</td>\n<td align=\"center\">使用补丁修改、更新资源的字段</td>\n</tr>\n<tr>\n<td align=\"center\">replace</td>\n<td align=\"center\">通过文件名或标准输入替换一个资源</td>\n</tr>\n<tr>\n<td align=\"center\">convert</td>\n<td align=\"center\">不同API版本之前转换配置文件</td>\n</tr>\n<tr>\n<td align=\"center\">label</td>\n<td align=\"center\">更新资源上的标签</td>\n</tr>\n<tr>\n<td align=\"center\">annotate</td>\n<td align=\"center\">更新资源上的注释</td>\n</tr>\n<tr>\n<td align=\"center\">completion</td>\n<td align=\"center\">用于实现kubectl工具自动补全</td>\n</tr>\n<tr>\n<td align=\"center\">config</td>\n<td align=\"center\">修改k8s文件</td>\n</tr>\n<tr>\n<td align=\"center\">plugin</td>\n<td align=\"center\">运行一个命令行插件</td>\n</tr>\n<tr>\n<td align=\"center\">version</td>\n<td align=\"center\">打印客户端和服务版本信息</td>\n</tr>\n</tbody></table>\n","categories":["Kubernetes"],"tags":["K8S集群管理工具kubectl"]},{"title":"4-YAML文件介绍","url":"/2022/06/29/K8s/4-YAML%E6%96%87%E4%BB%B6%E4%BB%8B%E7%BB%8D/","content":"<p><img src=\"https://s2.loli.net/2022/06/27/5UbYtS64yAIPXzM.jpg\" alt=\"k8s.jpg\">  </p>\n<span id=\"more\"></span>\n<h1 id=\"YAMl\"><a href=\"#YAMl\" class=\"headerlink\" title=\"YAMl\"></a>YAMl</h1><p>跳转至 <a href=\"/2022/03/24/YAML/YAML%E5%9F%BA%E7%A1%80/\" title=\"YAML基础\">YAML基础</a> 进行YAML学习。  </p>\n<h2 id=\"k8s中YAML\"><a href=\"#k8s中YAML\" class=\"headerlink\" title=\"k8s中YAML\"></a>k8s中YAML</h2><p>k8s集群中对资源管理和资源对象编排部署都可由通过YAML文件来解决，也就是把需要对资源对象操作编辑到YAML文件中，把这种文件叫做<strong>资源清单文件</strong>，通过kubectl命令直接使用资源清单文件可以实现对大量的资源对象进行编排部署。  </p>\n<h2 id=\"k8s中YAML文件组成部分\"><a href=\"#k8s中YAML文件组成部分\" class=\"headerlink\" title=\"k8s中YAML文件组成部分\"></a>k8s中YAML文件组成部分</h2><p><img src=\"/2022/06/29/K8s/4-YAML%E6%96%87%E4%BB%B6%E4%BB%8B%E7%BB%8D/YAML.png\" alt=\"YAML\">  </p>\n<h2 id=\"属性说明\"><a href=\"#属性说明\" class=\"headerlink\" title=\"属性说明\"></a>属性说明</h2><table>\n<thead>\n<tr>\n<th align=\"center\">属性名称</th>\n<th align=\"center\">介绍</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">apiVersion</td>\n<td align=\"center\">API版本</td>\n</tr>\n<tr>\n<td align=\"center\">kind</td>\n<td align=\"center\">资源类型</td>\n</tr>\n<tr>\n<td align=\"center\">metadata</td>\n<td align=\"center\">资源元数据</td>\n</tr>\n<tr>\n<td align=\"center\">spec</td>\n<td align=\"center\">资源规格</td>\n</tr>\n<tr>\n<td align=\"center\">replicas</td>\n<td align=\"center\">副本数量</td>\n</tr>\n<tr>\n<td align=\"center\">selector</td>\n<td align=\"center\">标签选择器</td>\n</tr>\n<tr>\n<td align=\"center\">template</td>\n<td align=\"center\">pod模板</td>\n</tr>\n<tr>\n<td align=\"center\">containers</td>\n<td align=\"center\">容器配置</td>\n</tr>\n</tbody></table>\n<h2 id=\"快速编写YAML文件\"><a href=\"#快速编写YAML文件\" class=\"headerlink\" title=\"快速编写YAML文件\"></a>快速编写YAML文件</h2><p>一般很少手写YAML文件，一般会借助工具来创建  </p>\n<h3 id=\"使用kubectl-create\"><a href=\"#使用kubectl-create\" class=\"headerlink\" title=\"使用kubectl create\"></a>使用kubectl create</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">kubectl create deployment web --image=nginx -o yaml --dry-run &gt; lmy.yml</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"使用kubectl-get-deployment\"><a href=\"#使用kubectl-get-deployment\" class=\"headerlink\" title=\"使用kubectl get deployment\"></a>使用kubectl get deployment</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">kubectl get deployment web -o yaml --export &gt; lmy.yml</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"使用yaml文件创建资源\"><a href=\"#使用yaml文件创建资源\" class=\"headerlink\" title=\"使用yaml文件创建资源\"></a>使用yaml文件创建资源</h2><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">kubectl create -f FILENAME  #资源不存在则创建资源，资源存在则抛出异常</span><br><span class=\"line\">kubectl apply -f FILENAME   #资源不存在则创建资源，资源存在且文件中的配置改变则修改资源</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"yaml参数说明\"><a href=\"#yaml参数说明\" class=\"headerlink\" title=\"yaml参数说明\"></a>yaml参数说明</h2><figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span> <span class=\"comment\">#指定api版本，此值必须在kubectl apiversion中</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Pod</span> <span class=\"comment\">#指定创建资源的角色/类型</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span> <span class=\"comment\">#资源的元数据/属性</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">web04-pod</span> <span class=\"comment\">#资源的名字，在同一个namespace中必须唯一</span></span><br><span class=\"line\">  <span class=\"attr\">labels:</span> <span class=\"comment\">#设定资源的标签</span></span><br><span class=\"line\">    <span class=\"attr\">k8s-app:</span> <span class=\"string\">apache</span></span><br><span class=\"line\">    <span class=\"attr\">version:</span> <span class=\"string\">v1</span></span><br><span class=\"line\">    <span class=\"attr\">kubernetes.io/cluster-service:</span> <span class=\"string\">&quot;true&quot;</span></span><br><span class=\"line\">  <span class=\"attr\">annotations:</span>            <span class=\"comment\">#自定义注解列表</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">String</span>        <span class=\"comment\">#自定义注解名字</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span> <span class=\"comment\">#specification of the resource content 指定该资源的内容，定义，规范，目标状态，用户定义</span></span><br><span class=\"line\">  <span class=\"attr\">restartPolicy:</span> <span class=\"string\">Always</span> <span class=\"comment\">#表明该容器一直运行，默认k8s的策略，在此容器退出后，会立即创建一个相同的容器</span></span><br><span class=\"line\">                        <span class=\"comment\">#Onfailure，当容器停止且退出状态码不为0时，由kubelet自动重启该容器</span></span><br><span class=\"line\">                        <span class=\"comment\">#Never，不论容器运行状态如何，kubelet都不会重启该容器</span></span><br><span class=\"line\">  <span class=\"attr\">nodeSelector:</span>     <span class=\"comment\">#节点选择，先给主机打标签kubectl label nodes kube-node1 zone=node1</span></span><br><span class=\"line\">    <span class=\"attr\">zone:</span> <span class=\"string\">node1</span></span><br><span class=\"line\">  <span class=\"attr\">containers:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">web04-pod</span> <span class=\"comment\">#容器的名字</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">web:apache</span> <span class=\"comment\">#容器使用的镜像地址</span></span><br><span class=\"line\">    <span class=\"attr\">imagePullPolicy:</span> <span class=\"string\">Never</span> <span class=\"comment\">#三个选择Always、Never、IfNotPresent，每次启动时检查和更新（从registery）images的策略，</span></span><br><span class=\"line\">                           <span class=\"comment\"># Always，每次都重新拉取镜像</span></span><br><span class=\"line\">                           <span class=\"comment\"># Never，仅使用本地镜像</span></span><br><span class=\"line\">                           <span class=\"comment\"># IfNotPresent，如果本地有就用本地镜像，如果没有就拉取</span></span><br><span class=\"line\">    <span class=\"attr\">command:</span> [<span class=\"string\">&#x27;sh&#x27;</span>] <span class=\"comment\">#启动容器的运行命令，将覆盖容器中的Entrypoint,对应Dockefile中的ENTRYPOINT</span></span><br><span class=\"line\">    <span class=\"attr\">args:</span> [<span class=\"string\">&quot;$(str)&quot;</span>] <span class=\"comment\">#启动容器的命令参数，对应Dockerfile中CMD参数</span></span><br><span class=\"line\">    <span class=\"attr\">env:</span> <span class=\"comment\">#指定容器中的环境变量</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">str</span> <span class=\"comment\">#变量的名字</span></span><br><span class=\"line\">      <span class=\"attr\">value:</span> <span class=\"string\">&quot;/etc/run.sh&quot;</span> <span class=\"comment\">#变量的值</span></span><br><span class=\"line\">    <span class=\"attr\">resources:</span> <span class=\"comment\">#资源管理</span></span><br><span class=\"line\">      <span class=\"attr\">requests:</span> <span class=\"comment\">#容器运行时，最低资源需求，也就是说最少需要多少资源容器才能正常运行</span></span><br><span class=\"line\">        <span class=\"attr\">cpu:</span> <span class=\"number\">0.1</span> <span class=\"comment\">#CPU资源（核数），两种方式，浮点数或者是整数+m，0.1=100m，最少值为0.001核（1m）</span></span><br><span class=\"line\">        <span class=\"attr\">memory:</span> <span class=\"string\">32Mi</span> <span class=\"comment\">#内存使用量</span></span><br><span class=\"line\">      <span class=\"attr\">limits:</span> <span class=\"comment\">#资源限制，表示最大占用的资源</span></span><br><span class=\"line\">        <span class=\"attr\">cpu:</span> <span class=\"number\">0.5</span></span><br><span class=\"line\">        <span class=\"attr\">memory:</span> <span class=\"string\">32Mi</span></span><br><span class=\"line\">    <span class=\"attr\">ports:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">containerPort:</span> <span class=\"number\">80</span> <span class=\"comment\">#容器开发对外的端口</span></span><br><span class=\"line\">      <span class=\"attr\">name:</span> <span class=\"string\">httpd</span>  <span class=\"comment\">#名称</span></span><br><span class=\"line\">      <span class=\"attr\">protocol:</span> <span class=\"string\">TCP</span></span><br><span class=\"line\">    <span class=\"attr\">livenessProbe:</span> <span class=\"comment\"># pod内容器健康检查的设置，检查失败将会杀死容器，然后根据restartPolicy来进行操作</span></span><br><span class=\"line\">      <span class=\"attr\">httpGet:</span> <span class=\"comment\">#通过httpget检查健康，返回200-399之间，则认为容器正常</span></span><br><span class=\"line\">        <span class=\"attr\">path:</span> <span class=\"string\">/</span> <span class=\"comment\">#URI地址</span></span><br><span class=\"line\">        <span class=\"attr\">port:</span> <span class=\"number\">80</span></span><br><span class=\"line\">        <span class=\"comment\">#host: 127.0.0.1 #主机地址</span></span><br><span class=\"line\">        <span class=\"attr\">scheme:</span> <span class=\"string\">HTTP</span></span><br><span class=\"line\">      <span class=\"attr\">initialDelaySeconds:</span> <span class=\"number\">180</span> <span class=\"comment\">#表明第一次检测在容器启动后多长时间后开始</span></span><br><span class=\"line\">      <span class=\"attr\">timeoutSeconds:</span> <span class=\"number\">5</span> <span class=\"comment\">#检测的超时时间</span></span><br><span class=\"line\">      <span class=\"attr\">periodSeconds:</span> <span class=\"number\">15</span>  <span class=\"comment\">#检查间隔时间</span></span><br><span class=\"line\">      <span class=\"comment\">#也可以用这种方法</span></span><br><span class=\"line\">      <span class=\"comment\">#exec: 执行命令的方法进行监测，如果其退出码不为0，则认为容器正常</span></span><br><span class=\"line\">      <span class=\"comment\">#  command:</span></span><br><span class=\"line\">      <span class=\"comment\">#    - cat</span></span><br><span class=\"line\">      <span class=\"comment\">#    - /tmp/health</span></span><br><span class=\"line\">      <span class=\"comment\">#也可以用这种方法</span></span><br><span class=\"line\">      <span class=\"comment\">#tcpSocket: //通过tcpSocket检查健康</span></span><br><span class=\"line\">      <span class=\"comment\">#  port: number</span></span><br><span class=\"line\">    <span class=\"attr\">lifecycle:</span> <span class=\"comment\">#生命周期管理</span></span><br><span class=\"line\">      <span class=\"attr\">postStart:</span> <span class=\"comment\">#容器运行之前运行的任务</span></span><br><span class=\"line\">        <span class=\"attr\">exec:</span></span><br><span class=\"line\">          <span class=\"attr\">command:</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"string\">&#x27;sh&#x27;</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"string\">&#x27;yum upgrade -y&#x27;</span></span><br><span class=\"line\">      <span class=\"attr\">preStop:</span> <span class=\"comment\">#容器关闭之前运行的任务</span></span><br><span class=\"line\">        <span class=\"attr\">exec:</span></span><br><span class=\"line\">          <span class=\"attr\">command:</span> [<span class=\"string\">&#x27;service httpd stop&#x27;</span>]</span><br><span class=\"line\">    <span class=\"attr\">volumeMounts:</span>  </span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">volume</span> <span class=\"comment\">#挂载设备的名字，与volumes[*].name 需要对应</span></span><br><span class=\"line\">      <span class=\"attr\">mountPath:</span> <span class=\"string\">/data</span> <span class=\"comment\">#挂载到容器的某个路径下</span></span><br><span class=\"line\">      <span class=\"attr\">readOnly:</span> <span class=\"literal\">True</span></span><br><span class=\"line\">  <span class=\"attr\">volumes:</span> <span class=\"comment\">#定义一组挂载设备</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">volume</span> <span class=\"comment\">#定义一个挂载设备的名字</span></span><br><span class=\"line\">    <span class=\"comment\">#meptyDir: &#123;&#125;</span></span><br><span class=\"line\">    <span class=\"attr\">hostPath:</span></span><br><span class=\"line\">      <span class=\"attr\">path:</span> <span class=\"string\">/opt</span> <span class=\"comment\">#挂载设备类型为hostPath，路径为宿主机下的/opt,这里设备类型支持很多种</span></span><br></pre></td></tr></table></figure>\n","categories":["Kubernetes"],"tags":["YAML文件介绍"]},{"title":"5-K8S核心技术pod","url":"/2022/06/29/K8s/5-K8S%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AFpod/","content":"<p><img src=\"https://s2.loli.net/2022/06/27/5UbYtS64yAIPXzM.jpg\" alt=\"k8s.jpg\">  </p>\n<span id=\"more\"></span>\n<h1 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h1><p>pod是k8s中最小的单元，是一个抽象的概念，是一组容器的集合，是资源对象模型中用户创建或部署的最小的资源对象模型，也是k8s上运行容器化应用的资源对象，其他对象都是用来支撑或扩展pod对象功能的。每一个pod都有一个特殊的被称为“根容器”的pause容器，pause容器对应的镜像属于k8s平台的一部分。<br>pause容器又叫infra容器，后面将介绍改容器的作用。<br><img src=\"/2022/06/29/K8s/5-K8S%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AFpod/pod.png\" alt=\"pod\">  </p>\n<h2 id=\"pod基本概念\"><a href=\"#pod基本概念\" class=\"headerlink\" title=\"pod基本概念\"></a>pod基本概念</h2><ul>\n<li>最小部署单元  </li>\n<li>pod是由一个或多个容器组成  </li>\n<li>一个pod内的容器共享网络命名空间  </li>\n<li>pod是短暂的  </li>\n<li>每个pod包含一个或多个紧密相关的用户业务容器  </li>\n</ul>\n<h2 id=\"pod存在的意义\"><a href=\"#pod存在的意义\" class=\"headerlink\" title=\"pod存在的意义\"></a>pod存在的意义</h2><ol>\n<li>容器是但进程设计，一个容器运行一个应用进程  </li>\n<li>pod是多进程设计，一个pod中可以有多个容器，可以运行多个应用进程  </li>\n<li>pod的存在是为了亲密作用  <ul>\n<li>多应用之间进行交互  </li>\n<li>网络之间的调用  </li>\n<li>多个应用之间需要频繁调用  </li>\n</ul>\n</li>\n</ol>\n<p>pod的设计理念是支持多个容器在pod中共享网络地址和文件系统，可以通过进程通信和文件共享这种简单高效的方式完成组合。可以将pod看做是运行在k8s上的小机器人，k8s的业务可以分为以下几种：  </p>\n<ul>\n<li>长期伺服型：long-running  </li>\n<li>批处理：batch  </li>\n<li>节点后台支撑型：node-deamon  </li>\n<li>有状态应用型：stateful application<br>对应的控制器分别为:deployment、job、deamonSet、statefulSet  </li>\n</ul>\n<h2 id=\"pod实现机制\"><a href=\"#pod实现机制\" class=\"headerlink\" title=\"pod实现机制\"></a>pod实现机制</h2><p>容器本身之间是隔离的，一般通过namespace和group进行隔离，而pod中共享网络、共享存储是通过pause容器来实现的  </p>\n<h3 id=\"pause容器\"><a href=\"#pause容器\" class=\"headerlink\" title=\"pause容器\"></a>pause容器</h3><p>pause容器又叫infra容器，每个pod中都会有一个pause容器，其他容器称为业务容器，这些业务容器共享pause容器的网络和volume挂载卷；因此容器之间的通信和数据交换更为高效，可以充分利用这一点将一组密切关系的服务放在一个pod中；同一个pod中的容器之间使用localhost就能互相通信。这样pause容器就实现了pod内的共享网络与共享存储。  </p>\n<h3 id=\"pause提供的功能\"><a href=\"#pause提供的功能\" class=\"headerlink\" title=\"pause提供的功能\"></a>pause提供的功能</h3><ul>\n<li><em><strong>PID命名空间：作为Pod的“init进程”（pid=1，也即所有其它容器的父容器，所有其它进程的父进程），负责僵尸进程的回收，1.8之后的版本默认不共享PID</strong></em></li>\n<li>网络命名空间：pod中的多个通容器可以访问同一个IP和端口范围  </li>\n<li>IPC命名空间：pod中的多个容器能够使用systemV IPC或POSIX消息队列进行通信  </li>\n<li>UTS命名空间：pod中的多个容器共享一个主机名、volume  </li>\n</ul>\n<h3 id=\"pause代码\"><a href=\"#pause代码\" class=\"headerlink\" title=\"pause代码\"></a>pause代码</h3><p><a href=\"https://github.com/kubernetes/kubernetes/blob/master/build/pause/linux/pause.c\">github pause代码</a>  </p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">Copyright 2016 The Kubernetes Authors.</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);</span></span><br><span class=\"line\"><span class=\"comment\">you may not use this file except in compliance with the License.</span></span><br><span class=\"line\"><span class=\"comment\">You may obtain a copy of the License at</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">    http://www.apache.org/licenses/LICENSE-2.0</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">Unless required by applicable law or agreed to in writing, software</span></span><br><span class=\"line\"><span class=\"comment\">distributed under the License is distributed on an &quot;AS IS&quot; BASIS,</span></span><br><span class=\"line\"><span class=\"comment\">WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span></span><br><span class=\"line\"><span class=\"comment\">See the License for the specific language governing permissions and</span></span><br><span class=\"line\"><span class=\"comment\">limitations under the License.</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;signal.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;string.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;sys/types.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;sys/wait.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;unistd.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> STRINGIFY(x) #x</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> VERSION_STRING(x) STRINGIFY(x)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifndef</span> VERSION</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> VERSION HEAD</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">sigdown</span><span class=\"params\">(<span class=\"keyword\">int</span> signo)</span> </span>&#123;</span><br><span class=\"line\">  psignal(signo, <span class=\"string\">&quot;Shutting down, got signal&quot;</span>);</span><br><span class=\"line\">  <span class=\"built_in\">exit</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">sigreap</span><span class=\"params\">(<span class=\"keyword\">int</span> signo)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (waitpid(<span class=\"number\">-1</span>, <span class=\"literal\">NULL</span>, WNOHANG) &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">    ;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span> **argv)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> i;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (i = <span class=\"number\">1</span>; i &lt; argc; ++i) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!strcasecmp(argv[i], <span class=\"string\">&quot;-v&quot;</span>)) &#123;</span><br><span class=\"line\">      <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;pause.c %s\\n&quot;</span>, VERSION_STRING(VERSION));</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (getpid() != <span class=\"number\">1</span>)</span><br><span class=\"line\">    <span class=\"comment\">/* Not an error because pause sees use outside of infra containers. */</span></span><br><span class=\"line\">    <span class=\"built_in\">fprintf</span>(<span class=\"built_in\">stderr</span>, <span class=\"string\">&quot;Warning: pause should be the first process\\n&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (sigaction(SIGINT, &amp;(struct sigaction)&#123;.sa_handler = sigdown&#125;, <span class=\"literal\">NULL</span>) &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (sigaction(SIGTERM, &amp;(struct sigaction)&#123;.sa_handler = sigdown&#125;, <span class=\"literal\">NULL</span>) &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">2</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (sigaction(SIGCHLD, &amp;(struct sigaction)&#123;.sa_handler = sigreap,</span><br><span class=\"line\">                                             .sa_flags = SA_NOCLDSTOP&#125;,</span><br><span class=\"line\">                <span class=\"literal\">NULL</span>) &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">3</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (;;)</span><br><span class=\"line\">    pause();</span><br><span class=\"line\">  <span class=\"built_in\">fprintf</span>(<span class=\"built_in\">stderr</span>, <span class=\"string\">&quot;Error: infinite loop terminated\\n&quot;</span>);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">42</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"共享namespace\"><a href=\"#共享namespace\" class=\"headerlink\" title=\"共享namespace\"></a>共享namespace</h3><p>在Linux系统中，创建一个新的子进程的时候，该进程就会集成父进程的namespace，k8s的pod就是模拟这种方式。创建pod时，里面第一个被创建的容器永远都是pause容器（系统自动创建），pause容器创建完成后才会创建用户业务容器，系统会为pause创建namespace，同一个pod内创建的业务容器都加入到pause容器的namespace，这样就处于同一个namespace中。从pause代码中可以发现最后是一个死循环+pause函数调用，pause函数的作用是让当前进程暂停，因为要维持namespace的存在就必须有一个属于这个namespace的进程或者文件存在，所以为了维护Pod里面pause创建的Namespace，pause就必须一直存在。  </p>\n<h3 id=\"充当系统init进程\"><a href=\"#充当系统init进程\" class=\"headerlink\" title=\"充当系统init进程\"></a>充当系统init进程</h3><p>在Linux系统中，pid=1的进程我们称之为“init”进程，是内核启动的第一个用户级进程，现在比较新的Linux发行版的init进程就是systemd进程。这个进程有许多工作，其中一个重要工作就是负责“收养孤儿进程”，防止产生太多僵尸进程。简单介绍一下相关的基本概念：Linux系统维护了一个进程表，记录每个进程的状态信息和退出码（exit code），当一个进程退出时，它在表中的信息会一直保留，直到其父进程调用wait（包括waitpid）获取其退出码。所谓僵尸进程就是进程已经退出了，但它的信息还在进程表里面。正常情况下，进程退出时父进程会马上查询该表，并回收子进程的相关资源，所以僵尸进程的持续状态一般都很短。但如果（1）父进程启动子进程之后没有调用wait或者（2）父进程先于子进程挂掉了，那子进程就会变成僵尸进程。如果是第2种情况，即父进程先于子进程死掉了，那操作系统就会把init进程设置为该父进程所有子进程的父进程，即init进程收养了该父进程的所有子进程。当这些子进程退出时，init进程就会充当父进程的角色，从而避免长时间的僵尸进程。但对于第1种情况，一般认为是代码有缺陷，这种情况因为子进程的父进程存在（只是没有调用wait而已），init进程是不会做处理的。此时子进程会成为僵尸进程长期存在，如果要消除这种僵尸进程，只能kill掉父进程。<br>而pause容器的第二个功能就是充当这个init进程，负责回收僵尸进程。从上面的代码可以看到，pause启动的时候会判断自己的pid是否为1。不过如果要实现该功能，则Pod内的所有容器必须和pause共享PID Namespace。在K8s 1.8版本之前默认是开启PID Namespace共享的，之后版本默认关闭了，用户可以通过–docker-disable-shared-pid=true/false自行设置。开启PID Namespace的好处就是可以享受pause回收僵尸进程的功能，并且因为容器同处于一个PID Namespace，进程间通信也会变得非常方便。但也有一些弊端，比如有些容器进程的PID也必须为1（比如systemd进程），这就会和pause容器产生冲突，另外也会涉及一些安全问题。  </p>\n<h2 id=\"影响pod调度的属性\"><a href=\"#影响pod调度的属性\" class=\"headerlink\" title=\"影响pod调度的属性\"></a>影响pod调度的属性</h2><h3 id=\"根据request进行调度\"><a href=\"#根据request进行调度\" class=\"headerlink\" title=\"根据request进行调度\"></a>根据request进行调度</h3><figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">resources:</span> <span class=\"comment\">#资源管理</span></span><br><span class=\"line\">  <span class=\"attr\">requests:</span> <span class=\"comment\">#容器运行时，最低资源需求，也就是说最少需要多少资源容器才能正常运行</span></span><br><span class=\"line\">    <span class=\"attr\">cpu:</span> <span class=\"number\">0.1</span> <span class=\"comment\">#CPU资源（核数），两种方式，浮点数或者是整数+m，0.1=100m，最少值为0.001核（1m）</span></span><br><span class=\"line\">    <span class=\"attr\">memory:</span> <span class=\"string\">32Mi</span> <span class=\"comment\">#内存使用量</span></span><br><span class=\"line\">  <span class=\"attr\">limits:</span> <span class=\"comment\">#资源限制，表示最大占用的资源</span></span><br><span class=\"line\">    <span class=\"attr\">cpu:</span> <span class=\"number\">0.5</span></span><br><span class=\"line\">    <span class=\"attr\">memory:</span> <span class=\"string\">32Mi</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"根据nodeSelector调度\"><a href=\"#根据nodeSelector调度\" class=\"headerlink\" title=\"根据nodeSelector调度\"></a>根据nodeSelector调度</h3><figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">nodeSelector:</span></span><br><span class=\"line\">    <span class=\"attr\">KEY:</span> <span class=\"string\">VALUE</span>   <span class=\"comment\">#会将pod调度到设定有该标签的node上</span></span><br></pre></td></tr></table></figure>\n<p>Label 是 Kubernetes 系统中另一个核心概念。一个 Label 是一个 key=value 的键值对，其中 key 与 value 由用户自己指 定。Label 可以附加到各种资源对象上，如 Node、Pod、Service、RC，一个资源对象可以定义任意数量的 Label， 同一个 Label 也可以被添加到任意数量的资源对象上，Label 通常在资源对象定义时确定，也可以在对象创建后动态 添加或删除。  </p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 为node节点设定标签</span></span><br><span class=\"line\">kubectl label node NODE_NAME KEY: VALUE</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"节点亲和性-nodeAffinity\"><a href=\"#节点亲和性-nodeAffinity\" class=\"headerlink\" title=\"节点亲和性 nodeAffinity\"></a>节点亲和性 nodeAffinity</h3><p><strong>硬亲和</strong>  </p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">affinity:</span> </span><br><span class=\"line\">  <span class=\"attr\">nodeAffinity:</span> </span><br><span class=\"line\">    <span class=\"attr\">requiredDuringSchedulingIgnoredDuringExecution:</span> </span><br><span class=\"line\">      <span class=\"attr\">nodeSelectorTerms:</span>   <span class=\"comment\">#写多个满足其中一条就可以</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">matchExpressions:</span>  <span class=\"comment\">#可以写多个满足必须同时满足</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">key:</span> <span class=\"string\">KEY</span> <span class=\"comment\">#node节点的标签 </span></span><br><span class=\"line\">              <span class=\"attr\">operator:</span> <span class=\"string\">In</span>  <span class=\"comment\"># 运算关系</span></span><br><span class=\"line\">              <span class=\"attr\">values:</span> </span><br><span class=\"line\">                <span class=\"bullet\">-</span> <span class=\"string\">VALUE1</span> </span><br><span class=\"line\">                <span class=\"bullet\">-</span> <span class=\"string\">VALUE2</span> </span><br></pre></td></tr></table></figure>\n<p>通过<strong>required</strong>DuringSchedulingIgnoredDuringExecution硬亲和，约束条件必须满足。<br>上面的例子则表示为pod将会调度到标签KEY为VALUE1或VALUE2的节点上。  </p>\n<p><strong>软亲和</strong>  </p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">affinity:</span></span><br><span class=\"line\">  <span class=\"attr\">nodeAffinity:</span></span><br><span class=\"line\">    <span class=\"attr\">preferredDuringSchedulingIgnoredDuringExecution:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">weight:</span>  <span class=\"number\">60</span>  <span class=\"comment\">#权重，1-100越大优先级越高</span></span><br><span class=\"line\">      <span class=\"attr\">preference:</span></span><br><span class=\"line\">        <span class=\"attr\">matchExpressions:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> &#123;<span class=\"attr\">key:</span> <span class=\"string\">xxx</span>, <span class=\"attr\">operator:</span> <span class=\"string\">In</span>, <span class=\"attr\">values:</span> <span class=\"string\">xxx</span>&#125;</span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">weight:</span>  <span class=\"number\">30</span></span><br><span class=\"line\">      <span class=\"attr\">preference:</span></span><br><span class=\"line\">        <span class=\"attr\">matchExpressions:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> &#123;<span class=\"attr\">key:</span> <span class=\"string\">xxx</span>, <span class=\"attr\">operator:</span> <span class=\"string\">Exists</span>, <span class=\"attr\">values:</span> <span class=\"string\">xxx</span>&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>preferred</strong>DuringSchedulingIgnoredDuringExecution软亲和为尝试满足约束条件  </p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">operator参数</th>\n<th align=\"center\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">In</td>\n<td align=\"center\">label 的值在某个列表中</td>\n</tr>\n<tr>\n<td align=\"center\">NotIn</td>\n<td align=\"center\">label 的值不在某个列表中</td>\n</tr>\n<tr>\n<td align=\"center\">Gt</td>\n<td align=\"center\">label 的值大于某个值</td>\n</tr>\n<tr>\n<td align=\"center\">Lt</td>\n<td align=\"center\">label 的值小于某个值</td>\n</tr>\n<tr>\n<td align=\"center\">Exists</td>\n<td align=\"center\">某个 label 存在</td>\n</tr>\n<tr>\n<td align=\"center\">DoesNotExist</td>\n<td align=\"center\">某个 label 不存在</td>\n</tr>\n</tbody></table>\n<h2 id=\"污点与污点容忍\"><a href=\"#污点与污点容忍\" class=\"headerlink\" title=\"污点与污点容忍\"></a>污点与污点容忍</h2><h3 id=\"污点\"><a href=\"#污点\" class=\"headerlink\" title=\"污点\"></a>污点</h3><p>使用kubectl taint可以为node设置污点，node被设置污点后将会与pod存在一种互斥关系，可以让node拒绝pod的调度，甚至将已经存在的pod驱逐出去<br>污点的组成  KEY=VALUE:EFFECT  其中value可以为空，EFFECT描述污点的作用，有以下三个选项：  </p>\n<ul>\n<li>NoSchedule ： 不会将pod调度到具有该污点的node上 </li>\n<li>PreferNoSchedule：尽量避免将pod调度到有该污点的node上  </li>\n<li>NoExecute：不会将pod调度到有该污点的node上，同时会将node上已有的pod驱逐  </li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 设置污点</span></span><br><span class=\"line\">kubectl taint nodes NODENAME  KEY=VAULE:EFFECT</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 查看node的污点</span></span><br><span class=\"line\">kubectl describe node NODENAME|grep Taint</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 去除污点</span></span><br><span class=\"line\">kubectl taint nodes NODENAME KEY:EFFECT-</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"污点容忍\"><a href=\"#污点容忍\" class=\"headerlink\" title=\"污点容忍\"></a>污点容忍</h3><p>设置了污点的node和pod之间产生互斥关系，pod将一定程度上不会调度到这个node上，但可以为pod设置容忍度，设置了容忍度的pod将会容忍指定的污点，从而可以调度到该node上，污点与污点容忍组合使用，避免pod调度到不适合的node上。每个node可以有一个或多个污点，不能忍受这些污点的pod是不会被节点接受的  </p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">tolerations:</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">key:</span> <span class=\"string\">“key1”</span>            <span class=\"comment\">#要与污点key保持一致才会生效</span></span><br><span class=\"line\">    <span class=\"attr\">operator:</span> <span class=\"string\">“Equal”</span>    </span><br><span class=\"line\">    <span class=\"attr\">value:</span> <span class=\"string\">“value1”</span>      <span class=\"comment\">#要与污点value保持一致才会生效</span></span><br><span class=\"line\">    <span class=\"attr\">effect:</span> <span class=\"string\">“NoExecute”</span></span><br><span class=\"line\">    <span class=\"attr\">tolerationSeconds:</span> <span class=\"number\">3600</span>  <span class=\"comment\"># 表示pod即使被驱逐可以继续运行时间</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">key:</span> <span class=\"string\">“key1”</span></span><br><span class=\"line\">    <span class=\"attr\">operator:</span> <span class=\"string\">“Equal”</span></span><br><span class=\"line\">    <span class=\"attr\">value:</span> <span class=\"string\">“value1”</span></span><br><span class=\"line\">    <span class=\"attr\">effect:</span> <span class=\"string\">“NoExecute”</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">key:</span> <span class=\"string\">“key2”</span></span><br><span class=\"line\">    <span class=\"attr\">operator:</span> <span class=\"string\">“Exists”</span>   <span class=\"comment\">#若为Exists，则会忽略value</span></span><br><span class=\"line\">    <span class=\"attr\">effect:</span> <span class=\"string\">“NoSchedule”</span></span><br></pre></td></tr></table></figure>\n<p>当有多个master时，防止资源浪费，可以进行设置，让master也启动pod</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">kubectl taint nodes NODENAME node-role.kubernetes.io/master=:PreferNoSchedule</span><br></pre></td></tr></table></figure>\n<p>当node有多个污点时，pod必须忍受所有的污点才可以调度到该node </p>\n","categories":["Kubernetes"],"tags":["pod"]},{"title":"YAML基础","url":"/2022/03/24/YAML/YAML%E5%9F%BA%E7%A1%80/","content":"<p><img src=\"https://s2.loli.net/2022/03/24/9bBLo4WtTsJpyAu.png\" alt=\"YAML.png\">  </p>\n<span id=\"more\"></span>\n<h1 id=\"YAML\"><a href=\"#YAML\" class=\"headerlink\" title=\"YAML\"></a>YAML</h1><p>YAML不是一种标记语言，是一种表示数据序列化的格式。<br>可以使用<a href=\"http://nodeca.github.io/js-yaml/\"> nodeca.github.io/js-yaml/ </a> 来进行学习  </p>\n<h2 id=\"基本语法\"><a href=\"#基本语法\" class=\"headerlink\" title=\"基本语法\"></a>基本语法</h2><ul>\n<li>大小写敏感  </li>\n<li>使用缩进表示层级关系  </li>\n<li>缩进不允许使用tab，只允许空格  </li>\n<li>缩进的空格数不重要，只要相同层级的元素左对齐即可  </li>\n<li>‘#’表示注释  </li>\n</ul>\n<h2 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h2><figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">%YAML</span> <span class=\"number\">1.2</span> <span class=\"comment\">#表示遵循YAML的版本号</span></span><br><span class=\"line\"><span class=\"string\">---</span> <span class=\"comment\">#表示一个新的文件</span></span><br><span class=\"line\"><span class=\"attr\">my:</span> <span class=\"comment\">#对象嵌套</span></span><br><span class=\"line\"> <span class=\"attr\">name :</span> <span class=\"string\">nike</span></span><br><span class=\"line\"> <span class=\"attr\">age :</span> <span class=\"type\">!!str</span> <span class=\"number\">10</span>     <span class=\"comment\">#使用两个感叹号，强制转换数据类型</span></span><br><span class=\"line\"> <span class=\"attr\">score:</span> <span class=\"type\">!!float</span> <span class=\"number\">13.0</span></span><br><span class=\"line\"> <span class=\"attr\">bool :</span> <span class=\"literal\">true</span></span><br><span class=\"line\"> <span class=\"attr\">children :</span> <span class=\"string\">~</span>   <span class=\"comment\">#~表示null</span></span><br><span class=\"line\"> <span class=\"attr\">brithday :</span> <span class=\"number\">1996-04-20 12:00:00</span></span><br><span class=\"line\"> <span class=\"attr\">number :</span> <span class=\"number\">1.34e+3</span></span><br><span class=\"line\"> <span class=\"attr\">interest:</span> <span class=\"comment\">#数组</span></span><br><span class=\"line\">   <span class=\"bullet\">-</span> <span class=\"string\">basketball</span></span><br><span class=\"line\">   <span class=\"bullet\">-</span> <span class=\"string\">football</span></span><br><span class=\"line\"> <span class=\"attr\">friends:</span> <span class=\"comment\">#数组对象</span></span><br><span class=\"line\">   <span class=\"bullet\">-</span> <span class=\"string\">name:ming</span></span><br><span class=\"line\">     <span class=\"string\">age:15</span></span><br><span class=\"line\">   <span class=\"bullet\">-</span> <span class=\"string\">name:hong</span></span><br><span class=\"line\">     <span class=\"string\">age:14</span></span><br><span class=\"line\"> <span class=\"attr\">relations:</span> <span class=\"comment\">#对象</span></span><br><span class=\"line\">   <span class=\"attr\">father :</span> <span class=\"string\">foo1</span></span><br><span class=\"line\">   <span class=\"attr\">monther :</span> <span class=\"string\">foo2</span></span><br><span class=\"line\"><span class=\"attr\">comment:</span> <span class=\"comment\">#表示一个字符串</span></span><br><span class=\"line\">   <span class=\"string\">a</span></span><br><span class=\"line\">   <span class=\"string\">b</span></span><br><span class=\"line\">   <span class=\"string\">c</span></span><br><span class=\"line\">   <span class=\"string\">d</span></span><br><span class=\"line\"><span class=\"attr\">comment1 :</span> <span class=\"string\">&gt;</span> <span class=\"comment\">#‘&gt;’表示字符串尾部换行</span></span><br><span class=\"line\">   <span class=\"string\">a</span></span><br><span class=\"line\">   <span class=\"string\">b</span></span><br><span class=\"line\">   <span class=\"string\">c</span></span><br><span class=\"line\">   <span class=\"string\">d</span></span><br><span class=\"line\"><span class=\"attr\">comment2:</span> <span class=\"string\">|</span>  <span class=\"comment\">#‘|’表示每一行尾部都换行</span></span><br><span class=\"line\">   <span class=\"string\">a</span></span><br><span class=\"line\">   <span class=\"string\">b</span></span><br><span class=\"line\">   <span class=\"string\">c</span></span><br><span class=\"line\">   <span class=\"string\">d</span></span><br><span class=\"line\"><span class=\"attr\">father:</span> <span class=\"string\">&amp;father_info</span> <span class=\"comment\">#定义指针</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">foo1</span></span><br><span class=\"line\">  <span class=\"attr\">age:</span> <span class=\"number\">40</span></span><br><span class=\"line\"><span class=\"attr\">monther:</span> <span class=\"meta\">&amp;monther_info</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">foo2</span></span><br><span class=\"line\">  <span class=\"attr\">age:</span> <span class=\"number\">39</span></span><br><span class=\"line\"><span class=\"attr\">monitor:</span> </span><br><span class=\"line\">  <span class=\"attr\">father:</span> <span class=\"string\">*father_info</span>  <span class=\"comment\">#使用指针</span></span><br><span class=\"line\">  <span class=\"attr\">monther:</span> <span class=\"meta\">*monther_info</span></span><br><span class=\"line\"><span class=\"string\">...</span> <span class=\"comment\">#表示文件结束</span></span><br></pre></td></tr></table></figure>","categories":["YAML"],"tags":["YAML"]},{"title":"1-ansible基本概念","url":"/2021/07/11/ansible/1-ansible%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/","content":"<p><img src=\"/2021/07/11/ansible/1-ansible%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/ansible.jpg\" alt=\"ansible\">  </p>\n<span id=\"more\"></span>\n<h1 id=\"ansible学习网站\"><a href=\"#ansible学习网站\" class=\"headerlink\" title=\"ansible学习网站\"></a>ansible学习网站</h1><p><a href=\"http://www.ansible.com.cn/\">马哥Ansible中文权威指南</a><br><a href=\"https://docs.ansible.com/\">Ansible官方文档</a>  </p>\n<h2 id=\"ansible可以做什么\"><a href=\"#ansible可以做什么\" class=\"headerlink\" title=\"ansible可以做什么\"></a>ansible可以做什么</h2><p>&emsp;&emsp;它是“配置管理工具”、“自动化运维工具”。<br>&emsp;&emsp;可以完成一些批量任务，或者完成一些经常场重复的工作。例如：在10台机器上安装nginx服务，并启动；将某个文件一次性拷贝到10台服务器上。<br>&emsp;&emsp;获取这些工作也可以使用脚本来完成，但是ansible具有一些优秀的特性，例如：会比较“当前状态”与“目标状态”是否一致，若不一致，会将“当前状态”编程“目标状态”;若一致，则不进行任何操作，这种特性被称为 <strong>幂等性</strong>。而且ansible只需要ssh即可正常工作，不需要在受管机器上安装agent端；以及将受管机器的IP信息添加在ansible的管理清单中。<br>&emsp;&emsp;ansible没有客户端，因此底层通信依赖系统软件，Linux下基于OpenSSH，windows下基于PowerShell，管理端必须是Linux系统。使用者在管理节点通过ansible将指令推送到被管理端执行，在执行完毕后自动删除产生的临时文件。  </p>\n<h2 id=\"Ansible通信方式\"><a href=\"#Ansible通信方式\" class=\"headerlink\" title=\"Ansible通信方式\"></a>Ansible通信方式</h2><ol>\n<li>OpenSSH<br>若希望通过非默认的22端口运行命令，在主机清单中进行配置ansible_ssh_port的值。  </li>\n<li>加速模式<br>开启加速模式可以提高ansible的通信速度，对Ad-Hoc命令不友好。  </li>\n<li>Faster OpenSSH<br>ansible 1.5+版本中可以使用，旧版本的实现方式是复制文件至被管理端服务器后运行，然后删除临时文件；新版本是通过OpenSSH发送执行命令，将所有的操作附带在ssh连接过程中实现。<br>需要将<code>/etc/ansible/ansible.cfg</code>中改为<code>pipelining = true</code>，并确保vim /etc/sudoers中的Defaults requiretty是注释状态（centos中没有该选项，有点迷惑）。  </li>\n</ol>\n<h2 id=\"安装ansible\"><a href=\"#安装ansible\" class=\"headerlink\" title=\"安装ansible\"></a>安装ansible</h2><p>在一台服务器上安装ansible，这台主机就作为“配置管理主机”，其他主机作为“受管主机”。  </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">[aliBase]</span><br><span class=\"line\">name=aliBase</span><br><span class=\"line\">baseurl=https://mirrors.aliyun.com/centos/$releasever/os/$basearch/</span><br><span class=\"line\">enabled=1</span><br><span class=\"line\">gpgcheck=1</span><br><span class=\"line\">gpgkey=https://mirrors.aliyun.com/centos/$releasever/os/$basearch/RPM-GPG-KEY-CentOS-$releasever</span><br><span class=\"line\"> </span><br><span class=\"line\"># cat aliEpel.repo</span><br><span class=\"line\">[aliEpel]</span><br><span class=\"line\">name=aliEpel</span><br><span class=\"line\">baseurl=https://mirrors.aliyun.com/epel/$releasever\\Server/$basearch/</span><br><span class=\"line\">enabled=1</span><br><span class=\"line\">gpgcheck=0</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>【注】可以从<a href=\"https://developer.aliyun.com/mirror/\">阿里巴巴开源镜像站</a>进行添加yum源，在下载源时可能会出现<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">正在解析主机 mirrors.aliyun.com (mirrors.aliyun.com)... 失败：未知的名称或服务。</span><br><span class=\"line\">wget: 无法解析主机地址 “mirrors.aliyun.com”</span><br></pre></td></tr></table></figure>\n解决方法:配置DNS<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\"># /etc/resolv.conf</span><br><span class=\"line\">nameserver 8.8.8.8</span><br></pre></td></tr></table></figure>\n安装anxible  <figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">yum install -y ansible</span><br></pre></td></tr></table></figure>\n验证安装<code>ansible --version</code>。  </li>\n</ul>\n<h2 id=\"python多环境扩展管理\"><a href=\"#python多环境扩展管理\" class=\"headerlink\" title=\"python多环境扩展管理\"></a>python多环境扩展管理</h2><h3 id=\"pyenv\"><a href=\"#pyenv\" class=\"headerlink\" title=\"pyenv\"></a>pyenv</h3><p>python版本管理工具<br>安装</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\"># 安装依赖</span><br><span class=\"line\">yum -y install gcc zlib-devel bzip2-devel openssl-devel ncurses-devel sqlite-devel readline-devel tk-devel gdbm-devel db4-devel libpcap-devel xz-devel git</span><br><span class=\"line\"># 安装pyenv</span><br><span class=\"line\">git clone https://github.com/pyenv/pyenv.git ~/.pyenv</span><br><span class=\"line\"># 修改环境变量</span><br><span class=\"line\">echo &#x27;export PATH=~/.pyenv/bin:$PATH&#x27; &gt;&gt; .bashrc</span><br><span class=\"line\">echo &#x27;export PYENV_ROOT=~/.pyenv&#x27; &gt;&gt; .bashrc</span><br><span class=\"line\">echo &#x27;eval &quot;$(pyenv init -)&quot;&#x27; &gt;&gt; .bashrc</span><br><span class=\"line\">source .bashrc</span><br></pre></td></tr></table></figure>\n<p>验证安装<code>pyenv --version</code>  </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">pyenv install -l        查看所有可安装的python版本</span><br><span class=\"line\">pyenv install 3.4.1     安装指定版本</span><br><span class=\"line\">pyenv uninstall 3.4.1   卸载指定版本</span><br><span class=\"line\">pyenv local 3.4.1       切换当前目录为指定版本</span><br><span class=\"line\">pyenv local --unset     取消设置本地版本</span><br><span class=\"line\">pyenv shell 3.4.1       设置当前会话的python版本</span><br><span class=\"line\">pyenv shell --unset     取消设置当前会话版本</span><br><span class=\"line\">pyenv global 3.4.1      切换全局目录为指定版本</span><br><span class=\"line\">pyenv versions          查看已安装版本，当前使用的版本前会加上*号</span><br><span class=\"line\">pyenv version           查看当前使用的python版本</span><br><span class=\"line\">pyenv rehash            刷新python已安装列表</span><br><span class=\"line\">pyenv commands          列出所有可用的pyenv命令</span><br></pre></td></tr></table></figure>\n<p>例如安装3.7.6时下载速度非常慢，这时我们可以手动下载python3.7.6的源码包Python-3.7.6.tar.xz将这个包放在~/.pyenv/cache中，然后在执行pyenv install 3.7.6。<br>可以一次将多个版本指定为全局Python(当前shell也可以这样设置)。  </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ pyenv global 2.7.6 3.3.3</span><br><span class=\"line\">$ pyenv versions</span><br><span class=\"line\">  system</span><br><span class=\"line\">* 2.7.6 (set by /Users/yyuu/.pyenv/version)</span><br><span class=\"line\">* 3.3.3 (set by /Users/yyuu/.pyenv/version)</span><br><span class=\"line\">$ python --version</span><br><span class=\"line\">Python 2.7.6</span><br><span class=\"line\">$ python2.7 --version</span><br><span class=\"line\">Python 2.7.6</span><br><span class=\"line\">$ python3.3 --version</span><br><span class=\"line\">Python 3.3.3</span><br></pre></td></tr></table></figure>\n<p>如果更喜欢3.3.3而不是2.7.6  </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ pyenv global 3.3.3 2.7.6</span><br><span class=\"line\">$ pyenv versions</span><br><span class=\"line\">  system</span><br><span class=\"line\">* 2.7.6 (set by /Users/yyuu/.pyenv/version)</span><br><span class=\"line\">* 3.3.3 (set by /Users/yyuu/.pyenv/version)</span><br><span class=\"line\">  venv27</span><br><span class=\"line\">$ python --version</span><br><span class=\"line\">Python 3.3.3</span><br><span class=\"line\">$ python2.7 --version</span><br><span class=\"line\">Python 2.7.6</span><br><span class=\"line\">$ python3.3 --version</span><br><span class=\"line\">Python 3.3.3</span><br></pre></td></tr></table></figure>\n<h3 id=\"pyenv-virtualenv\"><a href=\"#pyenv-virtualenv\" class=\"headerlink\" title=\"pyenv-virtualenv\"></a>pyenv-virtualenv</h3><p>是一个pyenv的插件，可以对pyenv中的python创建虚拟环境。  </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">git clone https://github.com/yyuu/pyenv-virtualenv.git $(pyenv root)/plugins/pyenv-virtualenv</span><br><span class=\"line\">echo &#x27;eval &quot;$(pyenv virtualenv-init -)&quot;&#x27; &gt;&gt; ~/.bash_profile</span><br><span class=\"line\">source ~/.bash_profile</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">pyenv virtualenv 3.7.6 3-7-6test1   #将会在$(pyenv root)/versions下基于3.7.6创建一个virtualenv 3-7-6test1</span><br><span class=\"line\">pyenv virtualenv test2              #将会基于当前使用的python版本创建一个test2的virtualenv</span><br><span class=\"line\">pyenv virtualenvs                   #列出当前所有的virtualenv，每个virtualenv有两个条目，短的是一个链接</span><br><span class=\"line\">pyenv activate &lt;virtualenv-name&gt;    #使用指定virtualenv的虚拟环境</span><br><span class=\"line\">pyenv deactivate                    #退出虚拟环境</span><br><span class=\"line\">pyenv uninstall &lt;virtualenv-name&gt;   #删除指定虚拟环境</span><br></pre></td></tr></table></figure>","categories":["ansible"],"tags":["ansible基本概念"]},{"title":"2-ansible基础元素介绍","url":"/2021/07/13/ansible/2-ansible%E5%9F%BA%E7%A1%80%E5%85%83%E7%B4%A0%E4%BB%8B%E7%BB%8D/","content":"<p><img src=\"/2021/07/13/ansible/2-ansible%E5%9F%BA%E7%A1%80%E5%85%83%E7%B4%A0%E4%BB%8B%E7%BB%8D/ansible.jpg\" alt=\"ansible\"><br>ansible基础元素介绍</p>\n<span id=\"more\"></span>\n<h1 id=\"ansible配置文件解析\"><a href=\"#ansible配置文件解析\" class=\"headerlink\" title=\"ansible配置文件解析\"></a>ansible配置文件解析</h1><p>/etc/ansible:配置文件目录，Inventory主机配置清单，日常运维的所有的配置类操作也是基于此目录进行。ansible不是一种服务所以在修改配置文件后不需要进行重启等操作。<br>ansible自身的配置文件<code>/etc/ansible/ansible.cfg</code>，文件遵循INI风格。<br>ansible.cfg配置文件可以有多个，读取顺序是<strong>当前命令执行目录ansible.cfg</strong>–&gt;<strong>用户家目录ansible.cfg</strong>–&gt;<strong>/etc/ansible/ansible.cfg</strong>。  </p>\n<ol>\n<li><p>[defaults]  </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">#inventory      = /etc/ansible/hosts                    #主机配置清单位置</span><br><span class=\"line\">#library        = /usr/share/my_modules/                #库文件路径</span><br><span class=\"line\">#module_utils   = /usr/share/my_module_utils/           #</span><br><span class=\"line\">#remote_tmp     = ~/.ansible/tmp                        #远程主机存放临时文件目录</span><br><span class=\"line\">#local_tmp      = ~/.ansible/tmp                        #本机存放临时文件目录</span><br><span class=\"line\">#plugin_filters_cfg = /etc/ansible/plugin_filters.yml        </span><br><span class=\"line\">#forks          = 5                                     #同时操作多台主机时的并发数</span><br><span class=\"line\">#poll_interval  = 15                                    </span><br><span class=\"line\">#sudo_user      = root                                  #默认sudo用户</span><br><span class=\"line\">#ask_sudo_pass = True</span><br><span class=\"line\">#ask_pass      = True</span><br><span class=\"line\">#transport      = smart</span><br><span class=\"line\">#remote_port    = 22</span><br><span class=\"line\">#module_lang    = C</span><br><span class=\"line\">#module_set_locale = False</span><br><span class=\"line\">#gathering = implicit</span><br><span class=\"line\">#gather_subset = all</span><br><span class=\"line\"># gather_timeout = 10</span><br><span class=\"line\"># inject_facts_as_vars = True</span><br><span class=\"line\">host_key_checking = False                               #首次连接是否需要key认证，建议将注释去掉，并设置为False</span><br><span class=\"line\">log_path = /var/log/ansible.log                         #ansible执行日志存放目录</span><br></pre></td></tr></table></figure>\n<p>多数保持默认即可。  </p>\n</li>\n<li><p>[privilege_escalation]  </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">#become=True            #是否sudo</span><br><span class=\"line\">#become_method=sudo     #sudo方式</span><br><span class=\"line\">#become_user=root       #sudo后的用户</span><br><span class=\"line\">#become_ask_pass=False  #sudo后是否验证密码</span><br></pre></td></tr></table></figure></li>\n<li><p>[ssh_connection]</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">#pipelining = false     #管道加速功能，要配合requiretty进行使用</span><br></pre></td></tr></table></figure></li>\n<li><p>[accelerate]</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">#accelerate_port = 5099             #加速连接端口</span><br><span class=\"line\">#accelerate_timeout = 30            #命令执行超时时间</span><br><span class=\"line\">#accelerate_connect_timeout = 5.0   #连接超时时间</span><br><span class=\"line\">#accelerate_daemon_timeout = 30     #上一个活动连接的时间，单位分钟</span><br><span class=\"line\">#accelerate_multi_key = yes</span><br></pre></td></tr></table></figure></li>\n</ol>\n<p>除了修改<code>host_key_checking = False</code>以及可能修改<code>[accelerate]</code>其他配置保持默认即可，还有其他类的配置但是基本都是使用默认配置  </p>\n<h1 id=\"ansible相关命令\"><a href=\"#ansible相关命令\" class=\"headerlink\" title=\"ansible相关命令\"></a>ansible相关命令</h1><h2 id=\"ansible\"><a href=\"#ansible\" class=\"headerlink\" title=\"ansible\"></a>ansible</h2><p>临时性操作、非固化需求。  </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">ansible &lt;host-pattern&gt; [options]</span><br></pre></td></tr></table></figure>\n<ul>\n<li>&lt;host-pattern&gt;：配置清单中的ip、主机别名、组等  </li>\n<li>[options]：<br>  <strong>–version</strong>   :显示版本以ansible的一些基础信息<br>  <strong>-m NAME</strong>    :指定使用的模块<br>  <strong>-u USERNAME</strong> :指定远程主机以指定用户运行命令<br>  <strong>-b</strong>          :使远程主机以sudo方式执行命令<br>  <strong>-v</strong>          :详细过程 -vv -vvv更为详细<br>  <strong>-k</strong>          :提示输入ssh连接密码<br>  <strong>-K</strong>          :提示输入sudo时的口令<br>  <strong>-i</strong>          ：使用指定的Inventory配置文件（默认使用/etc/ansible/hosts）<br>返回结果有三种颜色：红色（执行异常）、绿色（执行成功，但执行执行目标没有变化）、橘黄色（执行成功，但是执行目标有变化）。<br>例如：使用ansible远程修改一个文件，返回绿色说明命令执行成功，但是文件没有变化，也就是说原文件中的内容就是要修改后的样子，不需要进行修改；返回值橘黄色说明命令执行成功，且将文件按照要求进行修改了。  </li>\n</ul>\n<h2 id=\"ansible-galaxy\"><a href=\"#ansible-galaxy\" class=\"headerlink\" title=\"ansible-galaxy\"></a>ansible-galaxy</h2><p>可以简单的理解为github或者pip功能，可以使用该命令从galaxy.ansible.com下载Roles(一堆playbook的集合)，默认存放在<code>/etc/ansible/roles</code>。  </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">ansible-galaxy [ init | info | install | list | remove] [--help] [options] ROLE_NAME</span><br></pre></td></tr></table></figure>\n<ul>\n<li>[init | info | install | list | remove ]  </li>\n</ul>\n<p><strong>init</strong>    :初始化本地roles<br><strong>info</strong>    :列出指定roles的信息<br><strong>install</strong> ：安装指定roles到本地<br><strong>list</strong>    ：列出已经安装的roles<br><strong>remove</strong>  ：删除本地的roles  </p>\n<ul>\n<li>[–help]<br>类似的<code>ansible-galaxy init --help</code> 查看ansible-galaxy init相关使用方式。  </li>\n<li>[options]<br>根据<code>ansible-galaxy xxx</code>使用执行的选项  </li>\n</ul>\n<h2 id=\"ansible-pull（先了解）\"><a href=\"#ansible-pull（先了解）\" class=\"headerlink\" title=\"ansible-pull（先了解）\"></a>ansible-pull（先了解）</h2><p>通过结合git和crontab一起实现：通过crontab定期拉取指定git版本到本地<br>适用场景：  </p>\n<ol>\n<li>大量机器需要配置，及时高并发也需要大量时间  </li>\n<li>在刚启动、没有网络连接的机器上运行ansible  </li>\n</ol>\n<h2 id=\"ansible-doc\"><a href=\"#ansible-doc\" class=\"headerlink\" title=\"ansible-doc\"></a>ansible-doc</h2><p>ansible模块文档说明。<br>ansible-doc -l  ：列出支持的模块<br>ansible-doc MODULE_NAME：显示模块用法说明<br>ansible-doc -v MODULE_NAME：显示模块版本号</p>\n<h2 id=\"ansible-playbook\"><a href=\"#ansible-playbook\" class=\"headerlink\" title=\"ansible-playbook\"></a>ansible-playbook</h2><p>日常应用中使用最多的命令，通过预先编写YML格式的playbook文件实现批量管理，playbook文件可以理解为是按照一定条件组成的ansible的任务集。<br><code>ansible-playbook xxx.yml</code>  </p>\n<h2 id=\"ansible-vault\"><a href=\"#ansible-vault\" class=\"headerlink\" title=\"ansible-vault\"></a>ansible-vault</h2><p>主要用于配置文件的加密，例如playbook文件中包含敏感信息，可以使用ansible-vault。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">ansible-vault [create|decrypt|edit|view|encrypt|encrypt_string|rekey] [--help] [options]</span><br></pre></td></tr></table></figure>\n<ul>\n<li>[ create | decrypt | edit | view | encrypt | encrypt_string | rekey]  </li>\n</ul>\n<p><strong>create</strong>          #创建新的加密文件<br><strong>decrypt</strong>         #解密加密文件<br><strong>edit</strong>            #编辑加密文件<br><strong>view</strong>            #查看加密文件<br><strong>encrypt</strong>         #加密YAML文件<br><strong>encrypt_string</strong>  #加密字符串<br><strong>rekey</strong>           #为加密文件重新设置加密</p>\n<h2 id=\"ansible-console（先了解）\"><a href=\"#ansible-console（先了解）\" class=\"headerlink\" title=\"ansible-console（先了解）\"></a>ansible-console（先了解）</h2><p>交互式工具，用户可以在ansible-console虚拟出来的终端中执行各种内置命令。  </p>\n<h1 id=\"Inventory配置清单\"><a href=\"#Inventory配置清单\" class=\"headerlink\" title=\"Inventory配置清单\"></a>Inventory配置清单</h1><p>默认配置文件<code>/etc/ansible/hosts</code>，该配置文件遵循INI风格，在<code>/etc/ansible/hosts</code>尾部直接添加主机即可，<strong>建议在配置受控端时，先配置好控制端到受控端的免密</strong>。  </p>\n<h2 id=\"定义主机和组\"><a href=\"#定义主机和组\" class=\"headerlink\" title=\"定义主机和组\"></a>定义主机和组</h2><ul>\n<li>可以直接是IP  <figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">192.168.27.7</span><br></pre></td></tr></table></figure></li>\n</ul>\n<p><strong>使用方式：</strong> ansible 192.168.27.7 -m ping  </p>\n<ul>\n<li>可以是hostname  <figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">test3:22</span><br></pre></td></tr></table></figure>\n冒号后的数字表示端口号，默认22端口，此方式需要在<code>/etc/hosts</code>中进行配置，例如：添加192.168.27.7 test3   </li>\n</ul>\n<p><strong>使用方式：</strong> ansible test3 -m ping  </p>\n<ul>\n<li>分组  <figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">[testserver]</span><br><span class=\"line\">192.168.27.[5:7]</span><br><span class=\"line\">test[a:c]</span><br></pre></td></tr></table></figure>\n[testserver]表示一个叫testserver分组的开始,其分组成员包括192.168.27.5、192.168.27.6、192.168.27.7、testa、testb、testc。  </li>\n</ul>\n<p><strong>使用方式：</strong> ansible testserver -m ping   会同时操作testserver组下的所有成员机器</p>\n<h2 id=\"定义主机变量（先了解）\"><a href=\"#定义主机变量（先了解）\" class=\"headerlink\" title=\"定义主机变量（先了解）\"></a>定义主机变量（先了解）</h2><p>举个例子，在实际场景中通常会将web服务的80端口修改为其他端口,在配置该主机的配置信息时可以对该主机添加变量，以便在playbook中使用。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">test http_prot=80 </span><br></pre></td></tr></table></figure>\n\n<h2 id=\"定义组变量\"><a href=\"#定义组变量\" class=\"headerlink\" title=\"定义组变量\"></a>定义组变量</h2><p>类似于主机变量</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">[test]</span><br><span class=\"line\">test1</span><br><span class=\"line\">test2</span><br><span class=\"line\">test3</span><br><span class=\"line\"></span><br><span class=\"line\">[test:vars]   #[组名：vars]</span><br><span class=\"line\">http_prot=808</span><br></pre></td></tr></table></figure>\n<p>这样就给test组所有的主机定义了http_prot=808变量</p>\n<h2 id=\"子组\"><a href=\"#子组\" class=\"headerlink\" title=\"子组\"></a>子组</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">[test]</span><br><span class=\"line\">test1</span><br><span class=\"line\">test2</span><br><span class=\"line\">test3</span><br><span class=\"line\"></span><br><span class=\"line\">[nginx]</span><br><span class=\"line\">nginx1</span><br><span class=\"line\">nginx2</span><br><span class=\"line\"></span><br><span class=\"line\">[hostname:children]  #[组名：children]</span><br><span class=\"line\">test</span><br><span class=\"line\">nginx</span><br></pre></td></tr></table></figure>\n<p>这样hostname这个组就相当于test组和nginx组的集合，这个组实际有5个成员。  </p>\n<h2 id=\"其他参数\"><a href=\"#其他参数\" class=\"headerlink\" title=\"其他参数\"></a>其他参数</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">test1 ansible_ssh_host=192.168.163.171 ansible_ssh_port=22 ansible_ssh_user=root ansible_ssh_pass=123456</span><br></pre></td></tr></table></figure>\n<p>ansible_ssh_host：指定test1的IP<br>ansible_ssh_port：指定ssh的端口<br>ansible_ssh_user：指定ssh远程的用户名<br>ansible_ssh_pass：指定ssh用户的密码【不推荐使用这种明文密码的方式，推荐使用公私秘钥认证的方式】<br>ansible_sudo_pass：指定sudo密码<br>ansible_shell_type：指定受控端的shell类型</p>\n<h2 id=\"逻辑运算与正则\"><a href=\"#逻辑运算与正则\" class=\"headerlink\" title=\"逻辑运算与正则\"></a>逻辑运算与正则</h2><ul>\n<li>all<br><code>ansible all -m ping</code> 检测使用的主机配置清单中所有的主机<br><code>ansible 192.168.27.* -m ping</code> 检测192.168.27网段的主机  </li>\n<li>逻辑或<br><code>ansible &quot;test:nginx&quot; -m ping</code> 检测test和nginx组（或者是主机）的情况  </li>\n<li>逻辑非<br><code>ansible &quot;test:!nginx&quot; -m ping</code> 检测在test组但不在nginx组的主机  </li>\n<li>逻辑与<br><code>ansible &quot;test:&amp;nginx&quot; -m ping</code> 检测同时在test组和nginx组的主机  </li>\n<li>域切割<br>可以理解为组的切片  <figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">[test]</span><br><span class=\"line\">nginx</span><br><span class=\"line\">zabbix</span><br><span class=\"line\">web</span><br></pre></td></tr></table></figure>\n<code>ansible test[2] -m ping</code>等同于<code>ansible web -m ping</code>  </li>\n<li>正则匹配<br><code>ansible ~正则表达式 -m -ping</code>  ~表示开启正则匹配功能。  </li>\n</ul>\n","categories":["ansible"],"tags":["ansible基础元素介绍"]},{"title":"4-playbook快速入门","url":"/2021/08/04/ansible/4-playbook/","content":"<p><img src=\"/2021/08/04/ansible/4-playbook/ansible.jpg\" alt=\"ansible\">  </p>\n<span id=\"more\"></span>\n<p>ansible的任务配置文件是playbook，可以称为是“剧本”，playbook中包含一系列任务，每个任务被称为是“play、戏剧”。<br>学习playbook需要先学习 <a href=\"/2022/03/24/YAML/YAML%E5%9F%BA%E7%A1%80/\" title=\"YAML基础\">YAML基础</a>。  </p>\n<h1 id=\"playbook语法特性\"><a href=\"#playbook语法特性\" class=\"headerlink\" title=\"playbook语法特性\"></a>playbook语法特性</h1><ol>\n<li>需要以<code>---</code>开始，并顶行首写  </li>\n<li>次行开始正常写playbook的内容，建议首先将该playbook的作用标明  </li>\n<li>使用<code>#</code>表示注释  </li>\n<li>缩进必须要进行注意，同级别的缩进格数是一样的，不能使用Tab进行缩进  </li>\n<li>区分大小写  </li>\n</ol>\n<h1 id=\"shell与playbook的转换\"><a href=\"#shell与playbook的转换\" class=\"headerlink\" title=\"shell与playbook的转换\"></a>shell与playbook的转换</h1><p>ansible可以将shell脚本或者命令轻松的转换为playbook。  </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">touch /home/playbook-test.txt</span><br><span class=\"line\">echo &quot;playbook 学习&quot; &gt; /home/playbook-test.txt</span><br></pre></td></tr></table></figure>\n<p>简单的转换为playbook文件。  </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">---     # 开始字符，文件顶行写</span><br><span class=\"line\">- hosts: test3  #指定远程操作的主机</span><br><span class=\"line\">  tasks: </span><br><span class=\"line\">    - name: &quot;创建/home/playbook-test.txt文件&quot;     #为task数组的对象指定一个name</span><br><span class=\"line\">      command: touch /home/playbook-test.txt     #使用command模块来运行标准shell命令</span><br><span class=\"line\">    - name: &quot;在/home/playbook-test.txt文件中输入playbook 学习&quot;</span><br><span class=\"line\">      shell: echo &quot;playbook 学习&quot; &gt; /home/playbook-test.txt   #因为用到了重定向，所以使用shell模块</span><br></pre></td></tr></table></figure>\n\n\n<p>还可以使用ansible的模块进行编写playbook文件。  </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">---     # 开始字符，文件顶行写</span><br><span class=\"line\">- hosts: test3  #指定远程操作的主机</span><br><span class=\"line\">  remote_user: root #可以指定在进行远程操作时使用哪个用户进行操作,相当于sudo: yes</span><br><span class=\"line\">  tasks: </span><br><span class=\"line\">    - name: &quot;创建/home/playbook-test.txt文件&quot;     #为task数组的对象指定一个name</span><br><span class=\"line\">      file:</span><br><span class=\"line\">        path: /home/playbook-test.txt</span><br><span class=\"line\">        state: touch </span><br><span class=\"line\">    - name: &quot;在/home/playbook-test.txt文件中输入&#x27;playbook 学习&#x27;&quot;</span><br><span class=\"line\">      lineinfile: </span><br><span class=\"line\">        path: /home/playbook-test.txt</span><br><span class=\"line\">        line: &quot;playbook 学习&quot;</span><br></pre></td></tr></table></figure>\n<p>每个task的name都会在playbook执行时展示执行情况，虽然在playbook中不添加name也可以，但是还是建议加上，以便于问题的排查。<br><img src=\"/2021/08/04/ansible/4-playbook/playbook1.png\">  </p>\n<h2 id=\"playbook与shell的区别\"><a href=\"#playbook与shell的区别\" class=\"headerlink\" title=\"playbook与shell的区别\"></a>playbook与shell的区别</h2><p>因为ansible有着“幂等性”的特性，所以执行一个playbook时，当ansible会发现系统现有的状态与playbook定义的状态是相同时，就会跳过该操作，所以当再次执行playbook时，执行速度会非常的快；但是shell脚本重复重复进行操作时，会将所有的步骤在执行一遍。  </p>\n<h1 id=\"playbook中多个paly\"><a href=\"#playbook中多个paly\" class=\"headerlink\" title=\"playbook中多个paly\"></a>playbook中多个paly</h1><figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">hosts :</span> <span class=\"string\">test3</span></span><br><span class=\"line\">  <span class=\"attr\">tasks :</span> </span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name :</span> <span class=\"string\">test1</span></span><br><span class=\"line\">      <span class=\"attr\">command :</span> <span class=\"string\">ls</span> <span class=\"string\">/home</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">hosts :</span> <span class=\"string\">test3</span></span><br><span class=\"line\">  <span class=\"attr\">tasks :</span> </span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name :</span> <span class=\"string\">test2</span></span><br><span class=\"line\">      <span class=\"attr\">command :</span> <span class=\"string\">ls</span> <span class=\"string\">/home/yyg</span></span><br></pre></td></tr></table></figure>\n<p>这样一个palybook中就包含了两个paly</p>\n<h1 id=\"用户\"><a href=\"#用户\" class=\"headerlink\" title=\"用户\"></a>用户</h1><p>remote_user: root 　　    #在远程主机上以哪个用户身份执行<br>become: yes                     #是否允许身份切换<br>become_method: sudo   #切换用户身份的方式，有sudo、su、pbrun等方式，默认为sudo<br>become_user: root          #切换成什么用户身份，默认为root<br>以上选项不仅可用于全局，也可用于各task中。<br>如果需要指定切换用户身份时的密码，可在执行ansible-playbook时使用选项<code>--ask-become-pass</code>或者<code>-K</code></p>\n<h1 id=\"ansible-playbook-执行技巧\"><a href=\"#ansible-playbook-执行技巧\" class=\"headerlink\" title=\"ansible-playbook 执行技巧\"></a>ansible-playbook 执行技巧</h1><h2 id=\"限定执行范围\"><a href=\"#限定执行范围\" class=\"headerlink\" title=\"限定执行范围\"></a>限定执行范围</h2><ul>\n<li>limit<br>指定操作的主机范围可以在playbook中通过<code>hosts</code>进行限定<br>也可以在ansible-playbook命令来指定主机。  <figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">ansible-playbook XXX.yml -limit test3  #通过这种方式执行，及时playbook中是hosts: test3,test4,test5，也只会对test3进行操作</span><br></pre></td></tr></table></figure></li>\n<li>–list-hosts<br>该选项可以知道playbook会操作用在那些主机上，并不会执行playbook文件。<br><img src=\"/2021/08/04/ansible/4-playbook/--list-hosts.png\" alt=\"--list-hosts\">  </li>\n</ul>\n<h2 id=\"用户与权限设置\"><a href=\"#用户与权限设置\" class=\"headerlink\" title=\"用户与权限设置\"></a>用户与权限设置</h2><ul>\n<li><p>–remote-user<br>在playbook中，如果hosts字段下没有定义users，那么将会使用你在Inventory文件中定义的用户，如果Inventory文件中也没有定义用户，则会使用当前系统用户身份来ssh远程。<br>可以在ansible-playbook中使用–remote-user选项来指定用户。  </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">ansible-playbook XXX.yml --remote-user=yyg</span><br></pre></td></tr></table></figure></li>\n<li><p>–ask-sudo-pass  </p>\n</li>\n<li><p>-ask-sudo-pass在需要输入ssh密码的情况下交互式的输入密码  </p>\n</li>\n<li><p>–sudo<br>使用–sudo选项，可以强制所有play都使用sudo用户，同时使用–sudo-user选项指定sudo可以使用哪个用户的权限  </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">以yyg身份运行playbook，并在执行执行过程中交互式输入密码</span><br><span class=\"line\">ansible-playbook XXX.yml --sudo --sudo-user=yyg -ask-sudo-pass</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"其他常用选项\"><a href=\"#其他常用选项\" class=\"headerlink\" title=\"其他常用选项\"></a>其他常用选项</h2><ul>\n<li>–inventory=PATH   -i ：指定inventory文件  </li>\n<li>-v：输出详细信息  </li>\n<li>–fork=NUM ：执行并发数  </li>\n</ul>\n","categories":["ansible"],"tags":["playbook"]},{"title":"5-playbook拓展","url":"/2021/08/12/ansible/5-playbook%E6%8B%93%E5%B1%95/","content":"<p><img src=\"/2021/08/12/ansible/5-playbook%E6%8B%93%E5%B1%95/ansible.jpg\" alt=\"ansible\">  </p>\n<span id=\"more\"></span>\n<h1 id=\"Handlers\"><a href=\"#Handlers\" class=\"headerlink\" title=\"Handlers\"></a>Handlers</h1><p>首先我们设定以这个场景。<br>想要将test3主机中/home/test.txt文件中的<code>我们现在学习XXX</code>修改为<code>我们现在学习ansible</code>，并打印修改后的结果。<br>test.txt文本  </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">我们现在学习XXX</span><br><span class=\"line\">3</span><br><span class=\"line\">2</span><br><span class=\"line\">1</span><br></pre></td></tr></table></figure>\n<p>编写的playbook为  </p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">--- </span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">hosts :</span> <span class=\"string\">test3</span></span><br><span class=\"line\">  <span class=\"attr\">tasks :</span> </span><br><span class=\"line\">   <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">修改test3主机中/home/test.txt文件中的`我们现在学习XXX`修改为`我们现在学习ansible`</span></span><br><span class=\"line\">     <span class=\"attr\">lineinfile :</span></span><br><span class=\"line\">       <span class=\"attr\">path :</span> <span class=\"string\">/home/test.txt</span></span><br><span class=\"line\">       <span class=\"attr\">regexp :</span> <span class=\"string\">&quot;我们现在学习XXX&quot;</span></span><br><span class=\"line\">       <span class=\"attr\">line :</span> <span class=\"string\">&quot;我们现在学习ansible&quot;</span></span><br><span class=\"line\">   <span class=\"bullet\">-</span> <span class=\"attr\">name :</span> <span class=\"string\">将/home/test.txt中的内容输出到/home/test1.txt</span></span><br><span class=\"line\">     <span class=\"attr\">shell:</span> <span class=\"string\">cat</span> <span class=\"string\">/home/test.txt</span> <span class=\"string\">&gt;</span> <span class=\"string\">/home/test1.txt</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"/2021/08/12/ansible/5-playbook%E6%8B%93%E5%B1%95/%E6%89%A7%E8%A1%8C%E7%BB%93%E6%9E%9C.png\" alt=\"执行结果\"><br>可以看出两个任务都执行成功了。<br>如果要再执行一次该playbook呢。<br><img src=\"/2021/08/12/ansible/5-playbook%E6%8B%93%E5%B1%95/%E6%89%A7%E8%A1%8C%E7%BB%93%E6%9E%9C2.png\" alt=\"执行结果\"><br>task1因为文件状态与playbook中的状态是一致的，所以为绿的；但是task2为黄色，虽然也执行成功，最后的状态与我们的设定是一致的，但是相当于白执行了一次。在该例子中对结果或者过程影响不大，但是当我们需要修改某个服务的配置文件并进行重启服务时，就会对想先关的业务造成影响。<br>handlers可以对这种问题进行解决，简单来说handlers就是另一种tasks，handlers中的任务会被tasks中的任务进行调用。例如task1调用handler1，当task1执行状态为黄色时，handler1才会被执行，当task1执行状态为绿色，即task1没有被真正被执行时，handlers不会被执行。<br>对上面的palybook进行修改，<code>notify</code>执指向handlers中的任务（即handlers中任务的name）。</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">--- </span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">hosts :</span> <span class=\"string\">test3</span></span><br><span class=\"line\">  <span class=\"attr\">tasks :</span> </span><br><span class=\"line\">   <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">修改test3主机中/home/test.txt文件中的`我们现在学习XXX`修改为`我们现在学习ansible`</span></span><br><span class=\"line\">     <span class=\"attr\">lineinfile :</span></span><br><span class=\"line\">       <span class=\"attr\">path :</span> <span class=\"string\">/home/test.txt</span></span><br><span class=\"line\">       <span class=\"attr\">regexp :</span> <span class=\"string\">&quot;我们现在学习XXX&quot;</span></span><br><span class=\"line\">       <span class=\"attr\">line :</span> <span class=\"string\">&quot;我们现在学习ansible&quot;</span></span><br><span class=\"line\">     <span class=\"attr\">notify :</span> <span class=\"string\">重定向输出</span></span><br><span class=\"line\">  <span class=\"attr\">handlers :</span></span><br><span class=\"line\">   <span class=\"bullet\">-</span> <span class=\"attr\">name :</span> <span class=\"string\">重定向输出</span></span><br><span class=\"line\">     <span class=\"attr\">shell:</span> <span class=\"string\">cat</span> <span class=\"string\">/home/test.txt</span> <span class=\"string\">&gt;</span> <span class=\"string\">/home/test1.txt</span></span><br></pre></td></tr></table></figure>\n<p>然后我们对/home/test.txt进行还原，然后重新执行playbook。<br><img src=\"/2021/08/12/ansible/5-playbook%E6%8B%93%E5%B1%95/%E9%87%8D%E6%96%B0%E6%89%A7%E8%A1%8C.png\" alt=\"重新执行\"><br>可以看出task和handler都执行了。<br>再执行一边。<br><img src=\"/2021/08/12/ansible/5-playbook%E6%8B%93%E5%B1%95/%E9%87%8D%E6%96%B0%E6%89%A7%E8%A1%8C2.png\" alt=\"重新执行2\"><br>可以看到只有task被执行了，handler没有被执行。  </p>\n<h2 id=\"Handlers进阶\"><a href=\"#Handlers进阶\" class=\"headerlink\" title=\"Handlers进阶\"></a>Handlers进阶</h2><p><code>notify</code>调用多个handler</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">notify :</span> </span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">testhandlers1</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">testhandlers2</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"mate模块-mate-flush-handlers\"><a href=\"#mate模块-mate-flush-handlers\" class=\"headerlink\" title=\"mate模块 (mate:flush_handlers)\"></a>mate模块 (mate:flush_handlers)</h3><figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">hosts :</span> <span class=\"string\">test3</span></span><br><span class=\"line\">  <span class=\"attr\">tasks :</span> </span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name :</span> <span class=\"string\">testtask1</span></span><br><span class=\"line\">      <span class=\"attr\">command :</span> <span class=\"string\">ls</span> <span class=\"string\">/home/</span></span><br><span class=\"line\">      <span class=\"attr\">notify :</span> <span class=\"string\">testhandlers2</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name :</span> <span class=\"string\">testtask2</span></span><br><span class=\"line\">      <span class=\"attr\">command :</span> <span class=\"string\">ls</span> <span class=\"string\">/home/</span></span><br><span class=\"line\">      <span class=\"attr\">notify :</span> <span class=\"string\">testhandlers1</span></span><br><span class=\"line\">  <span class=\"attr\">handlers :</span> </span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name :</span> <span class=\"string\">testhandlers1</span></span><br><span class=\"line\">      <span class=\"attr\">command :</span> <span class=\"string\">ls</span> <span class=\"string\">/home/yyg</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name :</span> <span class=\"string\">testhandlers2</span></span><br><span class=\"line\">      <span class=\"attr\">command :</span> <span class=\"string\">ls</span> <span class=\"string\">/home/yyg</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"/2021/08/12/ansible/5-playbook%E6%8B%93%E5%B1%95/%E5%A4%9A%E4%B8%AAhandler.png\" alt=\"多个handler\"><br>默认情况下handler执行的顺序与handler在playbook的handlers模块定义的顺序是相同的，与”handler被notify”的顺序无关。<strong>所有task执行完毕后，才会执行各个handler，并不是执行完某个task后，立即执行对应的handler</strong>。若要执行完task后马上执行对应handler，则需要使用mate模块。  </p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">hosts :</span> <span class=\"string\">test3</span></span><br><span class=\"line\">  <span class=\"attr\">tasks :</span> </span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name :</span> <span class=\"string\">testtask1</span></span><br><span class=\"line\">      <span class=\"attr\">command :</span> <span class=\"string\">ls</span> <span class=\"string\">/home/</span></span><br><span class=\"line\">      <span class=\"attr\">notify :</span> <span class=\"string\">testhandlers2</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">meta :</span> <span class=\"string\">flush_handlers</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name :</span> <span class=\"string\">testtask2</span></span><br><span class=\"line\">      <span class=\"attr\">command :</span> <span class=\"string\">ls</span> <span class=\"string\">/home/</span></span><br><span class=\"line\">      <span class=\"attr\">notify :</span> <span class=\"string\">testhandlers1</span></span><br><span class=\"line\">  <span class=\"attr\">handlers :</span> </span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name :</span> <span class=\"string\">testhandlers1</span></span><br><span class=\"line\">      <span class=\"attr\">command :</span> <span class=\"string\">ls</span> <span class=\"string\">/home/yyg</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name :</span> <span class=\"string\">testhandlers2</span></span><br><span class=\"line\">      <span class=\"attr\">command :</span> <span class=\"string\">ls</span> <span class=\"string\">/home/yyg</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"/2021/08/12/ansible/5-playbook%E6%8B%93%E5%B1%95/mate.png\" alt=\"mate\"><br>在testtask1和testtask2之间有一个mate任务，meta任务能够影响ansible内部运行方式，<code>meta : flush_handlers</code>表示立即执行之前的task所对应handler，mate之前有多个notify调用时，被调用的handler的执行顺序还是与handlers模块的顺序一致。  </p>\n<h3 id=\"listen模块\"><a href=\"#listen模块\" class=\"headerlink\" title=\"listen模块\"></a>listen模块</h3><p>使用<code>listen</code>对handler进行“分组”，使用notify调用该组时将会调用该组下的成员。  </p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">hosts :</span> <span class=\"string\">test3</span></span><br><span class=\"line\">  <span class=\"attr\">tasks :</span> </span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name :</span> <span class=\"string\">test1</span></span><br><span class=\"line\">      <span class=\"attr\">command :</span> <span class=\"string\">ls</span> <span class=\"string\">/home</span></span><br><span class=\"line\">      <span class=\"attr\">notify :</span> <span class=\"string\">listenTest</span></span><br><span class=\"line\">  <span class=\"attr\">handlers :</span> </span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name :</span> <span class=\"string\">handler1</span></span><br><span class=\"line\">      <span class=\"attr\">listen :</span> <span class=\"string\">listenTest</span></span><br><span class=\"line\">      <span class=\"attr\">command :</span> <span class=\"string\">ls</span> <span class=\"string\">/home/yyg</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name :</span> <span class=\"string\">handler2</span></span><br><span class=\"line\">      <span class=\"attr\">listen :</span> <span class=\"string\">listenTest</span></span><br><span class=\"line\">      <span class=\"attr\">command :</span> <span class=\"string\">ls</span> <span class=\"string\">/home/yyg</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"/2021/08/12/ansible/5-playbook%E6%8B%93%E5%B1%95/listen.png\" alt=\"listen\">  </p>\n<h1 id=\"变量\"><a href=\"#变量\" class=\"headerlink\" title=\"变量\"></a>变量</h1><p>playbook中的变量名以英文大小写字母开头，中间可以包含下划线和数字。<br>在Inventory文件中以<code>=</code>来为变量赋值，在playbook或者变量配置文件中以<code>:</code>来为变量赋值。  </p>\n<h2 id=\"playbook变量\"><a href=\"#playbook变量\" class=\"headerlink\" title=\"playbook变量\"></a>playbook变量</h2><ol>\n<li><p>运行playbook时指定额外的变量  </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">ansible-playbook test.yml -e &quot;newVar=test&quot;  #指定额外的变量</span><br><span class=\"line\">ansible-playbook test.yml -e &quot;@newVar.yml&quot;  #指定变量配置文件</span><br></pre></td></tr></table></figure></li>\n<li><p>playbook中定义变量<br>使用<code>vars</code>来进行定义变量。  </p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">hosts :</span> <span class=\"string\">test3</span></span><br><span class=\"line\">  <span class=\"attr\">vars :</span> </span><br><span class=\"line\">    <span class=\"attr\">var1 :</span> <span class=\"string\">test1</span></span><br><span class=\"line\">    <span class=\"attr\">var2 :</span> <span class=\"string\">test2</span></span><br><span class=\"line\">   <span class=\"comment\">#- var1 : test1   这样定义也是可以的</span></span><br><span class=\"line\">   <span class=\"comment\">#- var2 : test2</span></span><br><span class=\"line\">  <span class=\"attr\">tasks :</span> </span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name :</span> <span class=\"string\">变量测试</span></span><br><span class=\"line\">      <span class=\"attr\">debug :</span> </span><br><span class=\"line\">        <span class=\"attr\">msg :</span> <span class=\"string\">var1=&#123;&#123;var1&#125;&#125;</span>  <span class=\"string\">var2=&#123;&#123;var2&#125;&#125;</span></span><br></pre></td></tr></table></figure>\n<p>debug模块的msg参数可以自定义输出；而var参数可以直接输出变量信息，且不需要使用两个括号进行引起</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">hosts :</span> <span class=\"string\">test3</span></span><br><span class=\"line\">  <span class=\"attr\">vars :</span></span><br><span class=\"line\">   <span class=\"bullet\">-</span> <span class=\"attr\">var1 :</span> <span class=\"string\">test1</span></span><br><span class=\"line\">  <span class=\"attr\">tasks :</span></span><br><span class=\"line\">   <span class=\"bullet\">-</span> <span class=\"attr\">name :</span> <span class=\"string\">变量测试</span></span><br><span class=\"line\">     <span class=\"attr\">debug :</span></span><br><span class=\"line\">       <span class=\"attr\">var :</span></span><br><span class=\"line\">         <span class=\"string\">var1</span></span><br></pre></td></tr></table></figure>\n<p>也可以在playbook中引用变量文件  </p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#palybook文件</span></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">hosts :</span> <span class=\"string\">test3</span></span><br><span class=\"line\">  <span class=\"attr\">vars_files :</span> </span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">vars.yml</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">vars.yml</span></span><br><span class=\"line\">  <span class=\"attr\">tasks :</span> </span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name :</span> <span class=\"string\">变量文件测试</span></span><br><span class=\"line\">      <span class=\"attr\">debug :</span> </span><br><span class=\"line\">        <span class=\"attr\">msg :</span> <span class=\"string\">&quot;<span class=\"template-variable\">&#123;&#123;var1&#125;&#125;</span>&quot;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">var1 :</span> <span class=\"string\">test</span></span><br></pre></td></tr></table></figure>\n<p>在使用<code>：</code>的方式引用变量<code>&#123;&#123;var1&#125;&#125;</code>时，当<code>&#123;&#123;var1&#125;&#125;</code>处于开头位置需要加上引号，当<code>&#123;&#123;var1&#125;&#125;</code>前有字符串时则可以不加双引号。<br>除了使用<code>：</code>来进行引用变量，还可以使用<code>=</code>来引用变量，使用<code>=</code>来引用变量时可以不用考虑加不加双引号。  </p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">hosts :</span> <span class=\"string\">test3</span></span><br><span class=\"line\">  <span class=\"attr\">vars :</span> </span><br><span class=\"line\">    <span class=\"attr\">var1 :</span> <span class=\"string\">test1</span></span><br><span class=\"line\">  <span class=\"attr\">tasks :</span> </span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name :</span> <span class=\"string\">变量测试</span></span><br><span class=\"line\">      <span class=\"attr\">debug :</span> </span><br><span class=\"line\">        <span class=\"string\">msg</span> <span class=\"string\">=</span> &#123;&#123;<span class=\"string\">var1</span>&#125;&#125;</span><br></pre></td></tr></table></figure>\n<p>在playbook中还可以以类似”属性”的方式定义变量  </p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">hosts :</span> <span class=\"string\">test3</span></span><br><span class=\"line\">  <span class=\"attr\">vars :</span> </span><br><span class=\"line\">    <span class=\"attr\">people :</span> </span><br><span class=\"line\">      <span class=\"attr\">name :</span> <span class=\"string\">xiaoming</span></span><br><span class=\"line\">      <span class=\"attr\">age :</span> <span class=\"number\">20</span></span><br><span class=\"line\">  <span class=\"attr\">tasks :</span> </span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name :</span> <span class=\"string\">变量测试</span></span><br><span class=\"line\">      <span class=\"attr\">debug :</span> </span><br><span class=\"line\">        <span class=\"attr\">msg :</span> <span class=\"string\">名字为&#123;&#123;people.name&#125;&#125;,年龄为&#123;&#123;people.age&#125;&#125;</span></span><br></pre></td></tr></table></figure></li>\n</ol>\n<h2 id=\"注册变量\"><a href=\"#注册变量\" class=\"headerlink\" title=\"注册变量\"></a>注册变量</h2><p>注册变量就是将操作的结果，包括标准输出和标准错误输出，保存到变量中。在同一个yml中操作同一台主机时，前一个play定义了register变量，后面的同一台主机中也可以调用到该register变量。  </p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">--- </span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">hosts :</span> <span class=\"string\">test3</span></span><br><span class=\"line\">  <span class=\"attr\">tasks:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name :</span> <span class=\"string\">registerTest</span></span><br><span class=\"line\">      <span class=\"attr\">command :</span> <span class=\"string\">hostname</span></span><br><span class=\"line\">      <span class=\"attr\">register :</span> <span class=\"string\">hostname</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name :</span> <span class=\"string\">输出注册变量信息</span></span><br><span class=\"line\">      <span class=\"attr\">debug :</span> </span><br><span class=\"line\">        <span class=\"attr\">msg :</span> <span class=\"string\">&quot;<span class=\"template-variable\">&#123;&#123;hostname&#125;&#125;</span>&quot;</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"/2021/08/12/ansible/5-playbook%E6%8B%93%E5%B1%95/%E6%B3%A8%E5%86%8C%E5%8F%98%E9%87%8F.png\" alt=\"注册变量\"><br>这时就可以使用类似这样的方式引用详细的值  </p>\n<h2 id=\"Facts（收集系统信息）\"><a href=\"#Facts（收集系统信息）\" class=\"headerlink\" title=\"Facts（收集系统信息）\"></a>Facts（收集系统信息）</h2><p>运行playbook之前，ansible默认会先抓取playbook指定的所有主机的系统信息，这些信息就成为facts。<br><img src=\"/2021/08/12/ansible/5-playbook%E6%8B%93%E5%B1%95/playbook%E6%89%A7%E8%A1%8C%E7%BB%93%E6%9E%9C%E5%BC%80%E5%A4%B4.png\" alt=\"playbook执行结果开头\"><br>facts信息包含远程主机的CPU、IP、磁盘空间、操作系统信息等等。可以根据这些信息来判断是否进行下一步任务，或者将这些信息写入到某个配置中。<br>这些信息可以使用setup模块来获取  </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">ansible test3 -m setup</span><br></pre></td></tr></table></figure>\n<p>对于使用不到这些信息的playbook来说收集facts的过程是可以跳过的。  </p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">hosts :</span> <span class=\"string\">test3</span></span><br><span class=\"line\">  <span class=\"attr\">gather_facts :</span> <span class=\"literal\">no</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"facts变量\"><a href=\"#facts变量\" class=\"headerlink\" title=\"facts变量\"></a>facts变量</h3><p>定义远程主机的facts变量，需要在远程主机的<code>/etc/ansible/facts.d</code>目录下创建INI风格的xxx.fact文件。  </p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#/etc/ansible/facts.d/test.fact文件</span></span><br><span class=\"line\">[<span class=\"string\">test</span>]</span><br><span class=\"line\"><span class=\"string\">user=test</span></span><br><span class=\"line\"><span class=\"string\">pwd=/etc/ansible/facts.d</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"/2021/08/12/ansible/5-playbook%E6%8B%93%E5%B1%95/facts%E5%8F%98%E9%87%8F.png\" alt=\"facts变量\"><br><code>filter=ansible_local</code> 表示将ansible_local（本地facts）从所有facts中过滤出来，也可以使用<code>*local</code>类似这样的通配符进行匹配。<br>setup收集的本地fact变量是从/etc/ansible/facts.d目录下的文件中收集，当我们的facts变量文件是在远程主机的其他目录下时，需要指定文件路径</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">#当facts变量文件是在/tmp目录下</span><br><span class=\"line\">ansible test3 -m setup -a &#x27;fact_path=/tmp&#x27;</span><br></pre></td></tr></table></figure>\n<h2 id=\"通过set-fact定义变量\"><a href=\"#通过set-fact定义变量\" class=\"headerlink\" title=\"通过set_fact定义变量\"></a>通过set_fact定义变量</h2><p>可以使用set_fact模块在tesk中定义变量。在同一个yml中操作同一台主机时，前一个play定义了set_fact变量，后面的同一台主机中也可以调用到该set_fact变量。  </p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">hosts :</span> <span class=\"string\">test3</span></span><br><span class=\"line\">  <span class=\"attr\">tasks :</span> </span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name :</span> <span class=\"string\">set_fact测试</span></span><br><span class=\"line\">      <span class=\"attr\">set_fact :</span> </span><br><span class=\"line\">        <span class=\"attr\">test_var :</span> <span class=\"string\">&quot;testvar&quot;</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name :</span> <span class=\"string\">测试输出</span> </span><br><span class=\"line\">      <span class=\"attr\">debug :</span> </span><br><span class=\"line\">        <span class=\"attr\">msg :</span> <span class=\"string\">&quot;<span class=\"template-variable\">&#123;&#123;test_var&#125;&#125;</span>&quot;</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">hosts :</span> <span class=\"string\">test3</span></span><br><span class=\"line\">  <span class=\"attr\">tasks :</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name :</span> <span class=\"string\">测试set_fact变量</span></span><br><span class=\"line\">      <span class=\"attr\">debug :</span> </span><br><span class=\"line\">        <span class=\"attr\">msg :</span> <span class=\"string\">输出上一个play中的test_var=</span> &#123;&#123;<span class=\"string\">test_var</span>&#125;&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"/2021/08/12/ansible/5-playbook%E6%8B%93%E5%B1%95/set_fact.png\" alt=\"set_fact\"></p>\n<h2 id=\"提示用户输入信息并写入到变量\"><a href=\"#提示用户输入信息并写入到变量\" class=\"headerlink\" title=\"提示用户输入信息并写入到变量\"></a>提示用户输入信息并写入到变量</h2><p>实现交互式输入信息，并将信息</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">hosts:</span> <span class=\"string\">test3</span></span><br><span class=\"line\">  <span class=\"attr\">remote_user:</span> <span class=\"string\">root</span></span><br><span class=\"line\">  <span class=\"attr\">vars_prompt:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">&quot;your_name&quot;</span>    <span class=\"comment\">#输入的值存入的变量</span></span><br><span class=\"line\">      <span class=\"attr\">prompt:</span> <span class=\"string\">&quot;What is your name&quot;</span>   <span class=\"comment\">#输入提示</span></span><br><span class=\"line\">      <span class=\"attr\">private:</span> <span class=\"literal\">no</span>     <span class=\"comment\">#表示显示输入</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">&quot;your_age&quot;</span></span><br><span class=\"line\">      <span class=\"attr\">prompt:</span> <span class=\"string\">&quot;How old are you&quot;</span></span><br><span class=\"line\">      <span class=\"attr\">private:</span> <span class=\"literal\">no</span>    </span><br><span class=\"line\">  <span class=\"attr\">tasks:</span></span><br><span class=\"line\">   <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">output</span> <span class=\"string\">vars</span></span><br><span class=\"line\">     <span class=\"attr\">debug:</span></span><br><span class=\"line\">      <span class=\"attr\">msg:</span> <span class=\"string\">Your</span> <span class=\"string\">name</span> <span class=\"string\">is</span> &#123;&#123;<span class=\"string\">your_name</span>&#125;&#125;<span class=\"string\">,You</span> <span class=\"string\">are</span> &#123;&#123;<span class=\"string\">your_age</span>&#125;&#125; <span class=\"string\">years</span> <span class=\"string\">old.</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"/2021/08/12/ansible/5-playbook%E6%8B%93%E5%B1%95/%E4%BA%A4%E4%BA%92%E8%BE%93%E5%85%A5.png\" alt=\"交互输入\"><br>这样在输入值的时候就可以看到输入的确切的值，若是不想显示则将private设置为yes(默认选项)。  </p>\n<h2 id=\"内置变量\"><a href=\"#内置变量\" class=\"headerlink\" title=\"内置变量\"></a>内置变量</h2><h3 id=\"ansible-version\"><a href=\"#ansible-version\" class=\"headerlink\" title=\"ansible_version\"></a>ansible_version</h3><p>内置变量ansible_version可以获取到ansible的版本号  </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">ansible test3 -m debug -a &quot;msg=&#123;&#123;ansible_version&#125;&#125;&quot;</span><br></pre></td></tr></table></figure>\n<p><img src=\"/2021/08/12/ansible/5-playbook%E6%8B%93%E5%B1%95/ansible_version.png\" alt=\"ansible_version\">  </p>\n<h3 id=\"hostvars\"><a href=\"#hostvars\" class=\"headerlink\" title=\"hostvars\"></a>hostvars</h3><p>hostvars可以在操作A主机时获取到B主机的信息。  </p>\n<ul>\n<li><p>收集facts信息</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">hosts :</span> <span class=\"string\">test4</span></span><br><span class=\"line\">  <span class=\"attr\">name :</span> <span class=\"string\">play1</span> <span class=\"string\">hostsname</span> <span class=\"string\">is</span> <span class=\"string\">test4</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">hosts :</span> <span class=\"string\">test3</span> </span><br><span class=\"line\">  <span class=\"attr\">name :</span> <span class=\"string\">play2</span> <span class=\"string\">hostsname</span> <span class=\"string\">is</span> <span class=\"string\">test3</span></span><br><span class=\"line\">  <span class=\"attr\">tasks :</span> </span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">debug :</span> </span><br><span class=\"line\">        <span class=\"attr\">msg :</span> <span class=\"string\">hostvars[&#x27;test4&#x27;].ansible_hostname:&#123;&#123;hostvars[&#x27;test4&#x27;].ansible_hostname&#125;&#125;</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"/2021/08/12/ansible/5-playbook%E6%8B%93%E5%B1%95/hostvars1.png\" alt=\"hostvars1\"><br>play1并没有task，但是这并不代表play1是没有用的，正是运行过play1收集了test4的facts信息，在play2中才可以使用fast4的facts信息。  </p>\n</li>\n<li><p>收集注册变量、主机变量、组变量<br>收集注册变量时，不需要像收集facts信息一样需要事先进行收集，同样的也可以收集在主机清单中配置的主机变量与组变量  </p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">hosts :</span> <span class=\"string\">test4</span> </span><br><span class=\"line\">  <span class=\"attr\">tasks :</span> </span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">shell :</span> <span class=\"string\">&quot;echo this is test4 &quot;</span></span><br><span class=\"line\">      <span class=\"attr\">register :</span> <span class=\"string\">testvar</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">hosts :</span> <span class=\"string\">test3</span> </span><br><span class=\"line\">  <span class=\"attr\">tasks :</span> </span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">debug :</span> </span><br><span class=\"line\">        <span class=\"attr\">msg :</span> <span class=\"string\">&quot;<span class=\"template-variable\">&#123;&#123;hostvars.test4.testvar&#125;&#125;</span>&quot;</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"/2021/08/12/ansible/5-playbook%E6%8B%93%E5%B1%95/hostvars2.png\" alt=\"hostvars2\">  </p>\n</li>\n<li><p>收集定义变量<br>在play中使用vars定义的变量是无法被hostvars收集的，但是可以通过set_fact进行定义，这样变量就可以像facts信息一样被收集。  </p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">hosts :</span> <span class=\"string\">test4</span> </span><br><span class=\"line\">  <span class=\"attr\">tasks :</span> </span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">set_fact :</span> </span><br><span class=\"line\">        <span class=\"attr\">testvar :</span> <span class=\"string\">testvalue</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">hosts :</span> <span class=\"string\">test3</span> </span><br><span class=\"line\">  <span class=\"attr\">tasks :</span> </span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">debug :</span> </span><br><span class=\"line\">        <span class=\"attr\">msg :</span> <span class=\"string\">&quot;<span class=\"template-variable\">&#123;&#123;hostvars.test4.testvar&#125;&#125;</span>&quot;</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"/2021/08/12/ansible/5-playbook%E6%8B%93%E5%B1%95/hostvars3.png\" alt=\"hostvars3\">  </p>\n</li>\n</ul>\n<h3 id=\"inventory-hostname\"><a href=\"#inventory-hostname\" class=\"headerlink\" title=\"inventory_hostname\"></a>inventory_hostname</h3><p>inventory_hostname可以获取到被操作主机的主机名（并不是linux的主机名，而是在ansible管理端主机清单中的主机名）。如果配置清单中只是IP那么inventory_hostname获取到的则是IP。  </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">#/home/ansible/hosts文件</span><br><span class=\"line\">testtest ansible_host=192.168.27.7</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">--- </span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">hosts :</span> <span class=\"string\">testtest</span></span><br><span class=\"line\">  <span class=\"attr\">tasks :</span> </span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name :</span> <span class=\"string\">输出主机清单中的主机名</span></span><br><span class=\"line\">      <span class=\"attr\">debug :</span> </span><br><span class=\"line\">        <span class=\"attr\">msg :</span> <span class=\"string\">&quot;<span class=\"template-variable\">&#123;&#123;inventory_hostname&#125;&#125;</span>&quot;</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name :</span> <span class=\"string\">定义操作主机的linux主机名</span> </span><br><span class=\"line\">      <span class=\"attr\">command :</span> <span class=\"string\">hostname</span></span><br><span class=\"line\">      <span class=\"attr\">register :</span> <span class=\"string\">hostname</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name :</span> <span class=\"string\">输出操作的主机的linux主机名</span></span><br><span class=\"line\">      <span class=\"attr\">debug :</span> </span><br><span class=\"line\">        <span class=\"attr\">msg :</span> <span class=\"string\">&quot;<span class=\"template-variable\">&#123;&#123;hostname.stdout&#125;&#125;</span>&quot;</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"/2021/08/12/ansible/5-playbook%E6%8B%93%E5%B1%95/inventory_hostname.png\" alt=\"inventory_hostname\">  </p>\n<h3 id=\"inventory-hostname-short\"><a href=\"#inventory-hostname-short\" class=\"headerlink\" title=\"inventory_hostname_short\"></a>inventory_hostname_short</h3><p>与inventory_hostname类似，inventory_hostname_short返回的则是简短名称(主机清单主机名称“.”分割的第一段名称)  </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">#/home/ansible/hosts文件</span><br><span class=\"line\">[test]</span><br><span class=\"line\">test.test3 ansible_host=192.168.27.7</span><br><span class=\"line\">192.168.27.8</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">ansible test -i /home/ansible/hosts -m debug -a &quot;msg=&#123;&#123;inventory_hostname_short&#125;&#125;&quot;</span><br></pre></td></tr></table></figure>\n<p><img src=\"/2021/08/12/ansible/5-playbook%E6%8B%93%E5%B1%95/inventory_hostname_short.png\" alt=\"inventory_hostname_short\">  </p>\n<h3 id=\"play-hosts\"><a href=\"#play-hosts\" class=\"headerlink\" title=\"play_hosts\"></a>play_hosts</h3><p>plsy_hosts可以获取到当前play操作的所有主机的主机列表名称。  </p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">--- </span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">hosts :</span> <span class=\"string\">test3</span></span><br><span class=\"line\">  <span class=\"attr\">name :</span> <span class=\"string\">play1</span></span><br><span class=\"line\">  <span class=\"attr\">tasks :</span> </span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">debug :</span> </span><br><span class=\"line\">        <span class=\"attr\">msg :</span> <span class=\"string\">&quot;<span class=\"template-variable\">&#123;&#123;play_hosts&#125;&#125;</span>&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">hosts :</span> <span class=\"string\">test3</span> <span class=\"string\">test4</span></span><br><span class=\"line\">  <span class=\"attr\">name :</span> <span class=\"string\">play2</span></span><br><span class=\"line\">  <span class=\"attr\">tasks :</span> </span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">debug :</span> </span><br><span class=\"line\">        <span class=\"attr\">msg :</span> <span class=\"string\">&quot;<span class=\"template-variable\">&#123;&#123;play_hosts&#125;&#125;</span>&quot;</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"/2021/08/12/ansible/5-playbook%E6%8B%93%E5%B1%95/play_hosts.png\" alt=\"play_hosts\">  </p>\n<h3 id=\"groups\"><a href=\"#groups\" class=\"headerlink\" title=\"groups\"></a>groups</h3><p>groups可以获取到主机清单中所有的组信息。  </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">#/home/ansible/hosts文件</span><br><span class=\"line\">test4 ansible_host=192.168.27.8</span><br><span class=\"line\">[test]</span><br><span class=\"line\">test3 ansible_host=192.168.27.7</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">ansible test3 -i /home/ansible/hosts -m debug -a &#x27;msg=&quot;&#123;&#123;groups&#125;&#125;&quot;&#x27;</span><br></pre></td></tr></table></figure>\n<p><img src=\"/2021/08/12/ansible/5-playbook%E6%8B%93%E5%B1%95/groups1.png\" alt=\"groups1\"><br>当然可以获取指定组的信息。  </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">ansible test3 -i /home/ansible/hosts -m debug -a &#x27;msg=&quot;&#123;&#123;groups.test&#125;&#125;&quot;&#x27;</span><br><span class=\"line\">ansible test3 -i /home/ansible/hosts -m debug -a &#x27;msg=&quot;&#123;&#123;groups.ungrouped&#125;&#125;&quot;&#x27;  #后去未分组的主机</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"group-names\"><a href=\"#group-names\" class=\"headerlink\" title=\"group_names\"></a>group_names</h3><p>获取当前操作主机在主机清单中的分组名。  </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">#/home/ansible/hosts文件</span><br><span class=\"line\">[allhosts:children]</span><br><span class=\"line\">test</span><br><span class=\"line\">[test]</span><br><span class=\"line\">test3 ansible_host=192.168.27.7</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">ansible test3 -i /home/ansible/hosts -m debug -a &#x27;msg=&quot;&#123;&#123;group_names&#125;&#125;&quot;&#x27;</span><br></pre></td></tr></table></figure>\n<p><img src=\"/2021/08/12/ansible/5-playbook%E6%8B%93%E5%B1%95/group_names.png\" alt=\"group_names\"><br>因为test3属于test分组，而test分组又属于allhosts分组。  </p>\n<h3 id=\"inventory-dir\"><a href=\"#inventory-dir\" class=\"headerlink\" title=\"inventory_dir\"></a>inventory_dir</h3><p>该变量可以获取到使用的inventory文件的位置。<br><img src=\"/2021/08/12/ansible/5-playbook%E6%8B%93%E5%B1%95/inventory_dir.png\" alt=\"inventory_dir\">  </p>\n","categories":["ansible"],"tags":["playbook"]},{"title":"6-playbook流程控制","url":"/2021/08/15/ansible/6-playbook%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/","content":"<p><img src=\"/2021/08/15/ansible/6-playbook%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/ansible.jpg\" alt=\"ansible\">  </p>\n<span id=\"more\"></span>\n<h1 id=\"循环\"><a href=\"#循环\" class=\"headerlink\" title=\"循环\"></a>循环</h1><h2 id=\"with-items\"><a href=\"#with-items\" class=\"headerlink\" title=\"with_items\"></a>with_items</h2><p>/home/ansible/hosts 配置清单</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">test3</span><br><span class=\"line\">test4</span><br><span class=\"line\">192.168.27.7</span><br></pre></td></tr></table></figure>\n<p><img src=\"/2021/08/15/ansible/6-playbook%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/%E6%9C%AA%E5%88%86%E7%BB%84%E7%9A%84%E4%B8%BB%E6%9C%BA%E7%9A%84%E4%B8%BB%E6%9C%BA%E5%90%8D.png\" alt=\"未分组的主机的主机名\"><br>当想要获取第二条主机名时可以使用<code>&#123;&#123;groups.ungrouped[1]&#125;&#125;</code>来进行获取。<br><img src=\"/2021/08/15/ansible/6-playbook%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/%E7%AC%AC%E4%BA%8C%E6%9D%A1%E6%9C%AA%E5%88%86%E7%BB%84%E7%9A%84%E4%B8%BB%E6%9C%BA%E7%9A%84%E4%B8%BB%E6%9C%BA%E5%90%8D.png\" alt=\"第二条未分组的主机的主机名\"><br>可以在playbook中使用with_items进行循环</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">--- </span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">hosts :</span> <span class=\"string\">test3</span></span><br><span class=\"line\">  <span class=\"attr\">tasks :</span> </span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name :</span> <span class=\"string\">输出未分组的主机的主机名</span></span><br><span class=\"line\">      <span class=\"comment\">#关键字with_items会将&#123;&#123;groups.ungrouped&#125;&#125;的列表信息进行处理，将每条信息单独放在&#123;&#123;item&#125;&#125;中，获取&#123;&#123;item&#125;&#125;的值时会循环获取列表中的每一条信息</span></span><br><span class=\"line\">      <span class=\"attr\">with_items :</span> <span class=\"string\">&quot;<span class=\"template-variable\">&#123;&#123;groups.ungrouped&#125;&#125;</span>&quot;</span> </span><br><span class=\"line\">      <span class=\"attr\">debug :</span> </span><br><span class=\"line\">        <span class=\"attr\">msg :</span> <span class=\"string\">&quot;<span class=\"template-variable\">&#123;&#123;item&#125;&#125;</span>&quot;</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"/2021/08/15/ansible/6-playbook%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/%E5%BE%AA%E7%8E%AF%E8%BE%93%E5%87%BA%E6%9C%AA%E5%88%86%E7%BB%84%E7%9A%84%E4%B8%BB%E6%9C%BA%E7%9A%84%E4%B8%BB%E6%9C%BA%E5%90%8D.png\" alt=\"循环输出未分组的主机的主机名\">  </p>\n<h3 id=\"自定义列表进行循环\"><a href=\"#自定义列表进行循环\" class=\"headerlink\" title=\"自定义列表进行循环\"></a>自定义列表进行循环</h3><figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">--- </span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">hosts :</span> <span class=\"string\">test3</span></span><br><span class=\"line\">  <span class=\"attr\">tasks :</span> </span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name :</span> <span class=\"string\">自定义一个列表进行循环</span></span><br><span class=\"line\">     <span class=\"comment\">#with_items : [1,2,3]</span></span><br><span class=\"line\">      <span class=\"attr\">with_items :</span> </span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"number\">2</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"number\">3</span> </span><br><span class=\"line\">      <span class=\"attr\">debug :</span></span><br><span class=\"line\">        <span class=\"attr\">msg :</span> <span class=\"string\">&quot;<span class=\"template-variable\">&#123;&#123;item&#125;&#125;</span>&quot;</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"/2021/08/15/ansible/6-playbook%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/%E8%87%AA%E5%AE%9A%E4%B9%89%E5%88%97%E8%A1%A8%E8%BF%9B%E8%A1%8C%E5%BE%AA%E7%8E%AF.png\" alt=\"自定义列表进行循环\">  </p>\n<h3 id=\"循环复杂列表\"><a href=\"#循环复杂列表\" class=\"headerlink\" title=\"循环复杂列表\"></a>循环复杂列表</h3><figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">hosts :</span> <span class=\"string\">test3</span> </span><br><span class=\"line\">  <span class=\"attr\">tasks :</span> </span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name :</span> <span class=\"string\">循环复杂列表</span></span><br><span class=\"line\">      <span class=\"attr\">with_items:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> &#123;<span class=\"attr\">test1 :</span> <span class=\"number\">1</span>, <span class=\"attr\">test2 :</span> <span class=\"number\">2</span>&#125;</span><br><span class=\"line\">        <span class=\"bullet\">-</span> &#123;<span class=\"attr\">test1 :</span> <span class=\"string\">&quot;a&quot;</span>, <span class=\"attr\">test2 :</span> <span class=\"string\">&quot;b&quot;</span>&#125;</span><br><span class=\"line\">      <span class=\"attr\">debug :</span> </span><br><span class=\"line\">        <span class=\"attr\">msg :</span> <span class=\"string\">&quot;<span class=\"template-variable\">&#123;&#123;item.test1&#125;&#125;</span>&quot;</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"/2021/08/15/ansible/6-playbook%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/%E5%BE%AA%E7%8E%AF%E5%A4%8D%E6%9D%82%E5%88%97%E8%A1%A8.png\" alt=\"循环复杂列表\">  </p>\n<h3 id=\"初步实际运用\"><a href=\"#初步实际运用\" class=\"headerlink\" title=\"初步实际运用\"></a>初步实际运用</h3><p>循环创建文件  </p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">hosts :</span> <span class=\"string\">test3</span></span><br><span class=\"line\">  <span class=\"attr\">vars :</span></span><br><span class=\"line\">    <span class=\"attr\">dirs :</span> </span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">&quot;/opt/a&quot;</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">&quot;/opt/c&quot;</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">&quot;/opt/b&quot;</span></span><br><span class=\"line\">  <span class=\"attr\">tasks :</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name :</span> <span class=\"string\">循环创建文件</span></span><br><span class=\"line\">      <span class=\"attr\">with_items :</span> <span class=\"string\">&quot;<span class=\"template-variable\">&#123;&#123;dirs&#125;&#125;</span>&quot;</span></span><br><span class=\"line\">      <span class=\"attr\">file :</span></span><br><span class=\"line\">        <span class=\"attr\">path :</span> <span class=\"string\">&quot;<span class=\"template-variable\">&#123;&#123;item&#125;&#125;</span>&quot;</span></span><br><span class=\"line\">        <span class=\"attr\">state :</span> <span class=\"string\">touch</span> </span><br></pre></td></tr></table></figure>\n<p><img src=\"/2021/08/15/ansible/6-playbook%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/%E5%BE%AA%E7%8E%AF%E5%88%9B%E5%BB%BA%E6%96%87%E4%BB%B6.png\" alt=\"循环创建文件\">  </p>\n<h2 id=\"with-list\"><a href=\"#with-list\" class=\"headerlink\" title=\"with_list\"></a>with_list</h2><figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">hosts :</span> <span class=\"string\">test3</span></span><br><span class=\"line\">  <span class=\"attr\">tasks :</span> </span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name :</span> <span class=\"string\">循环输出列表</span></span><br><span class=\"line\">      <span class=\"attr\">with_list :</span> </span><br><span class=\"line\">        <span class=\"bullet\">-</span> [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>]</span><br><span class=\"line\">        <span class=\"bullet\">-</span> [<span class=\"string\">a</span>,<span class=\"string\">b</span>,<span class=\"string\">c</span>]</span><br><span class=\"line\">        <span class=\"comment\">#- </span></span><br><span class=\"line\">        <span class=\"comment\">#  - 1</span></span><br><span class=\"line\">        <span class=\"comment\">#  - 2</span></span><br><span class=\"line\">        <span class=\"comment\">#  - 3</span></span><br><span class=\"line\">        <span class=\"comment\">#- </span></span><br><span class=\"line\">        <span class=\"comment\">#  - a</span></span><br><span class=\"line\">        <span class=\"comment\">#  - b</span></span><br><span class=\"line\">        <span class=\"comment\">#  - c</span></span><br><span class=\"line\">      <span class=\"attr\">debug :</span> </span><br><span class=\"line\">        <span class=\"attr\">msg :</span> <span class=\"string\">&quot;<span class=\"template-variable\">&#123;&#123;item&#125;&#125;</span>&quot;</span></span><br><span class=\"line\"><span class=\"string\">```</span>  </span><br><span class=\"line\"><span class=\"type\">![</span><span class=\"string\">循环输出列表](6-playbook流程控制/循环输出列表.png)</span>  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## with_together  </span></span><br><span class=\"line\"><span class=\"string\">合并对齐:两个列表中相同位置的元素合并</span>  </span><br><span class=\"line\"><span class=\"string\">```YAML</span></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">hosts :</span> <span class=\"string\">test3</span></span><br><span class=\"line\">  <span class=\"attr\">tasks :</span> </span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name :</span> <span class=\"string\">对其合并</span></span><br><span class=\"line\">      <span class=\"attr\">with_together :</span> </span><br><span class=\"line\">        <span class=\"bullet\">-</span> [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>]</span><br><span class=\"line\">        <span class=\"bullet\">-</span> [<span class=\"string\">a</span>,<span class=\"string\">b</span>,<span class=\"string\">c</span>]</span><br><span class=\"line\">      <span class=\"attr\">debug :</span> </span><br><span class=\"line\">        <span class=\"attr\">msg :</span> <span class=\"string\">&quot;<span class=\"template-variable\">&#123;&#123;item&#125;&#125;</span>&quot;</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"/2021/08/15/ansible/6-playbook%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/%E5%90%88%E5%B9%B6%E5%AF%B9%E9%BD%90.png\" alt=\"合并对齐\"><br>若不能对齐的情况  </p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">hosts :</span> <span class=\"string\">test3</span></span><br><span class=\"line\">  <span class=\"attr\">tasks :</span> </span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name :</span> <span class=\"string\">对其合并</span></span><br><span class=\"line\">      <span class=\"attr\">with_together :</span> </span><br><span class=\"line\">        <span class=\"bullet\">-</span> [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>]</span><br><span class=\"line\">        <span class=\"bullet\">-</span> [<span class=\"string\">a</span>,<span class=\"string\">b</span>,<span class=\"string\">c</span>]</span><br><span class=\"line\">      <span class=\"attr\">debug :</span> </span><br><span class=\"line\">        <span class=\"attr\">msg :</span> <span class=\"string\">&quot;<span class=\"template-variable\">&#123;&#123;item&#125;&#125;</span>&quot;</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"/2021/08/15/ansible/6-playbook%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/%E4%B8%8D%E8%83%BD%E5%AF%B9%E9%BD%90%E7%9A%84%E6%83%85%E5%86%B5.png\" alt=\"不能对齐的情况\">  </p>\n<h2 id=\"with-cartesian\"><a href=\"#with-cartesian\" class=\"headerlink\" title=\"with_cartesian\"></a>with_cartesian</h2><p>交叉组合</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">hosts :</span> <span class=\"string\">test3</span></span><br><span class=\"line\">  <span class=\"attr\">tasks :</span> </span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name :</span> <span class=\"string\">对其合并</span></span><br><span class=\"line\">      <span class=\"attr\">with_cartesian :</span> </span><br><span class=\"line\">        <span class=\"bullet\">-</span> [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>]</span><br><span class=\"line\">        <span class=\"bullet\">-</span> [<span class=\"string\">a</span>,<span class=\"string\">b</span>,<span class=\"string\">c</span>]</span><br><span class=\"line\">      <span class=\"attr\">debug :</span> </span><br><span class=\"line\">        <span class=\"attr\">msg :</span> <span class=\"string\">&quot;<span class=\"template-variable\">&#123;&#123;item&#125;&#125;</span>&quot;</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"/2021/08/15/ansible/6-playbook%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/with_cartesian.png\" alt=\"with_cartesian\">  </p>\n<h2 id=\"with-sequence\"><a href=\"#with-sequence\" class=\"headerlink\" title=\"with_sequence\"></a>with_sequence</h2><p>按照顺序生成数字序列  </p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">--- </span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">hosts :</span> <span class=\"string\">test3</span></span><br><span class=\"line\">  <span class=\"attr\">tasks :</span>  </span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name :</span> <span class=\"string\">按照顺序生成数字序列</span>  </span><br><span class=\"line\">      <span class=\"attr\">with_sequence :</span>   <span class=\"comment\">#start=1 end=10 stride=2</span></span><br><span class=\"line\">        <span class=\"string\">start=1</span>   <span class=\"comment\">#中间不要有空格</span></span><br><span class=\"line\">        <span class=\"string\">end=10</span></span><br><span class=\"line\">        <span class=\"string\">stride=2</span>  <span class=\"comment\">#步长</span></span><br><span class=\"line\">      <span class=\"attr\">debug :</span> </span><br><span class=\"line\">        <span class=\"attr\">msg :</span> <span class=\"string\">&quot;<span class=\"template-variable\">&#123;&#123;item&#125;&#125;</span>&quot;</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"/2021/08/15/ansible/6-playbook%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/%E6%8C%89%E7%85%A7%E9%A1%BA%E5%BA%8F%E7%94%9F%E6%88%90%E6%95%B0%E5%AD%97%E5%BA%8F%E5%88%97.png\" alt=\"按照顺序生成数字序列\"><br>步长可以设定为负数，则表示递减，相应的start要比end数值大。<br>还有一种简写方式 ，简写方式默认stride为1，start为1  </p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">hosts :</span> <span class=\"string\">test3</span></span><br><span class=\"line\">  <span class=\"attr\">tasks :</span>  </span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name :</span> <span class=\"string\">简写方式</span></span><br><span class=\"line\">      <span class=\"attr\">with_sequence :</span> <span class=\"comment\">#count=5 </span></span><br><span class=\"line\">        <span class=\"string\">count=5</span></span><br><span class=\"line\">      <span class=\"attr\">debug :</span> </span><br><span class=\"line\">        <span class=\"attr\">msg :</span> <span class=\"string\">&quot;<span class=\"template-variable\">&#123;&#123;item&#125;&#125;</span>&quot;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"with-random-choice\"><a href=\"#with-random-choice\" class=\"headerlink\" title=\"with_random_choice\"></a>with_random_choice</h2><p>随机返回列表中一个值  </p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">hosts :</span> <span class=\"string\">test3</span></span><br><span class=\"line\">  <span class=\"attr\">tasks :</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name :</span> <span class=\"string\">随机返回列表中一个值</span></span><br><span class=\"line\">      <span class=\"attr\">with_random_choice :</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"number\">2</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"number\">3</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"number\">4</span></span><br><span class=\"line\">      <span class=\"attr\">debug :</span></span><br><span class=\"line\">        <span class=\"attr\">msg :</span> <span class=\"string\">&quot;<span class=\"template-variable\">&#123;&#123;item&#125;&#125;</span>&quot;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"with-dict\"><a href=\"#with-dict\" class=\"headerlink\" title=\"with_dict\"></a>with_dict</h2><p>循环键值对  </p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">hosts :</span> <span class=\"string\">test3</span></span><br><span class=\"line\">  <span class=\"attr\">vars :</span></span><br><span class=\"line\">    <span class=\"attr\">users :</span></span><br><span class=\"line\">      <span class=\"attr\">name :</span> <span class=\"string\">xiaoming</span></span><br><span class=\"line\">      <span class=\"attr\">age :</span> <span class=\"number\">10</span> </span><br><span class=\"line\">  <span class=\"attr\">tasks :</span> </span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name :</span> <span class=\"string\">循环键值对</span></span><br><span class=\"line\">      <span class=\"attr\">with_dict :</span> <span class=\"string\">&quot;<span class=\"template-variable\">&#123;&#123;users&#125;&#125;</span>&quot;</span></span><br><span class=\"line\">      <span class=\"attr\">debug :</span> </span><br><span class=\"line\">        <span class=\"attr\">msg :</span> <span class=\"string\">&quot;<span class=\"template-variable\">&#123;&#123;item&#125;&#125;</span>&quot;</span> <span class=\"comment\">#可以使用&quot;&#123;&#123;item.key&#125;&#125;&quot;、&quot;&#123;&#123;item.value&#125;&#125;&quot;来只获取键或者值</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"/2021/08/15/ansible/6-playbook%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/%E5%BE%AA%E7%8E%AF%E9%94%AE%E5%80%BC%E5%AF%B9.png\" alt=\"循环键值对\">  </p>\n<h2 id=\"with-file\"><a href=\"#with-file\" class=\"headerlink\" title=\"with_file\"></a>with_file</h2><p>循环读取ansible管理端主机本地的多个文件  </p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">hosts :</span> <span class=\"string\">test3</span></span><br><span class=\"line\">  <span class=\"attr\">vars :</span> </span><br><span class=\"line\">    <span class=\"attr\">files:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">/opt/test/a</span>  </span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">/opt/test/b</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">/opt/test/c</span></span><br><span class=\"line\">  <span class=\"attr\">tasks :</span> </span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name :</span> <span class=\"string\">循环读取ansible管理端主机本地文件</span></span><br><span class=\"line\">      <span class=\"attr\">with_file:</span> <span class=\"string\">&quot;<span class=\"template-variable\">&#123;&#123;files&#125;&#125;</span>&quot;</span></span><br><span class=\"line\">      <span class=\"attr\">debug :</span></span><br><span class=\"line\">        <span class=\"attr\">msg :</span> <span class=\"string\">&quot;<span class=\"template-variable\">&#123;&#123;item&#125;&#125;</span>&quot;</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"/2021/08/15/ansible/6-playbook%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/with_file.png\" alt=\"with_file\">  </p>\n<h2 id=\"with-fileglob\"><a href=\"#with-fileglob\" class=\"headerlink\" title=\"with_fileglob\"></a>with_fileglob</h2><p>在ansible管理端匹配文件名称,不会匹配到目录  </p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">hosts :</span> <span class=\"string\">test3</span></span><br><span class=\"line\">  <span class=\"attr\">tasks :</span> </span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name :</span> <span class=\"string\">配置/opt/test/下的所有文件</span></span><br><span class=\"line\">      <span class=\"attr\">with_fileglob :</span> <span class=\"string\">/opt/test/*</span></span><br><span class=\"line\">      <span class=\"attr\">debug :</span></span><br><span class=\"line\">        <span class=\"attr\">msg :</span> <span class=\"string\">&quot;<span class=\"template-variable\">&#123;&#123;item&#125;&#125;</span>&quot;</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"/2021/08/15/ansible/6-playbook%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/with_fileglob.png\" alt=\"with_fileglob\">  </p>\n","categories":["ansible"],"tags":["playbook流程控制"]},{"title":"7-playbook条件判断","url":"/2021/08/16/ansible/7-playbook%E6%9D%A1%E4%BB%B6%E5%88%A4%E6%96%AD/","content":"<p><img src=\"/2021/08/16/ansible/7-playbook%E6%9D%A1%E4%BB%B6%E5%88%A4%E6%96%AD/ansible.jpg\" alt=\"ansible\">  </p>\n<span id=\"more\"></span>\n\n<h2 id=\"when\"><a href=\"#when\" class=\"headerlink\" title=\"when\"></a>when</h2><p>ansible playbook中使用<code>when</code>作为条件判断的关键字,在when使用时后面的变量不加 <span style=\"background-color: #EEEEEE;\">{{ &emsp; }}</span>。  </p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">--- </span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">hosts :</span> <span class=\"string\">test3</span></span><br><span class=\"line\">  <span class=\"attr\">tasks :</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name :</span> <span class=\"string\">如果目标主机为centos则输出yes</span></span><br><span class=\"line\">      <span class=\"attr\">when :</span> <span class=\"string\">ansible_distribution</span> <span class=\"string\">==</span> <span class=\"string\">&quot;CentOS&quot;</span> <span class=\"comment\">#ansible_distribution表示目标主机系统的发行版</span></span><br><span class=\"line\">      <span class=\"attr\">debug :</span></span><br><span class=\"line\">        <span class=\"attr\">msg :</span> <span class=\"string\">&quot;yes&quot;</span></span><br></pre></td></tr></table></figure>\n<p>表示若ansible_distribution为CentOS，则将会调用debug模块；若不是，则不会调用。<br><img src=\"/2021/08/16/ansible/7-playbook%E6%9D%A1%E4%BB%B6%E5%88%A4%E6%96%AD/when.png\" alt=\"when\">  </p>\n<h2 id=\"运算符\"><a href=\"#运算符\" class=\"headerlink\" title=\"运算符\"></a>运算符</h2><p><strong>比较运算符</strong><br><code>==</code>:比较两个对象是否相等，相等为真<br><code>!=</code>:比较两个对象是否不等，不等为真<br><code>&gt; </code>:比较两个值的大小，如果左边的值大于右边的值，则为真<br><code>&lt; </code>:比较两个值的大小，如果左边的值小于右边的值，则为真<br><code>&gt;=</code>:比较两个值的大小，如果左边的值大于右边的值或左右相等，则为真<br><code>&lt;=</code>:比较两个值的大小，如果左边的值小于右边的值或左右相等，则为真<br><strong>逻辑运算符</strong><br><code>and</code>:逻辑与，当左边与右边同时为真，则返回真<br><code>or </code>:逻辑或，当左边与右边有任意一个为真，则返回真<br><code>not</code>:取反，对一个操作体取反<br><code>( )</code>:组合，将一组操作体包装在一起，形成一个较大的操作体<br>当逻辑运算符为<code>and</code>时有两种写法  </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">when: a==&quot;1&quot; and b == &quot;1&quot;</span><br><span class=\"line\">when :</span><br><span class=\"line\">  - a==&quot;1&quot;</span><br><span class=\"line\">  - b == &quot;1&quot;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"ignore-errors\"><a href=\"#ignore-errors\" class=\"headerlink\" title=\"ignore_errors\"></a>ignore_errors</h2><p>当前task执行报错，ansible也会忽略这个错误，继续执行playbook；若不使用，则当task报错时该playbook将会运行中断。  </p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">hosts :</span> <span class=\"string\">test3</span></span><br><span class=\"line\">  <span class=\"attr\">tasks :</span> </span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name :</span> <span class=\"string\">/ansible/a是一个不存在的路径</span></span><br><span class=\"line\">      <span class=\"attr\">shell :</span> <span class=\"string\">ls</span> <span class=\"string\">/ansible/a</span></span><br><span class=\"line\">      <span class=\"attr\">ignore_errors :</span> <span class=\"literal\">true</span></span><br><span class=\"line\">      <span class=\"attr\">register :</span> <span class=\"string\">result</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name :</span> <span class=\"string\">result的相关信息,查看是否执行失败</span></span><br><span class=\"line\">      <span class=\"attr\">debug :</span> </span><br><span class=\"line\">        <span class=\"attr\">msg :</span> <span class=\"string\">&quot;<span class=\"template-variable\">&#123;&#123;result.failed&#125;&#125;</span>&quot;</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"/2021/08/16/ansible/7-playbook%E6%9D%A1%E4%BB%B6%E5%88%A4%E6%96%AD/ignore_errors.png\" alt=\"ignore_errors\">  </p>\n<h2 id=\"tests\"><a href=\"#tests\" class=\"headerlink\" title=\"tests\"></a>tests</h2><p>tests是jinjia2中的，借助tests可以进行判断操作。  </p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">hosts :</span> <span class=\"string\">test3</span></span><br><span class=\"line\">  <span class=\"attr\">vars :</span> </span><br><span class=\"line\">    <span class=\"attr\">testpath :</span> <span class=\"string\">/opt/test</span></span><br><span class=\"line\">  <span class=\"attr\">tasks :</span> </span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name :</span> <span class=\"string\">判断ansible管理端是否有/opt/testtest这个路径</span></span><br><span class=\"line\">      <span class=\"attr\">when :</span> <span class=\"string\">testpath</span>  <span class=\"string\">exists</span></span><br><span class=\"line\">      <span class=\"attr\">debug :</span></span><br><span class=\"line\">        <span class=\"attr\">msg :</span> <span class=\"string\">&quot;<span class=\"template-variable\">&#123;&#123;testpath&#125;&#125;</span> is exists&quot;</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"/2021/08/16/ansible/7-playbook%E6%9D%A1%E4%BB%B6%E5%88%A4%E6%96%AD/tests.png\" alt=\"tests\"><br><code>is exists</code>是判断ansible管理端主机的路径的，当然也可以使用<code>is not exists</code>。  </p>\n<h3 id=\"判断变量的tests\"><a href=\"#判断变量的tests\" class=\"headerlink\" title=\"判断变量的tests\"></a>判断变量的tests</h3><p><strong>defined</strong>：判断变量是否定义，定义则返回真<br><strong>undefined</strong>：判断变量是否定义，未定义则返回真<br><strong>none</strong>：判断变量是否为空值，若已定义且为空值，则返回真  </p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">hosts :</span> <span class=\"string\">test3</span></span><br><span class=\"line\">  <span class=\"attr\">vars :</span> </span><br><span class=\"line\">    <span class=\"attr\">num1 :</span> <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"attr\">num3 :</span>  </span><br><span class=\"line\">  <span class=\"attr\">tasks :</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name :</span> <span class=\"string\">判断num1是否定义</span></span><br><span class=\"line\">      <span class=\"attr\">when :</span> <span class=\"string\">num1</span> <span class=\"string\">is</span> <span class=\"string\">defined</span></span><br><span class=\"line\">      <span class=\"attr\">debug :</span> </span><br><span class=\"line\">        <span class=\"attr\">msg :</span> <span class=\"string\">&quot;num1 is <span class=\"template-variable\">&#123;&#123;num1&#125;&#125;</span>&quot;</span> </span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name :</span> <span class=\"string\">判断num2是否定义</span></span><br><span class=\"line\">      <span class=\"attr\">when :</span> <span class=\"string\">num2</span> <span class=\"string\">is</span> <span class=\"string\">undefined</span></span><br><span class=\"line\">      <span class=\"attr\">debug :</span> </span><br><span class=\"line\">        <span class=\"attr\">msg :</span> <span class=\"string\">&quot;num2 is undefined&quot;</span> </span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name :</span> <span class=\"string\">判断num3是否为空值</span></span><br><span class=\"line\">      <span class=\"attr\">when :</span> <span class=\"string\">num3</span> <span class=\"string\">is</span> <span class=\"string\">none</span> </span><br><span class=\"line\">      <span class=\"attr\">debug :</span> </span><br><span class=\"line\">        <span class=\"attr\">msg :</span> <span class=\"string\">&quot;num3 is none&quot;</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"/2021/08/16/ansible/7-playbook%E6%9D%A1%E4%BB%B6%E5%88%A4%E6%96%AD/%E5%88%A4%E6%96%AD%E5%8F%98%E9%87%8F.png\" alt=\"判断变量\">  </p>\n<h3 id=\"判断执行结果的tests\"><a href=\"#判断执行结果的tests\" class=\"headerlink\" title=\"判断执行结果的tests\"></a>判断执行结果的tests</h3><p><strong>success或successded</strong>：通过任务的返回信息判断任务执行状态，任务执行成功返回真<br><strong>failure或failed</strong>：通过任务的返回信息判断任务执行状态，任务执行失败返回真<br><strong>change或changed</strong>：任务执行状态为change为真<br><strong>skip或skipped</strong>：任务没有满足条件，跳过执行时返回为真  </p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">hosts :</span> <span class=\"string\">test3</span></span><br><span class=\"line\">  <span class=\"attr\">vars :</span></span><br><span class=\"line\">      <span class=\"attr\">condition :</span> <span class=\"string\">&quot;yes&quot;</span></span><br><span class=\"line\">  <span class=\"attr\">tasks :</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name :</span> <span class=\"string\">设定一个判断场景</span></span><br><span class=\"line\">      <span class=\"attr\">shell :</span> <span class=\"string\">&quot;cat /home/test&quot;</span></span><br><span class=\"line\">      <span class=\"attr\">when :</span> <span class=\"string\">condition</span> <span class=\"string\">==</span> <span class=\"string\">&quot;yes&quot;</span></span><br><span class=\"line\">      <span class=\"attr\">register :</span> <span class=\"string\">returnmsg</span></span><br><span class=\"line\">      <span class=\"attr\">ignore_errors :</span> <span class=\"literal\">true</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name :</span> <span class=\"string\">查看执行状态</span></span><br><span class=\"line\">      <span class=\"attr\">debug :</span></span><br><span class=\"line\">        <span class=\"attr\">msg :</span> <span class=\"string\">&quot;<span class=\"template-variable\">&#123;&#123;returnmsg&#125;&#125;</span>&quot;</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name :</span> <span class=\"string\">判断执行结果是否为success</span></span><br><span class=\"line\">      <span class=\"attr\">when :</span> <span class=\"string\">returnmsg</span> <span class=\"string\">is</span> <span class=\"string\">success</span></span><br><span class=\"line\">      <span class=\"attr\">debug :</span></span><br><span class=\"line\">        <span class=\"attr\">msg :</span> <span class=\"string\">&quot;success&quot;</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name :</span> <span class=\"string\">判断执行结果是否为failed</span></span><br><span class=\"line\">      <span class=\"attr\">when :</span> <span class=\"string\">returnmsg</span> <span class=\"string\">is</span> <span class=\"string\">failure</span></span><br><span class=\"line\">      <span class=\"attr\">debug :</span></span><br><span class=\"line\">        <span class=\"attr\">msg :</span> <span class=\"string\">&quot;failure&quot;</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name :</span> <span class=\"string\">判断执行结果是否为change</span></span><br><span class=\"line\">      <span class=\"attr\">when :</span> <span class=\"string\">returnmsg</span> <span class=\"string\">is</span> <span class=\"string\">change</span></span><br><span class=\"line\">      <span class=\"attr\">debug :</span></span><br><span class=\"line\">        <span class=\"attr\">msg :</span> <span class=\"string\">&quot;change&quot;</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name :</span> <span class=\"string\">判断执行结果是否为skip</span></span><br><span class=\"line\">      <span class=\"attr\">when :</span> <span class=\"string\">returnmsg</span> <span class=\"string\">is</span> <span class=\"string\">skip</span></span><br><span class=\"line\">      <span class=\"attr\">debug :</span></span><br><span class=\"line\">        <span class=\"attr\">msg :</span> <span class=\"string\">&quot;skip&quot;</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"/2021/08/16/ansible/7-playbook%E6%9D%A1%E4%BB%B6%E5%88%A4%E6%96%AD/%E5%88%A4%E6%96%AD%E6%89%A7%E8%A1%8C%E7%BB%93%E6%9E%9C.png\" alt=\"判断执行结果\">  </p>\n<h3 id=\"判断路径的tests\"><a href=\"#判断路径的tests\" class=\"headerlink\" title=\"判断路径的tests\"></a>判断路径的tests</h3><p><em><strong>如下的tests都是针对ansible管理端主机中的路径，与目标主机无关</strong></em><br><strong>file</strong> : 判断路径是否是一个文件，如果路径是一个文件则返回真<br><strong>directory</strong> ：判断路径是否是一个目录，如果路径是一个目录则返回真<br><strong>link</strong> ：判断路径是否是一个软链接，如果路径是一个软链接则返回真<br><strong>mount</strong> :判断路径是否是一个挂载点，如果路径是一个挂载点则返回真<br><strong>exists</strong> :判断路径是否存在，如果路径存在则返回真  </p>\n<h3 id=\"判断字符串的tests\"><a href=\"#判断字符串的tests\" class=\"headerlink\" title=\"判断字符串的tests\"></a>判断字符串的tests</h3><p><strong>lower</strong>：判断包含字母的字符串中的字母是否是纯小写，字符串中的字母全部为小写则返回真<br><strong>upper</strong>：判断包含字母的字符串中的字母是否是纯大写，字符串中的字母全部为大写则返回真  </p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">hosts :</span> <span class=\"string\">test3</span> </span><br><span class=\"line\">  <span class=\"attr\">vars :</span> </span><br><span class=\"line\">    <span class=\"attr\">str1 :</span> <span class=\"string\">&quot;ABC&quot;</span></span><br><span class=\"line\">    <span class=\"attr\">str2 :</span> <span class=\"string\">&quot;abc&quot;</span></span><br><span class=\"line\">  <span class=\"attr\">tasks :</span> </span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name :</span> <span class=\"string\">判断str1是否全为大写字母</span></span><br><span class=\"line\">      <span class=\"attr\">when :</span> <span class=\"string\">str1</span> <span class=\"string\">is</span> <span class=\"string\">upper</span></span><br><span class=\"line\">      <span class=\"attr\">debug :</span> </span><br><span class=\"line\">        <span class=\"attr\">msg :</span> <span class=\"string\">&quot;str1全为大写，str1=<span class=\"template-variable\">&#123;&#123;str1&#125;&#125;</span>&quot;</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name :</span> <span class=\"string\">判断str2是否全为小写字母</span></span><br><span class=\"line\">      <span class=\"attr\">when :</span> <span class=\"string\">str2</span> <span class=\"string\">is</span> <span class=\"string\">lower</span></span><br><span class=\"line\">      <span class=\"attr\">debug :</span> </span><br><span class=\"line\">        <span class=\"attr\">msg :</span> <span class=\"string\">&quot;str2全为大写，str1=<span class=\"template-variable\">&#123;&#123;str2&#125;&#125;</span>&quot;</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"/2021/08/16/ansible/7-playbook%E6%9D%A1%E4%BB%B6%E5%88%A4%E6%96%AD/%E5%88%A4%E6%96%AD%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%A4%A7%E5%B0%8F%E5%86%99.png\" alt=\"判断字符串大小写\">  </p>\n<h3 id=\"判断整除的tests\"><a href=\"#判断整除的tests\" class=\"headerlink\" title=\"判断整除的tests\"></a>判断整除的tests</h3><p><strong>even</strong> : 判断数值是否为偶数<br><strong>odd</strong> : 判断数值是否为奇数<br><strong>divisibleby(NUM)</strong>:判断是可以被NUM整除  </p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">hosts :</span> <span class=\"string\">test3</span> </span><br><span class=\"line\">  <span class=\"attr\">vars :</span></span><br><span class=\"line\">    <span class=\"attr\">num1 :</span> <span class=\"number\">6</span></span><br><span class=\"line\">    <span class=\"attr\">num2 :</span> <span class=\"number\">3</span></span><br><span class=\"line\">    <span class=\"attr\">num3 :</span> <span class=\"number\">9</span></span><br><span class=\"line\">  <span class=\"attr\">tasks :</span> </span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name :</span> <span class=\"string\">判断num1是否为偶数</span></span><br><span class=\"line\">      <span class=\"attr\">when :</span> <span class=\"string\">num1</span> <span class=\"string\">is</span> <span class=\"string\">even</span></span><br><span class=\"line\">      <span class=\"attr\">debug :</span> </span><br><span class=\"line\">        <span class=\"attr\">msg :</span> <span class=\"string\">&quot;num1为<span class=\"template-variable\">&#123;&#123;num1&#125;&#125;</span>是整数&quot;</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name :</span> <span class=\"string\">判断num2是否为偶数</span></span><br><span class=\"line\">      <span class=\"attr\">when :</span> <span class=\"string\">num2</span> <span class=\"string\">is</span> <span class=\"string\">odd</span></span><br><span class=\"line\">      <span class=\"attr\">debug :</span> </span><br><span class=\"line\">        <span class=\"attr\">msg :</span> <span class=\"string\">&quot;num2为<span class=\"template-variable\">&#123;&#123;num2&#125;&#125;</span>是奇数&quot;</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name :</span> <span class=\"string\">判断num3是否能被3整除</span></span><br><span class=\"line\">      <span class=\"attr\">when :</span> <span class=\"string\">num2</span> <span class=\"string\">is</span> <span class=\"string\">divisibleby(3)</span></span><br><span class=\"line\">      <span class=\"attr\">debug :</span> </span><br><span class=\"line\">        <span class=\"attr\">msg :</span> <span class=\"string\">&quot;num3为<span class=\"template-variable\">&#123;&#123;num3&#125;&#125;</span>可以被3整除&quot;</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"/2021/08/16/ansible/7-playbook%E6%9D%A1%E4%BB%B6%E5%88%A4%E6%96%AD/%E5%88%A4%E6%96%AD%E6%95%B4%E9%99%A4.png\" alt=\"判断整除\">  </p>\n<h3 id=\"其他判断的tests\"><a href=\"#其他判断的tests\" class=\"headerlink\" title=\"其他判断的tests\"></a>其他判断的tests</h3><blockquote>\n<p><strong>version</strong>：可以用于对比两个版本号的大小，或者与指定的版本号进行对比，使用语法为 version(‘版本号’, ‘比较操作符’)  </p>\n</blockquote>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">hosts :</span> <span class=\"string\">test3</span> </span><br><span class=\"line\">  <span class=\"attr\">vars :</span> </span><br><span class=\"line\">    <span class=\"attr\">ver1 :</span> <span class=\"number\">1.9</span><span class=\"number\">.12</span></span><br><span class=\"line\">    <span class=\"attr\">ver2 :</span> <span class=\"number\">7.2</span><span class=\"number\">.21</span></span><br><span class=\"line\">  <span class=\"attr\">tasks :</span> </span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name :</span> <span class=\"string\">比较两个版本号的大小</span>  </span><br><span class=\"line\">      <span class=\"attr\">when :</span> <span class=\"string\">ver2</span> <span class=\"string\">is</span> <span class=\"string\">version(ver1,&quot;&gt;&quot;)</span></span><br><span class=\"line\">      <span class=\"attr\">debug :</span> </span><br><span class=\"line\">        <span class=\"attr\">msg :</span> <span class=\"string\">&quot;ver2&gt;ver1&quot;</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"/2021/08/16/ansible/7-playbook%E6%9D%A1%E4%BB%B6%E5%88%A4%E6%96%AD/%E7%89%88%E6%9C%AC%E5%8F%B7%E6%AF%94%E8%BE%83.png\" alt=\"版本号比较\"><br><strong>大于</strong>：&gt;, gt<br><strong>大于等于</strong>：&gt;=, ge<br><strong>小于</strong>：&lt;, lt<br>**小于等于**：&lt;=, le<br>**等于**： ==, =, eq<br>**不等于**：!=, &lt;&gt;, ne  </p>\n<blockquote>\n<p>subset：判断一个list是不是另一个list的子集，是另一个list的子集时返回真<br>superset : 判断一个list是不是另一个list的父集，是另一个list的父集时返回真  </p>\n</blockquote>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">--- </span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">hosts :</span> <span class=\"string\">test3</span> </span><br><span class=\"line\">  <span class=\"attr\">vars :</span> </span><br><span class=\"line\">    <span class=\"attr\">a :</span> [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>]</span><br><span class=\"line\">    <span class=\"attr\">b :</span> [<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">5</span>]</span><br><span class=\"line\">  <span class=\"attr\">tasks :</span> </span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name :</span> <span class=\"string\">输出a与b的值</span></span><br><span class=\"line\">      <span class=\"attr\">debug :</span></span><br><span class=\"line\">        <span class=\"attr\">msg :</span> <span class=\"string\">&quot;a=<span class=\"template-variable\">&#123;&#123;a&#125;&#125;</span>   b=<span class=\"template-variable\">&#123;&#123;b&#125;&#125;</span>&quot;</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name :</span> <span class=\"string\">判断b是否为a的子集</span></span><br><span class=\"line\">      <span class=\"attr\">when :</span> <span class=\"string\">b</span> <span class=\"string\">is</span> <span class=\"string\">subset(a)</span></span><br><span class=\"line\">      <span class=\"attr\">debug :</span></span><br><span class=\"line\">        <span class=\"attr\">msg :</span> <span class=\"string\">&quot;b 是 a 的子集&quot;</span> </span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name :</span> <span class=\"string\">判断a是否为b的父集</span></span><br><span class=\"line\">      <span class=\"attr\">when :</span> <span class=\"string\">a</span> <span class=\"string\">is</span> <span class=\"string\">superset(b)</span></span><br><span class=\"line\">      <span class=\"attr\">debug :</span></span><br><span class=\"line\">        <span class=\"attr\">msg :</span> <span class=\"string\">&quot;a 是 b 的父集&quot;</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"/2021/08/16/ansible/7-playbook%E6%9D%A1%E4%BB%B6%E5%88%A4%E6%96%AD/%E5%88%A4%E6%96%AD%E5%AD%90%E9%9B%86%E7%88%B6%E9%9B%86.png\" alt=\"判断子集父集\">  </p>\n<blockquote>\n<p>string：判断对象是否是一个字符串，是字符串则返回真<br>number：判断对象是否是一个数字，是数字则返回真  </p>\n</blockquote>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">hosts :</span> <span class=\"string\">test3</span> </span><br><span class=\"line\">  <span class=\"attr\">vars :</span> </span><br><span class=\"line\">    <span class=\"attr\">var1 :</span> <span class=\"string\">a</span></span><br><span class=\"line\">    <span class=\"attr\">var2 :</span> <span class=\"string\">&quot;2&quot;</span></span><br><span class=\"line\">    <span class=\"attr\">var3 :</span> <span class=\"number\">3</span></span><br><span class=\"line\">  <span class=\"attr\">tasks :</span> </span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name :</span> <span class=\"string\">判断var1是否为字符串</span></span><br><span class=\"line\">      <span class=\"attr\">when :</span> <span class=\"string\">var1</span> <span class=\"string\">is</span> <span class=\"string\">string</span> </span><br><span class=\"line\">      <span class=\"attr\">debug :</span> </span><br><span class=\"line\">        <span class=\"attr\">msg :</span> <span class=\"string\">&quot;yes&quot;</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name :</span> <span class=\"string\">判断var2是否为字符串</span></span><br><span class=\"line\">      <span class=\"attr\">when :</span> <span class=\"string\">var2</span> <span class=\"string\">is</span> <span class=\"string\">string</span> </span><br><span class=\"line\">      <span class=\"attr\">debug :</span> </span><br><span class=\"line\">        <span class=\"attr\">msg :</span> <span class=\"string\">&quot;yes&quot;</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name :</span> <span class=\"string\">判断var3是否为字符串</span></span><br><span class=\"line\">      <span class=\"attr\">when :</span> <span class=\"string\">var3</span> <span class=\"string\">is</span> <span class=\"string\">string</span> </span><br><span class=\"line\">      <span class=\"attr\">debug :</span> </span><br><span class=\"line\">        <span class=\"attr\">msg :</span> <span class=\"string\">&quot;yes&quot;</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name :</span> <span class=\"string\">判断var1是否为数字</span></span><br><span class=\"line\">      <span class=\"attr\">when :</span> <span class=\"string\">var1</span> <span class=\"string\">is</span> <span class=\"string\">number</span> </span><br><span class=\"line\">      <span class=\"attr\">debug :</span> </span><br><span class=\"line\">        <span class=\"attr\">msg :</span> <span class=\"string\">&quot;yes&quot;</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name :</span> <span class=\"string\">判断var2是否为数字</span></span><br><span class=\"line\">      <span class=\"attr\">when :</span> <span class=\"string\">var2</span> <span class=\"string\">is</span> <span class=\"string\">number</span> </span><br><span class=\"line\">      <span class=\"attr\">debug :</span> </span><br><span class=\"line\">        <span class=\"attr\">msg :</span> <span class=\"string\">&quot;yes&quot;</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name :</span> <span class=\"string\">判断var3是否为数字</span></span><br><span class=\"line\">      <span class=\"attr\">when :</span> <span class=\"string\">var3</span> <span class=\"string\">is</span> <span class=\"string\">number</span> </span><br><span class=\"line\">      <span class=\"attr\">debug :</span> </span><br><span class=\"line\">        <span class=\"attr\">msg :</span> <span class=\"string\">&quot;yes&quot;</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"/2021/08/16/ansible/7-playbook%E6%9D%A1%E4%BB%B6%E5%88%A4%E6%96%AD/%E5%88%A4%E6%96%AD%E6%98%AF%E5%AD%97%E7%AC%A6%E4%B8%B2%E3%80%81%E6%95%B0%E5%AD%97.png\" alt=\"判断是字符串、数字\"><br>可以看出数字只有在被双引号引起时才会被认定是一个数字，字符、字符串加不加双引号都被认定为是字符串  </p>\n<h2 id=\"block\"><a href=\"#block\" class=\"headerlink\" title=\"block\"></a>block</h2><p><code>block</code>可以将多个任务整合成一个块，这个块将被当做是一个整体，当这个block满足所在的tasks中的条件判断时，这个块里的任务都会被执行。  </p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">hosts :</span> <span class=\"string\">test3</span></span><br><span class=\"line\">  <span class=\"attr\">tasks :</span> </span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name :</span> <span class=\"string\">&quot;学习block&quot;</span></span><br><span class=\"line\">      <span class=\"attr\">debug :</span></span><br><span class=\"line\">        <span class=\"attr\">msg :</span> <span class=\"string\">&quot;任务一&quot;</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">block :</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">debug :</span></span><br><span class=\"line\">          <span class=\"attr\">msg :</span> <span class=\"string\">&quot;任务二&quot;</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">debug :</span></span><br><span class=\"line\">          <span class=\"attr\">msg :</span> <span class=\"string\">&quot;任务三&quot;</span></span><br><span class=\"line\">      <span class=\"attr\">when :</span> <span class=\"number\">1</span> <span class=\"string\">&lt;</span> <span class=\"number\">2</span>  <span class=\"comment\">#注意when对齐的位置，该when是对应整个block的</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"/2021/08/16/ansible/7-playbook%E6%9D%A1%E4%BB%B6%E5%88%A4%E6%96%AD/block.png\" alt=\"block\">  </p>\n<h3 id=\"rescue\"><a href=\"#rescue\" class=\"headerlink\" title=\"rescue\"></a>rescue</h3><p><code>block</code>除了能在符合when条件是执行多个任务，还能与<code>rescue</code>一同使用，应对<code>block块</code>中任务出错的场景,当<code>block块</code>中任务无误时则不会执行  </p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">hosts :</span> <span class=\"string\">test3</span></span><br><span class=\"line\">  <span class=\"attr\">tasks :</span> </span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">block :</span> </span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">debug :</span></span><br><span class=\"line\">            <span class=\"attr\">msg :</span> <span class=\"string\">&quot;block块中任务一&quot;</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">shell :</span> <span class=\"string\">ls</span> <span class=\"string\">/asd</span></span><br><span class=\"line\">      <span class=\"attr\">rescue :</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">debug :</span> </span><br><span class=\"line\">            <span class=\"attr\">msg :</span> <span class=\"string\">&quot;block块中某一个任务报错&quot;</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"/2021/08/16/ansible/7-playbook%E6%9D%A1%E4%BB%B6%E5%88%A4%E6%96%AD/rescue.png\" alt=\"rescue\"><br><code>rescue</code>中可以定义多个任务</p>\n<h3 id=\"always\"><a href=\"#always\" class=\"headerlink\" title=\"always\"></a>always</h3><p><code>always</code>关键字，无论block中的任务执行成功还是失败，always中的任务都会被执行。</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">hosts :</span> <span class=\"string\">test3</span></span><br><span class=\"line\">  <span class=\"attr\">tasks :</span> </span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">block :</span> </span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">shell :</span> <span class=\"string\">ls</span> <span class=\"string\">/asd</span></span><br><span class=\"line\">      <span class=\"attr\">always :</span> </span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">debug :</span></span><br><span class=\"line\">            <span class=\"attr\">msg :</span> <span class=\"string\">block</span> <span class=\"string\">块任务结束</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"/2021/08/16/ansible/7-playbook%E6%9D%A1%E4%BB%B6%E5%88%A4%E6%96%AD/always.png\" alt=\"always\">  </p>\n<h2 id=\"fail\"><a href=\"#fail\" class=\"headerlink\" title=\"fail\"></a>fail</h2><p><code>fail</code>模块，将任务标记为失败终止playbook，一般会与<code>when</code>一起使用退出playbook执行。</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">hosts :</span> <span class=\"string\">test3</span></span><br><span class=\"line\">  <span class=\"attr\">tasks :</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">debug :</span></span><br><span class=\"line\">        <span class=\"attr\">msg :</span> <span class=\"string\">任务一</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">fail :</span></span><br><span class=\"line\">        <span class=\"attr\">msg :</span> <span class=\"string\">任务二fail模块输出</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">debug :</span></span><br><span class=\"line\">        <span class=\"attr\">msg :</span> <span class=\"string\">任务三</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"/2021/08/16/ansible/7-playbook%E6%9D%A1%E4%BB%B6%E5%88%A4%E6%96%AD/fail.png\" alt=\"fail\">  </p>\n<h2 id=\"failed-when\"><a href=\"#failed-when\" class=\"headerlink\" title=\"failed_when\"></a>failed_when</h2><p>表示符合条件时，将任务标记为失败终止playbook  </p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">hosts :</span> <span class=\"string\">test3</span></span><br><span class=\"line\">  <span class=\"attr\">tasks :</span> </span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">debug :</span> </span><br><span class=\"line\">        <span class=\"attr\">msg :</span> <span class=\"string\">error</span></span><br><span class=\"line\">      <span class=\"attr\">register :</span> <span class=\"string\">result</span></span><br><span class=\"line\">      <span class=\"attr\">failed_when :</span> <span class=\"string\">result.msg</span> <span class=\"string\">==</span> <span class=\"string\">&quot;error&quot;</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"/2021/08/16/ansible/7-playbook%E6%9D%A1%E4%BB%B6%E5%88%A4%E6%96%AD/failed_when.png\" alt=\"failed_when\">  </p>\n<h2 id=\"changed-when\"><a href=\"#changed-when\" class=\"headerlink\" title=\"changed_when\"></a>changed_when</h2><p>与<code>failed_when</code>类似，符合条件时将任务状态标记为changed</p>\n","categories":["ansible"],"tags":["playbook条件判断"]},{"title":"1-MongoDB安装部署","url":"/2022/05/25/mongoDB/1-MongoDB%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2/","content":"<p><img src=\"https://s2.loli.net/2022/05/25/cnIFxBYjKNfkvA7.jpg\" alt=\"mongoDB.png\">  </p>\n<span id=\"more\"></span>\n<h2 id=\"特点\"><a href=\"#特点\" class=\"headerlink\" title=\"特点\"></a>特点</h2><ul>\n<li>面向集合存储，易存储对象类型的数据  </li>\n<li>支持查询以及动态查询  </li>\n<li>文件存储为BSON（类似JSON）</li>\n<li>支持复制、故障恢复、分片 </li>\n</ul>\n<h2 id=\"应用场景\"><a href=\"#应用场景\" class=\"headerlink\" title=\"应用场景\"></a>应用场景</h2><ul>\n<li>游戏应用：存储用户信息，用户的游戏装备，积分等直接内嵌文档的方式存储，方便进行查询与更新  </li>\n<li>物流应用：存储订单信息，订单状态在运送过程中不断更新，以内嵌数组来进行存储，一次查询就能将订单所有的变更读取</li>\n<li>社交应用：存储用户信息以及用户发表的朋友圈信息  </li>\n<li></li>\n</ul>\n<h2 id=\"MongoDB安装包下载\"><a href=\"#MongoDB安装包下载\" class=\"headerlink\" title=\"MongoDB安装包下载\"></a>MongoDB安装包下载</h2><p><img src=\"/2022/05/25/mongoDB/1-MongoDB%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2/%E4%B8%8B%E8%BD%BD%E4%BD%8D%E7%BD%AE.png\" alt=\"下载位置\">  </p>\n<!--more-->    \n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">yum install libcurl openssl   #两个依赖包</span><br><span class=\"line\">wget https://fastdl.mongodb.org/linux/mongodb-linux-x86_64-rhel70-5.0.8.tgz</span><br><span class=\"line\">mkdir /usr/local/MongoDB</span><br><span class=\"line\">mkdir /usr/local/MongoDB/data           #数据存储目录</span><br><span class=\"line\">mkdir /usr/local/MongoDB/log            #日志文件目录</span><br><span class=\"line\">mkdir /usr/local/MongoDB/source         #源包目录</span><br><span class=\"line\">mv mongodb-linux-x86_64-rhel70-5.0.8.tgz  /usr/local/MongoDB #将安装包解压后的文件目录名修改为mongodbServer，以方便后期操作</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">将/ety/profile 中添加一下两行</span></span><br><span class=\"line\">export MONGODB_HOME=/usr/local/MongoDB/mongodbServer</span><br><span class=\"line\">export PATH=$PATH:$MONGODB_HOME/bin</span><br></pre></td></tr></table></figure>\n<p>编辑配置文件  </p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">]#</span><span class=\"bash\"> more /usr/<span class=\"built_in\">local</span>/MongoDB/mongodbServer/bin/mongod.conf</span></span><br><span class=\"line\">storage:</span><br><span class=\"line\">    dbPath: &quot;/usr/local/MongoDB/data&quot;           #数据存放位置</span><br><span class=\"line\">systemLog:</span><br><span class=\"line\">    destination: file</span><br><span class=\"line\">    path: &quot;/usr/local/MongoDB/log/mongod.log&quot;   #日持存放位置</span><br><span class=\"line\">    logAppend: true</span><br><span class=\"line\">net:</span><br><span class=\"line\">    port: 27017       #指定端口，默认即使27017</span><br><span class=\"line\">    bindIpAll: true</span><br><span class=\"line\">processManagement:</span><br><span class=\"line\">    fork: true        #后台执行</span><br></pre></td></tr></table></figure>\n<h2 id=\"文件介绍\"><a href=\"#文件介绍\" class=\"headerlink\" title=\"文件介绍\"></a>文件介绍</h2><p>/usr/local/MongoDB/mongodbServer/bin下脚本文件介绍<br>install_compass：安装compass工具<br>mongo：mongo客户端工具<br>mongod：mongo启动脚本<br>mongos：路由脚本  </p>\n<h2 id=\"启动MongoDB\"><a href=\"#启动MongoDB\" class=\"headerlink\" title=\"启动MongoDB\"></a>启动MongoDB</h2><ol>\n<li><p>方式一</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">]#</span><span class=\"bash\"> mongod --config /usr/<span class=\"built_in\">local</span>/MongoDB/mongodbServer/bin/mongod.conf</span></span><br><span class=\"line\">about to fork child process, waiting until server is ready for connections.</span><br><span class=\"line\">forked process: 15646</span><br><span class=\"line\">child process started successfully, parent exiting</span><br></pre></td></tr></table></figure></li>\n<li><p>方式二  </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">mongod  --port=27017 --dbpath=/usr/local/MongoDB/data  --logpath=/usr/local/MongoDB/log/mongod.log</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h2 id=\"停止MongoDB\"><a href=\"#停止MongoDB\" class=\"headerlink\" title=\"停止MongoDB\"></a>停止MongoDB</h2><ul>\n<li><p>方法一  </p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">]#</span><span class=\"bash\"> mongo</span></span><br><span class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\"> use admin</span></span><br><span class=\"line\">switched to db admin</span><br><span class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\"> db</span></span><br><span class=\"line\">admin</span><br><span class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\"> db.shutdownServer()</span></span><br><span class=\"line\">server should be down...</span><br></pre></td></tr></table></figure></li>\n<li><p>方法二  </p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">]#</span><span class=\"bash\"> mongod --config /usr/<span class=\"built_in\">local</span>/MongoDB/mongodbServer/bin/mongod.conf --shutdown</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n","categories":["MongoDB"],"tags":["MongoDB安装部署"]},{"title":"8-过滤器","url":"/2021/08/20/ansible/8-%E8%BF%87%E6%BB%A4%E5%99%A8/","content":"<p><img src=\"/2021/08/20/ansible/8-%E8%BF%87%E6%BB%A4%E5%99%A8/%E5%9B%BE%E7%89%87ansible.jpg\" alt=\"ansible\">    </p>\n<span id=\"more\"></span>  \n\n<h2 id=\"字符串有关的过滤器\"><a href=\"#字符串有关的过滤器\" class=\"headerlink\" title=\"字符串有关的过滤器\"></a>字符串有关的过滤器</h2><figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">hosts :</span> <span class=\"string\">test3</span></span><br><span class=\"line\">  <span class=\"attr\">vars :</span></span><br><span class=\"line\">    <span class=\"attr\">testvar :</span> <span class=\"string\">&quot;abc123ABC 666&quot;</span></span><br><span class=\"line\">    <span class=\"attr\">testvar1 :</span> <span class=\"string\">&quot;  abc  &quot;</span></span><br><span class=\"line\">    <span class=\"attr\">testvar2 :</span> <span class=\"string\">&#x27;123456789&#x27;</span></span><br><span class=\"line\">    <span class=\"attr\">testvar3 :</span> <span class=\"string\">&quot;1a2b,@#$%^&amp;&quot;</span></span><br><span class=\"line\">  <span class=\"attr\">tasks :</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">debug :</span></span><br><span class=\"line\">      <span class=\"comment\">#将字符串转换成纯大写</span></span><br><span class=\"line\">      <span class=\"attr\">msg :</span> <span class=\"string\">&quot;<span class=\"template-variable\">&#123;&#123; testvar | upper &#125;&#125;</span>&quot;</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">debug :</span></span><br><span class=\"line\">      <span class=\"comment\">#将字符串转换成纯小写</span></span><br><span class=\"line\">      <span class=\"attr\">msg :</span> <span class=\"string\">&quot;<span class=\"template-variable\">&#123;&#123; testvar | lower &#125;&#125;</span>&quot;</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">debug :</span></span><br><span class=\"line\">      <span class=\"comment\">#将字符串变成首字母大写,之后所有字母纯小写</span></span><br><span class=\"line\">      <span class=\"attr\">msg :</span> <span class=\"string\">&quot;<span class=\"template-variable\">&#123;&#123; testvar | capitalize &#125;&#125;</span>&quot;</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">debug :</span></span><br><span class=\"line\">      <span class=\"comment\">#将字符串反转</span></span><br><span class=\"line\">      <span class=\"attr\">msg :</span> <span class=\"string\">&quot;<span class=\"template-variable\">&#123;&#123; testvar | reverse &#125;&#125;</span>&quot;</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">debug :</span></span><br><span class=\"line\">      <span class=\"comment\">#返回字符串的第一个字符</span></span><br><span class=\"line\">      <span class=\"attr\">msg :</span> <span class=\"string\">&quot;<span class=\"template-variable\">&#123;&#123; testvar | first &#125;&#125;</span>&quot;</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">debug :</span></span><br><span class=\"line\">      <span class=\"comment\">#返回字符串的最后一个字符</span></span><br><span class=\"line\">      <span class=\"attr\">msg :</span> <span class=\"string\">&quot;<span class=\"template-variable\">&#123;&#123; testvar | last &#125;&#125;</span>&quot;</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">debug :</span></span><br><span class=\"line\">      <span class=\"comment\">#将字符串开头和结尾的空格去除</span></span><br><span class=\"line\">      <span class=\"attr\">msg :</span> <span class=\"string\">&quot;<span class=\"template-variable\">&#123;&#123; testvar1 | trim &#125;&#125;</span>&quot;</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">debug :</span></span><br><span class=\"line\">      <span class=\"comment\">#将字符串放在中间，并且设置字符串的长度为30，字符串两边用空格补齐30位长</span></span><br><span class=\"line\">      <span class=\"attr\">msg :</span> <span class=\"string\">&quot;<span class=\"template-variable\">&#123;&#123; testvar1 | center(width=30) &#125;&#125;</span>&quot;</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">debug :</span></span><br><span class=\"line\">      <span class=\"comment\">#返回字符串长度,length与count等效,可以写为count</span></span><br><span class=\"line\">      <span class=\"attr\">msg :</span> <span class=\"string\">&quot;<span class=\"template-variable\">&#123;&#123; testvar2 | length &#125;&#125;</span>&quot;</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">debug :</span></span><br><span class=\"line\">      <span class=\"comment\">#将字符串转换成列表，每个字符作为一个元素</span></span><br><span class=\"line\">      <span class=\"attr\">msg :</span> <span class=\"string\">&quot;<span class=\"template-variable\">&#123;&#123; testvar3 | list &#125;&#125;</span>&quot;</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">debug :</span></span><br><span class=\"line\">      <span class=\"comment\">#将字符串转换成列表，每个字符作为一个元素，并且随机打乱顺序</span></span><br><span class=\"line\">      <span class=\"comment\">#shuffle的字面意思为洗牌</span></span><br><span class=\"line\">      <span class=\"attr\">msg :</span> <span class=\"string\">&quot;<span class=\"template-variable\">&#123;&#123; testvar3 | shuffle &#125;&#125;</span>&quot;</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">debug :</span></span><br><span class=\"line\">      <span class=\"comment\">#将字符串转换成列表，每个字符作为一个元素，并且随机打乱顺序</span></span><br><span class=\"line\">      <span class=\"comment\">#在随机打乱顺序时，将ansible_date_time.epoch的值设置为随机种子</span></span><br><span class=\"line\">      <span class=\"comment\">#也可以使用其他值作为随机种子，ansible_date_time.epoch是facts信息</span></span><br><span class=\"line\">      <span class=\"attr\">msg :</span> <span class=\"string\">&quot;<span class=\"template-variable\">&#123;&#123; testvar3 | shuffle(seed=(ansible_date_time.epoch)) &#125;&#125;</span>&quot;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"数字有关的过滤器\"><a href=\"#数字有关的过滤器\" class=\"headerlink\" title=\"数字有关的过滤器\"></a>数字有关的过滤器</h2><figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">hosts :</span> <span class=\"string\">test3</span></span><br><span class=\"line\">  <span class=\"attr\">remote_user :</span> <span class=\"string\">root</span></span><br><span class=\"line\">  <span class=\"attr\">vars:</span></span><br><span class=\"line\">    <span class=\"attr\">testvar4 :</span> <span class=\"number\">-1</span></span><br><span class=\"line\">  <span class=\"attr\">tasks:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">debug:</span></span><br><span class=\"line\">      <span class=\"comment\">#将对应的值转换成int类型</span></span><br><span class=\"line\">      <span class=\"comment\">#ansible中，字符串和整形不能直接计算，比如&#123;&#123; 8+&#x27;8&#x27; &#125;&#125;会报错</span></span><br><span class=\"line\">      <span class=\"comment\">#所以，我们可以把一个值为数字的字符串转换成整形后再做计算</span></span><br><span class=\"line\">      <span class=\"attr\">msg :</span> <span class=\"string\">&quot;<span class=\"template-variable\">&#123;&#123; 8+(&#x27;8&#x27; | int) &#125;&#125;</span>&quot;</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">debug:</span></span><br><span class=\"line\">      <span class=\"comment\">#将对应的值转换成int类型,如果无法转换,默认返回0</span></span><br><span class=\"line\">      <span class=\"comment\">#使用int(default=6)或者int(6)时，如果无法转换则返回指定值6</span></span><br><span class=\"line\">      <span class=\"attr\">msg :</span> <span class=\"string\">&quot;<span class=\"template-variable\">&#123;&#123; &#x27;a&#x27; | int(default=6) &#125;&#125;</span>&quot;</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">debug:</span></span><br><span class=\"line\">      <span class=\"comment\">#将对应的值转换成浮点型，如果无法转换，默认返回&#x27;0.0&#x27;</span></span><br><span class=\"line\">      <span class=\"attr\">msg :</span> <span class=\"string\">&quot;<span class=\"template-variable\">&#123;&#123; &#x27;8&#x27; | float &#125;&#125;</span>&quot;</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">debug:</span></span><br><span class=\"line\">      <span class=\"comment\">#当对应的值无法被转换成浮点型时，则返回指定值’8.8‘</span></span><br><span class=\"line\">      <span class=\"attr\">msg :</span> <span class=\"string\">&quot;<span class=\"template-variable\">&#123;&#123; &#x27;a&#x27; | float(8.88) &#125;&#125;</span>&quot;</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">debug:</span></span><br><span class=\"line\">      <span class=\"comment\">#获取对应数值的绝对值</span></span><br><span class=\"line\">      <span class=\"attr\">msg :</span> <span class=\"string\">&quot;<span class=\"template-variable\">&#123;&#123; testvar4 | abs &#125;&#125;</span>&quot;</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">debug:</span></span><br><span class=\"line\">      <span class=\"comment\">#四舍五入</span></span><br><span class=\"line\">      <span class=\"attr\">msg :</span> <span class=\"string\">&quot;<span class=\"template-variable\">&#123;&#123; 12.5 | round &#125;&#125;</span>&quot;</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">debug:</span></span><br><span class=\"line\">      <span class=\"comment\">#取小数点后五位</span></span><br><span class=\"line\">      <span class=\"attr\">msg :</span> <span class=\"string\">&quot;<span class=\"template-variable\">&#123;&#123; 3.1415926 | round(5) &#125;&#125;</span>&quot;</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">debug:</span></span><br><span class=\"line\">      <span class=\"comment\">#从0到100中随机返回一个随机数</span></span><br><span class=\"line\">      <span class=\"attr\">msg :</span> <span class=\"string\">&quot;<span class=\"template-variable\">&#123;&#123; 100 | random &#125;&#125;</span>&quot;</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">debug:</span></span><br><span class=\"line\">      <span class=\"comment\">#从5到10中随机返回一个随机数</span></span><br><span class=\"line\">      <span class=\"attr\">msg :</span> <span class=\"string\">&quot;<span class=\"template-variable\">&#123;&#123; 10 | random(start=5) &#125;&#125;</span>&quot;</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">debug:</span></span><br><span class=\"line\">      <span class=\"comment\">#从5到15中随机返回一个随机数,步长为3</span></span><br><span class=\"line\">      <span class=\"comment\">#步长为3的意思是返回的随机数只有可能是5、8、11、14中的一个</span></span><br><span class=\"line\">      <span class=\"attr\">msg :</span> <span class=\"string\">&quot;<span class=\"template-variable\">&#123;&#123; 15 | random(start=5,step=3) &#125;&#125;</span>&quot;</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">debug:</span></span><br><span class=\"line\">      <span class=\"comment\">#从0到15中随机返回一个随机数,这个随机数是5的倍数</span></span><br><span class=\"line\">      <span class=\"attr\">msg :</span> <span class=\"string\">&quot;<span class=\"template-variable\">&#123;&#123; 15 | random(step=5) &#125;&#125;</span>&quot;</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">debug:</span></span><br><span class=\"line\">      <span class=\"comment\">#从0到15中随机返回一个随机数，并将ansible_date_time.epoch的值设置为随机种子</span></span><br><span class=\"line\">      <span class=\"comment\">#也可以使用其他值作为随机种子，ansible_date_time.epoch是facts信息</span></span><br><span class=\"line\">      <span class=\"comment\">#seed参数从ansible2.3版本开始可用</span></span><br><span class=\"line\">      <span class=\"attr\">msg :</span> <span class=\"string\">&quot;<span class=\"template-variable\">&#123;&#123; 15 | random(seed=(ansible_date_time.epoch)) &#125;&#125;</span>&quot;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"列表相关的过滤器\"><a href=\"#列表相关的过滤器\" class=\"headerlink\" title=\"列表相关的过滤器\"></a>列表相关的过滤器</h2><figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">hosts :</span> <span class=\"string\">test3</span></span><br><span class=\"line\">  <span class=\"attr\">remote_user :</span> <span class=\"string\">root</span></span><br><span class=\"line\">  <span class=\"attr\">vars:</span></span><br><span class=\"line\">    <span class=\"attr\">testvar7 :</span> [<span class=\"number\">22</span>,<span class=\"number\">18</span>,<span class=\"number\">5</span>,<span class=\"number\">33</span>,<span class=\"number\">27</span>,<span class=\"number\">30</span>]</span><br><span class=\"line\">    <span class=\"attr\">testvar8 :</span> [<span class=\"number\">1</span>,[<span class=\"number\">7</span>,<span class=\"number\">2</span>,[<span class=\"number\">15</span>,<span class=\"number\">9</span>]],<span class=\"number\">3</span>,<span class=\"number\">5</span>]</span><br><span class=\"line\">    <span class=\"attr\">testvar9 :</span> [<span class=\"number\">1</span>,<span class=\"string\">&#x27;b&#x27;</span>,<span class=\"number\">5</span>]</span><br><span class=\"line\">    <span class=\"attr\">testvar10 :</span> [<span class=\"number\">1</span>,<span class=\"string\">&#x27;A&#x27;</span>,<span class=\"string\">&#x27;b&#x27;</span>,[<span class=\"string\">&#x27;QQ&#x27;</span>,<span class=\"string\">&#x27;wechat&#x27;</span>],<span class=\"string\">&#x27;CdEf&#x27;</span>]</span><br><span class=\"line\">    <span class=\"attr\">testvar11 :</span> [<span class=\"string\">&#x27;abc&#x27;</span>,<span class=\"number\">1</span>,<span class=\"number\">3</span>,<span class=\"string\">&#x27;a&#x27;</span>,<span class=\"number\">3</span>,<span class=\"string\">&#x27;1&#x27;</span>,<span class=\"string\">&#x27;abc&#x27;</span>]</span><br><span class=\"line\">    <span class=\"attr\">testvar12 :</span> [<span class=\"string\">&#x27;abc&#x27;</span>,<span class=\"number\">2</span>,<span class=\"string\">&#x27;a&#x27;</span>,<span class=\"string\">&#x27;b&#x27;</span>,<span class=\"string\">&#x27;a&#x27;</span>]</span><br><span class=\"line\">  <span class=\"attr\">tasks:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">debug:</span></span><br><span class=\"line\">      <span class=\"comment\">#返回列表长度,length与count等效,可以写为count</span></span><br><span class=\"line\">      <span class=\"attr\">msg :</span> <span class=\"string\">&quot;<span class=\"template-variable\">&#123;&#123; testvar7 | length &#125;&#125;</span>&quot;</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">debug:</span></span><br><span class=\"line\">      <span class=\"comment\">#返回列表中的第一个值</span></span><br><span class=\"line\">      <span class=\"attr\">msg :</span> <span class=\"string\">&quot;<span class=\"template-variable\">&#123;&#123; testvar7 | first &#125;&#125;</span>&quot;</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">debug:</span></span><br><span class=\"line\">      <span class=\"comment\">#返回列表中的最后一个值</span></span><br><span class=\"line\">      <span class=\"attr\">msg :</span> <span class=\"string\">&quot;<span class=\"template-variable\">&#123;&#123; testvar7 | last &#125;&#125;</span>&quot;</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">debug:</span></span><br><span class=\"line\">      <span class=\"comment\">#返回列表中最小的值</span></span><br><span class=\"line\">      <span class=\"attr\">msg :</span> <span class=\"string\">&quot;<span class=\"template-variable\">&#123;&#123; testvar7 | min &#125;&#125;</span>&quot;</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">debug:</span></span><br><span class=\"line\">      <span class=\"comment\">#返回列表中最大的值</span></span><br><span class=\"line\">      <span class=\"attr\">msg :</span> <span class=\"string\">&quot;<span class=\"template-variable\">&#123;&#123; testvar7 | max &#125;&#125;</span>&quot;</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">debug:</span></span><br><span class=\"line\">      <span class=\"comment\">#将列表升序排序输出</span></span><br><span class=\"line\">      <span class=\"attr\">msg :</span> <span class=\"string\">&quot;<span class=\"template-variable\">&#123;&#123; testvar7 | sort &#125;&#125;</span>&quot;</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">debug:</span></span><br><span class=\"line\">      <span class=\"comment\">#将列表降序排序输出</span></span><br><span class=\"line\">      <span class=\"attr\">msg :</span> <span class=\"string\">&quot;<span class=\"template-variable\">&#123;&#123; testvar7 | sort(reverse=true) &#125;&#125;</span>&quot;</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">debug:</span></span><br><span class=\"line\">      <span class=\"comment\">#返回纯数字非嵌套列表中所有数字的和</span></span><br><span class=\"line\">      <span class=\"attr\">msg :</span> <span class=\"string\">&quot;<span class=\"template-variable\">&#123;&#123; testvar7 | sum &#125;&#125;</span>&quot;</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">debug:</span></span><br><span class=\"line\">      <span class=\"comment\">#如果列表中包含列表，那么使用flatten可以&#x27;拉平&#x27;嵌套的列表</span></span><br><span class=\"line\">      <span class=\"comment\">#2.5版本中可用,执行如下示例后查看效果</span></span><br><span class=\"line\">      <span class=\"attr\">msg :</span> <span class=\"string\">&quot;<span class=\"template-variable\">&#123;&#123; testvar8 | flatten &#125;&#125;</span>&quot;</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">debug:</span></span><br><span class=\"line\">      <span class=\"comment\">#如果列表中嵌套了列表，那么将第1层的嵌套列表‘拉平’</span></span><br><span class=\"line\">      <span class=\"comment\">#2.5版本中可用,执行如下示例后查看效果</span></span><br><span class=\"line\">      <span class=\"attr\">msg :</span> <span class=\"string\">&quot;<span class=\"template-variable\">&#123;&#123; testvar8 | flatten(levels=1) &#125;&#125;</span>&quot;</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">debug:</span></span><br><span class=\"line\">      <span class=\"comment\">#过滤器都是可以自由结合使用的，就好像linux命令中的管道符一样</span></span><br><span class=\"line\">      <span class=\"comment\">#如下，取出嵌套列表中的最大值</span></span><br><span class=\"line\">      <span class=\"attr\">msg :</span> <span class=\"string\">&quot;<span class=\"template-variable\">&#123;&#123; testvar8 | flatten | max &#125;&#125;</span>&quot;</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">debug:</span></span><br><span class=\"line\">      <span class=\"comment\">#将列表中的元素合并成一个字符串</span></span><br><span class=\"line\">      <span class=\"attr\">msg :</span> <span class=\"string\">&quot;<span class=\"template-variable\">&#123;&#123; testvar9 | join &#125;&#125;</span>&quot;</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">debug:</span></span><br><span class=\"line\">      <span class=\"comment\">#将列表中的元素合并成一个字符串,每个元素之间用指定的字符隔开</span></span><br><span class=\"line\">      <span class=\"attr\">msg :</span> <span class=\"string\">&quot;<span class=\"template-variable\">&#123;&#123; testvar9 | join(&#x27; , &#x27;) &#125;&#125;</span>&quot;</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">debug:</span></span><br><span class=\"line\">      <span class=\"comment\">#从列表中随机返回一个元素</span></span><br><span class=\"line\">      <span class=\"comment\">#对列表使用random过滤器时，不能使用start和step参数</span></span><br><span class=\"line\">      <span class=\"attr\">msg :</span> <span class=\"string\">&quot;<span class=\"template-variable\">&#123;&#123; testvar9 | random &#125;&#125;</span>&quot;</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">debug:</span></span><br><span class=\"line\">      <span class=\"comment\">#从列表中随机返回一个元素,并将ansible_date_time.epoch的值设置为随机种子</span></span><br><span class=\"line\">      <span class=\"comment\">#seed参数从ansible2.3版本开始可用</span></span><br><span class=\"line\">      <span class=\"attr\">msg :</span> <span class=\"string\">&quot;<span class=\"template-variable\">&#123;&#123; testvar9 | random(seed=(ansible_date_time.epoch)) &#125;&#125;</span>&quot;</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">debug:</span></span><br><span class=\"line\">      <span class=\"comment\">#随机打乱顺序列表中元素的顺序</span></span><br><span class=\"line\">      <span class=\"comment\">#shuffle的字面意思为洗牌</span></span><br><span class=\"line\">      <span class=\"attr\">msg :</span> <span class=\"string\">&quot;<span class=\"template-variable\">&#123;&#123; testvar9 | shuffle &#125;&#125;</span>&quot;</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">debug:</span></span><br><span class=\"line\">      <span class=\"comment\">#随机打乱顺序列表中元素的顺序</span></span><br><span class=\"line\">      <span class=\"comment\">#在随机打乱顺序时，将ansible_date_time.epoch的值设置为随机种子</span></span><br><span class=\"line\">      <span class=\"comment\">#seed参数从ansible2.3版本开始可用</span></span><br><span class=\"line\">      <span class=\"attr\">msg :</span> <span class=\"string\">&quot;<span class=\"template-variable\">&#123;&#123; testvar9 | shuffle(seed=(ansible_date_time.epoch)) &#125;&#125;</span>&quot;</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">debug:</span></span><br><span class=\"line\">      <span class=\"comment\">#将列表中的每个元素变成纯大写</span></span><br><span class=\"line\">      <span class=\"attr\">msg :</span> <span class=\"string\">&quot;<span class=\"template-variable\">&#123;&#123; testvar10 | upper &#125;&#125;</span>&quot;</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">debug:</span></span><br><span class=\"line\">      <span class=\"comment\">#将列表中的每个元素变成纯小写</span></span><br><span class=\"line\">      <span class=\"attr\">msg :</span> <span class=\"string\">&quot;<span class=\"template-variable\">&#123;&#123; testvar10 | lower &#125;&#125;</span>&quot;</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">debug:</span></span><br><span class=\"line\">      <span class=\"comment\">#去掉列表中重复的元素，重复的元素只留下一个</span></span><br><span class=\"line\">      <span class=\"attr\">msg :</span> <span class=\"string\">&quot;<span class=\"template-variable\">&#123;&#123; testvar11 | unique &#125;&#125;</span>&quot;</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">debug:</span></span><br><span class=\"line\">      <span class=\"comment\">#将两个列表合并，重复的元素只留下一个</span></span><br><span class=\"line\">      <span class=\"comment\">#也就是求两个列表的并集</span></span><br><span class=\"line\">      <span class=\"attr\">msg :</span> <span class=\"string\">&quot;<span class=\"template-variable\">&#123;&#123; testvar11 | union(testvar12) &#125;&#125;</span>&quot;</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">debug:</span></span><br><span class=\"line\">      <span class=\"comment\">#取出两个列表的交集，重复的元素只留下一个</span></span><br><span class=\"line\">      <span class=\"attr\">msg :</span> <span class=\"string\">&quot;<span class=\"template-variable\">&#123;&#123; testvar11 | intersect(testvar12) &#125;&#125;</span>&quot;</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">debug:</span></span><br><span class=\"line\">      <span class=\"comment\">#取出存在于testvar11列表中,但是不存在于testvar12列表中的元素</span></span><br><span class=\"line\">      <span class=\"comment\">#去重后重复的元素只留下一个</span></span><br><span class=\"line\">      <span class=\"comment\">#换句话说就是:两个列表的交集在列表1中的补集</span></span><br><span class=\"line\">      <span class=\"attr\">msg :</span> <span class=\"string\">&quot;<span class=\"template-variable\">&#123;&#123; testvar11 | difference(testvar12) &#125;&#125;</span>&quot;</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">debug:</span></span><br><span class=\"line\">      <span class=\"comment\">#取出两个列表中各自独有的元素,重复的元素只留下一个</span></span><br><span class=\"line\">      <span class=\"comment\">#即去除两个列表的交集，剩余的元素</span></span><br><span class=\"line\">      <span class=\"attr\">msg :</span> <span class=\"string\">&quot;<span class=\"template-variable\">&#123;&#123; testvar11 | symmetric_difference(testvar12) &#125;&#125;</span>&quot;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"未定义变量相关的过滤器\"><a href=\"#未定义变量相关的过滤器\" class=\"headerlink\" title=\"未定义变量相关的过滤器\"></a>未定义变量相关的过滤器</h2><figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">hosts:</span> <span class=\"string\">test3</span></span><br><span class=\"line\">  <span class=\"attr\">remote_user:</span> <span class=\"string\">root</span></span><br><span class=\"line\">  <span class=\"attr\">gather_facts:</span> <span class=\"literal\">no</span></span><br><span class=\"line\">  <span class=\"attr\">vars:</span></span><br><span class=\"line\">    <span class=\"attr\">testvar6:</span> <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\">  <span class=\"attr\">tasks:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">debug:</span></span><br><span class=\"line\">      <span class=\"comment\">#如果变量没有定义，则临时返回一个指定的默认值</span></span><br><span class=\"line\">      <span class=\"comment\">#注：如果定义了变量，变量值为空字符串，则会输出空字符</span></span><br><span class=\"line\">      <span class=\"comment\">#default过滤器的别名是d</span></span><br><span class=\"line\">      <span class=\"attr\">msg:</span> <span class=\"string\">&quot;<span class=\"template-variable\">&#123;&#123; testvar5 | default(&#x27;zsythink&#x27;) &#125;&#125;</span>&quot;</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">debug:</span></span><br><span class=\"line\">      <span class=\"comment\">#如果变量的值是一个空字符串或者变量没有定义，则临时返回一个指定的默认值</span></span><br><span class=\"line\">      <span class=\"attr\">msg:</span> <span class=\"string\">&quot;<span class=\"template-variable\">&#123;&#123; testvar6 | default(&#x27;zsythink&#x27;,boolean=true) &#125;&#125;</span>&quot;</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">debug:</span></span><br><span class=\"line\">      <span class=\"comment\">#如果对应的变量未定义,则报出“Mandatory variable not defined.”错误，而不是报出默认错误</span></span><br><span class=\"line\">      <span class=\"attr\">msg:</span> <span class=\"string\">&quot;<span class=\"template-variable\">&#123;&#123; testvar5 | mandatory &#125;&#125;</span>&quot;</span></span><br></pre></td></tr></table></figure>\n","categories":["ansible"],"tags":["调试器"]},{"title":"2-MongoDB基础","url":"/2022/05/26/mongoDB/2-MongoDB%E5%9F%BA%E7%A1%80/","content":"<p><img src=\"https://s2.loli.net/2022/05/25/cnIFxBYjKNfkvA7.jpg\" alt=\"mongoDB.png\">  </p>\n<span id=\"more\"></span>\n<h1 id=\"MOngoDB概念\"><a href=\"#MOngoDB概念\" class=\"headerlink\" title=\"MOngoDB概念\"></a>MOngoDB概念</h1><table>\n<thead>\n<tr>\n<th>SQL</th>\n<th>MongoDB</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>database</td>\n<td>database</td>\n<td>数据库</td>\n</tr>\n<tr>\n<td>table</td>\n<td>collection</td>\n<td>数据库表/集合</td>\n</tr>\n<tr>\n<td>row</td>\n<td>document</td>\n<td>行/文档</td>\n</tr>\n<tr>\n<td>column</td>\n<td>field</td>\n<td>字段/域</td>\n</tr>\n<tr>\n<td>index</td>\n<td>index</td>\n<td>索引</td>\n</tr>\n<tr>\n<td>primary key</td>\n<td>primary key</td>\n<td>主键，mongodb自动将_id设置为主键</td>\n</tr>\n</tbody></table>\n<h2 id=\"数据库\"><a href=\"#数据库\" class=\"headerlink\" title=\"数据库\"></a>数据库</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">show dbs            #显示所有数据的列表</span><br><span class=\"line\">db                  #显示当前数据库对象或集合</span><br><span class=\"line\">use  [database]     #连接到一个指定的数据库</span><br></pre></td></tr></table></figure>\n<h3 id=\"数据库命名规则\"><a href=\"#数据库命名规则\" class=\"headerlink\" title=\"数据库命名规则\"></a>数据库命名规则</h3><ol>\n<li>不能是空字符串  </li>\n<li>不能含有空格、点、$、/、\\  </li>\n<li><strong>应全部小写</strong>  </li>\n<li>最多64字节  </li>\n</ol>\n<h3 id=\"创建数据库\"><a href=\"#创建数据库\" class=\"headerlink\" title=\"创建数据库\"></a>创建数据库</h3><p>使用<code>use DATABASE_NAME</code>进行创建数据库，若没有该数据库则创建，若有则切换。<br>需要注意的是创建完成数据库是空的，使用<code>show dbs</code>不会显示，若要显示改数据库，则需要在该库中添加一些数据</p>\n<h3 id=\"删除数据库\"><a href=\"#删除数据库\" class=\"headerlink\" title=\"删除数据库\"></a>删除数据库</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">&gt; use DATABASE_NAME </span><br><span class=\"line\">&gt; db.dropDatabase()</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"集合\"><a href=\"#集合\" class=\"headerlink\" title=\"集合\"></a>集合</h2><p>集合存在于数据库中，集合没有固定给的结构，可以插入不同格式和类型的数据。当第一个文档插入时，集合就会被创建。  </p>\n<h3 id=\"集合命名规则\"><a href=\"#集合命名规则\" class=\"headerlink\" title=\"集合命名规则\"></a>集合命名规则</h3><ol>\n<li>不能是空字符串  </li>\n<li>不能以system开头，这些是系统合集保留的前缀</li>\n<li>不应包含$  </li>\n</ol>\n<h3 id=\"capped-collection\"><a href=\"#capped-collection\" class=\"headerlink\" title=\"capped collection\"></a>capped collection</h3><p>固定大小的collection，具有很高的性能以及队列过期的特性，可以按照文档的插入顺序保存到集合中，而且这些文档在磁盘上存放位置也是按照插入顺序来保存的，所以当我们更新Capped collections 中文档的时候，更新后的文档不可以超过之前文档的大小，这样话就可以确保所有文档在磁盘上的位置一直保持不变，创建时指定collection的大小，单位是字节，collection的空间是提前分配的。  </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">db.createCollection(&quot;test&quot;, &#123;capped:true, size:100000&#125;)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"创建集合\"><a href=\"#创建集合\" class=\"headerlink\" title=\"创建集合\"></a>创建集合</h3><p><code>db.createCollection(NAME，OPTIONS)</code><br>capped：true时创建固定合集<br>size：为固定合集指定一个最大值，单位是字节<br>max：固定合集中包含文档的最大数量  </p>\n<p><code>show collections</code>或者<code>show tables</code>查看已有合集。  </p>\n<h3 id=\"删除合集\"><a href=\"#删除合集\" class=\"headerlink\" title=\"删除合集\"></a>删除合集</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">db.COLLECTION_NAME.drop()</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"文档\"><a href=\"#文档\" class=\"headerlink\" title=\"文档\"></a>文档</h2><p>文档是一组键值对，不需要设置相同的字段，并且相同的字段不需要相同的数据类型。  </p>\n<ul>\n<li>键值对是有序的  </li>\n<li>区分类型与大小写  </li>\n<li>文档中不能有重复的键  </li>\n<li>文档的键是字符串</li>\n</ul>\n<h3 id=\"插入文档\"><a href=\"#插入文档\" class=\"headerlink\" title=\"插入文档\"></a>插入文档</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">db.COLLECTION_NAME.insert()  # 插入文档，不用遍历，效率高，插入的文档主键已在合集中存在时会报错  </span><br><span class=\"line\">db.COLLECTION_NAME.save()    # 插入文档，插入时需要遍历列表，插入的文档主键已在合集中存在时会将原有文档更新</span><br><span class=\"line\">db.COLLECTION_NAME.insertOne()  #插入一个新文档</span><br><span class=\"line\">db.COLLECTION_NAME.inserMany()  #插入多个新文档，插入方式为有序插入</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\"># insertMany插入</span><br><span class=\"line\">&gt; db.test.insertMany([&#123;&quot;name&quot;:&quot;yyg&quot;&#125;,&#123;&quot;name&quot;:&quot;yang&quot;&#125;,&#123;&quot;name&quot;:&quot;guang&quot;&#125;])</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">        &quot;acknowledged&quot; : true,</span><br><span class=\"line\">        &quot;insertedIds&quot; : [</span><br><span class=\"line\">                ObjectId(&quot;629080043373edb925a0056f&quot;),</span><br><span class=\"line\">                ObjectId(&quot;629080043373edb925a00570&quot;),</span><br><span class=\"line\">                ObjectId(&quot;629080043373edb925a00571&quot;)</span><br><span class=\"line\">        ]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&gt; db.test.find()</span><br><span class=\"line\">&#123; &quot;_id&quot; : ObjectId(&quot;629080043373edb925a0056f&quot;), &quot;name&quot; : &quot;yyg&quot; &#125;</span><br><span class=\"line\">&#123; &quot;_id&quot; : ObjectId(&quot;629080043373edb925a00570&quot;), &quot;name&quot; : &quot;yang&quot; &#125;</span><br><span class=\"line\">&#123; &quot;_id&quot; : ObjectId(&quot;629080043373edb925a00571&quot;), &quot;name&quot; : &quot;guang&quot; &#125;</span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"更新文档\"><a href=\"#更新文档\" class=\"headerlink\" title=\"更新文档\"></a>更新文档</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">db.COLLECTION_NAME.update(&lt;query&gt;,&lt;update&gt;,</span><br><span class=\"line\">   &#123;</span><br><span class=\"line\">     upsert: &lt;boolean&gt;,</span><br><span class=\"line\">     multi: &lt;boolean&gt;,</span><br><span class=\"line\">     writeConcern: &lt;document&gt;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">)</span><br><span class=\"line\"># query : update的查询条件，类似sql update查询内where后面的</span><br><span class=\"line\"># update : update的对象和一些更新的操作符（如$,$inc...）等，也可以理解为sql update查询内set后面的</span><br><span class=\"line\"># upsert : 可选，这个参数的意思是，如果不存在update的记录，是否插入objNew,true为插入，默认是false，不插入。</span><br><span class=\"line\"># multi : 可选，mongodb 默认是false,只更新找到的第一条记录，如果这个参数为true,就把按条件查出来多条记录全部更新。</span><br><span class=\"line\"># writeConcern :可选，抛出异常的级别。</span><br><span class=\"line\"></span><br><span class=\"line\">db.COLLECTION_NAME.save()     #将传入的文档替换原有的文档，主键不存在就插入，存在就替换</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"删除文档\"><a href=\"#删除文档\" class=\"headerlink\" title=\"删除文档\"></a>删除文档</h3>","categories":["MongoDB"],"tags":["MongoDB基础"]},{"title":"0.为什么使用docker","url":"/2019/04/10/docker/0.%E4%B8%BA%E4%BB%80%E4%B9%88%E4%BD%BF%E7%94%A8docker/","content":"<p><img src=\"/2019/04/10/docker/0.%E4%B8%BA%E4%BB%80%E4%B9%88%E4%BD%BF%E7%94%A8docker/%E5%9B%BE%E7%89%87docker.jpg\" alt=\"docker\"><br>Docker作为一种新兴的虚拟化方式，与传统的虚拟化方式比有众多的优势。</p>\n<span id=\"more\"></span> \n<h2 id=\"更高效的利用系统资源\"><a href=\"#更高效的利用系统资源\" class=\"headerlink\" title=\"更高效的利用系统资源\"></a>更高效的利用系统资源</h2><p>Docker的容器不需要硬件虚拟以及运行完整的操作系统等额外开销。无论是应用执行速度、内存损耗或者文件存储速度，都要比传统虚拟机技术更高效。因此相比虚拟机技术，一个相同配置的主机，可以运行更多数量的应用。</p>\n<h2 id=\"更快速的启动时间\"><a href=\"#更快速的启动时间\" class=\"headerlink\" title=\"更快速的启动时间\"></a>更快速的启动时间</h2><p>Docker容器直接运行于宿主内核，无需启动完整的操作系统，因此可以做到秒级、甚至毫秒级的启动时间。</p>\n<h2 id=\"一致的运行环境\"><a href=\"#一致的运行环境\" class=\"headerlink\" title=\"一致的运行环境\"></a>一致的运行环境</h2><p>Docker镜像提供了除了内核外完整的运行环境，确保了应用运行环境的一致性。</p>\n<h2 id=\"持续交付和部署\"><a href=\"#持续交付和部署\" class=\"headerlink\" title=\"持续交付和部署\"></a>持续交付和部署</h2><p>对开发和运维人员来说，最希望的就是一次创建或配置，可以在任意地方正常运行。<br>使用 Docker 可以通过定制应用镜像来实现持续集成、持续交付、部署。开发人员可以通过 Dockerfile 来进行镜像构建，并结合 持续集成(Continuous Integration) 系统进行集成测试，而运维人员则可以直接在生产环境中快速部署该镜像，甚至结合 持续部署(Continuous Delivery/Deployment) 系统进行自动部署。<br>而且使用 Dockerfile 使镜像构建透明化，不仅仅开发团队可以理解应用运行环境，也方便运维团队理解应用运行所需条件，帮助更好的生产环境中部署该镜像。  </p>\n<h2 id=\"更轻松的迁移\"><a href=\"#更轻松的迁移\" class=\"headerlink\" title=\"更轻松的迁移\"></a>更轻松的迁移</h2><p>由于 Docker 确保了执行环境的一致性，使得应用的迁移更加容易。Docker 可以在很多平台上运行，无论是物理机、虚拟机、公有云、私有云，甚至是笔记本，其运行结果是一致的。因此用户可以很轻易的将在一个平台上运行的应用，迁移到另一个平台上，而不用担心运行环境的变化导致应用无法正常运行的情况。  </p>\n<h2 id=\"更轻松的维护和扩展\"><a href=\"#更轻松的维护和扩展\" class=\"headerlink\" title=\"更轻松的维护和扩展\"></a>更轻松的维护和扩展</h2><p>Docker 使用的分层存储以及镜像的技术，使得应用重复部分的复用更为容易，也使得应用的维护更新更加简单，基于基础镜像进一步扩展镜像也变得非常简单。此外，Docker 团队同各个开源项目团队一起维护了一大批高质量的 官方镜像，既可以直接在生产环境使用，又可以作为基础进一步定制，大大的降低了应用服务的镜像制作成本。  </p>\n<h2 id=\"对比传统虚拟总结\"><a href=\"#对比传统虚拟总结\" class=\"headerlink\" title=\"对比传统虚拟总结\"></a>对比传统虚拟总结</h2><table>\n<thead>\n<tr>\n<th align=\"center\">特性</th>\n<th align=\"center\">容器</th>\n<th align=\"center\">虚拟机</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">启动</td>\n<td align=\"center\">秒级</td>\n<td align=\"center\">分钟级</td>\n</tr>\n<tr>\n<td align=\"center\">硬盘使用</td>\n<td align=\"center\">一般为 MB</td>\n<td align=\"center\">一般为 GB</td>\n</tr>\n<tr>\n<td align=\"center\">内存代价</td>\n<td align=\"center\">很小</td>\n<td align=\"center\">较多</td>\n</tr>\n<tr>\n<td align=\"center\">隔离性</td>\n<td align=\"center\">优秀</td>\n<td align=\"center\">一般</td>\n</tr>\n<tr>\n<td align=\"center\">性能</td>\n<td align=\"center\">接近原生</td>\n<td align=\"center\">弱于</td>\n</tr>\n<tr>\n<td align=\"center\">系统支持量</td>\n<td align=\"center\">单机支持上千个容器</td>\n<td align=\"center\">一般几十个</td>\n</tr>\n</tbody></table>\n","categories":["docker"],"tags":["为什么使用docker"]},{"title":"1.初识Docker","url":"/2019/04/11/docker/1.%E5%88%9D%E8%AF%86Docker/","content":"<p><img src=\"/2019/04/11/docker/1.%E5%88%9D%E8%AF%86Docker/docker.jpg\" alt=\"docker\">  </p>\n<span id=\"more\"></span>\n<h1 id=\"Docker\"><a href=\"#Docker\" class=\"headerlink\" title=\"Docker\"></a>Docker</h1><h2 id=\"Docker基本概念\"><a href=\"#Docker基本概念\" class=\"headerlink\" title=\"Docker基本概念\"></a>Docker基本概念</h2><p>Docker的大部分操作都围绕：<strong>镜像、容器和仓库</strong>。</p>\n<h3 id=\"Docker镜像（Image）\"><a href=\"#Docker镜像（Image）\" class=\"headerlink\" title=\"Docker镜像（Image）\"></a>Docker镜像（Image）</h3><p>&emsp;&emsp;对于Linux而言，内核启动后会挂载根文件系统提供用户空间支持。Docker镜像相当于一个根文件系统，比如官方镜像 ubuntu:18.04 就包含了完整的一套 Ubuntu 18.04 最小系统的 root 文件系统。Docker镜像是一个特殊的文件系统，除了提供容器运行时的所需的程序、库、资源、配置等文件，还包含了一些为运行时准备的参数配置（匿名卷、环境变量、用户等），镜像不包含任何动态数据，其内容在构建之后也不会被改变。docker镜像类似于虚拟机镜像，可以将它理解为一个只读的模板。  </p>\n<h4 id=\"分层存储\"><a href=\"#分层存储\" class=\"headerlink\" title=\"分层存储\"></a>分层存储</h4><p>&emsp;&emsp;因为镜像包含操作系统的完整的根文件系统，其体积往往是庞大的，因此将其设计为分层存储的架构。 镜像只是一个虚拟的概念，其实际体现并非由一个文件系统组成，而是由多层文件系统组成。<br>&emsp;&emsp;镜像构建时，会一层一层构建，前一层是后一层的基础。每一层构建完成后不会在改变，后一层上的任何改变只发生在当前层。比如，删除前一层文件的操作，实际不是真的删除前一层的文件，而是仅在当前层标记为该文件已删除。在最终容器运行的时候，虽然不会看到这个文件，但是实际上该文件会一直跟随镜像。因此，在构建镜像的时候，需要额外小心，每一层尽量只包含该层需要添加的东西，任何额外的东西应该在该层构建结束前清理掉。<br>&emsp;&emsp;分层存储的特征还使得镜像的复用、定制变的更为容易。甚至可以用之前构建好的镜像作为基础层，然后进一步添加新的层，以定制自己所需的内容，构建新的镜像。<br>&emsp;&emsp;当容器启动时，一个新的可写层被加载到镜像的顶部。这一层通常被称作“容器层”，“容器层”之下的都叫“镜像层”。所有对容器的改动 - 无论添加、删除、还是修改文件都只会发生在容器层中。只有容器层是可写的，容器层下面的所有镜像层都是只读的。  </p>\n<h3 id=\"Docker容器（Container）\"><a href=\"#Docker容器（Container）\" class=\"headerlink\" title=\"Docker容器（Container）\"></a>Docker容器（Container）</h3><p>&emsp;&emsp;容器是从镜像创建的运行实例。镜像与容器的关系就像是面向对象程序设计中的<strong>类</strong>与<strong>实例</strong>，镜像是静态的定义，容器是镜像运行时的实体，可以被启动、停止、删除等。每个容器是相互隔离的。<br>&emsp;&emsp;容器的实质是进程，但与直接在宿主机器执行的进程不同，容器进程属于自己的独立的命名空间。因此容器可以拥有自己的根文件系统、自己的网络配置、自己的进程空间。容器内的进程是运行在一个隔离的环境里，使用起来就像在独立于宿主的系统中操作一样。<br>&emsp;&emsp;每一个容器运行时，是以镜像为基础层，在其上创建一个当前容器的存储层，我们可以称这个为容器运行时读写而准备的存储层为容器存储层。<br>&emsp;&emsp;容器存储层的生存周期和容器一样，容器消亡时，容器存储层也随之消亡。因此，任何保存于容器存储层的信息都会随容器删除而丢失。<br>&emsp;&emsp;按照Docker最佳实践的要求，容器不应该向其存储层内写入数据，容器存储层要保持无状态化。所有的文件写入操作，都应该使用 <strong>数据卷</strong>、或者绑定宿主目录。数据卷的生存周期独立于容器，容器消亡，数据卷不会消失。  </p>\n<h3 id=\"仓库\"><a href=\"#仓库\" class=\"headerlink\" title=\"仓库\"></a>仓库</h3><h4 id=\"Docker-Registry\"><a href=\"#Docker-Registry\" class=\"headerlink\" title=\"Docker Registry\"></a>Docker Registry</h4><p>&emsp;&emsp;Docker Registry是一个集中的存储、分发镜像的服务，仓库注册服务器。<br>&emsp;&emsp;一个<strong>Docker Registry</strong>中可以包含多个仓库（Repository）；每个仓库可以包含多个标签（Tag）；每个标签对应一个镜像。<br>&emsp;&emsp;通常一个仓库中会包含一个软件的不同版本，而标签就常用于对应软件的各个版本。可以通过&lt;仓库名&gt;:&lt;标签&gt;的格式来制定具体是什么软件的什么版本镜像。<br>&emsp;&emsp;jwilder/nginx-proxy，这种仓库名前者是多用户环境下的用户名，后者是对应软件名。  </p>\n<h4 id=\"Docker-Registry-公开服务\"><a href=\"#Docker-Registry-公开服务\" class=\"headerlink\" title=\"Docker Registry 公开服务\"></a>Docker Registry 公开服务</h4><p>&emsp;&emsp;Docker Registry 公开服务是公开给用户使用的、允许用户管理镜像的Registry服务。最常使用的 Registry 公开服务是官方的 <a href=\"https://hub.docker.com/\">Docker Hub</a>，这也是默认的 Registry，国内访问速度会比较慢，所以一些云服务商就提供了针对Docker Hub的镜像服务，被称为加速器，例如阿里云加速器。<br>&emsp;&emsp;国内也有类似于Docker Hub的公开服务，比如阿里云镜像库。  </p>\n<h4 id=\"私有-Docker-Registry\"><a href=\"#私有-Docker-Registry\" class=\"headerlink\" title=\"私有 Docker Registry\"></a>私有 Docker Registry</h4><p>&emsp;&emsp;除了公开服务外，用户还可以在本地搭建私有Docker Registry。  </p>\n<h2 id=\"安装Docker\"><a href=\"#安装Docker\" class=\"headerlink\" title=\"安装Docker\"></a>安装Docker</h2><p>&emsp;&emsp;Docker要求CentOS系统的内核版本高于3.10且是64位系统，可以使用<code>uname -r</code>进行查看。  </p>\n<ul>\n<li><p>使用脚本进行安装  </p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">修改dns，/etc/resolv.conf，在该文件种添加</span></span><br><span class=\"line\">nameserver 8.8.8.8</span><br><span class=\"line\">curl -fsSL https://get.docker.com/ | sh </span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 推荐使用阿里云安装脚本</span></span><br><span class=\"line\">curl -fsSL https://get.docker.com | bash -s docker --mirror Aliyun</span><br></pre></td></tr></table></figure>\n<p>在使用阿里云安装脚本时，可能会报错<br><img src=\"/2019/04/11/docker/1.%E5%88%9D%E8%AF%86Docker/container-selinux%E9%94%99%E8%AF%AF.png\" alt=\"container-selinux错误\"><br>添加阿里源后在进行安装docker即可  </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">wget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo</span><br></pre></td></tr></table></figure></li>\n<li><p>开启Docker服务  </p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">开启服务</span></span><br><span class=\"line\">service docker start</span><br></pre></td></tr></table></figure></li>\n<li><p>安装校验  </p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker version</span><br></pre></td></tr></table></figure></li>\n<li><p>普通用户加入到docker用户组<br>如果想使用普通用户执行docker命令，将该用户加入到docker用户组即可</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">usermod -aG docker USER_NAME</span><br></pre></td></tr></table></figure></li>\n</ul>\n","categories":["docker"],"tags":["docker基础及安装"]},{"title":"2.docker镜像","url":"/2019/04/12/docker/2.docker%E9%95%9C%E5%83%8F/","content":"<p><img src=\"/2019/04/12/docker/2.docker%E9%95%9C%E5%83%8F/%E5%9B%BE%E7%89%87docker.jpg\" alt=\"docker\">  </p>\n<span id=\"more\"></span>\n<p><em>在使用docker命令时需使用管理员身份运行</em>  </p>\n<h1 id=\"Docker镜像介绍\"><a href=\"#Docker镜像介绍\" class=\"headerlink\" title=\"Docker镜像介绍\"></a>Docker镜像介绍</h1><p>在上一章介绍到镜像是docker的三大组件之一。docker运行容器需要本地存在对应的镜像。在执行时如果镜像不存在本地，docker会从镜像仓库下载（默认是Docker Hub中的仓库）。</p>\n<h2 id=\"base镜像\"><a href=\"#base镜像\" class=\"headerlink\" title=\"base镜像\"></a>base镜像</h2><h3 id=\"base镜像的含义\"><a href=\"#base镜像的含义\" class=\"headerlink\" title=\"base镜像的含义\"></a>base镜像的含义</h3><p>1.不依赖其他镜像<br>2.其他镜像可以以之为基础进行扩展<br>能称之为base镜像的通常是各种linux发行版的docker镜像。如：centos、ubuntu等  </p>\n<h3 id=\"base镜像原理介绍\"><a href=\"#base镜像原理介绍\" class=\"headerlink\" title=\"base镜像原理介绍\"></a>base镜像原理介绍</h3><p><img src=\"/2019/04/12/docker/2.docker%E9%95%9C%E5%83%8F/%E5%86%85%E6%A0%B8%E7%A9%BA%E9%97%B4%E5%92%8C%E7%94%A8%E6%88%B7%E7%A9%BA%E9%97%B4.png\" alt=\"内核空间和用户空间\"><br>内核空间：bootfs，linux系统启动时会加载bootfs文件系统，之后会将boots卸载<br>用户空间：rootfs，包含/dev、/proc、/bin等目录<br>镜像底层直接使用docker宿主机的kernel，只需要运行rootfs即可，所以base镜像都是很小的。  </p>\n<ul>\n<li>base 镜像只是在用户空间与发行版一致，kernel 版本与发型版是不同的。  </li>\n<li>容器只能使用 Host 的 kernel，并且不能修改。<br>所有容器都共用 host 的 kernel，在容器中没办法对 kernel 升级。如果容器对 kernel 版本有要求（比如应用只能在某个 kernel 版本下运行），则不建议用容器  </li>\n</ul>\n<h2 id=\"获取镜像\"><a href=\"#获取镜像\" class=\"headerlink\" title=\"获取镜像\"></a>获取镜像</h2><ol>\n<li>查找想要的镜像<br>搜索指定版本需要到 <a href=\"https://hub.docker.com/\">docker hub</a>中查看  <figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker search [选项] image_name</span><br></pre></td></tr></table></figure>\n【选项】：  </li>\n</ol>\n<p><strong>-s NUM</strong>：可以查看NUM星以上的镜像<br><strong>–automated</strong>:默认false，显示automated build镜像<br><strong>–no-trunc</strong>：默认false，镜像描述不截断  </p>\n<ol>\n<li>获取想要的镜像  <figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker pull [选项] [Docker Registry 地址[:端口号]/]仓库名[:标签]</span><br><span class=\"line\">#例如下载默认仓库的ubuntu:18.04其实相当于</span><br><span class=\"line\">docker pull registry.hub.docker.com/ubuntu:18.04</span><br></pre></td></tr></table></figure>\n镜像仓库地址：地址的格式一般是&lt;域名/IP&gt;[:端口号]，默认地址是Docker Hub。<br>仓库名：正如上一章所述，仓库名为两段式 &lt;用户名&gt;/&lt;软件名&gt;；若仓库地址为Docker Hub，未给出用户名，则默认为library，即官方镜像。<br>标签：若忽略tag则下载最新版本的镜像，即tag为latest，镜像的latest标签意味着该镜像的内容会跟踪最新版本的变更而变化，内容是不稳定的。  </li>\n</ol>\n<p><strong>获取ubuntu镜像</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">$docker pull ubuntu:18.04  </span><br><span class=\"line\">18.04: Pulling from library/ubuntu</span><br><span class=\"line\">35c102085707: Pull complete </span><br><span class=\"line\">251f5509d51d: Pull complete </span><br><span class=\"line\">8e829fe70a46: Pull complete </span><br><span class=\"line\">6001e1789921: Pull complete </span><br><span class=\"line\">Digest: sha256:d1d454df0f579c6be4d8161d227462d69e163a8ff9d20a847533989cf0c94d90</span><br><span class=\"line\">Status: Downloaded newer image for ubuntu:18.04</span><br><span class=\"line\">docker.io/library/ubuntu:18.04</span><br></pre></td></tr></table></figure>\n\n<p>这样就获取了ubuntu标签为18.04的景象，从上面的下载过程中可以看到分层存储的概念，竟像是由多层存储构成的，并给出了每一层的IMAGE ID的前12位，以及该镜像完整的sha256 摘要，以确保下载的一致性。<br><em>镜像下载速度会非常缓慢，推荐使用阿里镜像加速器</em><br><img src=\"/2019/04/12/docker/2.docker%E9%95%9C%E5%83%8F/%E9%98%BF%E9%87%8C%E4%BA%91.png\" alt=\"阿里云\"><br>按照操作文档执行完成后使用<code>docker info</code>查看 Registry Mirrors是否修改。  </p>\n<h2 id=\"运行镜像\"><a href=\"#运行镜像\" class=\"headerlink\" title=\"运行镜像\"></a>运行镜像</h2><p>镜像下载完成后，以该镜像为基础启动并运行一个容器。  </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker run -it --rm ubuntu:18.04 bash</span><br></pre></td></tr></table></figure>\n<p><strong>-it</strong>:i为交互式操作，t为终端，这样就可以进入交互式终端<br><strong>–rm</strong>：容器退出后删除容器，一般不会指定这个参数，这里只是进行测试<br><strong>ubuntu:18.04</strong>：指定镜像，需执行tag，若不指定tag则默认tag为latest，且若本地无该标签的镜像，会自动进行下载。<br><strong>bash</strong>：放在镜像后面的是命令，因为需要一个交互式shell。  </p>\n<p><strong>退出容器，执行exit即可</strong>  </p>\n<h2 id=\"列出本地镜像\"><a href=\"#列出本地镜像\" class=\"headerlink\" title=\"列出本地镜像\"></a>列出本地镜像</h2><p><code>docker images [选项] [镜像仓库[:镜像标记]]</code><br><code>docker image ls [选项] [镜像仓库[:镜像标记]]</code><br>【选项】：<br><strong>-a</strong>：显示本地所有的镜像文件（含中间层镜像，默认不展示中间层镜像）<br><strong>–digests</strong>：显示镜像文件的摘要信息<br><strong>–no-trunc</strong>：显示完整的镜像信息<br><strong>-f /–filter</strong>:过滤，例如-f since=mongo：3.2，是查看mongo：3.2之后建立的镜像，查看之前的镜像使用before。<br><strong>-q</strong>:只显示镜像的ID<br><strong>–format</strong>：列出镜像列表指定的列，如：<br><code>docker image ls --format &quot;&#123; &#123;.ID&#125; &#125;: &#123; &#123;.Repository&#125; &#125;&quot;</code> 是只展示镜像ID、和仓库名列；还可以以表格的形式进行展示，如：<code>docker image ls --format &quot;table &#123; &#123;.ID&#125; &#125;\\t&#123; &#123;.Repository&#125; &#125;\\t&#123; &#123;.Tag&#125; &#125;&quot;</code>,这样列出的信息可以等距展示，并且有标题行，和默认展示的结构一样。<em><strong>因语法原因，导致在两个花括号之间是加上了空格</strong></em><br><code>man docker-images</code>来查看<br><img src=\"/2019/04/12/docker/2.docker%E9%95%9C%E5%83%8F/%E9%95%9C%E5%83%8F%E5%88%97%E8%A1%A8.png\" alt=\"镜像列表\"><br><strong>REPOSITORY</strong>：镜像仓库<br><strong>TAG</strong>：镜像标签，区分版本<br><strong>IMANE ID</strong>：镜像ID（唯一）<br><strong>CREATED</strong>：镜像创建时间<br><strong>SIZE</strong>：镜像大小<br>可以看到列出的镜像的大小与Docker Hub上显示的镜像带下不同，这是因为 Docker Hub 中显示的体积是压缩后的体积。在镜像下载和上传过程中镜像是保持着压缩状态的，因此 Docker Hub 所显示的大小是网络传输中更关心的流量大小。而 <code>docker images</code> 显示的是镜像下载到本地后，展开的大小，准确说，是展开后的各层所占空间的总和，因为镜像到本地后，查看空间的时候，更关心的是本地磁盘空间占用的大小。<br>另外一个需要注意的问题是，docker image ls 列表中的镜像体积总和并非是所有镜像实际硬盘消耗。由于 Docker 镜像是多层存储结构，并且可以继承、复用，因此不同镜像可能会因为使用相同的基础镜像，从而拥有共同的层。由于 Docker 使用 Union FS，相同的层只需要保存一份即可，因此实际镜像硬盘占用空间很可能要比这个列表镜像大小的总和要小的多。<br>可以使用<code>docker system df</code>查看镜像、容器、数据卷所占用的空间。<br><img src=\"/2019/04/12/docker/2.docker%E9%95%9C%E5%83%8F/sys_df.png\" alt=\"docker system df\">  </p>\n<h2 id=\"使用tag命令添加镜像标签\"><a href=\"#使用tag命令添加镜像标签\" class=\"headerlink\" title=\"使用tag命令添加镜像标签\"></a>使用tag命令添加镜像标签</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker tag ubuntu:18.04 myubuntu:18.04</span><br></pre></td></tr></table></figure>\n<p><img src=\"/2019/04/12/docker/2.docker%E9%95%9C%E5%83%8F/tag.png\" alt=\"tag\"><br>可以发现两个ubuntu的IMAGE ID是一样的，它们实际上指向了同一个镜像文件，只是别名不同而已。<code>docker tag</code>命令添加的标签实际上起到了类似链接的作用。  </p>\n<h2 id=\"使用inspect命令查看详细信息\"><a href=\"#使用inspect命令查看详细信息\" class=\"headerlink\" title=\"使用inspect命令查看详细信息\"></a>使用inspect命令查看详细信息</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker inspect ubuntu:18.04</span><br></pre></td></tr></table></figure>\n<p>使用<code>docker inspect</code>命令可以获取到镜像的详细信息，返回的是一个JSON格式的消息，可以使用<code>-f</code> 来指定获取的指定信息。  </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker inspect -f &quot;&#123;&#123;.Id&#125;&#125;&quot; ubuntu:18.04</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"使用history命令查看镜像历史\"><a href=\"#使用history命令查看镜像历史\" class=\"headerlink\" title=\"使用history命令查看镜像历史\"></a>使用history命令查看镜像历史</h2><p>镜像文件由多个层组成,可以使用history子命令，该命令将列出各层的创建信息</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker history ubuntu:18.04 [--no-trunc]</span><br></pre></td></tr></table></figure>\n<p>默认情况下过长的命令自动被阶段，使用<code>--no-trunc</code>可以显示完整命令。  </p>\n<h2 id=\"虚悬镜像\"><a href=\"#虚悬镜像\" class=\"headerlink\" title=\"虚悬镜像\"></a>虚悬镜像</h2><p>当我们可能会在本地镜像列表中看到仓库名、标签均为<code>&lt;none&gt;</code>。这个镜像原本是有镜像名和标签的，随着镜像的维护，发布了新版本，重新docker pull后镜像名被转移到新下载的镜像上，而旧的镜像上的名称被取消，从而形成了<code>&lt;none&gt;</code>。docker build 也可以导致这样的问题，由于新旧镜像名一样，旧镜像名被取消。这类无标签镜像被称为 <strong>虚悬镜像</strong>。<br>可以使用<code>docker images -f dangling=true</code>查看虚悬镜像<br>一般虚悬镜像失去了价值，可以使用<code>docker image prune</code> 进行删除  </p>\n<h2 id=\"中间层镜像\"><a href=\"#中间层镜像\" class=\"headerlink\" title=\"中间层镜像\"></a>中间层镜像</h2><p>在使用一段时间后，可能会看到一些依赖的中间层镜像，默认的<code>docker images</code>、<code>docker image ls</code>只能会显示顶层的镜像，要显示所有镜像的话需要加上-a。<br>这样会看到许多无标签的镜像，与之前的虚悬镜像不同，这些无标签的镜像很多都是中中间层镜像，是其他镜像依赖的镜像。这些无标签镜像不应该删除，否则会导致上层镜像因为依赖丢失而出错。他们没有被多存一份。只要删除那些依赖它们的镜像后，这些依赖的中间层镜像也会被连带删除。  </p>\n<h2 id=\"创建镜像\"><a href=\"#创建镜像\" class=\"headerlink\" title=\"创建镜像\"></a>创建镜像</h2><p>创建镜像的方法主要有两种：基于已有镜像的容器创建、基于Dockerfile创建。  </p>\n<h3 id=\"修改已有镜像\"><a href=\"#修改已有镜像\" class=\"headerlink\" title=\"修改已有镜像\"></a>修改已有镜像</h3><p>使用修改已有镜像的方法创建一个新的镜像，就是在原有镜像的基础上，再叠加上容器的存储层，并构成新的镜像</p>\n<ol>\n<li>先使用下载的镜像启动容器<br><code>docker run -i -t ubuntu /bin/bash</code>  </li>\n</ol>\n<p><strong>-i</strong>：交互式操作<br><strong>-t</strong>：终端<br><strong>- -rm</strong>：退出容器后随之将该容器删除<br><strong>- -name=</strong> ：指定容器名称  </p>\n<p><img src=\"/2019/04/12/docker/2.docker%E9%95%9C%E5%83%8F/%E5%90%AF%E5%8A%A8%E5%AE%B9%E5%99%A8.png\" alt=\"启动容器\"><br><em>root@后面的为该容器的ID</em><br>2. 在容器中进行修改,如安装软件,<br><code>apt-get -y update</code><br><code>apt-get -y install apache2</code><br>3. 退出容器<br><code>exit</code><br>4. 提交更新后的副本<br><code>docker commit [选项] 容器ID/容器名 镜像仓库名[:tag]</code><br>【选项】<br><strong>-m=”commit message”</strong>:指定提交的说明信息<br><strong>- -author=”author”</strong>:镜像作者信息<br><strong>-p</strong>:提交时暂停容器运行<br><img src=\"/2019/04/12/docker/2.docker%E9%95%9C%E5%83%8F/%E6%8F%90%E4%BA%A4%E9%95%9C%E5%83%8F.png\" alt=\"提交镜像\"><br>创建成功后会返回镜像ID信息<br>容器ID除了在之前容器中的交互式中查看之外，还可以通过<code>docker ps -a</code>查看<br><img src=\"/2019/04/12/docker/2.docker%E9%95%9C%E5%83%8F/%E6%9F%A5%E7%9C%8B%E5%AE%B9%E5%99%A8ID.png\" alt=\"docker ps -a\"><br>创建成功后就可以在docker的本地镜像列表中查看到了<br><img src=\"/2019/04/12/docker/2.docker%E9%95%9C%E5%83%8F/%E9%95%9C%E5%83%8F%E5%88%97%E8%A1%A82.png\" alt=\"镜像列表-2\"><br><em>慎用docker commit，由于命令的执行，还有很多文件被改动或添加了。这还仅仅是最简单的操作，如果是安装软件包、编译构建，那会有大量的无关内容被添加进来，如果不小心清理，将会导致镜像极为臃肿。</em><br><em>此外，使用 docker commit 意味着所有对镜像的操作都是黑箱操作，生成的镜像也被称为黑箱镜像，换句话说，就是除了制作镜像的人知道执行过什么命令、怎么生成的镜像，别人根本无从得知。而且，即使是这个制作镜像的人，过一段时间后也无法记清具体在操作的。虽然 docker diff 或许可以告诉得到一些线索，但是远远不到可以确保生成一致镜像的地步。这种黑箱镜像的维护工作是非常痛苦的。</em><br><em>而且，回顾之前提及的镜像所使用的分层存储的概念，除当前层外，之前的每一层都是不会发生改变的，换句话说，任何修改的结果仅仅是在当前层进行标记、添加、修改，而不会改动上一层。如果使用 docker commit 制作镜像，以及后期修改的话，每一次修改都会让镜像更加臃肿一次，所删除的上一层的东西并不会丢失，会一直如影随形的跟着这个镜像，即使根本无法访问到。这会让镜像更加臃肿。</em></p>\n<h3 id=\"通过Dockerfile文件和docker-build创建镜像\"><a href=\"#通过Dockerfile文件和docker-build创建镜像\" class=\"headerlink\" title=\"通过Dockerfile文件和docker build创建镜像\"></a>通过Dockerfile文件和docker build创建镜像</h3><p>具体查看 <a href=\"/2019/04/13/docker/3.%E4%BD%BF%E7%94%A8Dockerfile%E5%AE%9A%E5%88%B6%E9%95%9C%E5%83%8F/\" title=\"3.使用Dockerfile定制镜像\">3.使用Dockerfile定制镜像</a></p>\n<h2 id=\"上传镜像\"><a href=\"#上传镜像\" class=\"headerlink\" title=\"上传镜像\"></a>上传镜像</h2><p>用户可以通过<code>docker push</code>命令将自己创建的镜像上传到仓库来共享  </p>\n<h3 id=\"将自己的docker镜像上传到阿里云的本地仓库\"><a href=\"#将自己的docker镜像上传到阿里云的本地仓库\" class=\"headerlink\" title=\"将自己的docker镜像上传到阿里云的本地仓库\"></a>将自己的docker镜像上传到阿里云的本地仓库</h3><p>登录阿里云，在容器镜像服务的命名空间中创建一个命令空间，然后在镜像仓库中创建镜像仓库（镜像仓库名为所要存储的镜像的名，镜像仓库中存储不同版本的镜像），具体的操作步骤可以查看仓库后的管理<br><img src=\"/2019/04/12/docker/2.docker%E9%95%9C%E5%83%8F/%E9%98%BF%E9%87%8C%E4%BA%91%E4%BB%93%E5%BA%93%E7%AE%A1%E7%90%86.png\" alt=\"阿里云仓库管理\">  </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ sudo docker login --username=guang123hb registry.cn-shanghai.aliyuncs.com</span><br><span class=\"line\">$ sudo docker tag [ImageId] registry.cn-shanghai.aliyuncs.com/daguangy/my_images:[镜像版本号]</span><br><span class=\"line\">$ sudo docker push registry.cn-shanghai.aliyuncs.com/daguangy/my_images:[镜像版本号]</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"导出和导入镜像\"><a href=\"#导出和导入镜像\" class=\"headerlink\" title=\"导出和导入镜像\"></a>导出和导入镜像</h2><h3 id=\"导出镜像\"><a href=\"#导出镜像\" class=\"headerlink\" title=\"导出镜像\"></a>导出镜像</h3><p>导出镜像到本地文件，可以使用<code>docker save</code>命令  </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">例如：</span><br><span class=\"line\">sudo docker save -o ubuntu_14.04.tar ubuntu:14.04</span><br></pre></td></tr></table></figure>\n<p>-o :表示输出到文件  </p>\n<h3 id=\"导入镜像\"><a href=\"#导入镜像\" class=\"headerlink\" title=\"导入镜像\"></a>导入镜像</h3><p>使用<code>docker load</code>从导出的本地文件中再导入到本地镜像  </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo docker load -i ubuntu_14.04.tar</span><br><span class=\"line\">或</span><br><span class=\"line\">sudo docker load &lt; ubuntu_14.04.tar</span><br></pre></td></tr></table></figure>\n<p>这将会导入镜像以及其的元数据信息（包括标签等）  </p>\n<h2 id=\"删除本地镜像\"><a href=\"#删除本地镜像\" class=\"headerlink\" title=\"删除本地镜像\"></a>删除本地镜像</h2><p>如果要移除本地镜像，可以使用<code>docker rmi [选项] 镜像</code>、<code>docker image rm [选项] &lt;镜像1&gt; [&lt;镜像2&gt; ...]</code>命令，镜像可以是镜像短ID、镜像长ID、镜像名、或者镜像摘要。完整的镜像ID也成为长ID，<code>docker images ls</code>展示的是短ID，在删除镜像时一般提取前三个字符以上，只要能够区分镜像就可以了。<em>注意<code>docer rm CONTAINER ID</code>是删除容器。</em><br><img src=\"/2019/04/12/docker/2.docker%E9%95%9C%E5%83%8F/%E5%88%A0%E9%99%A4%E9%95%9C%E5%83%8F.png\" alt=\"删除镜像\"><br><strong>-f</strong>：强制删除镜像，即使有容器依赖它。  </p>\n<h3 id=\"Untagged和Deleted\"><a href=\"#Untagged和Deleted\" class=\"headerlink\" title=\"Untagged和Deleted\"></a>Untagged和Deleted</h3><p>镜像的唯一标识就是ID和digests（摘要），而一个镜像可以有多个标签。从上面的图片中可以看出在删除镜像时有Untagged、Deleted行为。<br>当我们使用上面命令删除镜像的时候，实际上是在要求删除某个标签的镜像。所以首先需要做的是将满足我们要求的所有镜像标签都取消，这就是我们看到的 Untagged 的信息。因为一个镜像可以对应多个标签，因此当我们删除了所指定的标签后，可能还有别的标签指向了这个镜像，如果是这种情况，那么 Delete 行为就不会发生。所以并非所有的 docker image rm 都会产生删除镜像的行为，有可能仅仅是取消了某个标签而已。<br>当该镜像所有的标签都被取消了，该镜像很可能会失去了存在的意义，因此会触发删除行为。镜像是多层存储结构，因此在删除的时候也是从上层向基础层方向依次进行判断删除。镜像的多层结构让镜像复用变动非常容易，因此很有可能某个其它镜像正依赖于当前镜像的某一层。这种情况，依旧不会触发删除该层的行为。直到没有任何层依赖当前层时，才会真实的删除当前层。这就是为什么，有时候会奇怪，为什么明明没有别的标签指向这个镜像，但是它还是存在的原因，也是为什么有时候会发现所删除的层数和自己 docker pull 看到的层数不一样的源。<br>除了镜像依赖以外，还需要注意的是容器对镜像的依赖。如果有用这个镜像启动的容器存在（即使容器没有运行），那么同样不可以删除这个镜像。之前讲过，容器是以镜像为基础，再加一层容器存储层，组成这样的多层存储结构去运行的。因此该镜像如果被这个容器所依赖的，那么删除必然会导致故障。如果这些容器是不需要的，应该先将它们删除，然后再来删除镜像。  </p>\n<h2 id=\"清理虚悬镜像\"><a href=\"#清理虚悬镜像\" class=\"headerlink\" title=\"清理虚悬镜像\"></a>清理虚悬镜像</h2><p>虚悬镜像一般是已经失去了存在价值的  </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker rmi $(docker images -q -f &quot;dangling=true&quot;)</span><br><span class=\"line\">或</span><br><span class=\"line\">docker rmi $(docker images --quiet --filter &quot;dangling=true&quot;)</span><br><span class=\"line\">这种docker rmi $(....)可以嵌套docker images来选择行的批量删除镜像</span><br><span class=\"line\">或</span><br><span class=\"line\">docker image prune</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"镜像的缓存特性\"><a href=\"#镜像的缓存特性\" class=\"headerlink\" title=\"镜像的缓存特性\"></a>镜像的缓存特性</h2><ul>\n<li>Docker 会缓存已有镜像的镜像层，构建新镜像时，如果某镜像层已经存在，就直接使用，无需重新创建。<br>例如使用ubuntu镜像为基础进行构建，安装vim，将构建的镜像命名为test1；再次使用ubuntu镜像为基础进行构建，安装vim，将某个文件拷贝到镜像指定位置，将构建的镜像命名为test2。两次构件都是使用ubuntu镜像为基础并安装vim，在构建test1时安装vim的步骤将会单独创建一个镜像层，在构建test2中安装vim的这一步则会直接使用这一镜像层。  </li>\n<li>除了构建时使用缓存，Docker 在下载镜像时也会使用。<br>例如已经拉取了一个base镜像，再拉取其他镜像时，若使用的是改base镜像，则这一层的镜像层就不在拉取。  </li>\n</ul>\n","categories":["docker"],"tags":["docker镜像"]},{"title":"3.使用Dockerfile定制镜像","url":"/2019/04/13/docker/3.%E4%BD%BF%E7%94%A8Dockerfile%E5%AE%9A%E5%88%B6%E9%95%9C%E5%83%8F/","content":"<p><img src=\"/2019/04/13/docker/3.%E4%BD%BF%E7%94%A8Dockerfile%E5%AE%9A%E5%88%B6%E9%95%9C%E5%83%8F/docker.jpg\" alt=\"docker\">  </p>\n<span id=\"more\"></span>\n\n<h2 id=\"使用-Dockerfile-定制镜像\"><a href=\"#使用-Dockerfile-定制镜像\" class=\"headerlink\" title=\"使用 Dockerfile 定制镜像\"></a>使用 Dockerfile 定制镜像</h2><p>从之前的<code>docker commit</code>的学习里可以了解到，镜像定制实际就是定制每一层所添加的配置、文件。若将每一层的命令都写入一个脚本，用这个脚本来构建镜像，之前黑箱镜像的缺陷就都会解决，这个脚本就是Dockerfile。<br>Dockerfile是一个文本文件，其中包含一条一条指定，每一条指定构建一层，因此每一条指定就是指定该层应该如何创建。<br>以nginx镜像为例，使用Dockerfile来定制。<br>在一个空白目录中创建一个名为Dockerfile的文件。<br>Dockerfile主体内容分为四部分：基础镜像信息、维护者信息、镜像操作指令和容器启动时执行指令。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">mkdir mynginx</span><br><span class=\"line\">cd mynginx</span><br><span class=\"line\">touch Dockerfile</span><br></pre></td></tr></table></figure>\n<p>在Docker文件中添加内容为：  </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">FROM nginx</span><br><span class=\"line\">RUN echo &#x27;&lt;h1&gt;Hello, Docker!&lt;/h1&gt;&#x27; &gt; /usr/share/nginx/html/index.html</span><br></pre></td></tr></table></figure>\n<p>这样使用Dockerfile定制镜像的脚本就完成了。  </p>\n<h3 id=\"FROM指定镜像基础\"><a href=\"#FROM指定镜像基础\" class=\"headerlink\" title=\"FROM指定镜像基础\"></a>FROM指定镜像基础</h3><p>定制镜像就是在一个镜像的基础上进行定制。基础镜像是必须指定的，而且必须是Dockerfile中的第一条指令。<br>Docker还存在一个特殊的镜像名为<code>scratch</code>，它表示一个空白镜像。  </p>\n<h3 id=\"RUN执行命令\"><a href=\"#RUN执行命令\" class=\"headerlink\" title=\"RUN执行命令\"></a>RUN执行命令</h3><p>RUN指令是用来执行命令行命令的。每一个RUN行为都会新建一层在其上执行命令，执行结束后commit这一层的修改，构成新的镜像。RUN支持两种命令格式。  </p>\n<ul>\n<li>shell格式：<code>RUN COMMAND</code>，就像直接在命令行中输入命令一样  </li>\n<li>exec格式：<code>RUN [可执行文件,参数1,参数2]</code>  </li>\n</ul>\n<p>在构建镜像的Dockerfile中将有共同目的指定放在一个RUN下，例如安装redis的多个命令行命令，因为这样可以防止镜像臃肿、防止有多层镜像等问题。<br>在将多条指定当做一个RUN动作的语法：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">#注释XXXXXXXXXXX</span><br><span class=\"line\">RUN buildDeps=&#x27;gcc libc6-dev make wget&#x27; \\</span><br><span class=\"line\">    &amp;&amp; apt-get update \\</span><br><span class=\"line\">    &amp;&amp; apt-get install -y $buildDeps \\</span><br><span class=\"line\">    &amp;&amp; wget -O redis.tar.gz &quot;http://download.redis.io/releases/redis-5.0.3.tar.gz&quot; \\</span><br><span class=\"line\">    &amp;&amp; mkdir -p /usr/src/redis \\</span><br><span class=\"line\">    &amp;&amp; tar -xzf redis.tar.gz -C /usr/src/redis --strip-components=1 \\</span><br><span class=\"line\">    &amp;&amp; make -C /usr/src/redis \\</span><br><span class=\"line\">    &amp;&amp; make -C /usr/src/redis install \\</span><br><span class=\"line\">    &amp;&amp; rm -rf /var/lib/apt/lists/* \\</span><br><span class=\"line\">    &amp;&amp; rm redis.tar.gz \\</span><br><span class=\"line\">    &amp;&amp; rm -r /usr/src/redis \\</span><br><span class=\"line\">    &amp;&amp; apt-get purge -y --auto-remove $buildDeps</span><br></pre></td></tr></table></figure>\n<p>在这个例子中可以看到有删除命令，这是一步很重要的操作，因为在这一层存储的东西不会在下一层删除，会一直跟着镜像，在<strong>构建时一定要确保每层只添加真正需要的东西，任何无关的东西都清掉</strong>。  </p>\n<h2 id=\"构建镜像\"><a href=\"#构建镜像\" class=\"headerlink\" title=\"构建镜像\"></a>构建镜像</h2><p>在Dockerfile所在目录执行<code>docker build [选项] 上下文路径/URL/- </code>,在执行构建命令时可以加上<code>-t 镜像名[:标签] </code>指定镜像名与标签。  </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker build -t nginx:v3 .</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"镜像构建上下文（context）\"><a href=\"#镜像构建上下文（context）\" class=\"headerlink\" title=\"镜像构建上下文（context）\"></a>镜像构建上下文（context）</h3><p>在上面的例子中上下文路径就是Dockerfile所在的目录的路径，也就是在命令尾部的<code>.</code>，这是默认情况下会把上下文目录中的Dockerfile文件当做Dockerfile；当然可以指定Dockerfile，例如使用-f指定某个文件为Dockerfile，这个文件名可以不是Dockerfile，也可以不在上下文目录中。<br>当构建镜像的时候用户会指定构建镜像的上下文，docker build 就会把这个路径下的所有内容打包（所以不要将多余文件放到build context中），上传给docker引擎（服务端守护进程），展开后就是获得构建镜像所需的一切文件。构建上下文环境会被递归处理，所以，构建所指定的路径还包括了子目录，而URL还包括了其中指定的子模块。  </p>\n<h2 id=\"docker-file其他用法\"><a href=\"#docker-file其他用法\" class=\"headerlink\" title=\"docker file其他用法\"></a>docker file其他用法</h2><h3 id=\"从URL中构建镜像\"><a href=\"#从URL中构建镜像\" class=\"headerlink\" title=\"从URL中构建镜像\"></a>从URL中构建镜像</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker build https://github.com/twang2218/gitlab-ce-zh.git#:11.1</span><br></pre></td></tr></table></figure>\n<p>指定构建目录为11.1，然后Docker会自己去<code>git clone</code>这个项目，进入到指定目录开始构建。<br><img src=\"/2019/04/13/docker/3.%E4%BD%BF%E7%94%A8Dockerfile%E5%AE%9A%E5%88%B6%E9%95%9C%E5%83%8F/%E4%BB%8EURL%E6%9E%84%E5%BB%BA.png\" alt=\"从URL构建\">  </p>\n<h3 id=\"用给定的tar压缩包构建\"><a href=\"#用给定的tar压缩包构建\" class=\"headerlink\" title=\"用给定的tar压缩包构建\"></a>用给定的tar压缩包构建</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker build http://server/context.tar.gz</span><br></pre></td></tr></table></figure>\n<p>如果给定的URL是tar压缩包，Docker会下载这个压缩包并自动解压，以其作为上下文开始构建。  </p>\n<h3 id=\"从标准输入中读取Dockerfile进行构建\"><a href=\"#从标准输入中读取Dockerfile进行构建\" class=\"headerlink\" title=\"从标准输入中读取Dockerfile进行构建\"></a>从标准输入中读取Dockerfile进行构建</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker build - &lt; Dockerfile</span><br><span class=\"line\">或</span><br><span class=\"line\">cat Dockerfile | docker build -</span><br></pre></td></tr></table></figure>\n<p>如果是从标准输入传入的是文本文件，则将其视为Dockerfile，并开始构建。因为没有上下文，因此不能有本地文件COPY进镜像等操作。</p>\n<h3 id=\"从标准输入中读取上下文压缩包进行构建\"><a href=\"#从标准输入中读取上下文压缩包进行构建\" class=\"headerlink\" title=\"从标准输入中读取上下文压缩包进行构建\"></a>从标准输入中读取上下文压缩包进行构建</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker build - &lt; context.tar.gz</span><br></pre></td></tr></table></figure>\n<p>如果发现标准输入的文件格式是压缩包，会使其为上下文压缩包，直接将其展开，将里面视为上下文，并开始构建。</p>\n<h2 id=\"Dockerfile中其他指令详解\"><a href=\"#Dockerfile中其他指令详解\" class=\"headerlink\" title=\"Dockerfile中其他指令详解\"></a>Dockerfile中其他指令详解</h2><h3 id=\"MAINTAINER\"><a href=\"#MAINTAINER\" class=\"headerlink\" title=\"MAINTAINER\"></a>MAINTAINER</h3><p>设置镜像的作者，可以是任意字符串。  </p>\n<h3 id=\"COPY复制文件\"><a href=\"#COPY复制文件\" class=\"headerlink\" title=\"COPY复制文件\"></a>COPY复制文件</h3><p>COPY是将 build context 中的文件或目录复制到镜像内的目标路径位置。  </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">COPY [--chown=&lt;user&gt;:&lt;group&gt;] &lt;源路径&gt;... &lt;目标路径&gt;</span><br><span class=\"line\">COPY [--chown=&lt;user&gt;:&lt;group&gt;] [&quot;&lt;源路径1&gt;&quot;,... &quot;&lt;目标路径&gt;&quot;]</span><br><span class=\"line\">例：</span><br><span class=\"line\">COPY package.json /usr/src/app/</span><br></pre></td></tr></table></figure>\n<p><strong>源路径</strong>可以是多个，甚至可以是通配符，。  </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">COPY hom* /mydir/</span><br><span class=\"line\">COPY hom?.txt /mydir/</span><br></pre></td></tr></table></figure>\n<p>目标路径可以是容器的绝对路径，也可以是工作目录的相对路径（工作目录用WORKDIR指定），目标路径不需要事先创建。<br>在使用COPY时源文件的各种元数据都会被保留，比如读、写、执行权限，时间等。在使用该指令的时候还可以加上<code>--chown=&lt;user&gt;:&lt;group&gt;</code>来改变文件的用户、用户组。  </p>\n<h3 id=\"ADD更高级的复制文件\"><a href=\"#ADD更高级的复制文件\" class=\"headerlink\" title=\"ADD更高级的复制文件\"></a>ADD更高级的复制文件</h3><p>ADD指令与COPY的格式、性质基本一致，一样可以改变文件的用户、用户组，但在COPY上增加了一些特定。例如：  </p>\n<ul>\n<li>源文件路径可以是<strong>URL</strong>。Docker会自动下载文件放到目标路径，文件权限自动设置为600，修改权限需使用RUN指令修改；下载文件为压缩包时，需要解压缩也一样需要额外的一层RUN指令进行加压缩。但是这样的操作与之前介绍的在构建镜像时只将确定放入镜像的文件放入镜像、同目标操作放在一层等注意事项相驳，所以不如直接在RUN指令中使用wget、curl等工具下载、处理权限、解压缩、清理无用文件更加合理。</li>\n<li>源文件为一个<strong>压缩包</strong>时，ADD指令将会自动解压这个文件到目标文件中；需要解压时比较实用，不需要解压时还是使用COPY。</li>\n</ul>\n<p>Docker官方文档中指明尽量使用COPY，因为COPY更加明确，并且ADD指令会令镜像构建缓存失效，从而使镜像构建变得缓慢。所以<strong>在自动解压的时候使用ADD，其他情况下使用COPY</strong>。</p>\n<h3 id=\"CMD容器命令\"><a href=\"#CMD容器命令\" class=\"headerlink\" title=\"CMD容器命令\"></a>CMD容器命令</h3><p>在<a href=\"#\">Post not found: 1.初识Docker</a>中Docker容器（Container）介绍到容器就是进程，那么在启动容器的时候需要指定运行的程序和参数，CMD指令就是来指定容器<strong>主进程的启动命令</strong>。  </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">shell 格式：CMD &lt;命令&gt;</span><br><span class=\"line\">exec 格式：CMD [&quot;可执行文件&quot;, &quot;参数1&quot;, &quot;参数2&quot;...]</span><br><span class=\"line\">参数列表格式：CMD [&quot;参数1&quot;, &quot;参数2&quot;...]。在指定了 ENTRYPOINT 指令后，用 CMD 指定具体的参数。</span><br></pre></td></tr></table></figure>\n\n<p>在指令格式上，一般使用exec格式，该格式在解析时会被解释成JSON格式，因此一定要用<strong>双引号</strong>，而不是单引号。<br>如果是shell格式实际命令就会被包装为sh -c 格式，如：  </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">CMD echo $HOME</span><br><span class=\"line\">变更为</span><br><span class=\"line\">CMD [ &quot;sh&quot;, &quot;-c&quot;, &quot;echo $HOME&quot; ]</span><br></pre></td></tr></table></figure>\n<p>如果写了多个，只有<strong>最后一个生效</strong>，CMD 可以被 docker run 之后的参数替换。。<br><strong>【注意】</strong><br><strong>容器前台执行与后台执行问题</strong><br>容器内没有后台服务的概念。<br>当使用CMD执行后台服务的相关命令时，例如：<code>CMD service nginx start</code>，发现容器容器执行后就立即退出了。这是因为对于容器来说启动程序就是容器应用程序，容器就是为了主进程存在的，主进程退出了，容器也就失去了存在的意义，存而退出了。详细的情况就是<code>CMD service nginx start</code>会被理解为<code>CMD [ &quot;sh&quot;, &quot;-c&quot;, &quot;service nginx start&quot;]</code>,既然主进程是sh，那么当这个service nginx start命令结束了，sh也就结束了，sh主进程退出了，容器自然就退出了。<br><strong>正确的做法：</strong>  </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">直接执行Nginx可执行文件，并要求前台执行</span><br><span class=\"line\">CMD [&quot;nginx&quot;, &quot;-g&quot;, &quot;daemon off;&quot;]</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"ENTRYPOINT入口点\"><a href=\"#ENTRYPOINT入口点\" class=\"headerlink\" title=\"ENTRYPOINT入口点\"></a>ENTRYPOINT入口点</h3><p><strong>ENTRYPOINT</strong>目的和CMD指令一样，都是在指定容器中启动程序和参数。ENTRYPOINT在运行时也可以代替，需用–entrypoint指定。当指定了ENTRYPOINT后，CMD就发生了改变，不再是直接运行其命令，而是将CMD的内容作为参数传给ENTRYPOINT指令，实际执行时，将变为<code>&lt;ENTRYPOINT&gt; &quot;&lt;CMD&gt;&quot;</code>。如果写了多个，只有<strong>最后一个生效</strong>。  </p>\n<h4 id=\"让镜像变成像命令一样使用\"><a href=\"#让镜像变成像命令一样使用\" class=\"headerlink\" title=\"让镜像变成像命令一样使用\"></a>让镜像变成像命令一样使用</h4><p>当我们需要查询当前网络IP，那么可以使用CMD实现</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">FROM ubuntu:18.04</span><br><span class=\"line\">CMD [ &quot;curl&quot;, &quot;https://ip.cn&quot; ] #该网址是查询IP的</span><br></pre></td></tr></table></figure>\n<p>使用<code>docker build -t myip .</code>来构建镜像，然后<code>docker run myip</code> 查询当前网络IP<br>但是当我们需为curl添加一个选项，只能通过<code>docker run myip curl -s https://ip.cn -i</code>这样的方式，这显然不是一种好的方式，可以使用<strong>ENTRYPOINT</strong>解决这个问题</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">FROM ubuntu:18.04</span><br><span class=\"line\">ENTRYPOINT [ &quot;curl&quot;, &quot;https://ip.cn&quot; ]</span><br></pre></td></tr></table></figure>\n<p>这样就可以<code>docker run myip -i</code>来对启动程序添加选项  </p>\n<h4 id=\"应用运行前的准备工作\"><a href=\"#应用运行前的准备工作\" class=\"headerlink\" title=\"应用运行前的准备工作\"></a>应用运行前的准备工作</h4><p>启动容器就是启动主进程，但有些时候，在启动主进程前，需要一些准备工作。<br>比如mysql数据库，在mysql服务器运行之前需要做一些数据库配置、初始化的工作。而且希望避免使用root用户去启动服务，从而提高安全性，但在启动服务之前还需要以root身份做一些准备工作，最后切换到用户身份启动服务。或者是除了服务外，其它命令使用root身份执行，方便调试。这种情况就可以写一个脚本，然后放入ENTRYPINT中执行，这个脚本会将CMD传过来的参数作为命令，在脚本最后执行。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">官方redis镜像</span><br><span class=\"line\">FROM alpine:3.4</span><br><span class=\"line\">...</span><br><span class=\"line\">RUN addgroup -S redis &amp;&amp; adduser -S -G redis redis</span><br><span class=\"line\">...</span><br><span class=\"line\">ENTRYPOINT [&quot;docker-entrypoint.sh&quot;]</span><br><span class=\"line\"></span><br><span class=\"line\">EXPOSE 6379</span><br><span class=\"line\">CMD [ &quot;redis-server&quot; ]</span><br></pre></td></tr></table></figure>\n<p>这个脚本为redis创建了redis用户，在最后指定了ENTRYPOINT为docker-entrypoint.sh脚本  </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">#!/bin/sh</span><br><span class=\"line\">...</span><br><span class=\"line\"># allow the container to be started with `--user`</span><br><span class=\"line\">if [ &quot;$1&quot; = &#x27;redis-server&#x27; -a &quot;$(id -u)&quot; = &#x27;0&#x27; ]; then</span><br><span class=\"line\">    chown -R redis .</span><br><span class=\"line\">    exec su-exec redis &quot;$0&quot; &quot;$@&quot;</span><br><span class=\"line\">fi</span><br><span class=\"line\"></span><br><span class=\"line\">exec &quot;$@&quot;</span><br></pre></td></tr></table></figure>\n<p>这个脚本就是根据CMD的内容来判断，是否切换到reids用户身份启动服务器，否则使用root身份。</p>\n<h3 id=\"ENV设置环境变量\"><a href=\"#ENV设置环境变量\" class=\"headerlink\" title=\"ENV设置环境变量\"></a>ENV设置环境变量</h3><p>这个指令就是设置环境变量而已，无论后面是什么指令都可以使用这里定义的环境变量  </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">ENV VERSION 1.0</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"ARG构建函数\"><a href=\"#ARG构建函数\" class=\"headerlink\" title=\"ARG构建函数\"></a>ARG构建函数</h3><p>与ENV一样都是设置环境变量的，但是ARG设置的环境变量将来在容器中是不会存在的，是构建环境的环境变量，但也不能使用ARG保存密码之类的信息，因为在<code>docker history</code>中还是可以看到所有值的。</p>\n<h3 id=\"VOLUME定义匿名卷\"><a href=\"#VOLUME定义匿名卷\" class=\"headerlink\" title=\"VOLUME定义匿名卷\"></a>VOLUME定义匿名卷</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">VOLUME [&quot;&lt;路径1&gt;&quot;, &quot;&lt;路径2&gt;&quot;...]</span><br><span class=\"line\">VOLUME &lt;路径&gt;</span><br></pre></td></tr></table></figure>\n<p>容器运行时应该尽量保持容器的存储层不发生操作，对与数据库类的需要保存动态数据的应用，其数据库文件应该保存在卷中（volume）。为了防止运行是用户忘记将动态文件保存所保存的目录挂载为卷，在Dockerfile中，我们可以事先指定某些目录挂载为匿名卷，这样在运行时用户不指定挂载，其应用可以正常运行，不会像存储层写入大量数据。  </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">VOLUME /data</span><br></pre></td></tr></table></figure>\n<p>这里/data目录就会在运行是自动挂载为匿名卷，任何向/data中写入的信息都不会记录进容器存储层，从而保证了容器存储层的无状态化。当然运行时可以覆盖这个挂载配置<code>docker run -d -v mydata:/data xxxx</code>,这样就把mydata（宿主机）这个命名卷挂载到了 /data （容器内）这个位置。  </p>\n<h3 id=\"EXPOSE声明端口\"><a href=\"#EXPOSE声明端口\" class=\"headerlink\" title=\"EXPOSE声明端口\"></a>EXPOSE声明端口</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">EXPOSE &lt;端口1&gt; [&lt;端口2&gt;...]</span><br></pre></td></tr></table></figure>\n<p>EXPOSE指令是声明运行时容器提供服务端口，这只是一个声明，在运行时并不会因为这个声明应用就会开启这个端口的服务。<br>EXPOSE是定义容器打算使用什么端口，不会自动在宿主进行端口映射；而容器运行时使用 **-p &lt;宿主端口&gt;:&lt;容器端口&gt;**，是映射宿主端口和容器端口，也就是将容器对应的端口开放给外界访问。</p>\n<h3 id=\"WORKDIR指定工作目录\"><a href=\"#WORKDIR指定工作目录\" class=\"headerlink\" title=\"WORKDIR指定工作目录\"></a>WORKDIR指定工作目录</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">WORKDIR &lt;工作目录路径&gt;</span><br></pre></td></tr></table></figure>\n<p>使用WORKDIR指令可以来指定工作目录，以后各层的当前目录级就改为指定的目录，如果目录不存在WORKDIR就会自动创建。<br>在介绍<code>RUN</code>指令时说过每一个RUN都是一层，所以<code>RUN cd /app</code>这类的指令可能会导致错误，因为这个命令只对当前RUN层有效。  </p>\n<h3 id=\"USER指定当前用户\"><a href=\"#USER指定当前用户\" class=\"headerlink\" title=\"USER指定当前用户\"></a>USER指定当前用户</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">USER &lt;用户名&gt;[:&lt;用户组&gt;]</span><br></pre></td></tr></table></figure>\n<p>USER 指令和 WORKDIR 相似，都是改变环境状态并影响以后的层。但是与WORKDIR不同的是USER指定的<strong>用户必须是已经存在的</strong>。<br>当希望使用一个用户身份运行一个脚本时不要使用<code>su</code>或<code>sudo</code>,建议使用<code>gosu</code>。</p>\n<h3 id=\"HEALTHCHECK健康检查\"><a href=\"#HEALTHCHECK健康检查\" class=\"headerlink\" title=\"HEALTHCHECK健康检查\"></a>HEALTHCHECK健康检查</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">HEALTHCHECK [选项] CMD &lt;命令&gt;：设置检查容器健康状况的命令</span><br><span class=\"line\">HEALTHCHECK NONE：如果基础镜像有健康检查指令，使用这行可以屏蔽掉其健康检查指令</span><br></pre></td></tr></table></figure>\n<p>【选项】  </p>\n<ul>\n<li>–interval=&lt;间隔&gt;：两次健康检查的间隔，默认为 30 秒；</li>\n<li>–timeout=&lt;时长&gt;：健康检查命令运行超时时间，如果超过这个时间，本次健康检查就被视为失败，默认 30 秒；</li>\n<li>–retries=&lt;次数&gt;：当连续失败指定次数后，则将容器状态视为 unhealthy，默认 3 次</li>\n</ul>\n<p>在没有 HEALTHCHECK 指令前，Docker 引擎只可以通过容器内主进程是否退出来判断容器是否状态异常。但是当容器无法退出时，容器无法提供服务。所以使用HEALTHCHECK可以真实的反应容器的实际状态。如果写了多个，只有<strong>最后一个生效</strong>。<br>当在一个镜像指定了 HEALTHCHECK 指令后，用其启动容器，初始状态会为 starting，在 HEALTHCHECK 指令检查成功后变为 healthy，如果连续一定次数失败，则会变为 unhealthy。<br>HEALTHCHECK后面命令的返回值决定了健康检查的结果：0→成功、1→失败、2→保留，不使用这个值  </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">HEALTHCHECK --interval=5s --timeout=3s CMD curl -fs http://localhost/ || exit 1</span><br><span class=\"line\">因为当CMD后的命令失败时会返回一个非0的正整数，所以需要给指定失败时的返回值</span><br></pre></td></tr></table></figure>\n<p>可以使用<code>docker container ls</code>查看健康状态。<br>为了帮助排除故障，健康检查命令的输出（包括stdout、stderr）都会被存储在健康状态里，可以使用<code>docker inspect</code>进行查看。  </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\"># json.tool是一个将json格式数据格式化的工具</span><br><span class=\"line\">docker inspect --format &#x27;&#123;&#123;json .State.Health&#125;&#125;&#x27; web | python -m json.tool </span><br></pre></td></tr></table></figure>\n<h3 id=\"ONBUILD-为他人做嫁衣裳\"><a href=\"#ONBUILD-为他人做嫁衣裳\" class=\"headerlink\" title=\"ONBUILD 为他人做嫁衣裳\"></a>ONBUILD 为他人做嫁衣裳</h3><p>格式： ONBUILD &lt;其它指令&gt; 。  </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">FROM node:slim</span><br><span class=\"line\">RUN mkdir /app</span><br><span class=\"line\">WORKDIR /app</span><br><span class=\"line\">ONBUILD COPY ./package.json /app</span><br><span class=\"line\">ONBUILD RUN [ &quot;npm&quot;, &quot;install&quot; ]</span><br><span class=\"line\">ONBUILD COPY . /app/</span><br><span class=\"line\">CMD [ &quot;npm&quot;, &quot;start&quot; ]</span><br></pre></td></tr></table></figure>\n<p>当使用这个Dockerfile构建镜像的时候ONBUILD的三行将不会被执行，只有将当前镜像作为基础镜像去构建下一个镜像的时候才会被执行。  </p>\n","categories":["docker"],"tags":["Dockerfile"]},{"title":"4.docker容器","url":"/2019/04/14/docker/4.docker%E5%AE%B9%E5%99%A8/","content":"<p><img src=\"/2019/04/14/docker/4.docker%E5%AE%B9%E5%99%A8/%E5%9B%BE%E7%89%87docker.jpg\" alt=\"docker\">  </p>\n<span id=\"more\"></span> \n<p>容器是Docker容器又一核心概念。<br>容器是独立运行的一个或一组应用。可以理解为模拟运行的一整套操作系统。  </p>\n<h2 id=\"创建容器\"><a href=\"#创建容器\" class=\"headerlink\" title=\"创建容器\"></a>创建容器</h2><p>使用<code>docker create</code>创建的容器处于停止状态，可以使用<code>docker start</code>来进行启动。<br>格式：<code>docker create IMAGE [COMMAND]</code><br>语法同<code>docker run</code>  </p>\n<h2 id=\"新建并启动容器\"><a href=\"#新建并启动容器\" class=\"headerlink\" title=\"新建并启动容器\"></a>新建并启动容器</h2><p>格式：<code>docker run [OPTIONS] IMAGE [COMMAND] [ARG...]</code>  </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker run -it -d --name=&quot;test_ubuntu&quot; d27b9ffc5667 /bin/bash</span><br></pre></td></tr></table></figure>\n<ul>\n<li>OPTIONS选项说明：  </li>\n</ul>\n<p><strong>-d：指定容器运行于后台，默认为前台</strong><br><strong>-i：打开STDIN，用于控制台交互</strong><br><strong>-t：分配tty设备，该可以支持终端登录，默认为false，通常与-i一起使用</strong><br><strong>-p（小写）：端口映射，格式为：主机(宿主)端口:容器端口</strong><br><strong>- -name=：为容器指定一个名称</strong><br>-u： 指定容器的用户<br>-w：指定容器的工作目录<br>-e：指定环境变量，容器中可以使用该环境变量，-e NUM=11,一个-e后只能跟一个环境变量定义<br>-m：指定容器的内存上限<br>-h：指定容器的主机名<br>-v：给容器挂载存储卷，挂载到容器的某个目录，宿主机目录：容器目录<br>-c：设置CPU权重<br> - -restart=always ：无论容器因何种原因退出（包括正常退出），就立即重启  </p>\n<p>在执行<code>docker run</code>时，Docker在后台运行的标准操作包括  </p>\n<ul>\n<li>检查本地是否存在指定的镜像，不存在就从公有仓库下载  </li>\n<li>利用镜像创建并启动一个容器  </li>\n<li>分配一个文件系统，并在只读的镜像层外面挂载一层可读写层  </li>\n<li>从宿主主机配置的网桥接口中桥接一个虚拟接口到容器中去  </li>\n<li>从地址池配置一个 ip 地址给容器  </li>\n<li>执行用户指定的应用程序  </li>\n<li>执行完毕后容器被终止  </li>\n</ul>\n<h2 id=\"限制容器对内存的使用\"><a href=\"#限制容器对内存的使用\" class=\"headerlink\" title=\"限制容器对内存的使用\"></a>限制容器对内存的使用</h2><p>-m :设置内存的使用限额，默认没有限制<br>–menory-swap= ：设置 内存+swap 的使用限额，默认没有限制<br><code>-m 300M --menory-swap=400M</code>为内存限制300M，swap限制100M</p>\n<h2 id=\"限制容器对CPU的使用\"><a href=\"#限制容器对CPU的使用\" class=\"headerlink\" title=\"限制容器对CPU的使用\"></a>限制容器对CPU的使用</h2><p>默认情况下容器可以平等的使用cpu资源并且没有限制。<br>-c可以设置CPU权重，默认为1024，这个数字并不是CPU资源的绝对数量，能够获取到多少资源取决于这个数字占所有容器CPU权重的比例<br><code>-c 1024</code>、<code>-c 512</code> 第一个可以获取到第二个的两倍资源，这只是在CPU资源紧张的情况时，当第一个处于空闲状态时，第二个也可以获取到所有的CPU资源  </p>\n<h2 id=\"限制容器对磁盘IO\"><a href=\"#限制容器对磁盘IO\" class=\"headerlink\" title=\"限制容器对磁盘IO\"></a>限制容器对磁盘IO</h2><p><code>--blkio-weight</code> 与限制CPU一样这只是一个权重，默认为500。  </p>\n<h3 id=\"限制bps与iops\"><a href=\"#限制bps与iops\" class=\"headerlink\" title=\"限制bps与iops\"></a>限制bps与iops</h3><p>bps 是 byte per second，每秒读写的数据量。<br>iops 是 io per second，每秒 IO 的次数。<br><code>--device-read-bps</code>，限制读某个设备的 bps。<code>--device-read-bps /dev/sda:30MB</code><br><code>--device-write-bps</code>，限制写某个设备的 bps。<br><code>--device-read-iops</code>，限制读某个设备的 iops。<br><code>--device-write-iops</code>，限制写某个设备的 iops</p>\n<h2 id=\"后台运行容器\"><a href=\"#后台运行容器\" class=\"headerlink\" title=\"后台运行容器\"></a>后台运行容器</h2><p>使用<code>docker run -d 镜像ID</code>将一个镜像的容器放在后台运行，若该镜像有输出结果，此时因在后台执行，所以不会将输出结果打印在屏幕上，但可以使用<code>docker logs 容器</code>查看容器日志。<br><em>容器是否会长久运行，是和 docker run 指定的命令有关，和 -d 参数无关。例如一个后台运行的容器的主进程只是将一串字符输出，那么当这一串字符输出完毕后容器就会自动停止</em>  </p>\n<h2 id=\"容器相关操作\"><a href=\"#容器相关操作\" class=\"headerlink\" title=\"容器相关操作\"></a>容器相关操作</h2><p><code>docker stop 容器ID </code>终止容器<br><code>docker start 容器ID</code>启动容器<br><code>docker restart 容器ID </code>重启容器<br><code>docker pause 容器ID</code> 暂停容器<br><code>docker unpause 容器ID</code> 恢复运行<br><code>docker rename 容器ID</code>重命名容器名  </p>\n<h2 id=\"进入容器\"><a href=\"#进入容器\" class=\"headerlink\" title=\"进入容器\"></a>进入容器</h2><p>在使用当使用<code>docker run -d</code>新建一个容器时，有些时候需要进入到容器中进行操作，可以使用<code>docker attach</code>或者<code>docker exec</code>,<strong>推荐使用docker exec进入到容器</strong>。  </p>\n<h3 id=\"docker-attach\"><a href=\"#docker-attach\" class=\"headerlink\" title=\"docker attach\"></a>docker attach</h3><p>当使用<code>docker attach 容器ID</code>进入到一个后台运行的容器中后,使用<code>exit</code>退出会导致容器中终止  </p>\n<h3 id=\"docker-exec\"><a href=\"#docker-exec\" class=\"headerlink\" title=\"docker exec\"></a>docker exec</h3><p>使用<code>docker exec -it 容器ID</code>进入到一个后台运行的容器中后,退出不会导致容器中终止  </p>\n<h2 id=\"导出和导入容器\"><a href=\"#导出和导入容器\" class=\"headerlink\" title=\"导出和导入容器\"></a>导出和导入容器</h2><h3 id=\"导出容器\"><a href=\"#导出容器\" class=\"headerlink\" title=\"导出容器\"></a>导出容器</h3><p>如果要导出本地某个容器，可以使用<code>docker export 容器ID</code>命令。  </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker export 7691a814370e &gt; ubuntu.tar</span><br></pre></td></tr></table></figure>\n<p>这样将<strong>导出容器快照</strong>到本地文件。  </p>\n<h3 id=\"导出容器快照\"><a href=\"#导出容器快照\" class=\"headerlink\" title=\"导出容器快照\"></a>导出容器快照</h3><p>可使用<code>docker import</code>从容器快照文件中再导入为镜像，并可以重新指定标签等元数据信息（容器快照文件将丢弃历史数据、元数据信息）</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker import nginx-test.tar nginx:imp</span><br></pre></td></tr></table></figure>\n<p><em><code>docker load</code> 可以将镜像存储文件导入到本地镜像库，镜像存储文件将保存完整记录，体积较大</em></p>\n<h4 id=\"export、import、save、load区别\"><a href=\"#export、import、save、load区别\" class=\"headerlink\" title=\"export、import、save、load区别\"></a>export、import、save、load区别</h4><ol>\n<li>export命令导出的tar文件略小于save命令导出的。  </li>\n<li>export命令是从容器（container）中导出tar文件，而save命令则是从镜像（images）中导出。  </li>\n<li>基于第二点，export导出的文件再import回去时，无法保留镜像所有历史（即每一层layer信息，不熟悉的可以去看Dockerfile），不能进行回滚操作；而save是依据镜像来的，所以导入时可以完整保留下每一层layer信息。  </li>\n</ol>\n<h2 id=\"删除容器\"><a href=\"#删除容器\" class=\"headerlink\" title=\"删除容器\"></a>删除容器</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker rm 容器</span><br></pre></td></tr></table></figure>\n<p>可以删除已经停止的容器。若要删除一个运行中的容器可以添加-f选项</p>\n<h2 id=\"清理所有处于终止状态的容器\"><a href=\"#清理所有处于终止状态的容器\" class=\"headerlink\" title=\"清理所有处于终止状态的容器\"></a>清理所有处于终止状态的容器</h2><p>用以下命令来查看所有已经创建的包括终止状态的容器。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker ps -a</span><br><span class=\"line\">或</span><br><span class=\"line\">docekr container ls -a`</span><br></pre></td></tr></table></figure>\n<p>使用以下命令来删除所有处于终止状态的容器  </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker container prune</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"查看容器\"><a href=\"#查看容器\" class=\"headerlink\" title=\"查看容器\"></a>查看容器</h2><h3 id=\"查看容器详情\"><a href=\"#查看容器详情\" class=\"headerlink\" title=\"查看容器详情\"></a>查看容器详情</h3><p><code>docker inspect 容器ID</code>查看容器的详细信息，结果以json格式返回。  </p>\n<h3 id=\"查看容器内进程\"><a href=\"#查看容器内进程\" class=\"headerlink\" title=\"查看容器内进程\"></a>查看容器内进程</h3><p><code>docker top 容器ID</code>类似于linux中的<code>top</code>命令，会打印出容器内的进程信息。  </p>\n<h3 id=\"查看统计信息\"><a href=\"#查看统计信息\" class=\"headerlink\" title=\"查看统计信息\"></a>查看统计信息</h3><p><code>docker stats 容器ID</code>查看CPU、内存、存储、网络等使用情况的统计信息。  </p>\n<h2 id=\"其他容器命令\"><a href=\"#其他容器命令\" class=\"headerlink\" title=\"其他容器命令\"></a>其他容器命令</h2><h3 id=\"复制文件\"><a href=\"#复制文件\" class=\"headerlink\" title=\"复制文件\"></a>复制文件</h3><p><code>docker cp 源文件路径 目标路径</code>在容器和宿主机本地之间复制文件，容器路径格式：<code>容器ID:容器中的路径</code>  </p>\n<h3 id=\"查看容器的具体改动\"><a href=\"#查看容器的具体改动\" class=\"headerlink\" title=\"查看容器的具体改动\"></a>查看容器的具体改动</h3><p><code>docker diff 容器名/容器ID</code>  </p>\n<h3 id=\"查看端口映射\"><a href=\"#查看端口映射\" class=\"headerlink\" title=\"查看端口映射\"></a>查看端口映射</h3><p><code>docker port 容器ID</code>查看容器的端口映射情况。<br>输出内容为: 宿主机端口 -&gt; 容器端口  </p>\n<h2 id=\"实现容器的底层技术\"><a href=\"#实现容器的底层技术\" class=\"headerlink\" title=\"实现容器的底层技术\"></a>实现容器的底层技术</h2><p>具体查看 <a href=\"/2022/06/29/Linux/Linux%E4%B9%8BNamespace/\" title=\"Namespace\">Namespace</a>  </p>\n","categories":["docker"],"tags":["docker容器"]},{"title":"5.docker仓库","url":"/2019/04/20/docker/5.docker%E4%BB%93%E5%BA%93/","content":"<p><img src=\"/2019/04/20/docker/5.docker%E4%BB%93%E5%BA%93/%E5%9B%BE%E7%89%87docker.jpg\" alt=\"docker\"><br><em>本章有许多新的知识，太多的不懂，实践意义不大，暂不进行实践操作，记录此章后期重复学习</em></p>\n<span id=\"more\"></span>\n<p>仓库是（Repository）是集存放镜像的地方。<br>一个容易混淆的概念是注册服务器（Registry）。实际上<strong>注册服务器是管理仓库的具体服务器</strong>，每个服务器上可以有多个仓库，而每个仓库下面有多个镜像。仓库可以被认为是一个具体的项目或目录。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">dl.dockerpool.com/ubuntu</span><br><span class=\"line\">dl.dockerpool.com:注册服务器（Registry）</span><br><span class=\"line\">ubuntu：仓库名（Repository）</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Docker-Hub\"><a href=\"#Docker-Hub\" class=\"headerlink\" title=\"Docker Hub\"></a>Docker Hub</h2><p>Docker官方维护了一个公共仓库<code>Docker Hub</code></p>\n<h3 id=\"注册\"><a href=\"#注册\" class=\"headerlink\" title=\"注册\"></a>注册</h3><p>可以在 <a href=\"https://hub.docker.com/\">Docker Hub</a>中免费注册一个Docker账号。  </p>\n<h3 id=\"登录\"><a href=\"#登录\" class=\"headerlink\" title=\"登录\"></a>登录</h3><p>可以通过执行<code>docker login</code>命令交互式的输入用户名及密码来完成在命令行界面登录Docker Hub。<br>登陆成功后会在  <code>用户家目录/.docker/config.json</code>中保存用户的认证信息。  </p>\n<h3 id=\"拉取镜像\"><a href=\"#拉取镜像\" class=\"headerlink\" title=\"拉取镜像\"></a>拉取镜像</h3><p>通过<code>docker search</code>来查找官方仓库中的镜像，并利用docker pull下载镜像到本地。<br>可以登录到<a href=\"https://hub.docker.com/\">Docker Hub</a>中进行查找所需镜像<br><img src=\"/2019/04/20/docker/5.docker%E4%BB%93%E5%BA%93/DockerHub%E9%95%9C%E5%83%8F.png\" alt=\"DockerHub镜像\">  </p>\n<h3 id=\"推送镜像\"><a href=\"#推送镜像\" class=\"headerlink\" title=\"推送镜像\"></a>推送镜像</h3><p>用户也可以在登录后通过<code>docker push</code>命令来将自己的镜像推送到Docker Hub。<br><code>docker tag ubuntu:18.04 username/ubuntu:18.04</code>   username为Docker账号用户名。  </p>\n<h3 id=\"自动创建\"><a href=\"#自动创建\" class=\"headerlink\" title=\"自动创建\"></a>自动创建</h3><p>该功能对与需要经常升级镜像内程序来说，十分方便。<br>例如：有时候用户创建了镜像，安装了某个软件，如果软件发布新版本则需要手动更新镜像。<br>而自动创建允许用户Docker Hub指定跟踪一个目标网站上的项目，一旦项目发生新的提交或者创建新的标签（tag），Docker Hub会自动构建镜像并推送到Docker Hub中。<br>自动创建的步骤：  </p>\n<ul>\n<li>创建并登陆Docker Hub，以及目标网站  </li>\n<li>在目标网站中连接账户到Docker Hub</li>\n<li>在Docker Hub中配置一个自动创建 </li>\n<li>选取一个目标网站中的项目（需要含Dockerfile）和分支  </li>\n<li>指定Dockerfile的位置，并提交创建  </li>\n</ul>\n<h2 id=\"第三方镜像市场\"><a href=\"#第三方镜像市场\" class=\"headerlink\" title=\"第三方镜像市场\"></a>第三方镜像市场</h2><h2 id=\"私有仓库\"><a href=\"#私有仓库\" class=\"headerlink\" title=\"私有仓库\"></a>私有仓库</h2><p>docker-registry是官方提供的工具，可以用于构建私有的镜像仓库。</p>\n<h3 id=\"安装docker-registry\"><a href=\"#安装docker-registry\" class=\"headerlink\" title=\"安装docker-registry\"></a>安装docker-registry</h3><h4 id=\"容器运行\"><a href=\"#容器运行\" class=\"headerlink\" title=\"容器运行\"></a>容器运行</h4><p>可以通过获取官方registry镜像来运行  </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker run -d -p 5000:5000 --restart=always --name registry registry</span><br><span class=\"line\">可以查看 IP:5000 是否正常   </span><br></pre></td></tr></table></figure>\n<p>这将使用官方的registry镜像来启动私有仓库。默认情况下，仓库会被创建在容器的/var/lib/registry目录下。你可以通过-v参数来将镜像文件存放在本地的指定路径，例如：<code>-v /opt/data/registry:/var/lib/registry</code>  </p>\n<h4 id=\"在私用仓库上传、搜索、下载镜像\"><a href=\"#在私用仓库上传、搜索、下载镜像\" class=\"headerlink\" title=\"在私用仓库上传、搜索、下载镜像\"></a>在私用仓库上传、搜索、下载镜像</h4><p>创建好私有仓库之后，可以使用docker tag来标记一个镜像，然后推送它到仓库。如私有仓库地址为127.0.0.1:5000<br>使用docker tag将ubuntu:latest镜像标记为127.0.0.1:5000/ubuntu:latest<br>格式为：<code>docker tag IMAGE[:TAG] [REGISTRY_HOST[:REGISTRY_PORT]/]REPOSITORY[:TAG]</code><br>然后上传标记的镜像：<code>docker push 127.0.0.1:5000/ubuntu:latest</code><br>使用curl查看仓库中的镜像：<code>curl 127.0.0.1:5000/v2/_catalog</code><br>注意在Centos下/etc/docker/daemon.json中添加<code>&#123;&quot;insecure-registries&quot;: [&quot;192.168.199.100:5000&quot;]&#125;</code>,然后执行<code>systemctl daemon-reload</code>后,启动docker服务。  </p>\n<h2 id=\"私有仓库高级配置\"><a href=\"#私有仓库高级配置\" class=\"headerlink\" title=\"私有仓库高级配置\"></a>私有仓库高级配置</h2><p>使用<code>Docker Compose</code>搭建一个拥有权限认证、TLS（安全传输层协议）的私有仓库<br><strong>新建一个文件夹，已下步骤均在该文件夹中进行。</strong>  </p>\n<h3 id=\"准备站点证书\"><a href=\"#准备站点证书\" class=\"headerlink\" title=\"准备站点证书\"></a>准备站点证书</h3><p>如果拥有一个域名，国内各大云服务商均提供免费的站点证书。也可以使用openssl自行签发证书。<br>假设我们使用的仓库地址为docker.domain.com，下面我们介绍使用openssl自行签发的docker.domain.com的站点SSL证书。  </p>\n<ul>\n<li>一.创建CA秘钥<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">openssl genrsa -out &quot;root-ca.key&quot; 4096</span><br></pre></td></tr></table></figure></li>\n<li>二.步利用私钥搭建CA根证书请求文件<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">openssl req \\</span><br><span class=\"line\">-new -key &quot;root-ca.key&quot; \\</span><br><span class=\"line\">-out &quot;root-ca.csr&quot; -sha256 \\</span><br><span class=\"line\">-subj &#x27;/C=CN/ST=Shanxi/L=Datong/O=Your Company Name/CN=Your Company Name Docker Registry CA&#x27;</span><br></pre></td></tr></table></figure></li>\n<li>三.配置CA很证书，新建root-ca.conf<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">basicConstraints = critical,CA:TRUE,pathlen:1</span><br><span class=\"line\">keyUsage = critical, nonRepudiation, cRLSign, keyCertSign</span><br><span class=\"line\">subjectKeyIdentifier=hash</span><br></pre></td></tr></table></figure></li>\n<li>四.签发根证书<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">openssl x509 -req -days 3650 -in &quot;root-ca.csr&quot; \\</span><br><span class=\"line\">-signkey &quot;root-ca.key&quot; -sha256 -out &quot;root-ca.crt&quot; \\</span><br><span class=\"line\">-extfile &quot;root-ca.cnf&quot; -extensions \\</span><br><span class=\"line\">root_ca</span><br></pre></td></tr></table></figure></li>\n<li>五.生成站点SSL私钥<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">openssl genrsa -out &quot;docker.domain.com.key&quot; 4096</span><br></pre></td></tr></table></figure></li>\n<li>六.使用私钥生成证书请求文件<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">openssl req -new -key &quot;docker.domain.com.key&quot; -out &quot;site.csr&quot; -sha256 \\</span><br><span class=\"line\">-subj &#x27;/C=CN/ST=Shanxi/L=Datong/O=Your Company Name/CN=docker.domain.com&#x27;</span><br></pre></td></tr></table></figure></li>\n<li>七.配置证书，新建site.cnf文件<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">[server]</span><br><span class=\"line\">authorityKeyIdentifier=keyid,issuer</span><br><span class=\"line\">basicConstraints = critical,CA:FALSE</span><br><span class=\"line\">extendedKeyUsage=serverAuth</span><br><span class=\"line\">keyUsage = critical, digitalSignature, keyEncipherment</span><br><span class=\"line\">subjectAltName = DNS:docker.domain.com, IP:127.0.0.1</span><br><span class=\"line\">subjectKeyIdentifier=hash</span><br></pre></td></tr></table></figure></li>\n<li>八.签署站点SSL证书<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">openssl x509 -req -days 750 -in &quot;site.csr&quot; -sha256 \\</span><br><span class=\"line\">-CA &quot;root-ca.crt&quot; -CAkey &quot;root-ca.key&quot; -CAcreateserial \\</span><br><span class=\"line\">-out &quot;docker.domain.com.crt&quot; -extfile &quot;site.cnf&quot; -extensions server</span><br></pre></td></tr></table></figure></li>\n</ul>\n<p>新建 ssl 文件夹并将docker.domain.com.key、docker.domain.com.crt、root-ca.crt三个文件移入，删除其他文件。</p>\n<h3 id=\"配置私有仓库\"><a href=\"#配置私有仓库\" class=\"headerlink\" title=\"配置私有仓库\"></a>配置私有仓库</h3><p>私有仓库配置文件位于/etc/docker/registry/config.yml，我们现在本地编辑config.yml ，之后挂载到容器中。  </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">version: 0.1</span><br><span class=\"line\">log:</span><br><span class=\"line\">  accesslog:</span><br><span class=\"line\">    disabled: true</span><br><span class=\"line\">  level: debug</span><br><span class=\"line\">  formatter: text</span><br><span class=\"line\">  fields:</span><br><span class=\"line\">    service: registry</span><br><span class=\"line\">    environment: staging</span><br><span class=\"line\">storage:</span><br><span class=\"line\">  delete:</span><br><span class=\"line\">    enabled: true</span><br><span class=\"line\">  cache:</span><br><span class=\"line\">    blobdescriptor: inmemory</span><br><span class=\"line\">  filesystem:</span><br><span class=\"line\">    rootdirectory: /var/lib/registry</span><br><span class=\"line\">auth:</span><br><span class=\"line\">  htpasswd:</span><br><span class=\"line\">    realm: basic-realm</span><br><span class=\"line\">    path: /etc/docker/registry/auth/nginx.htpasswd</span><br><span class=\"line\">http:</span><br><span class=\"line\">  addr: :443</span><br><span class=\"line\">  host: https://docker.domain.com</span><br><span class=\"line\">  headers:</span><br><span class=\"line\">    X-Content-Type-Options: [nosniff]</span><br><span class=\"line\">http2:</span><br><span class=\"line\">  disabled: false</span><br><span class=\"line\">tls:</span><br><span class=\"line\">  certificate: /etc/docker/registry/ssl/docker.domain.com.crt</span><br><span class=\"line\">  key: /etc/docker/registry/ssl/docker.domain.com.key</span><br><span class=\"line\">health:</span><br><span class=\"line\">  storagedriver:</span><br><span class=\"line\">    enabled: true</span><br><span class=\"line\">    interval: 10s</span><br><span class=\"line\">  threshold: 3</span><br></pre></td></tr></table></figure>\n<h3 id=\"生成http认证文件\"><a href=\"#生成http认证文件\" class=\"headerlink\" title=\"生成http认证文件\"></a>生成http认证文件</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ mkdir auth</span><br><span class=\"line\">$ docker run --rm --entrypoint htpasswd registry -Bbn username password &gt; auth/nginx.htpasswd</span><br></pre></td></tr></table></figure>\n<h3 id=\"编辑docker-compose-yml\"><a href=\"#编辑docker-compose-yml\" class=\"headerlink\" title=\"编辑docker-compose.yml\"></a>编辑docker-compose.yml</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">version: &#x27;3&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">services:</span><br><span class=\"line\">  registry:</span><br><span class=\"line\">    image: registry</span><br><span class=\"line\">    ports:</span><br><span class=\"line\">      - &quot;443:443&quot;</span><br><span class=\"line\">    volumes:</span><br><span class=\"line\">      - ./:/etc/docker/registry</span><br><span class=\"line\">      - registry-data:/var/lib/registry</span><br><span class=\"line\"></span><br><span class=\"line\">volumes:</span><br><span class=\"line\">  registry-data:</span><br></pre></td></tr></table></figure>\n<h3 id=\"修改hosts\"><a href=\"#修改hosts\" class=\"headerlink\" title=\"修改hosts\"></a>修改hosts</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">127.0.0.1 docker.domain.com</span><br></pre></td></tr></table></figure>\n<h3 id=\"启动\"><a href=\"#启动\" class=\"headerlink\" title=\"启动\"></a>启动</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker-compose up -d</span><br></pre></td></tr></table></figure>\n<h3 id=\"测试私有仓库功能\"><a href=\"#测试私有仓库功能\" class=\"headerlink\" title=\"测试私有仓库功能\"></a>测试私有仓库功能</h3><p>由于自信签发的CA根证书不被系统信任，所以我们需要将CA根证书<code>SSL/root-ca.crt</code>移入/etc/docker/certs.d/docker.domain.com文件中。  </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo mkdir -p /etc/docker/certs.d/docker.domain.com</span><br><span class=\"line\">sudo cp ssl/root-ca.crt /etc/docker/certs.d/docker.domain.com/ca.crt</span><br></pre></td></tr></table></figure>\n<p>登录到私有仓库。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker login docker.domain.com</span><br></pre></td></tr></table></figure>\n<p>尝试推送、拉取镜像  </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker pull ubuntu:18.04</span><br><span class=\"line\">docker tag ubuntu:18.04 docker.domain.com/username/ubuntu:18.04</span><br><span class=\"line\">docker push docker.domain.com/username/ubuntu:18.04</span><br><span class=\"line\">docker image rm docker.domain.com/username/ubuntu:18.04</span><br><span class=\"line\">docker pull docker.domain.com/username/ubuntu:18.04</span><br></pre></td></tr></table></figure>\n<p>如果我们退出登录，尝试推送对象。  </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker logout docker.domain.com</span><br><span class=\"line\">docker push docker.domain.com/username/ubuntu:18.04 no basic auth credentials</span><br></pre></td></tr></table></figure>\n<p>发现会提示没有登录，不能将镜像推送到私有仓库中</p>\n<h3 id=\"Nexus3-X的私有仓库\"><a href=\"#Nexus3-X的私有仓库\" class=\"headerlink\" title=\"Nexus3.X的私有仓库\"></a>Nexus3.X的私有仓库</h3><p>使用Docker官方的Registry创建的仓库面临一些维护问题，例如某些镜像删除以后空间默认是不会回收的，需要一些命令回收空间然后重启Registry程序。在企业中把内部的一些工具放入Nexus中是比较常见的做法，最新版本Nexus3.X全面支持Docker的私有镜像。所以使用Nexus3.X一个软件来管理Docker、Maven、Yum、PyPI等是一个明智的选择。  </p>\n<h4 id=\"启动Nexus容器\"><a href=\"#启动Nexus容器\" class=\"headerlink\" title=\"启动Nexus容器\"></a>启动Nexus容器</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker run -d --name nexus3 --restart=always -p 8081:8081 --mount src=nexus-data,target=/nexus-data sonatype/nexus3</span><br></pre></td></tr></table></figure>\n<p>等待3-5分，如果nexus3容器没有异常退出，那么可以使用浏览器访问Nexus了<a href=\"http://YourIP:8081。\">http://YourIP:8081。</a><br>第一次启动Nexus的默认账号是admin密码是admin123，点击页面上方的齿轮按钮进行设置。  </p>\n<h4 id=\"创建私有\"><a href=\"#创建私有\" class=\"headerlink\" title=\"创建私有\"></a>创建私有</h4><p>创建一个私有仓库的方法：<code>Repository-&gt;Repositories</code>点击右边菜单<code>Create repository</code>选择<code>docker (hosted)</code>  </p>\n<ul>\n<li>Name:仓库的名称</li>\n<li>HTTP:仓库单独的访问端口</li>\n<li>Enable Docker V1 API: 如果需要同时支持 V1 版本请勾选此项（不建议勾选）</li>\n<li>Hosted -&gt; Deployment pollcy: 请选择 Allow redeploy 否则无法上传 Docker 镜像</li>\n</ul>\n<h4 id=\"添加访问权限\"><a href=\"#添加访问权限\" class=\"headerlink\" title=\"添加访问权限\"></a>添加访问权限</h4><p>菜单<code>Security-&gt;Realms</code>把<code> Docker Bearer Token Realm</code>移动右边的框中保存。<br>添加用户规则：菜单<code>Security-&gt;Roles -&gt; Create role</code>在<code>Privlleges</code>选项搜索docker把相应的规则移动到右边的的框中然后保存。<br>添加用户：菜单 Security-&gt;Users -&gt; Create local user 在 Roles 选项中选中刚才创建的规则移动到右边的窗口保存。  </p>\n<h4 id=\"NGINX加密代理\"><a href=\"#NGINX加密代理\" class=\"headerlink\" title=\"NGINX加密代理\"></a>NGINX加密代理</h4><p>NGINX配置如下：  </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">upstream register</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    server &quot;YourHostName OR IP&quot;:5001; #端口为上面添加的私有镜像仓库是设置的 HTTP 选项的端口号</span><br><span class=\"line\">    check interval=3000 rise=2 fall=10 timeout=1000 type=http;</span><br><span class=\"line\">    check_http_send &quot;HEAD / HTTP/1.0\\r\\n\\r\\n&quot;;</span><br><span class=\"line\">    check_http_expect_alive http_4xx;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">server &#123;</span><br><span class=\"line\">    server_name YourDomainName;#如果没有 DNS 服务器做解析，请删除此选项使用本机 IP 地址访问</span><br><span class=\"line\">    listen 443 ssl;</span><br><span class=\"line\">    ssl_certificate key/example.crt;</span><br><span class=\"line\">    ssl_certificate_key key/example.key;</span><br><span class=\"line\">    ssl_session_timeout 5m;</span><br><span class=\"line\">    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;</span><br><span class=\"line\">    ssl_ciphers HIGH:!aNULL:!MD5;</span><br><span class=\"line\">    ssl_prefer_server_ciphers on;</span><br><span class=\"line\">    large_client_header_buffers 4 32k;</span><br><span class=\"line\">    client_max_body_size 300m;</span><br><span class=\"line\">    client_body_buffer_size 512k;</span><br><span class=\"line\">    proxy_connect_timeout 600;</span><br><span class=\"line\">    proxy_read_timeout 600;</span><br><span class=\"line\">    proxy_send_timeout 600;</span><br><span class=\"line\">    proxy_buffer_size 128k;</span><br><span class=\"line\">    proxy_buffers 4 64k;</span><br><span class=\"line\">    proxy_busy_buffers_size 128k;</span><br><span class=\"line\">    proxy_temp_file_write_size 512k;</span><br><span class=\"line\"></span><br><span class=\"line\">l   ocation / &#123;</span><br><span class=\"line\">        proxy_set_header Host $host;</span><br><span class=\"line\">        proxy_set_header X-Forwarded-Proto $scheme;</span><br><span class=\"line\">        proxy_set_header X-Forwarded-Port $server_port;</span><br><span class=\"line\">        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class=\"line\">        proxy_http_version 1.1;</span><br><span class=\"line\">        proxy_set_header Upgrade $http_upgrade;</span><br><span class=\"line\">        proxy_set_header Connection $connection_upgrade;</span><br><span class=\"line\">        proxy_redirect off;</span><br><span class=\"line\">        proxy_set_header X-Real-IP $remote_addr;</span><br><span class=\"line\">        proxy_pass http://register;</span><br><span class=\"line\">        proxy_read_timeout 900s;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    error_page 500 502 503 504 /50x.html;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"Docker主机访问镜像仓库\"><a href=\"#Docker主机访问镜像仓库\" class=\"headerlink\" title=\"Docker主机访问镜像仓库\"></a>Docker主机访问镜像仓库</h4><p>如果不启用 SSL 加密可以通过前面章节的方法添加信任地址到Docker的配置文件中然后重启 Docker<br>使用 SSL 加密以后程序需要访问就不能采用修改配置的访问了。具体方法如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">openssl s_client -showcerts -connect YourDomainName OR HostIP:443 &lt;/dev/null 2&gt;/dev/null|openssl x509 -outform PEM &gt;ca.crt</span><br><span class=\"line\">cat ca.crt | sudo tee -a /etc/ssl/certs/ca-certificates.crt</span><br><span class=\"line\">systemctl restart docker</span><br></pre></td></tr></table></figure>\n<p>使用<code>docker login YourDomainName OR HostIP</code>进行测试，用户名密码填写上面Nexus中生成的。  </p>\n","categories":["docker"],"tags":["docker仓库"]},{"title":"7.端口映射与容器关联","url":"/2020/08/24/docker/7-%E7%AB%AF%E5%8F%A3%E6%98%A0%E5%B0%84%E4%B8%8E%E5%AE%B9%E5%99%A8%E5%85%B3%E8%81%94/","content":"<p><img src=\"/2020/08/24/docker/7-%E7%AB%AF%E5%8F%A3%E6%98%A0%E5%B0%84%E4%B8%8E%E5%AE%B9%E5%99%A8%E5%85%B3%E8%81%94/%E5%9B%BE%E7%89%87docker.jpg\" alt=\"docker\">  </p>\n<span id=\"more\"></span>\n<h1 id=\"端口映射实现容器访问\"><a href=\"#端口映射实现容器访问\" class=\"headerlink\" title=\"端口映射实现容器访问\"></a>端口映射实现容器访问</h1><h2 id=\"从外部访问容器应用\"><a href=\"#从外部访问容器应用\" class=\"headerlink\" title=\"从外部访问容器应用\"></a>从外部访问容器应用</h2><p>启动容器时，若不指定对应参数，在容器外部将无法通过网络访问容器内的网络应用和服务。<br>这就需要使用<code>-P</code>、<code>-p</code>参数来指定端口映射。<br><code>-P</code>（大写），是将随机映射一个宿主机49000～49900的端口到内部容器开放的网络端口。<br><code>-p 宿主机端口：容器端口</code>（小写的）则可以指定要映射的端口，并且，在一个指定端口上只可以绑定一个容器。  </p>\n<h2 id=\"映射所有接口地址\"><a href=\"#映射所有接口地址\" class=\"headerlink\" title=\"映射所有接口地址\"></a>映射所有接口地址</h2><p><code> docker run -it -d -p 50001:50001 --name test ubuntu:latest /bin/bash</code>  </p>\n<h2 id=\"映射到指定地址的指定端口\"><a href=\"#映射到指定地址的指定端口\" class=\"headerlink\" title=\"映射到指定地址的指定端口\"></a>映射到指定地址的指定端口</h2><p><code> docker run -it -d -p 127.0.0.1:50001:50001 --name test ubuntu:latest /bin/bash</code>  </p>\n<h2 id=\"映射到指定地址的任意端口\"><a href=\"#映射到指定地址的任意端口\" class=\"headerlink\" title=\"映射到指定地址的任意端口\"></a>映射到指定地址的任意端口</h2><p><code> docker run -it -d -p 127.0.0.1::50001 --name test ubuntu:latest /bin/bash</code><br>这样就会将localhost的任意端口到容器的5000端口，本地主机会自动分配一个端口。  </p>\n<h2 id=\"查看映射端口配置\"><a href=\"#查看映射端口配置\" class=\"headerlink\" title=\"查看映射端口配置\"></a>查看映射端口配置</h2><p><code>docker port 容器 容器端口</code><br>查看容器指定端口的映射关系。  </p>\n<h1 id=\"互联机制实现便捷互访\"><a href=\"#互联机制实现便捷互访\" class=\"headerlink\" title=\"互联机制实现便捷互访\"></a>互联机制实现便捷互访</h1><p>容器的互联是让容器中的应用进行较快交互的方式,实现互联后可以ping通。  </p>\n<ol>\n<li><p>创建一个数据库容器  </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker run -it -d --name db  mysql /bin/bash</span><br></pre></td></tr></table></figure></li>\n<li><p>创建一个web容器来连接到db容器  </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker run -it -d -P --name web --link db:db  ubuntu /bin/bash</span><br></pre></td></tr></table></figure>\n<p>通过–link参数（–link 容器名:别名），这样就实现了web容器与db容器的互联。  </p>\n</li>\n</ol>\n<h2 id=\"两种方式为容器公开连接信息\"><a href=\"#两种方式为容器公开连接信息\" class=\"headerlink\" title=\"两种方式为容器公开连接信息\"></a>两种方式为容器公开连接信息</h2><ul>\n<li> 更新环境变量  </li>\n<li> 更新/etc/hosts文件  </li>\n</ul>\n<ol>\n<li><p>查看web容器的环境变量  </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker run --rm --name web2 --link db:db  ubuntu  env</span><br></pre></td></tr></table></figure>\n<p><img src=\"/2020/08/24/docker/7-%E7%AB%AF%E5%8F%A3%E6%98%A0%E5%B0%84%E4%B8%8E%E5%AE%B9%E5%99%A8%E5%85%B3%E8%81%94/%E6%9F%A5%E7%9C%8B%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F.png\" alt=\"查看环境变量\">  </p>\n</li>\n<li><p>查看hosts信息  </p>\n</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">~]#</span><span class=\"bash\"> docker <span class=\"built_in\">exec</span> -it  web /bin/bash</span></span><br><span class=\"line\">root@b4c7428d0319:/# more /etc/hosts</span><br><span class=\"line\">127.0.0.1       localhost</span><br><span class=\"line\">::1     localhost ip6-localhost ip6-loopback</span><br><span class=\"line\">fe00::0 ip6-localnet</span><br><span class=\"line\">ff00::0 ip6-mcastprefix</span><br><span class=\"line\">ff02::1 ip6-allnodes</span><br><span class=\"line\">ff02::2 ip6-allrouters</span><br><span class=\"line\">172.17.0.2      db 9c493da469c3</span><br><span class=\"line\">172.17.0.3      b4c7428d0319</span><br></pre></td></tr></table></figure>\n\n<p>  172.17.0.2为db容器IP，172.17.0.3为web容器IP。  </p>\n","categories":["docker"],"tags":["端口映射与容器关联"]},{"title":"6.docker存储","url":"/2019/04/22/docker/6.docker%E6%95%B0%E6%8D%AE%E7%AE%A1%E7%90%86/","content":"<p><img src=\"/2019/04/22/docker/6.docker%E6%95%B0%E6%8D%AE%E7%AE%A1%E7%90%86/%E5%9B%BE%E7%89%87docker.jpg\" alt=\"docker\">  </p>\n<span id=\"more\"></span>\n<h1 id=\"docker存储\"><a href=\"#docker存储\" class=\"headerlink\" title=\"docker存储\"></a>docker存储</h1><p>docker有两种存储资源，<strong>Data Volume</strong>、管理镜像层与容器层的 <strong>storage driver</strong>  </p>\n<h2 id=\"storage-driver\"><a href=\"#storage-driver\" class=\"headerlink\" title=\"storage driver\"></a>storage driver</h2><p>容器是由最上层可写容器层、下面若干的镜像层，这样会有一下特性。  </p>\n<ol>\n<li>新数据会保存在最上层的容器层中  </li>\n<li>修改原现有的数据会将镜像层中将数据复制到容器层中，修改后的数据保存在容器层中，镜像层保持不变  </li>\n<li>多层中有同名文件时，只能看到以及实际使用的是最上层中的文件  </li>\n</ol>\n<p>docker支持多种存储驱动，<strong>AUFS、Btrfs、Device mapper、OverlayFS、ZFS</strong>，没有哪个 driver 能够适应所有的场景，docker官方给出的建议是使用发行版默认的存储驱动，docker在安装时会根据当前系统选择默认的存储驱动。<br><img src=\"/2019/04/22/docker/6.docker%E6%95%B0%E6%8D%AE%E7%AE%A1%E7%90%86/linux%E5%AD%98%E5%82%A8%E9%A9%B1%E5%8A%A8.png\" alt=\"存储驱动\"></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">查看当前docker使用的~]Storage Driver</span></span><br><span class=\"line\"><span class=\"meta\">~]#</span><span class=\"bash\"> docker info |grep <span class=\"string\">&quot;Storage Driver&quot;</span></span></span><br><span class=\"line\"> Storage Driver: overlay2</span><br></pre></td></tr></table></figure>\n\n<p>当然也可以手动进行修改  </p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">~]#</span><span class=\"bash\"> vim /etc/docker/daemon.json</span>    </span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;storage-driver&quot;: &quot;overlay2&quot;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Data-Volume\"><a href=\"#Data-Volume\" class=\"headerlink\" title=\"Data Volume\"></a>Data Volume</h2><p>对于有持久化存储需求的容器来说需要使用Data Volume来持久化存储数据。<br>docker volume实际是宿主机文件系统的一部分，volume可使用的容量取决于文件系统可用容量，不能设置volume容量。<br>docker volume有两种类型：<strong>bind mount</strong>和<strong>docker managed volume</strong>。  </p>\n<h3 id=\"bind-mount\"><a href=\"#bind-mount\" class=\"headerlink\" title=\"bind mount\"></a>bind mount</h3><p><strong>bind mount</strong>是宿主机上存在的一个<strong>文件</strong>或<strong>文件夹</strong>。当容器中挂载点中原本有文件则会被隐藏，显示的为bind mount的内容，容器中默认对bind mount<strong>有可读可写权限</strong>。<br><code>docker run -v &lt;host path&gt;:&lt;container path&gt;[:ro]</code>，加上<code>:ro</code>表示容器中只有可读权限,只有宿主机数据的修改权限。  </p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 将本地/root/test_volume文件夹挂载到容器中/root/test_volume</span></span><br><span class=\"line\"><span class=\"meta\">~]#</span><span class=\"bash\"> docker run -it -d -v /root/test_volume:/root/test_volume --name=<span class=\"string\">&quot;busybox1&quot;</span> busybox</span></span><br><span class=\"line\">4126231bdaaf1f04f3ae33d1d2259d996c69399aec9f04b1243508257ae4c8c4</span><br><span class=\"line\"><span class=\"meta\">~]#</span><span class=\"bash\"> docker inspect busybox1</span></span><br><span class=\"line\">...</span><br><span class=\"line\">&quot;Mounts&quot;: [</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                &quot;Type&quot;: &quot;bind&quot;,</span><br><span class=\"line\">                &quot;Source&quot;: &quot;/root/test_volume&quot;,</span><br><span class=\"line\">                &quot;Destination&quot;: &quot;/root/test_volume&quot;,</span><br><span class=\"line\">                &quot;Mode&quot;: &quot;&quot;,</span><br><span class=\"line\">                &quot;RW&quot;: true,</span><br><span class=\"line\">                &quot;Propagation&quot;: &quot;rprivate&quot;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        ],</span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">~]#</span><span class=\"bash\"> docker run -it -d -v /root/test_volume:/root/test_volume:ro --name=<span class=\"string\">&quot;busybox2&quot;</span> busybox</span></span><br><span class=\"line\">705cc2de09e05da2bc72a8511c6130d63f2398b8c1e053f359e3ef2b45506d64</span><br><span class=\"line\"><span class=\"meta\">~]#</span><span class=\"bash\"> docker inspect busybox2</span></span><br><span class=\"line\">...</span><br><span class=\"line\">&quot;Mounts&quot;: [</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                &quot;Type&quot;: &quot;bind&quot;,</span><br><span class=\"line\">                &quot;Source&quot;: &quot;/root/test_volume&quot;,</span><br><span class=\"line\">                &quot;Destination&quot;: &quot;/root/test_volume&quot;,</span><br><span class=\"line\">                &quot;Mode&quot;: &quot;ro&quot;,</span><br><span class=\"line\">                &quot;RW&quot;: false,</span><br><span class=\"line\">                &quot;Propagation&quot;: &quot;rprivate&quot;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        ],</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"docker-managed-volume\"><a href=\"#docker-managed-volume\" class=\"headerlink\" title=\"docker managed volume\"></a>docker managed volume</h3><p>docker managed volume即为数据卷，创建的数据卷会保存在<code>/var/lib/docker/volumes</code>中。当容器需要数据卷时可以直接<code>-v &lt;container path&gt;</code>，此时会自动创建一个名字为一串数字的数据卷并挂载到指定容器路径。与bind mount不同的是，当容器挂载路径中有文件时，会将文件拷贝到数据卷中，即原有文件不会被隐藏。<br><code>docker run -v [&lt;volume_name&gt;:]&lt;container path&gt;[:ro]</code>,使用数据卷也可以将容器内的权限修改为只读，但必须使用提前创建的数据卷。<br>数据卷相关操作：<br><code>docker volume create &lt;volume_name&gt;</code>:创建数据卷<br><code>docker volume inspect &lt;volume_name&gt;</code>:查看数据卷信息<br><code>docker volume rm &lt;volume_name&gt;</code>:删除指定数据卷<br><code>docker volume prune</code>:删除空闲的数据卷<br><code>docker volume ls</code>:查看所有的数据卷  </p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">~]#</span><span class=\"bash\">docker volume create testvolume</span></span><br><span class=\"line\">testvolume</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">~]#</span><span class=\"bash\"> docker run -it -d -v testvolume:/root/test_volume:ro --name=<span class=\"built_in\">test</span> busybox</span></span><br><span class=\"line\">12851737a86ee205c918ba50529c486b326c7e620bd1d93206eebd7e4eaaeceb</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">~]#</span><span class=\"bash\"> docker inspect testvolume</span> </span><br><span class=\"line\">[</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        &quot;CreatedAt&quot;: &quot;2022-10-21T02:13:34+08:00&quot;,</span><br><span class=\"line\">        &quot;Driver&quot;: &quot;local&quot;,</span><br><span class=\"line\">        &quot;Labels&quot;: &#123;&#125;,</span><br><span class=\"line\">        &quot;Mountpoint&quot;: &quot;/var/lib/docker/volumes/testvolume/_data&quot;,</span><br><span class=\"line\">        &quot;Name&quot;: &quot;testvolume&quot;,</span><br><span class=\"line\">        &quot;Options&quot;: &#123;&#125;,</span><br><span class=\"line\">        &quot;Scope&quot;: &quot;local&quot;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">]</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">~]#</span><span class=\"bash\"> docker inspect <span class=\"built_in\">test</span></span></span><br><span class=\"line\">...</span><br><span class=\"line\"> &quot;Mounts&quot;: [</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                &quot;Type&quot;: &quot;volume&quot;,</span><br><span class=\"line\">                &quot;Name&quot;: &quot;testvolume&quot;,</span><br><span class=\"line\">                &quot;Source&quot;: &quot;/var/lib/docker/volumes/testvolume/_data&quot;,</span><br><span class=\"line\">                &quot;Destination&quot;: &quot;/root/test_volume&quot;,</span><br><span class=\"line\">                &quot;Driver&quot;: &quot;local&quot;,</span><br><span class=\"line\">                &quot;Mode&quot;: &quot;ro&quot;,</span><br><span class=\"line\">                &quot;RW&quot;: false,</span><br><span class=\"line\">                &quot;Propagation&quot;: &quot;&quot;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        ],</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"数据卷容器\"><a href=\"#数据卷容器\" class=\"headerlink\" title=\"数据卷容器\"></a>数据卷容器</h2><p>如果用户需要在多个容器之间共享一些持续更新的数据，最简单的方式是使用数据卷容器。<br>首先创建一个数据卷容器。  </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">~]# docker run -it -v /dbdata --name dbdata ubuntu:18.04 </span><br></pre></td></tr></table></figure>\n<p>可以在其他容器中使用–volumes-from来挂载dbdata容器中的数据卷。<br>可以多次使用–volumes-from参数来从多个容器挂载多个数据卷，还可以从其他已经挂载了容器卷的容器来挂载数据卷。  </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker run -it --volumes-from dbdata --name db1 ubuntu:18.04</span><br><span class=\"line\">docker run -it --volumes-from dbdata --name db2 ubuntu:18.04</span><br></pre></td></tr></table></figure>\n<p>这样三个容器任何一方在该目录下的写入，其他容器都可以看到。删除挂载数据卷的容器，数据卷不会被删除。  </p>\n<h2 id=\"data-packed-volume-container\"><a href=\"#data-packed-volume-container\" class=\"headerlink\" title=\"data-packed volume container\"></a>data-packed volume container</h2><p>data-packed volume container就是将数据打包ADD到镜像中，并在dockerfile中使用VOLUME将数据卷挂载位置设置为镜像中文件位置，在容器启动时会自动创建一个数据卷，并将数据拷贝到数据卷中。再通过数据卷容器的方式共享给其他容器。  </p>\n","categories":["docker"],"tags":["docker存储"]},{"title":"docker相关报错","url":"/2019/04/19/docker/docker%E7%9B%B8%E5%85%B3%E6%8A%A5%E9%94%99/","content":"<p><img src=\"/2019/04/19/docker/docker%E7%9B%B8%E5%85%B3%E6%8A%A5%E9%94%99/docker.jpg\" alt=\"docker\"><br><strong>珍惜每一个错误</strong></p>\n<span id=\"more\"></span>\n<h2 id=\"docker命令自动补全\"><a href=\"#docker命令自动补全\" class=\"headerlink\" title=\"docker命令自动补全\"></a>docker命令自动补全</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">yum install -y bash-completion</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"使用的镜像加速-etc-docker-daemon-json文件格式不规范导致docker服务启动报错\"><a href=\"#使用的镜像加速-etc-docker-daemon-json文件格式不规范导致docker服务启动报错\" class=\"headerlink\" title=\"使用的镜像加速/etc/docker/daemon.json文件格式不规范导致docker服务启动报错\"></a>使用的镜像加速/etc/docker/daemon.json文件格式不规范导致docker服务启动报错</h2><h3 id=\"错误原因：\"><a href=\"#错误原因：\" class=\"headerlink\" title=\"错误原因：\"></a>错误原因：</h3><p>使用镜像加速，配置了/etc/docker/daemon.json文件，在配置该文件时没有符合json格式规范。</p>\n<h3 id=\"错误现象：\"><a href=\"#错误现象：\" class=\"headerlink\" title=\"错误现象：\"></a>错误现象：</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]# systemctl restart docker</span><br><span class=\"line\">Job for docker.service failed because the control process exited with error code. See &quot;systemctl status docker.service&quot; and &quot;journalctl -xe&quot; for details.</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]# systemctl status docker.service</span><br><span class=\"line\">● docker.service - Docker Application Container Engine</span><br><span class=\"line\">   Loaded: loaded (/usr/lib/systemd/system/docker.service; disabled; vendor preset: disabled)</span><br><span class=\"line\">   Active: failed (Result: start-limit) since 五 2019-04-19 01:03:25 CST; 6s ago</span><br><span class=\"line\">     Docs: https://docs.docker.com</span><br><span class=\"line\">  Process: 1169 ExecStart=/usr/bin/dockerd -H fd:// --containerd=/run/containerd/containerd.sock (code=exited, status=1/FAILURE)</span><br><span class=\"line\"> Main PID: 1169 (code=exited, status=1/FAILURE)</span><br><span class=\"line\"></span><br><span class=\"line\">4月 19 01:03:23 localhost.localdomain systemd[1]: docker.service: main process exited, code=exi...URE</span><br><span class=\"line\">4月 19 01:03:23 localhost.localdomain systemd[1]: Failed to start Docker Application Container ...ne.</span><br><span class=\"line\">4月 19 01:03:23 localhost.localdomain systemd[1]: Unit docker.service entered failed state.</span><br><span class=\"line\">4月 19 01:03:23 localhost.localdomain systemd[1]: docker.service failed.</span><br><span class=\"line\">4月 19 01:03:25 localhost.localdomain systemd[1]: docker.service holdoff time over, scheduling ...rt.</span><br><span class=\"line\">4月 19 01:03:25 localhost.localdomain systemd[1]: start request repeated too quickly for docker...ice</span><br><span class=\"line\">4月 19 01:03:25 localhost.localdomain systemd[1]: Failed to start Docker Application Container ...ne.</span><br><span class=\"line\">4月 19 01:03:25 localhost.localdomain systemd[1]: Unit docker.service entered failed state.</span><br><span class=\"line\">4月 19 01:03:25 localhost.localdomain systemd[1]: docker.service failed.</span><br><span class=\"line\">Hint: Some lines were ellipsized, use -l to show in full.</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]# dockerd</span><br><span class=\"line\">unable to configure the Docker daemon with file /etc/docker/daemon.json: invalid character &#x27;s&#x27; looking for beginning of value</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]# docker version</span><br><span class=\"line\">Client:</span><br><span class=\"line\"> Version:           18.09.4</span><br><span class=\"line\"> API version:       1.39</span><br><span class=\"line\"> Go version:        go1.10.8</span><br><span class=\"line\"> Git commit:        d14af54266</span><br><span class=\"line\"> Built:             Wed Mar 27 18:34:51 2019</span><br><span class=\"line\"> OS/Arch:           linux/amd64</span><br><span class=\"line\"> Experimental:      false</span><br><span class=\"line\">error during connect: Get http://%2Fvar%2Frun%2Fdocker.sock/v1.39/version: read unix @-&gt;/var/run/docker.sock: read: connection reset by peer</span><br></pre></td></tr></table></figure>\n<h3 id=\"解决方法：\"><a href=\"#解决方法：\" class=\"headerlink\" title=\"解决方法：\"></a>解决方法：</h3><p>检查该json文件确保符合json格式规范，然后执行<code>systemctl daemon-reload</code>后,启动docker服务。  </p>\n<h2 id=\"docker-push镜像到私有仓库时报错\"><a href=\"#docker-push镜像到私有仓库时报错\" class=\"headerlink\" title=\"docker push镜像到私有仓库时报错\"></a>docker push镜像到私有仓库时报错</h2><h3 id=\"错误原因：-1\"><a href=\"#错误原因：-1\" class=\"headerlink\" title=\"错误原因：\"></a>错误原因：</h3><p>可能是由于客户端采用https，docker registry未采用https服务所致  </p>\n<h3 id=\"错误现象：-1\"><a href=\"#错误现象：-1\" class=\"headerlink\" title=\"错误现象：\"></a>错误现象：</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]# docker push 192.168.163.132:5000/ubuntu:18.04</span><br><span class=\"line\">The push refers to repository [192.168.163.132:5000/ubuntu]</span><br><span class=\"line\">Get https://192.168.163.132:5000/v2/: http: server gave HTTP response to HTTPS client</span><br></pre></td></tr></table></figure>\n<h3 id=\"解决方法：-1\"><a href=\"#解决方法：-1\" class=\"headerlink\" title=\"解决方法：\"></a>解决方法：</h3><p>在/etc/docker/daemon.json中添加私有仓库的IP，然后执行<code>systemctl daemon-reload</code>后,启动docker服务。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;&quot;insecure-registries&quot;: [&quot;192.168.163.132:5000&quot;]&#125;</span><br></pre></td></tr></table></figure>\n<p>注意：在/etc/docker/daemon.json文件中json的格式<br><img src=\"/2019/04/19/docker/docker%E7%9B%B8%E5%85%B3%E6%8A%A5%E9%94%99/json.png\" alt=\"json\"></p>\n","categories":["docker"],"tags":["docker相关报错"]},{"title":"2-zabbix部署","url":"/2022/03/25/zabbix/2-zabbix%E9%83%A8%E7%BD%B2/","content":"<p><img src=\"https://s2.loli.net/2022/03/25/BC4LOAv1sp89SnY.jpg\" alt=\"zabbix.jpg\">  </p>\n<span id=\"more\"></span>\n<h2 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h2><p>系统版本为centos 7.6，按照<a href=\"https://www.zabbix.com/documentation/5.2/zh/manual/installation/install_from_packages/rhel_centos\">zabbix指导文档</a> 进行安装。注意使用不同版本系统进行安装时有所不同，需参考官方指导文档进行部署安装。  </p>\n<h1 id=\"server端部署\"><a href=\"#server端部署\" class=\"headerlink\" title=\"server端部署\"></a>server端部署</h1><h2 id=\"添加-Zabbix-软件仓库\"><a href=\"#添加-Zabbix-软件仓库\" class=\"headerlink\" title=\"添加 Zabbix 软件仓库\"></a>添加 Zabbix 软件仓库</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">rpm -ivh http://repo.zabbix.com/zabbix/4.0/rhel/7/x86_64/zabbix-release-4.0-1.el7.noarch.rpm</span><br></pre></td></tr></table></figure>\n<p>执行完成后在/etc/yum.repos.d会生成一个zabbix.repo文件。在安装zabbix是除了zabbix.repo，也要准备好centos 7的相关安装源，以便安装zabbix需要的依赖包。  </p>\n<h2 id=\"启用可选-rpms-的软件仓库\"><a href=\"#启用可选-rpms-的软件仓库\" class=\"headerlink\" title=\"启用可选 rpms 的软件仓库\"></a>启用可选 rpms 的软件仓库</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\"># yum -y install yum-utils</span><br><span class=\"line\"># yum-config-manager --enable rhel-7-server-optional-rpms</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"安装-Server-前端-agent\"><a href=\"#安装-Server-前端-agent\" class=\"headerlink\" title=\"安装 Server/前端/agent\"></a>安装 Server/前端/agent</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\"># yum -y install zabbix-server-mysql zabbix-web-mysql zabbix-agent</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"安装MariaDB-Mysql数据库\"><a href=\"#安装MariaDB-Mysql数据库\" class=\"headerlink\" title=\"安装MariaDB/Mysql数据库\"></a>安装MariaDB/Mysql数据库</h2><p>这一步可以选择安装MariaDB或者Mysql数据库  </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\"># yum install -y mariadb mariadb-server</span><br><span class=\"line\"># systemctl start mariadb</span><br><span class=\"line\"># systemctl enable mariadb</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\"># mysql_secure_installation  #数据库配置</span><br><span class=\"line\"></span><br><span class=\"line\">Enter current password for root (enter for none):  # 输入数据库超级管理员root的密码(注意不是系统root的密码)，第一次进入还没有设置密码则直接回车</span><br><span class=\"line\"></span><br><span class=\"line\">Set root password? [Y/n]  # 设置密码，y</span><br><span class=\"line\"></span><br><span class=\"line\">New password:  # 新密码</span><br><span class=\"line\">Re-enter new password:  # 再次输入密码</span><br><span class=\"line\"></span><br><span class=\"line\">Remove anonymous users? [Y/n]  # 移除匿名用户， y</span><br><span class=\"line\"></span><br><span class=\"line\">Disallow root login remotely? [Y/n]  # 拒绝root远程登录，n，不管y/n，都会拒绝root远程登录</span><br><span class=\"line\"></span><br><span class=\"line\">Remove test database and access to it? [Y/n]  # 删除test数据库，y：删除。n：不删除，数据库中会有一个test数据库，一般不需要</span><br><span class=\"line\"></span><br><span class=\"line\">Reload privilege tables now? [Y/n]  # 重新加载权限表，y。或者重启服务也许</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"初始化zabbix-database\"><a href=\"#初始化zabbix-database\" class=\"headerlink\" title=\"初始化zabbix database\"></a>初始化zabbix database</h2><ul>\n<li>创建初识数据库  <figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">mysql&gt; create database zabbix character set utf8 collate utf8_bin;</span><br><span class=\"line\">mysql&gt; grant all privileges on zabbix.* to zabbix@localhost identified by &#x27;123456&#x27;;</span><br></pre></td></tr></table></figure></li>\n<li>导入初始架构和数据，系统将提示您输入新创建的密码。  <figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">zcat /usr/share/doc/zabbix-server-mysql*/create.sql.gz | mysql -uzabbix -p zabbix</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"配置zabbix-server\"><a href=\"#配置zabbix-server\" class=\"headerlink\" title=\"配置zabbix server\"></a>配置zabbix server</h2><p>配置server端，编辑/etc/zabbix/zabbix_server.conf。  </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">#服务监听的端口，保持默认即可。</span><br><span class=\"line\"># ListenPort=10051</span><br><span class=\"line\"></span><br><span class=\"line\">#当服务端有多个IP时，通过该参数指定通过哪个IP采集被监控主机的数据</span><br><span class=\"line\"># SourceIP=</span><br><span class=\"line\"></span><br><span class=\"line\">#记录日志的方式，system表示将日志发往syslog；file表示使用指定的文件当做日志文件（默认方式）；console表示将日志发往控制台</span><br><span class=\"line\"># LogType=file</span><br><span class=\"line\"></span><br><span class=\"line\">#当LogType=file时，通过该参数指定日志文件</span><br><span class=\"line\">LogFile=/var/log/zabbix/zabbix_server.log</span><br><span class=\"line\"></span><br><span class=\"line\">#设定当日志文件达到多大时进行自动滚动，设置为0时不进行滚动。</span><br><span class=\"line\">LogFileSize=0</span><br><span class=\"line\"></span><br><span class=\"line\">#定义日志文件的详细程度，即日志级别</span><br><span class=\"line\">DebugLevel=3</span><br><span class=\"line\"></span><br><span class=\"line\">#zabbix服务端程序PID路径 </span><br><span class=\"line\">PidFile=/var/run/zabbix/zabbix_server.pid</span><br><span class=\"line\"></span><br><span class=\"line\">#zabbix数据库所在IP</span><br><span class=\"line\"># DBHost=localhost</span><br><span class=\"line\"></span><br><span class=\"line\">#zabbix数据库名称</span><br><span class=\"line\">DBName=zabbix</span><br><span class=\"line\"></span><br><span class=\"line\">#zabbix数据库用户名</span><br><span class=\"line\">DBUser=zabbix</span><br><span class=\"line\"></span><br><span class=\"line\">#zabbix数据库用户对应的密码</span><br><span class=\"line\">DBPassword=123456</span><br><span class=\"line\"></span><br><span class=\"line\">#zabbix所在数据库服务监听的端口号</span><br><span class=\"line\"># DBPort=3306</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>在进行配置时只将zabbix数据库用户名对应的密码填写即可使用，并将zabbix server 启动，并将其设置为开机启动。  </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">systemctl start zabbix-server.service</span><br><span class=\"line\">systemctl enable zabbix-server.service</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"zabbix-web配置\"><a href=\"#zabbix-web配置\" class=\"headerlink\" title=\"zabbix web配置\"></a>zabbix web配置</h2><p>安装完成后需要对zabbix web进行配置,其配置文件为<code>/etc/httpd/conf.d/zabbix.conf</code>。  </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">#将该时区修改</span><br><span class=\"line\"># php_value date.timezone Europe/Riga</span><br><span class=\"line\">                 ||</span><br><span class=\"line\">                 ||</span><br><span class=\"line\">                 \\/</span><br><span class=\"line\">#将时区修改为亚洲上海，并将注释符去除 </span><br><span class=\"line\">php_value date.timezone Asia/Shanghai</span><br></pre></td></tr></table></figure>\n<p>启动httpd服务，并将其设置为开机启动。  </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">systemctl start httpd.service</span><br><span class=\"line\">systemctl enable httpd.service</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"初始化配置\"><a href=\"#初始化配置\" class=\"headerlink\" title=\"初始化配置\"></a>初始化配置</h2><p>使用浏览器登录 zabbix—web_IP/zabbix。  </p>\n<ul>\n<li><p>前端安装向导<br><img src=\"/2022/03/25/zabbix/2-zabbix%E9%83%A8%E7%BD%B2/zabbix-web%E7%95%8C%E9%9D%A21.png\" alt=\"zabbix web界面1\">  </p>\n</li>\n<li><p>自动检测安装环境是否满足需要,全部满足后点击下一步<br><img src=\"/2022/03/25/zabbix/2-zabbix%E9%83%A8%E7%BD%B2/%E8%87%AA%E5%8A%A8%E6%A3%80%E6%B5%8B%E7%8E%AF%E5%A2%83.png\" alt=\"自动检测环境\">  </p>\n</li>\n<li><p>配置数据库连接<br><img src=\"/2022/03/25/zabbix/2-zabbix%E9%83%A8%E7%BD%B2/%E9%85%8D%E7%BD%AE%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9E%E6%8E%A5.png\" alt=\"配置数据库连接\">  </p>\n</li>\n<li><p>配置zabbix server信息<br><img src=\"/2022/03/25/zabbix/2-zabbix%E9%83%A8%E7%BD%B2/%E9%85%8D%E7%BD%AEzabbixserver%E4%BF%A1%E6%81%AF.png\" alt=\"配置zabbixserver信息\"></p>\n</li>\n<li><p>确定概要信息正确，点击下一步  </p>\n</li>\n<li><p>初始化配置完成<br>并有提示：配置信息保存到了<code>/etc/zabbix/web/zabbix.conf.php</code>中，若需要修改可对该文件中参数进行修改。<br><img src=\"/2022/03/25/zabbix/2-zabbix%E9%83%A8%E7%BD%B2/%E5%AE%8C%E6%88%90.png\" alt=\"完成\">  </p>\n</li>\n</ul>\n<h2 id=\"登录zabbix-web界面\"><a href=\"#登录zabbix-web界面\" class=\"headerlink\" title=\"登录zabbix web界面\"></a>登录zabbix web界面</h2><p>默认管理员用户名为：Admin，密码为：zabbix  </p>\n<h2 id=\"修改界面语言\"><a href=\"#修改界面语言\" class=\"headerlink\" title=\"修改界面语言\"></a>修改界面语言</h2><p>点击红框中的图标，修改language选项。</p>\n<ol>\n<li><p>若选项中无Chinese(zh_CN)选项<br>修改zabbix web的配置文件<code>/usr/share/zabbix/include/locales.inc.php</code>中zh_CN属性行中<code>display</code>修改为true  </p>\n</li>\n<li><p>若将界面修改为中文后，有文字出现乱码<br>可以在windows系统C:\\Windows\\Fonts（win7）中，选择一个字体，将该字体的后缀名修改为<strong>小写ttf</strong>，将其放置在zabbix字体文件下中，并修改<code>/usr/share/zabbix/include/defines.inc.php</code>配置文件（<code>define(&#39;ZBX_FONTPATH&#39;,                          realpath(&#39;XXXXXXXX&#39;));</code>可以看到字体文件的路径）。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">#将两处的 graphfort 修改为 MSYH（MSYH为刚刚放置的字体文件的文件名，这里我使用的是黑体所以文件名为MSYH）</span><br><span class=\"line\">define(&#x27;ZBX_FONT_NAME&#x27;, &#x27;MSYH&#x27;);</span><br><span class=\"line\">define(&#x27;ZBX_GRAPH_FONT_NAME&#x27;,           &#x27;MSYH&#x27;);</span><br></pre></td></tr></table></figure>\n<p>修改完成后，重启刷新网页就可以正常显示文字了。  </p>\n</li>\n</ol>\n<h1 id=\"zabbix-agent\"><a href=\"#zabbix-agent\" class=\"headerlink\" title=\"zabbix agent\"></a>zabbix agent</h1><p>上面介绍过zabbix agent部署在被监控主机。下面进行安装  </p>\n<h2 id=\"安装zabbix-agent\"><a href=\"#安装zabbix-agent\" class=\"headerlink\" title=\"安装zabbix agent\"></a>安装zabbix agent</h2><p>agent端的安装比较简单。  </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">yum install -y zabbix-agent zabbix-sender</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"配置agent\"><a href=\"#配置agent\" class=\"headerlink\" title=\"配置agent\"></a>配置agent</h2><p>修改<code>/etc/zabbix/zabbix_agentd.conf</code>，下面主要介绍上一章中agent的主动模式与被动模式。  </p>\n<ul>\n<li><p>Passive checks related<br>该模块为agent被动模式相关的参数  </p>\n<ul>\n<li>Server<br>允许拉取agent端数据的IP，也就是server端IP；多个IP时使用逗号将IP分隔  </li>\n<li>ListenPort<br>被动模式所监听端口号，默认为10050，即server端访问10050端口拉取数据  </li>\n<li>ListenIP<br>被动模式所监听的IP，默认为0.0.0.0，即为监听本地的所有的IP  </li>\n<li>StartAgents<br>指定预计生成的agent进程数量  </li>\n</ul>\n</li>\n<li><p>Active checks related<br>该模块为主动模式的相关参数  </p>\n<ul>\n<li>ServerActive<br>主动推送到server端的IP；多个IP时使用逗号将IP分隔  </li>\n<li>Hostname<br>当前主机的主机名</li>\n<li>RefreshActiveChecks<br>agent端每多少秒主动推送数据</li>\n</ul>\n</li>\n</ul>\n<p>这里我们只要将Server、ServerActive、Hostname修改即可。然后重启agent进程，并将其设置为开机启动。  </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">systemctl start zabbix-agent.service</span><br><span class=\"line\">systemctl enable zabbix-agent.service</span><br></pre></td></tr></table></figure>\n","categories":["zabbix"],"tags":["zabbix安装"]},{"title":"3-zabbix快速配置","url":"/2022/03/28/zabbix/3-zabbix%E5%BF%AB%E9%80%9F%E9%85%8D%E7%BD%AE/","content":"<p><img src=\"https://s2.loli.net/2022/03/25/BC4LOAv1sp89SnY.jpg\" alt=\"zabbix.jpg\">  </p>\n<span id=\"more\"></span>\n<h1 id=\"配置流程\"><a href=\"#配置流程\" class=\"headerlink\" title=\"配置流程\"></a>配置流程</h1><p>完整的配置流程：主机组–&gt;主机–&gt;监控项组–&gt;监控项–&gt;触发器–&gt;故障–&gt;处理动作–&gt;用户组–&gt;用户–&gt;告警方式–&gt;日记审计。  </p>\n<h1 id=\"主机组\"><a href=\"#主机组\" class=\"headerlink\" title=\"主机组\"></a>主机组</h1><h2 id=\"添加主机组\"><a href=\"#添加主机组\" class=\"headerlink\" title=\"添加主机组\"></a>添加主机组</h2><p><img src=\"/2022/03/28/zabbix/3-zabbix%E5%BF%AB%E9%80%9F%E9%85%8D%E7%BD%AE/%E6%B7%BB%E5%8A%A0%E4%B8%BB%E6%9C%BA%E7%BB%84.png\" alt=\"添加主机组\"><br>添加主机组的相关信息保存在数据库中  </p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"operator\">*</span> <span class=\"keyword\">from</span> zabbix.hstgrp;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"层级主机组分组\"><a href=\"#层级主机组分组\" class=\"headerlink\" title=\"层级主机组分组\"></a>层级主机组分组</h2>","categories":["zabbix"],"tags":["zabbix安装"]},{"title":"1.zabbix概念","url":"/2022/03/25/zabbix/1-zabbix%E6%A6%82%E5%BF%B5/","content":"<p><img src=\"https://s2.loli.net/2022/03/25/BC4LOAv1sp89SnY.jpg\" alt=\"zabbix.jpg\">  </p>\n<span id=\"more\"></span>\n<p>&emsp;&emsp;zabbix可以监控的硬件理论上是与我们的业务有关的硬件资源都可以被监控，比如：主机、交换机、路由器等。这就要求zabbix可以与这些监控对象能够进行通信。  </p>\n<h2 id=\"zabbix支持的通信方式\"><a href=\"#zabbix支持的通信方式\" class=\"headerlink\" title=\"zabbix支持的通信方式\"></a>zabbix支持的通信方式</h2><ul>\n<li>agent<br>通过专用的代理程序进行监控，与常见的master/agent模型类似，如果被监控对象支持对应的agent，推荐首先该形式。  </li>\n<li>ssh/telnet<br>通过远程控制协议进行通讯，比如：ssh、telnet。  </li>\n<li>SNMP<br>通过SNMP协议与被监控对象进行通信，SNMNP协议的全称是“简单网络管理协议”。  </li>\n<li>IPMI<br>通过IPMI接口进行监控，我们可以通过标准的IPMI硬件接口，监控被监控对象的物理特征，比如电压，温度，风扇状态，电源状态等。  </li>\n<li>JMX<br>JMX即java管理扩展，监控JVM时，可以使用这种方法也是很不错的。<br><img src=\"/2022/03/25/zabbix/1-zabbix%E6%A6%82%E5%BF%B5/%E4%B8%8E%E7%9B%91%E6%8E%A7%E8%AE%BE%E5%A4%87%E7%9A%84%E9%80%9A%E8%AE%AF%E6%96%B9%E5%BC%8F.png\" alt=\"通信方式\">  </li>\n</ul>\n<p>&emsp;&emsp;当监控规模变得庞大时，可能有成千上万台设备需要监控时。zabbix支持分布式监控，我们可以把所有的被监控对象分成不同的区域，每个区域中设置一台代理主机，区域内的每个被监控对象的信息被agent采集，提交给代理主机，在这个区域内，在理主机的作用就相当于是zabbix server，我们将代理主机为zabbix proxy，代理主机再将收集到的监控对象的信息统一提交给真正的zabbix server处理，这样zabbix proxy分摊了zabbix server的压力，还能通过统一的监控入口，监控所有的对象。  </p>\n<h2 id=\"zabbix组件\"><a href=\"#zabbix组件\" class=\"headerlink\" title=\"zabbix组件\"></a>zabbix组件</h2><ul>\n<li>zabbix agent<br>部署在被监控主机上，负责被监控主机的数据，并加数据发送给zabbix server。</li>\n<li>zabbix server<br>负责接受agent发送的报告信息，并且负责组织配置信息、统计信息、操作数据等。</li>\n<li>zabbix database<br>用于存储所有zabbix的配置信息、监控数据的数据库。</li>\n<li>zabbix web<br>zabbix的web界面，管理员通过web界面管理zabbix配置以及查看zabbix相关监控信息，可以单独部署在独立的服务器上。  </li>\n<li>zabbix proxy<br>可选组件，用于分布式监控环境中，zabbix proxy代表server端，完成局部区域内的信息收集，最终统一发往server端。采用中间代理将大大提高监控服务器端的处理速度，从而支撑构建大型分布式监控环境，从架构上支持异地多机房的需求。  </li>\n</ul>\n<h2 id=\"zabbix工作模式\"><a href=\"#zabbix工作模式\" class=\"headerlink\" title=\"zabbix工作模式\"></a>zabbix工作模式</h2><p>&emsp;&emsp;agent端会将采集完的数据主动发送给server端，这种模式称之为<strong>主动模式</strong>（对于agent端来说是主动的）；agent端也可以不发送数据，而是等待server端来拉取数据，这种模式称之为<strong>被动模式</strong>。一般来说，被动模式对监控控制端服务器的开销较大，适合小规模的监控环境；主动模式对监控控制端服务器的开销较小，适合大规模的监控环境。<br>&emsp;&emsp;可以在<strong>agent端使用zabbix_sender</strong>工具，测试是否能够向server端发送数据。<br>&emsp;&emsp;可以在<strong>server端使用zabbix_get</strong>工具，测试是否能够向agent端发送数据。<br>&emsp;&emsp;两种模式可以同时存在，并不会冲突。  </p>\n","categories":["zabbix"],"tags":["zabbix概念"]},{"title":"3-ansible Ad-Hoc命令集","url":"/2021/07/13/ansible/3-Ad-Hoc%E5%91%BD%E4%BB%A4%E9%9B%86/","content":"<p><img src=\"/2021/07/13/ansible/3-Ad-Hoc%E5%91%BD%E4%BB%A4%E9%9B%86/ansible.jpg\" alt=\"ansible\"><br>清单配置详解</p>\n<span id=\"more\"></span>\n<p>ansible有两种完成任务的方式：  </p>\n<ol>\n<li>Ad-Hoc：也就是ansible命令，相当于linux命令  </li>\n<li>ansible-playbook：ansible-playbook命令，相当于shell脚本  </li>\n</ol>\n<h1 id=\"Ad-Hoc用法\"><a href=\"#Ad-Hoc用法\" class=\"headerlink\" title=\"Ad-Hoc用法\"></a>Ad-Hoc用法</h1><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">ansible &lt;host-pattern&gt; [options]</span><br></pre></td></tr></table></figure>\n<p><strong>[options]</strong>  </p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">选项</th>\n<th align=\"left\">解释</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\"><strong>-v</strong></td>\n<td align=\"left\">输出详细信息，-vvv输出更加详细的信息</td>\n</tr>\n<tr>\n<td align=\"left\"><strong>-i PATH</strong></td>\n<td align=\"left\">指定inventory配置文件，默认是/etc/ansible/hosts</td>\n</tr>\n<tr>\n<td align=\"left\"><strong>-f NUM</strong></td>\n<td align=\"left\">指定并发数，默认是使用的ansible.cfg中forks=5</td>\n</tr>\n<tr>\n<td align=\"left\"><strong>-m NAME</strong></td>\n<td align=\"left\">指定使用的模块名</td>\n</tr>\n<tr>\n<td align=\"left\"><strong>-M PATH</strong></td>\n<td align=\"left\">指定模块的存放路径</td>\n</tr>\n<tr>\n<td align=\"left\"><strong>-a ‘xxxxx’</strong></td>\n<td align=\"left\">模块参数</td>\n</tr>\n<tr>\n<td align=\"left\"><strong>-k ：</strong></td>\n<td align=\"left\">认证密码</td>\n</tr>\n<tr>\n<td align=\"left\"><strong>-K ：</strong></td>\n<td align=\"left\">sudo时使用的密码</td>\n</tr>\n<tr>\n<td align=\"left\"><strong>-o ：</strong></td>\n<td align=\"left\">标准输出至一行</td>\n</tr>\n<tr>\n<td align=\"left\"><strong>-b ：</strong></td>\n<td align=\"left\">相当于sudo命令</td>\n</tr>\n<tr>\n<td align=\"left\"><strong>-t PATH</strong></td>\n<td align=\"left\">将输出信息保存在PATH目录下，文件名为远程主机名</td>\n</tr>\n<tr>\n<td align=\"left\"><strong>-T seconds</strong></td>\n<td align=\"left\">设置最大超时时间，单位秒</td>\n</tr>\n<tr>\n<td align=\"left\"><strong>-B seconds</strong></td>\n<td align=\"left\">后台执行命令，超过指定秒后终止运行的命令</td>\n</tr>\n<tr>\n<td align=\"left\"><strong>-P seconds</strong></td>\n<td align=\"left\">定期返回后台任务进度</td>\n</tr>\n<tr>\n<td align=\"left\"><strong>-u USERNAME</strong></td>\n<td align=\"left\">指定以哪一个远程主机的用户进行远程</td>\n</tr>\n<tr>\n<td align=\"left\"><strong>-U USERNAME</strong></td>\n<td align=\"left\">相当于远程主机后执行sudo USERNAME</td>\n</tr>\n<tr>\n<td align=\"left\"><strong>–list-hosts</strong></td>\n<td align=\"left\">列出符合条件的所有主机列表</td>\n</tr>\n</tbody></table>\n<p>当命令执行多台主机时，执行的主机是没有固定先后顺序的，且受并发数（默认5）限制，同一时间输出主机信息小于等于5都是正常的。  </p>\n<ul>\n<li><p>示例1<br>查看主机内存情况  </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">#command、script、shell，都可以实现远程shell命令运行</span><br><span class=\"line\">ansible test3 -m command -a &#x27;free -m&#x27;    #command运行远程权限范围所有的shell命令</span><br><span class=\"line\">ansible test3 -m shell -a &#x27;free -m&#x27;      #shell模块还可以执行远程主机的shell脚本文件，执行脚本时`-a`参数后跟脚本的路径</span><br><span class=\"line\">ansible test3 -m script -a &#x27;free -m&#x27;     #script模块可以在远程主机执行主控端存储的shell脚本文件，相当于scp+shell组合，执行脚本时`-a`参数后跟脚本的路径</span><br></pre></td></tr></table></figure></li>\n<li><p>示例2<br>使用yum安装指定软件  </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">ansible test3 -m yum -a &#x27;name=vim state=installed&#x27;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<p><strong>name</strong>：后跟要操作的包名<br><strong>state</strong>：表示对包执行的操作，installed（安装）、latest（更新或者安装最新）、removed（卸载）  </p>\n<ul>\n<li>示例3<br>启动某一项服务，并设置开机启动  <figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">ansible test3 -m service -a&#x27;name=xxxx state=started enabled=yes&#x27;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h1 id=\"常用模块\"><a href=\"#常用模块\" class=\"headerlink\" title=\"常用模块\"></a>常用模块</h1><h2 id=\"文件操作\"><a href=\"#文件操作\" class=\"headerlink\" title=\"文件操作\"></a>文件操作</h2><h3 id=\"fetch\"><a href=\"#fetch\" class=\"headerlink\" title=\"fetch\"></a>fetch</h3><p>将远程主机的文件拉取到ansible主机。  </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">ansible test3 -m fetch -a&#x27;src=/etc/fstab dest=/home/test&#x27;</span><br></pre></td></tr></table></figure>\n<p><strong>src</strong>：表示要拉取的远程主机的文件路径，只能是文件而不能是目录<br><strong>dest</strong>：表示将文件存放在ansible的路径<br>拉取到ansible主机的fstab文件路径是/home/test/test3/etc/fstab,说明在指定dest路径下会自动创一个主机的文件夹（/home/test/test3），然后在该主机文件夹下也会自动创建拉取的文件在远程主机中的路径结构以及文件。  </p>\n<h3 id=\"copy\"><a href=\"#copy\" class=\"headerlink\" title=\"copy\"></a>copy</h3><p>将ansible主机上的文件拷贝到远程主机上。<br><strong>src</strong>：用于指定需要copy的文件或目录<br><strong>dest</strong>：用于指定文件将被拷贝到远程主机的哪个目录中，dest为必须参数<br><strong>content</strong>：当不使用src指定拷贝的文件时，可以使用content直接将content后的内容直接覆盖到dest的文件中国，src与content两个参数必有其一，否则会报错。<br><strong>force</strong> ：当远程主机的目标路径中已经存在同名文件，并且与ansible主机中的文件内容不同时，是否强制覆盖，可选值有yes和no，默认值为yes，表示覆盖，如果设置为no，则不会执行覆盖拷贝操作，远程主机中的文件保持不变。<br><strong>backup</strong>：当远程主机的目标路径中已经存在同名文件，并且与ansible主机中的文件内容不同时，是否对远程主机的文件进行备份，可选值有yes和no，当设置为yes时，会先备份远程主机中的文件，然后再将ansible主机中的文件拷贝到远程主机。<br><strong>owner</strong> ：指定文件拷贝到远程主机后的属主，但是远程主机上必须有对应的用户，否则会报错。<br><strong>group</strong> ：指定文件拷贝到远程主机后的属组，但是远程主机上必须有对应的组，否则会报错。<br><strong>mode</strong> ：指定文件拷贝到远程主机后的权限，如果你想将权限设置为”rw-r–r–”，则可以使用mode=0644表示，如果你想要在user对应的权限位上添加执行权限，则可以使用mode=u+x表示。  </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">#将ansible主机中/home/yyg/test.txt复制到test3的/home/yyg下</span><br><span class=\"line\">ansible test3 -m copy -a&#x27;src=/home/yyg/test.txt dest=/home/yyg&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">#在远程主机的/home/yyg/目录下生成文件test2.txt，改文件有两行第一行123第二行456</span><br><span class=\"line\">ansible test3 -m copy -a&#x27;content=&quot;123\\n456\\n&quot; dest=/home/yyg/test2.txt&#x27;   #使用content时，dest必须是一个文件</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"file\"><a href=\"#file\" class=\"headerlink\" title=\"file\"></a>file</h3><p>对文件的基本操作：创建文件或目录、删除文件或目录、修改文件权限等<br><strong>path</strong>：指定要操作的文件或目录【必须参数】<br><strong>state</strong>：可选参数  </p>\n<ul>\n<li>directory：指定的path为一个目录，并创建目录；若目录存在则不进行操作  </li>\n<li>touch：指定的path是文件，并创建文件；若存在则更新文件的时间戳  </li>\n<li>link：指定的path是软连接  </li>\n<li>hard：指定的path是硬连接  </li>\n<li>absent：删除目录或者文件</li>\n</ul>\n<p>  <strong>src</strong>:当state是link或者hard时，还参数指向的是链接源<br>  <strong>owner</strong>:用于指定被操作文件的属主，属主对应的用户必须在远程主机中存在，否则会报错。<br>  <strong>group</strong>:用于指定被操作文件的属组，属组对应的组必须在远程主机中存在，否则会报错。<br>  <strong>mode</strong>：设置文件的权限，例如mode=777<br>  <strong>recurse</strong>：当要操作目录时，recurse=yes表示递归操作  </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">#在test3上创建一个/home/yyg/test.txt文件  </span><br><span class=\"line\">ansible test3 -m file -a&#x27;path=/home/yyg/test.txt state=touch&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">#在test3上创建一个/home/yyg/dd 目录</span><br><span class=\"line\">ansible test3 -m file -a&#x27;path=/home/yyg/dd state=directory&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">#为test3上/home/yyg/test.txt创建一个/home/yyg/test.link软连接</span><br><span class=\"line\">ansible test3 -m file -a&#x27;path=/home/yyg/test.link state=link src=/home/yyg/test.txt&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">#为test3上/home/yyg/test.txt创建一个/home/yyg/test.hard软连接</span><br><span class=\"line\">ansible test3 -m file -a&#x27;path=/home/yyg/test.hard state=hard src=/home/yyg/test.txt&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">#删除test3上的/home/yyg/test.hard</span><br><span class=\"line\">ansible test3 -m file -a&#x27;path=/home/yyg/test.hard state=absent&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">#将test3上的/home/yyg/test.txt文件，属主为yyg、属组为yyg、权限改为777</span><br><span class=\"line\">ansible test3 -m file -a&#x27;path=/home/yyg/test.txt owner=yyg group=yyg mode=777&#x27;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"blockinfile\"><a href=\"#blockinfile\" class=\"headerlink\" title=\"blockinfile\"></a>blockinfile</h3><p>向指定的文件（默认尾部）插入文本，并自动插入标记<br><strong>path</strong>:指定操作的文件<br><strong>block</strong>:要插入的文本<br><strong>marker</strong>：自定义标记，默认会在插入的文本上行和下行插入<code># BEGIN ANSIBLE MANAGED BLOCK</code>、<code># END ANSIBLE MANAGED BLOCK</code>。当marker=”{mark} 2020-04-20”，标记就会变成<code>BEGIN 2020-04-20</code>、<code>END 2020-04-20</code>，当然也可以不加{mark}<br><strong>state</strong>：默认参数为present表示更新标记的文本；当state=absent时，表示删除标记的文本<br><strong>backup</strong>:表示修改文件之前是否进行备份。<br><strong>insertbefore</strong>：可以与正则表达式一起使用，表示将文本添加在正则匹配的行后（有多行可以匹配时，以最后一个满足正则的行为准）<br><strong>insertafter</strong>：可以与正则表达式一起使用，表示将文本添加在正则匹配的行前（有多行可以匹配时，以最后一个满足正则的行为准）；当insertafter=BOF时表示将文本插入在文件开头。<br><strong>create</strong>: 操作的文件不存在时是否进行创建，默认create=no  </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">#向test3的/home/yyg/test.txt插入两行数字</span><br><span class=\"line\">ansible test3 -m blockinfile -a &#x27;path=/home/yyg/test.txt block=&quot;123\\n456\\n&quot;&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">[root@test3 yyg]# more /home/yyg/test.txt </span><br><span class=\"line\"># BEGIN ANSIBLE MANAGED BLOCK      </span><br><span class=\"line\">123</span><br><span class=\"line\">456</span><br><span class=\"line\"># END ANSIBLE MANAGED BLOCK</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">#向test3的/home/yyg/test.txt插入三行数字并自定义标记</span><br><span class=\"line\">ansible test3 -m blockinfile -a &#x27;path=/home/yyg/test.txt marker=&quot;&#123;mark&#125; 2020-04-20&quot;  block=&quot;123\\n456\\n789\\n&quot;&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">[root@test3 yyg]# more /home/yyg/test.txt </span><br><span class=\"line\"># BEGIN ANSIBLE MANAGED BLOCK</span><br><span class=\"line\">123</span><br><span class=\"line\">456</span><br><span class=\"line\"># END ANSIBLE MANAGED BLOCK</span><br><span class=\"line\">BEGIN 2020-04-20</span><br><span class=\"line\">123</span><br><span class=\"line\">456</span><br><span class=\"line\">789</span><br><span class=\"line\">END 2020-04-20</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">#对test3下/home/yyg/test.txt默认标记的文本进行修改</span><br><span class=\"line\">ansible test3 -m blockinfile -a&#x27;path=/home/yyg/test.txt block=&quot;789\\n456\\n123\\n&quot;&#x27;</span><br><span class=\"line\">#可以查出这次的操作是针对默认标记的文本进行的修改</span><br><span class=\"line\">[root@test3 yyg]# more /home/yyg/test.txt </span><br><span class=\"line\"># BEGIN ANSIBLE MANAGED BLOCK</span><br><span class=\"line\">789</span><br><span class=\"line\">456</span><br><span class=\"line\">123</span><br><span class=\"line\"># END ANSIBLE MANAGED BLOCK</span><br><span class=\"line\">BEGIN 2020-04-20</span><br><span class=\"line\">123</span><br><span class=\"line\">456</span><br><span class=\"line\">789</span><br><span class=\"line\">END 2020-04-20</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"lineinfile\"><a href=\"#lineinfile\" class=\"headerlink\" title=\"lineinfile\"></a>lineinfile</h3><p>确保文件中有指定的一行；替换指定的一行；删除指定文本<br><strong>path</strong>:指定要操作的文件<br><strong>line</strong>:指定要操作的文本或者替换为的文本<br><strong>state</strong>:默认是present，absent为删除指定的文本<br><strong>regexp</strong>:使用正则表达式匹配对应的行,当替换文本时，如果有多行文本都能被匹配，则只有最后面被匹配到的那行文本才会被替换;当删除文本时，如果有多行文本都能被匹配，这么这些行都会被删除。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@test3 yyg]# more linefile </span><br><span class=\"line\">test test 11111</span><br><span class=\"line\"></span><br><span class=\"line\">#确保/home/yyg/linefile有`test test`这一行</span><br><span class=\"line\">ansible test3 -m lineinfile -a&#x27;path=/home/yyg/linefile line=&quot;test test&quot;&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">#若是linefile中有test test这一行则linefile文件不会有改变</span><br><span class=\"line\">#【注意这里是匹配的整行，所以才会在文件尾加了test test】</span><br><span class=\"line\">[root@test3 yyg]# more linefile </span><br><span class=\"line\">test test 11111</span><br><span class=\"line\">test test</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@test3 yyg]# more linefile1 </span><br><span class=\"line\">1test</span><br><span class=\"line\">2test</span><br><span class=\"line\">3test</span><br><span class=\"line\">3test</span><br><span class=\"line\">4test</span><br><span class=\"line\"></span><br><span class=\"line\">#替换/home/yyg/linefile1中`3test`这一行为linefile</span><br><span class=\"line\">ansible test3 -m lineinfile -a&#x27;path=/home/yyg/linefile1 regexp=&quot;^3&quot; line=&quot;linefile&quot;&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">#【注意只对匹配的最后一行进行替换，若没有匹配的行则会在文件尾添加 linefile 】</span><br><span class=\"line\">#【若想要在没有匹配行时不再文件尾添加文本 则需要在lineinfile模块参数中加上backrefs=yes】</span><br><span class=\"line\">[root@qweasdzxc yyg]# more linefile1 </span><br><span class=\"line\">1test</span><br><span class=\"line\">2test</span><br><span class=\"line\">3test</span><br><span class=\"line\">linefile</span><br><span class=\"line\">4test</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@qweasdzxc yyg]# more linefile2</span><br><span class=\"line\">1test</span><br><span class=\"line\">2test</span><br><span class=\"line\">3test123</span><br><span class=\"line\">3test</span><br><span class=\"line\">3test</span><br><span class=\"line\">4test</span><br><span class=\"line\"></span><br><span class=\"line\">#删除test3下/home/yyg/linefile2中是&quot;3test&quot;的行</span><br><span class=\"line\">ansible test3 -m lineinfile -a&#x27;path=/home/yyg/linefile2 line=&quot;3test&quot; state=absent&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">#会将所有&quot;3test&quot;行删除，3test123则不会被删除</span><br><span class=\"line\">[root@qweasdzxc yyg]# more linefile2</span><br><span class=\"line\">1test</span><br><span class=\"line\">2test</span><br><span class=\"line\">3test123</span><br><span class=\"line\">4test</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@qweasdzxc yyg]# more linefile3</span><br><span class=\"line\">1test</span><br><span class=\"line\">2test</span><br><span class=\"line\">3test123</span><br><span class=\"line\">3test</span><br><span class=\"line\">3test</span><br><span class=\"line\">4test</span><br><span class=\"line\"></span><br><span class=\"line\">#删除test3下/home/yyg/linefile3中有&quot;3test&quot;字符的行</span><br><span class=\"line\">ansible test3 -m lineinfile -a&#x27;path=/home/yyg/linefile3 regexp=&quot;.*3test.*&quot; state=absent&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">#【注意参数line和regexp的区别】</span><br><span class=\"line\">[root@qweasdzxc yyg]# more linefile3</span><br><span class=\"line\">1test</span><br><span class=\"line\">2test</span><br><span class=\"line\">4test</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"find\"><a href=\"#find\" class=\"headerlink\" title=\"find\"></a>find</h3><p>在远程主机中查找符合条件的文件。<br><strong>paths</strong>：必须参数，指定在那个路径下查找文件（不会在子目录中查找），可以有多个路径，路径之间用逗号隔开<br><strong>recurse</strong>：默认是no，递归查找path下的子目录时需设定为yes<br><strong>hidden</strong>：默认no，设置为yes时查找隐藏文件<br><strong>file_type</strong>：默认情况下只会查找“文件”，当需要查找其他类型时，需进行指定：any、dierctory、file、link<br><strong>patterns</strong>：指定查找的文件名，可以使用通配符。<br><strong>use_regex</strong>：当patterns需使用正则表达式时，需设置为yes<br><strong>contains</strong>：指定一个正则表达式搜索文件中的内容<br><strong>age</strong>:根据文件mtime时间进行查找，单位有秒(s)、分(m)、时(h)、天(d)、星期(w)。age=3d（mtime在3天前的文件）、age=-3d（mtime在进3天内的文件）<br><strong>age_stamp</strong>：指定搜索的是文件的什么时间atime、ctime、mtime<br><strong>size</strong>:根据文件的大小进行查找（单位t、g、m、k、b），size=3m（大于3m的文件）、size=-3m（小于等于3m的文件）  </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">在test3主机的/home/yyg目录中查找文件内容中包含abc字符串的文件，隐藏文件会被忽略，不会进行递归查找。</span><br><span class=\"line\">[root@zabbix ~]# ansible test3 -m find -a&#x27;paths=/home/yyg contains=&quot;.*abc.*&quot;&#x27;</span><br><span class=\"line\">test3 | SUCCESS =&gt; &#123;</span><br><span class=\"line\">    &quot;ansible_facts&quot;: &#123;</span><br><span class=\"line\">        &quot;discovered_interpreter_python&quot;: &quot;/usr/bin/python&quot;</span><br><span class=\"line\">    &#125;, </span><br><span class=\"line\">    &quot;changed&quot;: false, </span><br><span class=\"line\">    &quot;examined&quot;: 14, </span><br><span class=\"line\">    &quot;files&quot;: [</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            &quot;atime&quot;: 1587594438.3750508, </span><br><span class=\"line\">            &quot;ctime&quot;: 1587594438.3750508, </span><br><span class=\"line\">            &quot;dev&quot;: 64768, </span><br><span class=\"line\">            &quot;gid&quot;: 0, </span><br><span class=\"line\">            &quot;gr_name&quot;: &quot;root&quot;, </span><br><span class=\"line\">            &quot;inode&quot;: 50780728, </span><br><span class=\"line\">            &quot;isblk&quot;: false, </span><br><span class=\"line\">            &quot;ischr&quot;: false, </span><br><span class=\"line\">            &quot;isdir&quot;: false, </span><br><span class=\"line\">            &quot;isfifo&quot;: false, </span><br><span class=\"line\">            &quot;isgid&quot;: false, </span><br><span class=\"line\">            &quot;islnk&quot;: false, </span><br><span class=\"line\">            &quot;isreg&quot;: true, </span><br><span class=\"line\">            &quot;issock&quot;: false, </span><br><span class=\"line\">            &quot;isuid&quot;: false, </span><br><span class=\"line\">            &quot;mode&quot;: &quot;0644&quot;, </span><br><span class=\"line\">            &quot;mtime&quot;: 1587594438.3750508, </span><br><span class=\"line\">            &quot;nlink&quot;: 1, </span><br><span class=\"line\">            &quot;path&quot;: &quot;/home/yyg/find.txt&quot;, </span><br><span class=\"line\">            &quot;pw_name&quot;: &quot;root&quot;, </span><br><span class=\"line\">            &quot;rgrp&quot;: true, </span><br><span class=\"line\">            &quot;roth&quot;: true, </span><br><span class=\"line\">            &quot;rusr&quot;: true, </span><br><span class=\"line\">            &quot;size&quot;: 8, </span><br><span class=\"line\">            &quot;uid&quot;: 0, </span><br><span class=\"line\">            &quot;wgrp&quot;: false, </span><br><span class=\"line\">            &quot;woth&quot;: false, </span><br><span class=\"line\">            &quot;wusr&quot;: true, </span><br><span class=\"line\">            &quot;xgrp&quot;: false, </span><br><span class=\"line\">            &quot;xoth&quot;: false, </span><br><span class=\"line\">            &quot;xusr&quot;: false</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    ], </span><br><span class=\"line\">    &quot;matched&quot;: 1, </span><br><span class=\"line\">    &quot;msg&quot;: &quot;&quot;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">在test3主机的/home/yyg目录以及其子目录中查找文件内容中包含abc字符串的文件，隐藏文件会被忽略。</span><br><span class=\"line\">[root@zabbix ~]# ansible test3 -m find -a&#x27;paths=/home/yyg recurse=yes contains=&quot;.*abc.*&quot;&#x27;</span><br><span class=\"line\">test3 | SUCCESS =&gt; &#123;</span><br><span class=\"line\">    &quot;ansible_facts&quot;: &#123;</span><br><span class=\"line\">        &quot;discovered_interpreter_python&quot;: &quot;/usr/bin/python&quot;</span><br><span class=\"line\">    &#125;, </span><br><span class=\"line\">    &quot;changed&quot;: false, </span><br><span class=\"line\">    &quot;examined&quot;: 16, </span><br><span class=\"line\">    &quot;files&quot;: [</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            &quot;atime&quot;: 1587594661.6363747, </span><br><span class=\"line\">            &quot;ctime&quot;: 1587594438.3750508, </span><br><span class=\"line\">            &quot;dev&quot;: 64768, </span><br><span class=\"line\">            &quot;gid&quot;: 0, </span><br><span class=\"line\">            &quot;gr_name&quot;: &quot;root&quot;, </span><br><span class=\"line\">            &quot;inode&quot;: 50780728, </span><br><span class=\"line\">            &quot;isblk&quot;: false, </span><br><span class=\"line\">            &quot;ischr&quot;: false, </span><br><span class=\"line\">            &quot;isdir&quot;: false, </span><br><span class=\"line\">            &quot;isfifo&quot;: false, </span><br><span class=\"line\">            &quot;isgid&quot;: false, </span><br><span class=\"line\">            &quot;islnk&quot;: false, </span><br><span class=\"line\">            &quot;isreg&quot;: true, </span><br><span class=\"line\">            &quot;issock&quot;: false, </span><br><span class=\"line\">            &quot;isuid&quot;: false, </span><br><span class=\"line\">            &quot;mode&quot;: &quot;0644&quot;, </span><br><span class=\"line\">            &quot;mtime&quot;: 1587594438.3750508, </span><br><span class=\"line\">            &quot;nlink&quot;: 1, </span><br><span class=\"line\">            &quot;path&quot;: &quot;/home/yyg/find.txt&quot;, </span><br><span class=\"line\">            &quot;pw_name&quot;: &quot;root&quot;, </span><br><span class=\"line\">            &quot;rgrp&quot;: true, </span><br><span class=\"line\">            &quot;roth&quot;: true, </span><br><span class=\"line\">            &quot;rusr&quot;: true, </span><br><span class=\"line\">            &quot;size&quot;: 8, </span><br><span class=\"line\">            &quot;uid&quot;: 0, </span><br><span class=\"line\">            &quot;wgrp&quot;: false, </span><br><span class=\"line\">            &quot;woth&quot;: false, </span><br><span class=\"line\">            &quot;wusr&quot;: true, </span><br><span class=\"line\">            &quot;xgrp&quot;: false, </span><br><span class=\"line\">            &quot;xoth&quot;: false, </span><br><span class=\"line\">            &quot;xusr&quot;: false</span><br><span class=\"line\">        &#125;, </span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            &quot;atime&quot;: 1587594824.9962718, </span><br><span class=\"line\">            &quot;ctime&quot;: 1587594824.9962718, </span><br><span class=\"line\">            &quot;dev&quot;: 64768, </span><br><span class=\"line\">            &quot;gid&quot;: 0, </span><br><span class=\"line\">            &quot;gr_name&quot;: &quot;root&quot;, </span><br><span class=\"line\">            &quot;inode&quot;: 50780729, </span><br><span class=\"line\">            &quot;isblk&quot;: false, </span><br><span class=\"line\">            &quot;ischr&quot;: false, </span><br><span class=\"line\">            &quot;isdir&quot;: false, </span><br><span class=\"line\">            &quot;isfifo&quot;: false, </span><br><span class=\"line\">            &quot;isgid&quot;: false, </span><br><span class=\"line\">            &quot;islnk&quot;: false, </span><br><span class=\"line\">            &quot;isreg&quot;: true, </span><br><span class=\"line\">            &quot;issock&quot;: false, </span><br><span class=\"line\">            &quot;isuid&quot;: false, </span><br><span class=\"line\">            &quot;mode&quot;: &quot;0644&quot;, </span><br><span class=\"line\">            &quot;mtime&quot;: 1587594824.9962718, </span><br><span class=\"line\">            &quot;nlink&quot;: 1, </span><br><span class=\"line\">            &quot;path&quot;: &quot;/home/yyg/find/find.txt&quot;, </span><br><span class=\"line\">            &quot;pw_name&quot;: &quot;root&quot;, </span><br><span class=\"line\">            &quot;rgrp&quot;: true, </span><br><span class=\"line\">            &quot;roth&quot;: true, </span><br><span class=\"line\">            &quot;rusr&quot;: true, </span><br><span class=\"line\">            &quot;size&quot;: 8, </span><br><span class=\"line\">            &quot;uid&quot;: 0, </span><br><span class=\"line\">            &quot;wgrp&quot;: false, </span><br><span class=\"line\">            &quot;woth&quot;: false, </span><br><span class=\"line\">            &quot;wusr&quot;: true, </span><br><span class=\"line\">            &quot;xgrp&quot;: false, </span><br><span class=\"line\">            &quot;xoth&quot;: false, </span><br><span class=\"line\">            &quot;xusr&quot;: false</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    ], </span><br><span class=\"line\">    &quot;matched&quot;: 2, </span><br><span class=\"line\">    &quot;msg&quot;: &quot;&quot;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">在test3主机的/home/yyg目录中查找以.sh结尾的文件，包括隐藏文件，但是不包括目录或其他文件类型，不会进行递归查找。</span><br><span class=\"line\">[root@zabbix ~]# ansible test3 -m find -a&#x27;paths=/home/yyg patterns=&quot;*.sh&quot; hidden=yes&#x27;</span><br><span class=\"line\">test3 | SUCCESS =&gt; &#123;</span><br><span class=\"line\">    &quot;ansible_facts&quot;: &#123;</span><br><span class=\"line\">        &quot;discovered_interpreter_python&quot;: &quot;/usr/bin/python&quot;</span><br><span class=\"line\">    &#125;, </span><br><span class=\"line\">    &quot;changed&quot;: false, </span><br><span class=\"line\">    &quot;examined&quot;: 17, </span><br><span class=\"line\">    &quot;files&quot;: [</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            &quot;atime&quot;: 1587595005.4002025, </span><br><span class=\"line\">            &quot;ctime&quot;: 1587595005.4002025, </span><br><span class=\"line\">            &quot;dev&quot;: 64768, </span><br><span class=\"line\">            &quot;gid&quot;: 0, </span><br><span class=\"line\">            &quot;gr_name&quot;: &quot;root&quot;, </span><br><span class=\"line\">            &quot;inode&quot;: 50780730, </span><br><span class=\"line\">            &quot;isblk&quot;: false, </span><br><span class=\"line\">            &quot;ischr&quot;: false, </span><br><span class=\"line\">            &quot;isdir&quot;: false, </span><br><span class=\"line\">            &quot;isfifo&quot;: false, </span><br><span class=\"line\">            &quot;isgid&quot;: false, </span><br><span class=\"line\">            &quot;islnk&quot;: false, </span><br><span class=\"line\">            &quot;isreg&quot;: true, </span><br><span class=\"line\">            &quot;issock&quot;: false, </span><br><span class=\"line\">            &quot;isuid&quot;: false, </span><br><span class=\"line\">            &quot;mode&quot;: &quot;0644&quot;, </span><br><span class=\"line\">            &quot;mtime&quot;: 1587595005.4002025, </span><br><span class=\"line\">            &quot;nlink&quot;: 1, </span><br><span class=\"line\">            &quot;path&quot;: &quot;/home/yyg/find.sh&quot;, </span><br><span class=\"line\">            &quot;pw_name&quot;: &quot;root&quot;, </span><br><span class=\"line\">            &quot;rgrp&quot;: true, </span><br><span class=\"line\">            &quot;roth&quot;: true, </span><br><span class=\"line\">            &quot;rusr&quot;: true, </span><br><span class=\"line\">            &quot;size&quot;: 0, </span><br><span class=\"line\">            &quot;uid&quot;: 0, </span><br><span class=\"line\">            &quot;wgrp&quot;: false, </span><br><span class=\"line\">            &quot;woth&quot;: false, </span><br><span class=\"line\">            &quot;wusr&quot;: true, </span><br><span class=\"line\">            &quot;xgrp&quot;: false, </span><br><span class=\"line\">            &quot;xoth&quot;: false, </span><br><span class=\"line\">            &quot;xusr&quot;: false</span><br><span class=\"line\">        &#125;, </span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            &quot;atime&quot;: 1587595141.808884, </span><br><span class=\"line\">            &quot;ctime&quot;: 1587595141.808884, </span><br><span class=\"line\">            &quot;dev&quot;: 64768, </span><br><span class=\"line\">            &quot;gid&quot;: 0, </span><br><span class=\"line\">            &quot;gr_name&quot;: &quot;root&quot;, </span><br><span class=\"line\">            &quot;inode&quot;: 50780731, </span><br><span class=\"line\">            &quot;isblk&quot;: false, </span><br><span class=\"line\">            &quot;ischr&quot;: false, </span><br><span class=\"line\">            &quot;isdir&quot;: false, </span><br><span class=\"line\">            &quot;isfifo&quot;: false, </span><br><span class=\"line\">            &quot;isgid&quot;: false, </span><br><span class=\"line\">            &quot;islnk&quot;: false, </span><br><span class=\"line\">            &quot;isreg&quot;: true, </span><br><span class=\"line\">            &quot;issock&quot;: false, </span><br><span class=\"line\">            &quot;isuid&quot;: false, </span><br><span class=\"line\">            &quot;mode&quot;: &quot;0644&quot;, </span><br><span class=\"line\">            &quot;mtime&quot;: 1587595141.808884, </span><br><span class=\"line\">            &quot;nlink&quot;: 1, </span><br><span class=\"line\">            &quot;path&quot;: &quot;/home/yyg/.find.sh&quot;, </span><br><span class=\"line\">            &quot;pw_name&quot;: &quot;root&quot;, </span><br><span class=\"line\">            &quot;rgrp&quot;: true, </span><br><span class=\"line\">            &quot;roth&quot;: true, </span><br><span class=\"line\">            &quot;rusr&quot;: true, </span><br><span class=\"line\">            &quot;size&quot;: 0, </span><br><span class=\"line\">            &quot;uid&quot;: 0, </span><br><span class=\"line\">            &quot;wgrp&quot;: false, </span><br><span class=\"line\">            &quot;woth&quot;: false, </span><br><span class=\"line\">            &quot;wusr&quot;: true, </span><br><span class=\"line\">            &quot;xgrp&quot;: false, </span><br><span class=\"line\">            &quot;xoth&quot;: false, </span><br><span class=\"line\">            &quot;xusr&quot;: false</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    ], </span><br><span class=\"line\">    &quot;matched&quot;: 2, </span><br><span class=\"line\">    &quot;msg&quot;: &quot;&quot;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"replace\"><a href=\"#replace\" class=\"headerlink\" title=\"replace\"></a>replace</h3><p>根据指定的正则表达式替换文件中所有匹配的内容。<br><strong>path</strong>：必须参数，指定要操作的文件<br><strong>regexp</strong>：必须参数，指定一个表达式。<br><strong>replace</strong>：指定最终替换成的字符串<br><strong>backup</strong>：修改前是否进行备份  </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@zabbix ~]# ansible test3 -m replace -a&#x27;path=/home/yyg/find.txt regexp=&quot;abc&quot; replace=&quot;ABC&quot;&#x27;</span><br><span class=\"line\">test3 | CHANGED =&gt; &#123;</span><br><span class=\"line\">    &quot;ansible_facts&quot;: &#123;</span><br><span class=\"line\">        &quot;discovered_interpreter_python&quot;: &quot;/usr/bin/python&quot;</span><br><span class=\"line\">    &#125;, </span><br><span class=\"line\">    &quot;changed&quot;: true, </span><br><span class=\"line\">    &quot;msg&quot;: &quot;1 replacements made&quot;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"命令模块\"><a href=\"#命令模块\" class=\"headerlink\" title=\"命令模块\"></a>命令模块</h2><h3 id=\"command\"><a href=\"#command\" class=\"headerlink\" title=\"command\"></a>command</h3><p>在远程主机上执行命令，命令不会经过shell处理，例如<strong>指定的命令中含有重定向、管道等，这些字符就会失效</strong>。<br><strong>chdir</strong>：指定一个目录，命令会在该目录下执行<br><strong>creates</strong>：指定一个文件，当文件存在时不执行命令<br><strong>removes</strong>：指定一个文件，当文件不存在时不执行命令  </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">test3下/home/yyg目录下有testfile，当这个文件存在时，在/home/yyg目录下执行命令ll  </span><br><span class=\"line\">[root@zabbix ~]# ansible test3 -m command -a&#x27;chdir=/home/yyg removes=testfile ls -l&#x27;</span><br><span class=\"line\">test3 | CHANGED | rc=0 &gt;&gt;</span><br><span class=\"line\">总用量 0</span><br><span class=\"line\">-rw-r--r-- 1 root root 0 4月  23 06:58 testfile</span><br><span class=\"line\"></span><br><span class=\"line\">[root@zabbix ~]# ansible test3 -m command -a&#x27;chdir=/home/yyg creates=testfile ls -l&#x27;</span><br><span class=\"line\">test3 | SUCCESS | rc=0 &gt;&gt;</span><br><span class=\"line\">skipped, since testfile exists</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"shell\"><a href=\"#shell\" class=\"headerlink\" title=\"shell\"></a>shell</h3><p>在远程主机上执行命令，shell模块在远程主机中执行命令时，会经过远程主机上的/bin/sh程序处理，所以可以使用管道、重定向<br><strong>chdir</strong>：指定一个目录，命令会在该目录下执行<br><strong>creates</strong>：指定一个文件，当文件存在时不执行命令<br><strong>removes</strong>：指定一个文件，当文件不存在时不执行命令  </p>\n<h3 id=\"script\"><a href=\"#script\" class=\"headerlink\" title=\"script\"></a>script</h3><p>在远程主机上执行ansible主机上的脚本，不需要手动拷贝到远程主机后再执行<br><strong>chdir</strong>：指定一个目录，命令会在该目录下执行<br><strong>creates</strong>：指定一个文件，当文件存在时不执行命令<br><strong>removes</strong>：指定一个文件，当文件不存在时不执行命令  </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">在test3的/home/yyg 目录下执行ansible主机上的/home/script.sh</span><br><span class=\"line\">ansible test3 -m script -a&#x27;/home/script.sh chdir=&quot;/home/yyg&quot;&#x27;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"系统类型模块\"><a href=\"#系统类型模块\" class=\"headerlink\" title=\"系统类型模块\"></a>系统类型模块</h2><h3 id=\"cron\"><a href=\"#cron\" class=\"headerlink\" title=\"cron\"></a>cron</h3><p>相当于crontab命令。<br>【时间参数，默认情况下是*】<br><strong>minute</strong>：定时执行中的分钟<br><strong>hour</strong>：小时<br><strong>day</strong>：日<br><strong>month</strong>：月<br><strong>weekday</strong>：星期  </p>\n<hr>\n<p><strong>special_time</strong>：特殊时间用以替换定时的时间，reboot(重启后)、yearly(每年)、annually(每年，与yearly相同)、monthly(每月)、weekly(每周)、daily(每天)、hourly(每时)<br><strong>user</strong>：执行定时任务的用户<br><strong>job</strong>：指定定时执行的命令或者脚本<br><strong>name</strong>：指定定时任务的名称，会在注释中显示<br><strong>state</strong>：当计划任务有名称时，我们可以根据名称修改或删除对应的任务，当删除计划任务时，需要将state的值设置为absent<br><strong>disabled</strong>：可以根据任务名将定时任务取消（即注释），也要将任务的job和设定的时间写准确，否则例如，当时间写错误时，被注释的任务时间将被改为写错的时间<br><strong>backup</strong>：参数yes、no（默认），在修改定时任务时备份原定时任务清单，在/tmp目录下创建备份文件。  </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">在test3主机上创建计划任务，任务名称为&quot;test special time&quot;，任务将在重启时执行，任务内容为输出test字符</span><br><span class=\"line\">ansible test3 -m cron -a&#x27;special_time=reboot name=&quot;test special time&quot; job=&quot;echo test&quot;&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">[root@test3 yyg]# crontab -l</span><br><span class=\"line\">#Ansible: test special time</span><br><span class=\"line\">@reboot echo test</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"service\"><a href=\"#service\" class=\"headerlink\" title=\"service\"></a>service</h3><p>管理远程主机上的服务。<br><strong>name</strong>：指定服务名<br><strong>state</strong>：要将服务设定的状态started、stopped、restarted、reloaded<br><strong>enabled</strong>：是否设置为开启启动，参数yes、no  </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">将test3上的firewalld服务关闭，并设置为开启不启动 </span><br><span class=\"line\">ansible test3 -m service -a&#x27;name=firewalld state=stopped enabled=no&#x27;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"用户、组模块\"><a href=\"#用户、组模块\" class=\"headerlink\" title=\"用户、组模块\"></a>用户、组模块</h2><h3 id=\"user\"><a href=\"#user\" class=\"headerlink\" title=\"user\"></a>user</h3><p>管理远程主机上的用户<br><strong>name</strong>：必须参数，指定用户名<br><strong>home</strong>：指定用户的家目录<br><strong>group</strong>：指定用户的数组<br><strong>groups</strong>：指定用户的附加组。当用户原已有附加组，需要在此基础上添加时需要配合append参数使用，否则将会将原附加组覆盖，而不是添加<br><strong>append</strong>：将groups参数提供的附加组，增添到用户的附加组中<br><strong>shell</strong>：指定用户的默认shell<br><strong>uid</strong>：指定用户的UID<br><strong>state</strong>：参数present创建（默认）、absent，absent表示将用户删除<br><strong>remove</strong>：当state=absent remove=yes时，表示将用户以及将用户的家目录进行删除  </p>\n<h3 id=\"group\"><a href=\"#group\" class=\"headerlink\" title=\"group\"></a>group</h3><p>管理远程主机上的组<br><strong>name</strong>：必须参数，指定组<br><strong>state</strong>：present，absent，absent表示将组删除<br><strong>gid</strong>：用于指定组的gid  </p>\n<h2 id=\"包管理模块\"><a href=\"#包管理模块\" class=\"headerlink\" title=\"包管理模块\"></a>包管理模块</h2><h3 id=\"yum-repository\"><a href=\"#yum-repository\" class=\"headerlink\" title=\"yum_repository\"></a>yum_repository</h3><p>管理远程主机上的yum仓库<br><strong>name</strong>:必须参数，用于指定要操作的唯一仓库的ID，也就是每个仓库对应的”中括号”内的仓库ID<br><strong>baseurl</strong>：用于设置yum仓库的baseurl<br><strong>description</strong>：此参数用于设置仓库的注释信息，也就是”.repo”配置文件中每个仓库对应的”name字段”对应的内容。<br><strong>file</strong>：此参数用于设置仓库的配置文件名称，即设置”.repo”配置文件的文件名前缀，在不使用此参数的情况下，默认以name参数的仓库ID作为”.repo”配置文件的文件名前缀，同一个’.repo’配置文件中可以存在多个yum源<br><strong>enabled</strong>：此参数用于设置是否激活对应的yum源，此参数默认值为yes，表示启用对应的yum源，设置为no表示不启用对应的yum源。<br><strong>gpgcheck</strong>：此参数用于设置是否开启rpm包验证功能，默认值为no，表示不启用包验证，设置为yes表示开启包验证功能。<br><strong>gpgcakey</strong>：当gpgcheck参数设置为yes时，需要使用此参数指定验证包所需的公钥<br><strong>state</strong>：默认值为present，当值设置为absent时，表示删除对应的yum源  </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">#使用如下命令在test3主机上设置ID为test的yum源，仓库配置文件路径为/etc/yum.repos.d/aliEpel.repo</span><br><span class=\"line\">ansible test3 -m yum_repository -a&#x27;name=test description=test baseurl=http://mirrors.aliyun.com/centos/$releasever/os/$basearch/&#x27;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"yum\"><a href=\"#yum\" class=\"headerlink\" title=\"yum\"></a>yum</h3><p>在远程主机上通过yum源管理软件包<br><strong>name</strong>:必须参数，用于指定需要管理的软件包<br><strong>state</strong>:指定软件包的状态；present（默认值）、installed、latest、absent、removed，其中installed与present等效，latest表示安装yum中最新的版本，absent和removed等效，表示删除对应的软件包<br><strong>enablerepo</strong>：用于指定安装软件包时临时启用的yum源，即使该yum源在没有启用的情况下<br><strong>disablerepo</strong>：用于临时禁用yum源<br><strong>disable_gpg_check</strong>：用于对rpm包的公钥gpg验证，默认为no，表示不用验证，直接安装；在对应yum源没有开启gpgcheck情况下需将该参数设置为yes，否则会报错无法进行安装  </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">#在test3上安装nginx</span><br><span class=\"line\">ansible test3 -m yum -a&#x27;name=nginx&#x27;s</span><br></pre></td></tr></table></figure>","categories":["ansible"],"tags":["Ad-Hoc命令集"]},{"title":"6-K8S核心技术Controller","url":"/2022/07/01/K8s/6-K8S%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AFController/","content":"<p><img src=\"https://s2.loli.net/2022/06/27/5UbYtS64yAIPXzM.jpg\" alt=\"k8s.jpg\">  </p>\n<span id=\"more\"></span>\n<h1 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念\"></a>概念</h1><p>k8s通常不会直接创建pod，而是通过controller来管理pod，controller中定义了pod的部署特性，为对应不同场景，k8s提供了多种controller。  </p>\n<ol>\n<li><p><strong>ReplicationController(RC)</strong> ：上一代无状态pod应用控制器，不建议使用，建议使用Deployment、ReplicaSet来取代  </p>\n</li>\n<li><p><strong>ReplicaSet(RS)</strong> ：新一代的ReplicationController实现了pod的多副本管理，使用Deployment时会自动创建ReplicaSet，也就是说Deployment是通过ReplicaSet来管理pod的多个副本，通常不使用ReplicaSet，而是通过Deployment去使用ReplicaSet(ReplicaSet不支持滚动更新，但是Deployment支持)  </p>\n</li>\n<li><p><strong>Deployment(deploy)</strong> ：用于管理无状态应用，是构建在ReplicaSet之上的，更为高级的控制器  </p>\n</li>\n<li><p><strong>StatefuleSet(sts)</strong> ：用于管理有状态应用，如数据库服务程序，与Deployment不同的是StatefulSet会为每一个pod创建一个独有的持久性标识，并确保pod间的顺序。有序收缩、有序删除  </p>\n</li>\n<li><p><strong>DeamonSet(ds)</strong> ：用于确保每一个节点都运行了某pod的一个副本，包括后来新增的节点，节点移除则导致pod回收。  </p>\n</li>\n<li><p><strong>job</strong> ：用于管理运行完成后即可终止的应用。  </p>\n</li>\n<li><p><strong>cronjob</strong> ：用于管理定时反复执行的任务  </p>\n</li>\n</ol>\n<h2 id=\"Deployment（deploy）\"><a href=\"#Deployment（deploy）\" class=\"headerlink\" title=\"Deployment（deploy）\"></a>Deployment（deploy）</h2><h3 id=\"创建deployment\"><a href=\"#创建deployment\" class=\"headerlink\" title=\"创建deployment\"></a>创建deployment</h3><p>更多参数查看<a href=\"https://kubernetes.io/docs/reference/kubernetes-api/workload-resources/deployment-v1/\">官方api文档</a><br>编辑</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">apps/v1</span>   <span class=\"comment\"># Deployment所在的api</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Deployment</span>      <span class=\"comment\"># 资源类型</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">nginx-deployment</span>  <span class=\"comment\"># deployment名</span></span><br><span class=\"line\">  <span class=\"attr\">labels:</span>                 <span class=\"comment\"># deployment标签</span></span><br><span class=\"line\">    <span class=\"attr\">app:</span> <span class=\"string\">nginx</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span>                       <span class=\"comment\">#</span></span><br><span class=\"line\">  <span class=\"attr\">replicas:</span> <span class=\"number\">3</span>               <span class=\"comment\"># pod资源副本数</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span>                 <span class=\"comment\"># 管理pod的标签</span></span><br><span class=\"line\">    <span class=\"attr\">matchLabels:</span>            <span class=\"comment\"># 相当于使用matchExpressions &#123;key: app, operator: In, values: nginx&#125;</span></span><br><span class=\"line\">      <span class=\"attr\">app:</span> <span class=\"string\">nginx</span></span><br><span class=\"line\">  <span class=\"attr\">template:</span>                 <span class=\"comment\"># 定义要创建的pod</span></span><br><span class=\"line\">    <span class=\"attr\">metadata:</span>               <span class=\"comment\"># pod的元数据</span></span><br><span class=\"line\">      <span class=\"attr\">labels:</span>               <span class=\"comment\"># pod的标签</span></span><br><span class=\"line\">        <span class=\"attr\">app:</span> <span class=\"string\">nginx</span></span><br><span class=\"line\">    <span class=\"attr\">spec:</span></span><br><span class=\"line\">      <span class=\"attr\">containers:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">nginx</span></span><br><span class=\"line\">        <span class=\"attr\">image:</span> <span class=\"string\">nginx:1.14.2</span></span><br><span class=\"line\">        <span class=\"attr\">ports:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">containerPort:</span> <span class=\"number\">80</span>   <span class=\"comment\">#指定要暴露的端口</span></span><br></pre></td></tr></table></figure>\n<p>使用以上yaml创建nginx-deployment.yaml文件  </p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">~]#</span><span class=\"bash\"> kubectl apply -f nginx-deployment.yaml   <span class=\"comment\"># 使用nginx-deployment.yaml创建deployment</span></span></span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">~]#</span><span class=\"bash\"> kubectl get deploy</span></span><br><span class=\"line\">NAME               READY        UP-TO-DATE   AVAILABLE   AGE</span><br><span class=\"line\">nginx-deployment   3/3          3            3           15m</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">~]#</span><span class=\"bash\"> kubectl rollout status deployment/nginx-deployment   <span class=\"comment\">#查看nginx-deployment deployment发布状态</span></span></span><br><span class=\"line\">deployment &quot;nginx-deployment&quot; successfully rolled out</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">~]#</span><span class=\"bash\"> kubectl get pod,rs -o wide --show-labels  <span class=\"comment\">#查看由deployment创建的pod、replicaSet</span></span></span><br><span class=\"line\">NAME                                    READY   STATUS    RESTARTS   AGE   IP            NODE         NOMINATED NODE   READINESS GATES   LABELS</span><br><span class=\"line\">pod/nginx-deployment-7fd6966748-bhlxj   1/1     Running   0          29m   10.244.2.8    k8s-node02   &lt;none&gt;           &lt;none&gt;            app=nginx,pod-template-hash=7fd6966748</span><br><span class=\"line\">pod/nginx-deployment-7fd6966748-m85w9   1/1     Running   0          29m   10.244.1.11   k8s-node01   &lt;none&gt;           &lt;none&gt;            app=nginx,pod-template-hash=7fd6966748</span><br><span class=\"line\">pod/nginx-deployment-7fd6966748-sx54r   1/1     Running   0          29m   10.244.2.9    k8s-node02   &lt;none&gt;           &lt;none&gt;            app=nginx,pod-template-hash=7fd6966748</span><br><span class=\"line\"></span><br><span class=\"line\">NAME                                                DESIRED   CURRENT   READY   AGE   CONTAINERS   IMAGES         SELECTOR                                 LABELS</span><br><span class=\"line\">replicaset.extensions/nginx-deployment-7fd6966748   3         3         3       29m   nginx        nginx:1.14.2   app=nginx,pod-template-hash=7fd6966748   app=nginx,pod-template-hash=7fd6966748</span><br></pre></td></tr></table></figure>\n<p>pod-template-hash标签是由spec.template（PodTemplate）生成的hash值，这个标签添加到由deployment生成的pod、ReplicaSet中  </p>\n<h3 id=\"更新Deployment\"><a href=\"#更新Deployment\" class=\"headerlink\" title=\"更新Deployment\"></a>更新Deployment</h3><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">~]#</span><span class=\"bash\"> kubectl <span class=\"built_in\">set</span> image deployment/nginx-deployment nginx=nginx:1.16.1   <span class=\"comment\">#将nginx版本由创建时的1.14.2版本改为1.16.1</span></span></span><br><span class=\"line\">deployment.extensions/nginx-deployment image updated</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">~]#</span><span class=\"bash\"> kubectl edit deployment/nginx-deployment  <span class=\"comment\">#使用编辑器直接修改nginx的版本</span></span></span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">~]#</span><span class=\"bash\"> kubectl rollout status deployment/nginx-deployment   <span class=\"comment\">#查看nginx-deployment deployment发布状态</span></span></span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">~]#</span><span class=\"bash\"> kubectl get rs         <span class=\"comment\"># 可以发现新的rs扩容到3个，并将旧rs缩容到0个</span></span></span><br><span class=\"line\">NAME                          DESIRED   CURRENT   READY   AGE</span><br><span class=\"line\">nginx-deployment-6f9d665859   3         3         3       8h</span><br><span class=\"line\">nginx-deployment-7fd6966748   0         0         0       9h</span><br></pre></td></tr></table></figure>\n<p>deployment更新的过程类似于，先创建一个新的rs，等待就绪后，将旧rs缩容到2，也就是创建一个新的，缩容一个旧的，直到新的rs扩容为3，旧的rs缩容为0。  </p>\n<h4 id=\"Rollover\"><a href=\"#Rollover\" class=\"headerlink\" title=\"Rollover\"></a>Rollover</h4><p>Deployment每次更新都会创建新的rs、pod，当Deployment正在更新时再次被更新，正在扩容的rs将被当做为旧rs，然后在进行滚动更新。<br>例如：当Deployment正在创建5个nginx:1.14.2的副本，在创建了3个的时候将nginx改为nginx:1.16.1，这个时候刚创建的3个将被杀死，并开始创建新的副本，不会等待nginx:1.14.2创建完成后在进行更新  </p>\n<h4 id=\"Deployment标签不可变\"><a href=\"#Deployment标签不可变\" class=\"headerlink\" title=\"Deployment标签不可变\"></a>Deployment标签不可变</h4><p>在 API 版本 apps/v1 中，Deployment 标签选择算符在创建后是不可变的。</p>\n<h3 id=\"回滚Deployment\"><a href=\"#回滚Deployment\" class=\"headerlink\" title=\"回滚Deployment\"></a>回滚Deployment</h3><p>Deployment的所有上线记录都会保留在系统中，以便随时回滚。  </p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">~]#</span><span class=\"bash\"> kubectl rollout <span class=\"built_in\">history</span> deployment/nginx-deployment  <span class=\"comment\"># 查看deployment/nginx-deployment历史本本</span></span></span><br><span class=\"line\">deployment.extensions/nginx-deployment</span><br><span class=\"line\">REVISION  CHANGE-CAUSE</span><br><span class=\"line\">3         &lt;none&gt;</span><br><span class=\"line\">4         &lt;none&gt;</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 可以看到有两个历史版本，但是change-cause是空，CHANGE-CAUSE 的内容是从 Deployment 的 kubernetes.io/change-cause 注解复制过来的。</span></span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">~]#</span><span class=\"bash\"> kubectl annotate deployment/nginx-deployment kubernetes.io/change-cause=<span class=\"string\">&quot;image updated to 1.16.1&quot;</span></span>   </span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">当前nginx版本为1.16.1，为change-cause设定</span></span><br><span class=\"line\">deployment.extensions/nginx-deployment annotated</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">~]#</span><span class=\"bash\"> kubectl rollout <span class=\"built_in\">history</span> deployment/nginx-deployment</span></span><br><span class=\"line\">deployment.extensions/nginx-deployment</span><br><span class=\"line\">REVISION  CHANGE-CAUSE</span><br><span class=\"line\">3         &lt;none&gt;</span><br><span class=\"line\">4         image updated to 1.16.1</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">~]#</span><span class=\"bash\"> kubectl rollout <span class=\"built_in\">history</span> deployment/nginx-deployment --revision=4  <span class=\"comment\">#查看对应版本的详细记录</span></span></span><br><span class=\"line\">deployment.extensions/nginx-deployment with revision #4</span><br><span class=\"line\">Pod Template:</span><br><span class=\"line\">  Labels:       app=nginx</span><br><span class=\"line\">        pod-template-hash=6f9d665859</span><br><span class=\"line\">  Annotations:  kubernetes.io/change-cause: image updated to 1.16.1</span><br><span class=\"line\">  Containers:</span><br><span class=\"line\">   nginx:</span><br><span class=\"line\">    Image:      nginx:1.16.1</span><br><span class=\"line\">    Port:       80/TCP</span><br><span class=\"line\">    Host Port:  0/TCP</span><br><span class=\"line\">    Environment:        &lt;none&gt;</span><br><span class=\"line\">    Mounts:     &lt;none&gt;</span><br><span class=\"line\">  Volumes:      &lt;none&gt;</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">~]#</span><span class=\"bash\"> kubectl rollout undo deployment/nginx-deployment --to-revision=3  <span class=\"comment\">#回滚到版本3</span></span></span><br><span class=\"line\">deployment.extensions/nginx-deployment rolled back</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">~]#</span><span class=\"bash\"> kubectl describe deploy nginx-deployment  <span class=\"comment\">#查看当前nginx-deployment描述信息</span></span></span><br><span class=\"line\">Name:                   nginx-deployment</span><br><span class=\"line\">Namespace:              default</span><br><span class=\"line\">CreationTimestamp:      Sat, 02 Jul 2022 21:56:47 +0800</span><br><span class=\"line\">Labels:                 app=nginx</span><br><span class=\"line\">Annotations:            deployment.kubernetes.io/revision: 5</span><br><span class=\"line\">                        kubectl.kubernetes.io/last-applied-configuration:</span><br><span class=\"line\">                          &#123;&quot;apiVersion&quot;:&quot;apps/v1&quot;,&quot;kind&quot;:&quot;Deployment&quot;,&quot;metadata&quot;:&#123;&quot;annotations&quot;:&#123;&#125;,&quot;labels&quot;:&#123;&quot;app&quot;:&quot;nginx&quot;&#125;,&quot;name&quot;:&quot;nginx-deployment&quot;,&quot;namespace&quot;:&quot;d...</span><br><span class=\"line\">Selector:               app=nginx</span><br><span class=\"line\">Replicas:               3 desired | 3 updated | 3 total | 3 available | 0 unavailable</span><br><span class=\"line\">StrategyType:           RollingUpdate</span><br><span class=\"line\">MinReadySeconds:        0</span><br><span class=\"line\">RollingUpdateStrategy:  25% max unavailable, 25% max surge</span><br><span class=\"line\">Pod Template:</span><br><span class=\"line\">  Labels:  app=nginx</span><br><span class=\"line\">  Containers:</span><br><span class=\"line\">   nginx:</span><br><span class=\"line\">    Image:        nginx:1.14.2</span><br><span class=\"line\">    Port:         80/TCP</span><br><span class=\"line\">    Host Port:    0/TCP</span><br><span class=\"line\">    Environment:  &lt;none&gt;</span><br><span class=\"line\">    Mounts:       &lt;none&gt;</span><br><span class=\"line\">  Volumes:        &lt;none&gt;</span><br><span class=\"line\">Conditions:</span><br><span class=\"line\">  Type           Status  Reason</span><br><span class=\"line\">  ----           ------  ------</span><br><span class=\"line\">  Available      True    MinimumReplicasAvailable</span><br><span class=\"line\">  Progressing    True    NewReplicaSetAvailable</span><br><span class=\"line\">OldReplicaSets:  &lt;none&gt;</span><br><span class=\"line\">NewReplicaSet:   nginx-deployment-7fd6966748 (3/3 replicas created)</span><br><span class=\"line\">Events:</span><br><span class=\"line\">  Type    Reason             Age                From                   Message</span><br><span class=\"line\">  ----    ------             ----               ----                   -------</span><br><span class=\"line\">  Normal  ScalingReplicaSet  66s (x2 over 11h)  deployment-controller  Scaled up replica set nginx-deployment-7fd6966748 to 1</span><br><span class=\"line\">  Normal  ScalingReplicaSet  63s (x2 over 11h)  deployment-controller  Scaled down replica set nginx-deployment-6f9d665859 to 2</span><br><span class=\"line\">  Normal  ScalingReplicaSet  63s (x2 over 11h)  deployment-controller  Scaled up replica set nginx-deployment-7fd6966748 to 2</span><br><span class=\"line\">  Normal  ScalingReplicaSet  61s (x2 over 12h)  deployment-controller  Scaled up replica set nginx-deployment-7fd6966748 to 3</span><br><span class=\"line\">  Normal  ScalingReplicaSet  61s                deployment-controller  Scaled down replica set nginx-deployment-6f9d665859 to 1</span><br><span class=\"line\">  Normal  ScalingReplicaSet  59s                deployment-controller  Scaled down replica set nginx-deployment-6f9d665859 to 0</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"弹性伸缩\"><a href=\"#弹性伸缩\" class=\"headerlink\" title=\"弹性伸缩\"></a>弹性伸缩</h3><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">~]#</span><span class=\"bash\"> kubectl scale deployment/nginx-deployment --replicas=2  <span class=\"comment\">#将deployment的副本数调整为2</span></span></span><br><span class=\"line\">deployment.extensions/nginx-deployment scaled</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"暂停与恢复上线\"><a href=\"#暂停与恢复上线\" class=\"headerlink\" title=\"暂停与恢复上线\"></a>暂停与恢复上线</h3><p>在deployment上线过程中可以将此过程进行暂停以及恢复，可以在暂停期间进行修改，暂停之前的状态将继续发挥作用，新的更新在暂停期间不会发挥任何作用。暂停期间不能进行回滚  </p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">~]#</span><span class=\"bash\"> kubectl rollout pause deployment/nginx-deployment  <span class=\"comment\">#暂停</span></span></span><br><span class=\"line\">deployment.extensions/nginx-deployment paused</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">~]#</span><span class=\"bash\"> kubectl rollout resume  deployment/nginx-deployment  <span class=\"comment\">#恢复</span></span></span><br><span class=\"line\">deployment.extensions/nginx-deployment resumed</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"deployment状态\"><a href=\"#deployment状态\" class=\"headerlink\" title=\"deployment状态\"></a>deployment状态</h3><p>查看当前状态</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">~]#</span><span class=\"bash\"> kubectl describe deploy nginx-deployment</span></span><br><span class=\"line\">Name:                   nginx-deployment</span><br><span class=\"line\">Namespace:              default</span><br><span class=\"line\">CreationTimestamp:      Sat, 02 Jul 2022 21:56:47 +0800</span><br><span class=\"line\">Labels:                 app=nginx</span><br><span class=\"line\">Annotations:            deployment.kubernetes.io/revision: 5</span><br><span class=\"line\">                        kubectl.kubernetes.io/last-applied-configuration:</span><br><span class=\"line\">                          &#123;&quot;apiVersion&quot;:&quot;apps/v1&quot;,&quot;kind&quot;:&quot;Deployment&quot;,&quot;metadata&quot;:&#123;&quot;annotations&quot;:&#123;&#125;,&quot;labels&quot;:&#123;&quot;app&quot;:&quot;nginx&quot;&#125;,&quot;name&quot;:&quot;nginx-deployment&quot;,&quot;namespace&quot;:&quot;d...</span><br><span class=\"line\">Selector:               app=nginx</span><br><span class=\"line\">Replicas:               2 desired | 2 updated | 2 total | 2 available | 0 unavailable</span><br><span class=\"line\">StrategyType:           RollingUpdate</span><br><span class=\"line\">MinReadySeconds:        0</span><br><span class=\"line\">RollingUpdateStrategy:  25% max unavailable, 25% max surge</span><br><span class=\"line\">Pod Template:</span><br><span class=\"line\">  Labels:  app=nginx</span><br><span class=\"line\">  Containers:</span><br><span class=\"line\">   nginx:</span><br><span class=\"line\">    Image:        nginx:1.14.2</span><br><span class=\"line\">    Port:         80/TCP</span><br><span class=\"line\">    Host Port:    0/TCP</span><br><span class=\"line\">    Environment:  &lt;none&gt;</span><br><span class=\"line\">    Mounts:       &lt;none&gt;</span><br><span class=\"line\">  Volumes:        &lt;none&gt;</span><br><span class=\"line\">Conditions:</span><br><span class=\"line\">  Type           Status  Reason</span><br><span class=\"line\">  ----           ------  ------</span><br><span class=\"line\">  Available      True    MinimumReplicasAvailable</span><br><span class=\"line\">  Progressing    True    NewReplicaSetAvailable</span><br><span class=\"line\">OldReplicaSets:  &lt;none&gt;</span><br><span class=\"line\">NewReplicaSet:   nginx-deployment-7fd6966748 (2/2 replicas created)</span><br><span class=\"line\">Events:</span><br><span class=\"line\">  Type    Reason             Age                From                   Message</span><br><span class=\"line\">  ----    ------             ----               ----                   -------</span><br><span class=\"line\">  Normal  ScalingReplicaSet  50m (x2 over 12h)  deployment-controller  Scaled up replica set nginx-deployment-7fd6966748 to 1</span><br><span class=\"line\">  Normal  ScalingReplicaSet  50m (x2 over 12h)  deployment-controller  Scaled down replica set nginx-deployment-6f9d665859 to 2</span><br><span class=\"line\">  Normal  ScalingReplicaSet  50m (x2 over 12h)  deployment-controller  Scaled up replica set nginx-deployment-7fd6966748 to 2</span><br><span class=\"line\">  Normal  ScalingReplicaSet  50m (x2 over 13h)  deployment-controller  Scaled up replica set nginx-deployment-7fd6966748 to 3</span><br><span class=\"line\">  Normal  ScalingReplicaSet  50m                deployment-controller  Scaled down replica set nginx-deployment-6f9d665859 to 1</span><br><span class=\"line\">  Normal  ScalingReplicaSet  50m                deployment-controller  Scaled down replica set nginx-deployment-6f9d665859 to 0</span><br><span class=\"line\">  Normal  ScalingReplicaSet  46m (x3 over 12h)  deployment-controller  Scaled down replica set nginx-deployment-7fd6966748 to 2</span><br></pre></td></tr></table></figure>\n<p>deployment有三种运行状态， Progressing（进行中）、 Complete（已完成）、 Failed（失败），该状态会被添加到conditions中  </p>\n<h4 id=\"Progressing（进行中）\"><a href=\"#Progressing（进行中）\" class=\"headerlink\" title=\"Progressing（进行中）\"></a>Progressing（进行中）</h4><ul>\n<li>type: Progressing</li>\n<li>status: “True”</li>\n<li>reason: NewReplicaSetCreated | reason: FoundNewReplicaSet | reason: ReplicaSetUpdated</li>\n</ul>\n<h4 id=\"Complete（已完成）\"><a href=\"#Complete（已完成）\" class=\"headerlink\" title=\"Complete（已完成）\"></a>Complete（已完成）</h4><ul>\n<li>type: Progressing</li>\n<li>status: True</li>\n<li>reason: NewReplicaSetAvailable</li>\n</ul>\n<p>Progressing 会一直持续为true，即使副本的可用状态有变化，Progressing状态也不会发生变化  </p>\n<h4 id=\"Failed（失败）\"><a href=\"#Failed（失败）\" class=\"headerlink\" title=\"Failed（失败）\"></a>Failed（失败）</h4><p>检测该状态的方法是在deployment的资源清单中加入截止时间参数.spec.progressDeadlineSeconds。超过该参数设定的时间范围将会把deployment的状态发送到conditions中  </p>\n<ul>\n<li>Type=Progressing</li>\n<li>Status=False</li>\n<li>Reason=ProgressDeadlineExceeded</li>\n</ul>\n<h3 id=\"deployment-yaml参数介绍\"><a href=\"#deployment-yaml参数介绍\" class=\"headerlink\" title=\"deployment yaml参数介绍\"></a>deployment yaml参数介绍</h3><p>相关参数查看官方文档<a href=\"https://kubernetes.io/docs/reference/kubernetes-api/workload-resources/deployment-v1/\">deployment API</a>、<a href=\"https://kubernetes.io/zh-cn/docs/reference/kubernetes-api/common-definitions/object-meta/\">公共定义ObjectMeta</a>、<a href=\"https://kubernetes.io/docs/reference/kubernetes-api/workload-resources/pod-v1/\">pod API</a>  </p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">extensions/v1beta1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Deployment</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">annotations:</span></span><br><span class=\"line\">    <span class=\"attr\">deployment.kubernetes.io/revision:</span> <span class=\"string\">&quot;5&quot;</span>   <span class=\"comment\">#当前deployment版本序号</span></span><br><span class=\"line\">    <span class=\"attr\">kubectl.kubernetes.io/last-applied-configuration:</span> <span class=\"string\">|</span></span><br><span class=\"line\"><span class=\"string\">      &#123;&quot;apiVersion&quot;:&quot;apps/v1&quot;,&quot;kind&quot;:&quot;Deployment&quot;,&quot;metadata&quot;:&#123;&quot;annotations&quot;:&#123;&#125;,&quot;labels&quot;:&#123;&quot;app&quot;:&quot;nginx&quot;&#125;,&quot;name&quot;:&quot;nginx-deployment&quot;,&quot;namespace&quot;:&quot;default&quot;&#125;,&quot;spec&quot;:&#123;&quot;replicas&quot;:3,&quot;selector&quot;:&#123;&quot;matchLabels&quot;:</span></span><br><span class=\"line\"><span class=\"string\"></span>&#123;<span class=\"string\">&quot;app&quot;</span><span class=\"string\">:&quot;nginx&quot;</span>&#125;<span class=\"string\">&#125;,&quot;template&quot;:&#123;&quot;metadata&quot;:&#123;&quot;labels&quot;:&#123;&quot;app&quot;:&quot;nginx&quot;&#125;&#125;,&quot;spec&quot;:&#123;&quot;containers&quot;:[&#123;&quot;image&quot;:&quot;nginx:1.14.2&quot;,&quot;name&quot;:&quot;nginx&quot;,&quot;ports&quot;:[&#123;&quot;containerPort&quot;:80&#125;]&#125;]&#125;&#125;&#125;&#125;</span></span><br><span class=\"line\">  <span class=\"attr\">creationTimestamp:</span> <span class=\"string\">&quot;2022-07-02T13:56:47Z&quot;</span>  </span><br><span class=\"line\">  <span class=\"attr\">generation:</span> <span class=\"number\">9</span></span><br><span class=\"line\">  <span class=\"attr\">labels:</span></span><br><span class=\"line\">    <span class=\"attr\">app:</span> <span class=\"string\">nginx</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">nginx-deployment</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">default</span></span><br><span class=\"line\">  <span class=\"attr\">resourceVersion:</span> <span class=\"string\">&quot;155887&quot;</span></span><br><span class=\"line\">  <span class=\"attr\">selfLink:</span> <span class=\"string\">/apis/extensions/v1beta1/namespaces/default/deployments/nginx-deployment</span></span><br><span class=\"line\">  <span class=\"attr\">uid:</span> <span class=\"string\">9d3bea0f-dfd8-4787-9448-b2e91e46e4a8</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">progressDeadlineSeconds:</span> <span class=\"number\">600</span>   <span class=\"comment\">#进行状态截止时间</span></span><br><span class=\"line\">  <span class=\"attr\">replicas:</span> <span class=\"number\">2</span>                    <span class=\"comment\">#副本数</span></span><br><span class=\"line\">  <span class=\"attr\">revisionHistoryLimit:</span> <span class=\"number\">10</span>       <span class=\"comment\">#历史版本保存数量</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span></span><br><span class=\"line\">    <span class=\"attr\">matchLabels:</span></span><br><span class=\"line\">      <span class=\"attr\">app:</span> <span class=\"string\">nginx</span></span><br><span class=\"line\">  <span class=\"attr\">strategy:</span>                     <span class=\"comment\">#pod更新策略，有rollingUpdate与Recreate（创建新pod前会将所有pod先杀死）两种</span></span><br><span class=\"line\">    <span class=\"attr\">rollingUpdate:</span></span><br><span class=\"line\">      <span class=\"attr\">maxSurge:</span> <span class=\"number\">25</span><span class=\"string\">%</span>             <span class=\"comment\">#可以超出预期pod量的大小</span></span><br><span class=\"line\">      <span class=\"attr\">maxUnavailable:</span> <span class=\"number\">25</span><span class=\"string\">%</span>       <span class=\"comment\">#最大不可用百分比</span></span><br><span class=\"line\">    <span class=\"attr\">type:</span> <span class=\"string\">RollingUpdate</span></span><br><span class=\"line\">  <span class=\"attr\">template:</span></span><br><span class=\"line\">    <span class=\"attr\">metadata:</span></span><br><span class=\"line\">      <span class=\"attr\">creationTimestamp:</span> <span class=\"literal\">null</span></span><br><span class=\"line\">      <span class=\"attr\">labels:</span></span><br><span class=\"line\">        <span class=\"attr\">app:</span> <span class=\"string\">nginx</span></span><br><span class=\"line\">    <span class=\"attr\">spec:</span></span><br><span class=\"line\">      <span class=\"attr\">containers:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">image:</span> <span class=\"string\">nginx:1.14.2</span></span><br><span class=\"line\">        <span class=\"attr\">imagePullPolicy:</span> <span class=\"string\">IfNotPresent</span>  <span class=\"comment\">#镜像下载策略  IfNotPresent：如果本地有就不检查，如果没有就拉取</span></span><br><span class=\"line\">        <span class=\"attr\">name:</span> <span class=\"string\">nginx</span></span><br><span class=\"line\">        <span class=\"attr\">ports:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">containerPort:</span> <span class=\"number\">80</span></span><br><span class=\"line\">          <span class=\"attr\">protocol:</span> <span class=\"string\">TCP</span></span><br><span class=\"line\">        <span class=\"attr\">resources:</span> &#123;&#125;    <span class=\"comment\">#容器所需的计算资源</span></span><br><span class=\"line\">        <span class=\"attr\">terminationMessagePath:</span> <span class=\"string\">/dev/termination-log</span></span><br><span class=\"line\">        <span class=\"attr\">terminationMessagePolicy:</span> <span class=\"string\">File</span></span><br><span class=\"line\">      <span class=\"attr\">dnsPolicy:</span> <span class=\"string\">ClusterFirst</span></span><br><span class=\"line\">      <span class=\"attr\">restartPolicy:</span> <span class=\"string\">Always</span>    <span class=\"comment\">#重启策略</span></span><br><span class=\"line\">      <span class=\"attr\">schedulerName:</span> <span class=\"string\">default-scheduler</span></span><br><span class=\"line\">      <span class=\"attr\">securityContext:</span> &#123;&#125;</span><br><span class=\"line\">      <span class=\"attr\">terminationGracePeriodSeconds:</span> <span class=\"number\">30</span></span><br><span class=\"line\"><span class=\"attr\">status:</span></span><br><span class=\"line\">  <span class=\"attr\">availableReplicas:</span> <span class=\"number\">2</span></span><br><span class=\"line\">  <span class=\"attr\">conditions:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">lastTransitionTime:</span> <span class=\"string\">&quot;2022-07-02T13:58:44Z&quot;</span></span><br><span class=\"line\">    <span class=\"attr\">lastUpdateTime:</span> <span class=\"string\">&quot;2022-07-02T13:58:44Z&quot;</span></span><br><span class=\"line\">    <span class=\"attr\">message:</span> <span class=\"string\">Deployment</span> <span class=\"string\">has</span> <span class=\"string\">minimum</span> <span class=\"string\">availability.</span></span><br><span class=\"line\">    <span class=\"attr\">reason:</span> <span class=\"string\">MinimumReplicasAvailable</span></span><br><span class=\"line\">    <span class=\"attr\">status:</span> <span class=\"string\">&quot;True&quot;</span></span><br><span class=\"line\">    <span class=\"attr\">type:</span> <span class=\"string\">Available</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">lastTransitionTime:</span> <span class=\"string\">&quot;2022-07-03T03:31:18Z&quot;</span></span><br><span class=\"line\">    <span class=\"attr\">lastUpdateTime:</span> <span class=\"string\">&quot;2022-07-03T03:31:18Z&quot;</span></span><br><span class=\"line\">    <span class=\"attr\">message:</span> <span class=\"string\">ReplicaSet</span> <span class=\"string\">&quot;nginx-deployment-7fd6966748&quot;</span> <span class=\"string\">has</span> <span class=\"string\">successfully</span> <span class=\"string\">progressed.</span></span><br><span class=\"line\">    <span class=\"attr\">reason:</span> <span class=\"string\">NewReplicaSetAvailable</span></span><br><span class=\"line\">    <span class=\"attr\">status:</span> <span class=\"string\">&quot;True&quot;</span></span><br><span class=\"line\">    <span class=\"attr\">type:</span> <span class=\"string\">Progressing</span></span><br><span class=\"line\">  <span class=\"attr\">observedGeneration:</span> <span class=\"number\">9</span></span><br><span class=\"line\">  <span class=\"attr\">readyReplicas:</span> <span class=\"number\">2</span></span><br><span class=\"line\">  <span class=\"attr\">replicas:</span> <span class=\"number\">2</span></span><br><span class=\"line\">  <span class=\"attr\">updatedReplicas:</span> <span class=\"number\">2</span></span><br></pre></td></tr></table></figure>","categories":["Kubernetes"],"tags":["controller"]},{"title":"k8s相关使用以及问题","url":"/2022/07/03/K8s/k8s%E7%9B%B8%E5%85%B3%E4%BD%BF%E7%94%A8%E4%BB%A5%E5%8F%8A%E9%97%AE%E9%A2%98/","content":"<p><img src=\"https://s2.loli.net/2022/06/27/5UbYtS64yAIPXzM.jpg\" alt=\"k8s.jpg\">  </p>\n<span id=\"more\"></span>\n<h1 id=\"相关使用技巧\"><a href=\"#相关使用技巧\" class=\"headerlink\" title=\"相关使用技巧\"></a>相关使用技巧</h1><h2 id=\"kubectl命令补全\"><a href=\"#kubectl命令补全\" class=\"headerlink\" title=\"kubectl命令补全\"></a>kubectl命令补全</h2><p>解决无法使用Tab键补全kubectl命令问题</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">yum -y install bash-completion</span><br><span class=\"line\">source /usr/share/bash-completion/bash_completion</span><br><span class=\"line\">source &lt;(kubectl completion bash)</span><br><span class=\"line\">echo &quot;source &lt;(kubectl completion bash)&quot; &gt;&gt; ~/.bashrc </span><br></pre></td></tr></table></figure>\n\n<h2 id=\"node节点使用kubectl命令\"><a href=\"#node节点使用kubectl命令\" class=\"headerlink\" title=\"node节点使用kubectl命令\"></a>node节点使用kubectl命令</h2><p>解决kubectl无法在node上使用的问题<br>将主节点的<code>/etc/kubernetes/admin.conf</code>拷贝到node节点相同目录下，然后再node节点中配置一下环境变量。  </p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">echo &quot;export KUBECONFIG=/etc/kubernetes/admin.conf&quot; &gt;&gt; ~/.bash_profile</span><br><span class=\"line\">source ~/.bash_profile</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"问题以及解决\"><a href=\"#问题以及解决\" class=\"headerlink\" title=\"问题以及解决\"></a>问题以及解决</h1>","categories":["Kubernetes"],"tags":["k8s相关使用以及问题"]},{"title":"7-K8S核心技术Service","url":"/2022/07/07/K8s/7-K8S%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AFService/","content":"<p><img src=\"https://s2.loli.net/2022/06/27/5UbYtS64yAIPXzM.jpg\" alt=\"k8s\">  </p>\n<span id=\"more\"></span>\n<h1 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念\"></a>概念</h1><p>在k8s中可以通过pod的ip来进行访问，但是pod的ip不是固定的，而service资源会对提供同一个服务的多个pod进行聚合，提供一个统一的入口，通过访问service的入口地址就能访问到后面的pod服务。  </p>\n<h2 id=\"Service存在的意义\"><a href=\"#Service存在的意义\" class=\"headerlink\" title=\"Service存在的意义\"></a>Service存在的意义</h2><h3 id=\"防止pod失联（服务发现）\"><a href=\"#防止pod失联（服务发现）\" class=\"headerlink\" title=\"防止pod失联（服务发现）\"></a>防止pod失联（服务发现）</h3><p>service充当注册中心的作用，当前有多个前端、后端pod时，前端可以通过service访问后端。</p>\n<h3 id=\"定义pod访问策略（负载均衡）\"><a href=\"#定义pod访问策略（负载均衡）\" class=\"headerlink\" title=\"定义pod访问策略（负载均衡）\"></a>定义pod访问策略（负载均衡）</h3><p>前端pod访问后端pod时，中间会通过service，这里service还能辺负载均衡，将前端请求分发到各个后端pod。  </p>\n<h2 id=\"service资源类型\"><a href=\"#service资源类型\" class=\"headerlink\" title=\"service资源类型\"></a>service资源类型</h2><p><strong>ClusterIP</strong>：集群内部访问，默认方式<br><strong>NodePort</strong>：对外访问应用使用<br><strong>LoadBalancer</strong>：对外访问应用使用，公有云  </p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">~]#</span> <span class=\"string\">kubectl</span> <span class=\"string\">get</span> <span class=\"string\">svc</span> <span class=\"string\">nginx</span> <span class=\"string\">-o</span> <span class=\"string\">yaml</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Service</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">creationTimestamp:</span> <span class=\"string\">&quot;2022-07-14T14:01:34Z&quot;</span></span><br><span class=\"line\">  <span class=\"attr\">labels:</span></span><br><span class=\"line\">    <span class=\"attr\">app:</span> <span class=\"string\">nginx</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">nginx</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">default</span></span><br><span class=\"line\">  <span class=\"attr\">resourceVersion:</span> <span class=\"string\">&quot;266455&quot;</span></span><br><span class=\"line\">  <span class=\"attr\">selfLink:</span> <span class=\"string\">/api/v1/namespaces/default/services/nginx</span></span><br><span class=\"line\">  <span class=\"attr\">uid:</span> <span class=\"string\">d45f429a-23b9-435f-a7ed-704996bb1999</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">clusterIP:</span> <span class=\"number\">10.1</span><span class=\"number\">.160</span><span class=\"number\">.174</span></span><br><span class=\"line\">  <span class=\"attr\">externalTrafficPolicy:</span> <span class=\"string\">Cluster</span></span><br><span class=\"line\">  <span class=\"attr\">ports:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">nodePort:</span> <span class=\"number\">30619</span>    <span class=\"comment\">#容器所在节点的端口，即外部机器可以访问的端口</span></span><br><span class=\"line\">    <span class=\"attr\">port:</span> <span class=\"number\">80</span>           <span class=\"comment\">#service的端口，即k8s中服务之间的访问端口</span></span><br><span class=\"line\">    <span class=\"attr\">protocol:</span> <span class=\"string\">TCP</span></span><br><span class=\"line\">    <span class=\"attr\">targetPort:</span> <span class=\"number\">80</span>     <span class=\"comment\">#pod的端口</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span></span><br><span class=\"line\">    <span class=\"attr\">app:</span> <span class=\"string\">nginx</span></span><br><span class=\"line\">  <span class=\"attr\">sessionAffinity:</span> <span class=\"string\">None</span></span><br><span class=\"line\">  <span class=\"attr\">type:</span> <span class=\"string\">NodePort</span></span><br><span class=\"line\"><span class=\"attr\">status:</span></span><br><span class=\"line\">  <span class=\"attr\">loadBalancer:</span> &#123;&#125;</span><br></pre></td></tr></table></figure>","categories":["Kubernetes"],"tags":["Service"]},{"title":"1-KVM环境准备、图形化使用","url":"/2022/09/03/KVM/1-KVM%E7%8E%AF%E5%A2%83%E5%87%86%E5%A4%87%E3%80%81%E5%9B%BE%E5%BD%A2%E5%8C%96%E4%BD%BF%E7%94%A8/","content":"<p><img src=\"https://s2.loli.net/2022/09/06/4PdOQiHzvqweAKj.webp\" alt=\"KVM.jpg\"></p>\n<span id=\"more\"></span>\n<h1 id=\"KVM环境准备\"><a href=\"#KVM环境准备\" class=\"headerlink\" title=\"KVM环境准备\"></a>KVM环境准备</h1><p>在VMware workstation创建虚拟机，然后在虚拟机中搭建KVM环境进行学习。<br>1.在VMware workstation中对虚拟机进行设置。因为KVM是需要硬件虚拟化支持的，所以要将虚拟机CPU的虚拟化开启<br><img src=\"/2022/09/03/KVM/1-KVM%E7%8E%AF%E5%A2%83%E5%87%86%E5%A4%87%E3%80%81%E5%9B%BE%E5%BD%A2%E5%8C%96%E4%BD%BF%E7%94%A8/%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%A1%AC%E4%BB%B6%E8%AE%BE%E7%BD%AE.png\" alt=\"虚拟机硬件设置\"><br>2.在VMware workstation中创建虚拟机时，安装一个带有GUI的系统，方便对KVM图形化的熟悉。<br>这样KVM的基础的环境就准备完毕。</p>\n<h2 id=\"KVM部署\"><a href=\"#KVM部署\" class=\"headerlink\" title=\"KVM部署\"></a>KVM部署</h2><p>在KVM部署前检查是否支持虚拟化</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">~]#</span><span class=\"bash\"> lscpu | grep -E <span class=\"string\">&#x27;vmx|svm&#x27;</span></span></span><br><span class=\"line\">Flags: fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush mmx fxsr sse sse2 ss ht syscall nx pdpe1gb rdtscp lm constant_tsc arch_perfmon nopl xtopology tsc_reliable nonstop_tsc eagerfpu pni pclmulqdq vmx ssse3 fma cx16 pcid sse4_1 sse4_2 x2apic movbe popcnt tsc_deadline_timer aes xsave avx f16c rdrand hypervisor lahf_lm abm 3dnowprefetch ssbd ibrs ibpb stibp tpr_shadow vnmi ept vpid fsgsbase tsc_adjust bmi1 avx2 smep bmi2 invpcid rdseed adx smap clflushopt xsaveopt xsavec xgetbv1 arat spec_ctrl intel_stibp flush_l1d arch_capabilities</span><br></pre></td></tr></table></figure>\n<p>安装对应的虚拟化组件  </p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">~]#</span><span class=\"bash\"> yum install qemu-kvm qemu-img virt-manager libvirt libvirt-python virt-manager libvirt-client virt-install virt-viewer -y</span></span><br></pre></td></tr></table></figure>\n<p>设置虚拟机接口管理组件启动和自启  </p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">~]#</span><span class=\"bash\"> systemctl start libvirtd</span></span><br><span class=\"line\"><span class=\"meta\">~]#</span><span class=\"bash\"> systemctl <span class=\"built_in\">enable</span> libvirtd</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"图形化中使用KVM创建虚拟机\"><a href=\"#图形化中使用KVM创建虚拟机\" class=\"headerlink\" title=\"图形化中使用KVM创建虚拟机\"></a>图形化中使用KVM创建虚拟机</h2><p>在宿主机的图形化桌面中打开一个命令行窗口，输入virt-manager命令，即可弹出对应的图形化管理窗口，或者在桌面的菜单栏中的应用程序中，选择“虚拟机管理器”（英文界面选择Virtual Machine Manager），都可以打开virt-manager。<br>在virt-manager中创建虚拟机过程比较简单，只需要将所要安装的系统镜像上传到KVM的宿主机中，KVM中虚拟机安装过程省略。  </p>\n","categories":["KVM"],"tags":["KVM环境准备、图形化使用"]},{"title":"KVM相关问题以及解决","url":"/2022/09/03/KVM/KVM%E7%9B%B8%E5%85%B3%E9%97%AE%E9%A2%98%E4%BB%A5%E5%8F%8A%E8%A7%A3%E5%86%B3/","content":"<p><img src=\"https://s2.loli.net/2022/09/06/4PdOQiHzvqweAKj.webp\" alt=\"KVM.jpg\"></p>\n<span id=\"more\"></span>\n<h1 id=\"问题一：图形化Virtual-Machine-Manager中创建虚拟机时提示“KVM-is-not-available”\"><a href=\"#问题一：图形化Virtual-Machine-Manager中创建虚拟机时提示“KVM-is-not-available”\" class=\"headerlink\" title=\"问题一：图形化Virtual Machine Manager中创建虚拟机时提示“KVM is not available”\"></a>问题一：图形化Virtual Machine Manager中创建虚拟机时提示“KVM is not available”</h1><p><img src=\"/2022/09/03/KVM/KVM%E7%9B%B8%E5%85%B3%E9%97%AE%E9%A2%98%E4%BB%A5%E5%8F%8A%E8%A7%A3%E5%86%B3/Warning.png\" alt=\"KVM is not available\">  </p>\n<h2 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h2><ol>\n<li>检查是否加载模块<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">~]#</span><span class=\"bash\">~]<span class=\"comment\">#  lsmod |grep kvm</span></span></span><br><span class=\"line\">kvm_intel             183621  4 </span><br><span class=\"line\">kvm                   586948  1 kvm_intel</span><br><span class=\"line\">irqbypass              13503  1 kvm</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">~]#</span><span class=\"bash\"> modprobe kvm  <span class=\"comment\">#如果没有就加载模块</span></span></span><br></pre></td></tr></table></figure></li>\n<li>查看是否开启了CPU虚拟化,如果没有，则是在VMware workstation中虚拟机的CPU虚拟化没有开启  <figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">~]#</span><span class=\"bash\"> lscpu | grep -E <span class=\"string\">&#x27;vmx|svm&#x27;</span></span></span><br></pre></td></tr></table></figure></li>\n</ol>\n<h1 id=\"问题二：宿主机可正常联网，但KVM内部虚拟机使用nat模式DHCP无法联网\"><a href=\"#问题二：宿主机可正常联网，但KVM内部虚拟机使用nat模式DHCP无法联网\" class=\"headerlink\" title=\"问题二：宿主机可正常联网，但KVM内部虚拟机使用nat模式DHCP无法联网\"></a>问题二：宿主机可正常联网，但KVM内部虚拟机使用nat模式DHCP无法联网</h1><h2 id=\"解决方案-1\"><a href=\"#解决方案-1\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h2><p>需要将宿主机的路由转发功能开启  </p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">~]#</span><span class=\"bash\"> vim /etc/sysctl.conf</span></span><br><span class=\"line\">net.ipv4.ip_forward=1</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"问题三：console连接KVM-centos7-一直等待\"><a href=\"#问题三：console连接KVM-centos7-一直等待\" class=\"headerlink\" title=\"问题三：console连接KVM centos7 一直等待\"></a>问题三：console连接KVM centos7 一直等待</h1><h2 id=\"场景\"><a href=\"#场景\" class=\"headerlink\" title=\"场景\"></a>场景</h2><p>出现在在图形化界面中手动创建centos7虚拟机，使用console命令连接时一直等待  </p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">~]#</span><span class=\"bash\">  virsh console centos7.0</span> </span><br><span class=\"line\">Connected to domain centos7.0</span><br><span class=\"line\">Escape character is ^]</span><br></pre></td></tr></table></figure>\n<h2 id=\"解决方案-2\"><a href=\"#解决方案-2\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h2><p>在客户机中修改kernel启动参数  </p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">~]#</span><span class=\"bash\"> grubby --update-kernel=ALL --args=<span class=\"string\">&quot;console=ttyS0&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">~]#</span><span class=\"bash\"> reboot</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"问题四：console连接客户机报“error-operation-failed-Active-console-session-exists-for-this-domain”\"><a href=\"#问题四：console连接客户机报“error-operation-failed-Active-console-session-exists-for-this-domain”\" class=\"headerlink\" title=\"问题四：console连接客户机报“error: operation failed: Active console session exists for this domain”\"></a>问题四：console连接客户机报“error: operation failed: Active console session exists for this domain”</h1><h2 id=\"解决方案-3\"><a href=\"#解决方案-3\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h2><ol>\n<li>可能有其他的连接，ps aux | grep console查看，若有则杀死进程后重新连接  </li>\n<li>没有其他连接进程还是无法连接，尝试将宿主机重启  </li>\n</ol>\n","categories":["KVM"],"tags":["KVM相关问题以及解决"]},{"title":"2-KVM相关命令","url":"/2022/09/07/KVM/2-KVM%E7%9B%B8%E5%85%B3%E5%91%BD%E4%BB%A4/","content":"<p><img src=\"https://s2.loli.net/2022/09/06/4PdOQiHzvqweAKj.webp\" alt=\"KVM.jpg\"></p>\n<span id=\"more\"></span>\n<h1 id=\"virsh-命令\"><a href=\"#virsh-命令\" class=\"headerlink\" title=\"virsh 命令\"></a>virsh 命令</h1><h2 id=\"域管理（客户机管理）\"><a href=\"#域管理（客户机管理）\" class=\"headerlink\" title=\"域管理（客户机管理）\"></a>域管理（客户机管理）</h2><table>\n<thead>\n<tr>\n<th align=\"center\">命令</th>\n<th align=\"center\">描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">list</td>\n<td align=\"center\">查看当前运行、挂起的虚拟机，–all查看所有虚拟机</td>\n</tr>\n<tr>\n<td align=\"center\">start/shutdown/reboot VM_NAME</td>\n<td align=\"center\">虚拟机启动、停止、重启</td>\n</tr>\n<tr>\n<td align=\"center\">destroy VM_NAME</td>\n<td align=\"center\">强制停止虚拟机，相当于断电</td>\n</tr>\n<tr>\n<td align=\"center\">undefine VM_NAME</td>\n<td align=\"center\">删除虚拟机</td>\n</tr>\n<tr>\n<td align=\"center\">console VM_NAME</td>\n<td align=\"center\">连接虚拟机，客户机无图形化界面时ctrl+]退出</td>\n</tr>\n<tr>\n<td align=\"center\">edit VM_NAME</td>\n<td align=\"center\">修改虚拟机xml配置</td>\n</tr>\n<tr>\n<td align=\"center\">autostart VM_NAME</td>\n<td align=\"center\">设置虚拟机自启动</td>\n</tr>\n<tr>\n<td align=\"center\">domiflist VM_NAME</td>\n<td align=\"center\">查看虚拟机网卡信息</td>\n</tr>\n<tr>\n<td align=\"center\">domblklist VM_NAME</td>\n<td align=\"center\">查看虚拟机硬盘信息</td>\n</tr>\n<tr>\n<td align=\"center\">dominfo VM_NAME</td>\n<td align=\"center\">列出指定虚拟机的信息</td>\n</tr>\n<tr>\n<td align=\"center\">suspend/resume VM_NAME</td>\n<td align=\"center\">挂起/恢复虚拟机</td>\n</tr>\n<tr>\n<td align=\"center\">domstat VM_NAME</td>\n<td align=\"center\">显示虚拟机状态</td>\n</tr>\n<tr>\n<td align=\"center\">domcontrol VM_NAME</td>\n<td align=\"center\">返回虚拟机状态，ok、error</td>\n</tr>\n<tr>\n<td align=\"center\">dumpxml VM_NAME</td>\n<td align=\"center\">直接显示demo的xml文件配置</td>\n</tr>\n<tr>\n<td align=\"center\">cpu-stats VM_NAME</td>\n<td align=\"center\">虚拟机的cpu状态</td>\n</tr>\n<tr>\n<td align=\"center\">setmen  VM_NAME  SIZE</td>\n<td align=\"center\">设置虚拟机内存</td>\n</tr>\n</tbody></table>\n<h2 id=\"快照管理\"><a href=\"#快照管理\" class=\"headerlink\" title=\"快照管理\"></a>快照管理</h2><table>\n<thead>\n<tr>\n<th align=\"center\">命令</th>\n<th align=\"center\">描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">snapshot-create VM_NAME</td>\n<td align=\"center\">创建快照</td>\n</tr>\n<tr>\n<td align=\"center\">snapshot-create-as VM_NAME</td>\n<td align=\"center\">创建快照，可添加快照描述/指定快照名称</td>\n</tr>\n<tr>\n<td align=\"center\">snapshot-current VM_NAME</td>\n<td align=\"center\">查看当前快照详细配置</td>\n</tr>\n<tr>\n<td align=\"center\">snapshot-delete VM_NAME snapshot_name</td>\n<td align=\"center\">删除快照</td>\n</tr>\n<tr>\n<td align=\"center\">snapshot-dumpxml VM_NAME snapshot_name</td>\n<td align=\"center\">查看指定快照配置</td>\n</tr>\n<tr>\n<td align=\"center\">snapshot-edit VM_NAME snapshot_name</td>\n<td align=\"center\">编辑指定快照xml文件</td>\n</tr>\n<tr>\n<td align=\"center\">snapshot-info VM_NAME snapshot_name</td>\n<td align=\"center\">查看指定快照信息</td>\n</tr>\n<tr>\n<td align=\"center\">snapshot-list VM_NAME</td>\n<td align=\"center\">查看快照列表</td>\n</tr>\n<tr>\n<td align=\"center\">snapshot-parent VM_NAME</td>\n<td align=\"center\">查看指定快照的父快照名称</td>\n</tr>\n<tr>\n<td align=\"center\">snapshot-revert VM_NAME snapshot_name</td>\n<td align=\"center\">恢复指定快照</td>\n</tr>\n</tbody></table>\n<h2 id=\"virt-manager\"><a href=\"#virt-manager\" class=\"headerlink\" title=\"virt-manager\"></a>virt-manager</h2><h2 id=\"virt-viewer\"><a href=\"#virt-viewer\" class=\"headerlink\" title=\"virt-viewer\"></a>virt-viewer</h2><h2 id=\"virt-install\"><a href=\"#virt-install\" class=\"headerlink\" title=\"virt-install\"></a>virt-install</h2><h2 id=\"virt-clone\"><a href=\"#virt-clone\" class=\"headerlink\" title=\"virt-clone\"></a>virt-clone</h2><h2 id=\"virt-top\"><a href=\"#virt-top\" class=\"headerlink\" title=\"virt-top\"></a>virt-top</h2>","categories":["KVM"],"tags":["KVM相关命令"]},{"title":"3-KVM配置文件和磁盘","url":"/2022/09/08/KVM/3-KVM%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E5%92%8C%E7%A3%81%E7%9B%98/","content":"<p><img src=\"https://s2.loli.net/2022/09/06/4PdOQiHzvqweAKj.webp\" alt=\"KVM.jpg\"></p>\n<span id=\"more\"></span>\n<h1 id=\"KVM配置文件\"><a href=\"#KVM配置文件\" class=\"headerlink\" title=\"KVM配置文件\"></a>KVM配置文件</h1><p>KVM虚拟机的配置文件存放在 <strong>/etc/libvirt/qemu</strong> 下，每个虚拟机对应一个xml文件，可以通过修改xml文件修改虚拟机硬件配置，但需要使用<code>virsh edit</code>进行修改，使用vim等进行修改则会被覆盖、无效，使用<code>virsh dumpxml</code>查看的就是这些xml文件。<br>在图形化界面中创建虚拟机时或在图形化界面中查看虚拟机硬件详情磁盘信息、虚拟机配置文件中，可以发现磁盘为一个qcow2文件，它既是虚拟机的磁盘，又是虚拟机的镜像。文件的大小并不一定是虚拟机中硬盘的大小，可能是分配的硬盘是”立即分配所有磁盘空间”,也可能是动态分配（随虚拟机中使用的磁盘空间变化，上限为分配的磁盘的大小），通过图形化窗口创建的虚拟机默认“立即分配所有磁盘空间”，想要实现动态分配需要在创建虚拟机之前通过命令创建一个动态分配的磁盘，即可以动态的qcow2文件。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 创建一个动态分配磁盘空间的磁盘，最大为50G,文件的创建目录为当前目录</span></span><br><span class=\"line\">qemu-img create -f qcow2 testdisk1.qcow2 50G</span><br></pre></td></tr></table></figure>\n<p><img src=\"/2022/09/08/KVM/3-KVM%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E5%92%8C%E7%A3%81%E7%9B%98/%E5%88%9B%E5%BB%BA.png\" alt=\"创建虚拟机\"><br><img src=\"/2022/09/08/KVM/3-KVM%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E5%92%8C%E7%A3%81%E7%9B%98/%E7%A1%AC%E4%BB%B6%E8%AF%A6%E6%83%85.png\" alt=\"硬件详情\">  </p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">disk</span> <span class=\"attr\">type</span>=<span class=\"string\">&#x27;file&#x27;</span> <span class=\"attr\">device</span>=<span class=\"string\">&#x27;disk&#x27;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">driver</span> <span class=\"attr\">name</span>=<span class=\"string\">&#x27;qemu&#x27;</span> <span class=\"attr\">type</span>=<span class=\"string\">&#x27;qcow2&#x27;</span>/&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">source</span> <span class=\"attr\">file</span>=<span class=\"string\">&#x27;/var/lib/libvirt/images/centos7.0.qcow2&#x27;</span>/&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">backingStore</span>/&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">target</span> <span class=\"attr\">dev</span>=<span class=\"string\">&#x27;vda&#x27;</span> <span class=\"attr\">bus</span>=<span class=\"string\">&#x27;virtio&#x27;</span>/&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">alias</span> <span class=\"attr\">name</span>=<span class=\"string\">&#x27;virtio-disk0&#x27;</span>/&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">address</span> <span class=\"attr\">type</span>=<span class=\"string\">&#x27;pci&#x27;</span> <span class=\"attr\">domain</span>=<span class=\"string\">&#x27;0x0000&#x27;</span> <span class=\"attr\">bus</span>=<span class=\"string\">&#x27;0x00&#x27;</span> <span class=\"attr\">slot</span>=<span class=\"string\">&#x27;0x07&#x27;</span> <span class=\"attr\">function</span>=<span class=\"string\">&#x27;0x0&#x27;</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">disk</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"通过命令创建虚拟机\"><a href=\"#通过命令创建虚拟机\" class=\"headerlink\" title=\"通过命令创建虚拟机\"></a>通过命令创建虚拟机</h1><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">virt-install --name=kvm2 --vcpus=2 --memory=2048 --location=/home/yyg/Desktop/CentOS-7-x86_64-DVD-1810.iso --disk path=/var/lib/libvirt/images/test.qcow2 --network network=default --graphics none --extra-args=&#x27;console=ttyS0&#x27;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>–name=kvm2表示为创建的虚拟机命名为kvm2。  </li>\n<li>–vcpus=2表示设置虚拟机cpu有2个核心。  </li>\n<li>–memory=2048表示设置内存为2G。  </li>\n<li>––location=/home/yyg/Desktop/CentOS-7-x86_64-DVD-1810.iso 表示使用本地iso镜像安装虚拟机。  </li>\n<li>–disk path=/var/lib/libvirt/images/test.qcow2 表示指定虚拟机的磁盘镜像的路径，示例中的路径是我提前通过qemu-img命令创建出来的磁盘，咱们做实验的时候需要自行创建好，如果不想提前创建好磁盘，也可以使用–disk size=50代替–disk path=/var/lib/libvirt/images/kvm2.qcow2，如果使用–disk size=50这个设置，virt-install命令会在/var/lib/libvirt/images/目录中自动创建一个50G的qcow2磁盘，磁盘的前缀名和虚拟机名相同，这个磁盘是预分配所有磁盘空间的，也就是说，会直接占用宿主机50G的磁盘空间。  </li>\n<li>–network network=default表示使用kvm的默认网络  </li>\n<li>–graphics none 表示我们安装的过程中，需要使用的图形化控制台，由于我们此处模拟的是纯命令行安装，所以图形化控制台指定为none，表示不使用图形化控制台安装虚拟机。  </li>\n<li>–extra-args=’console=ttyS0’表示为创建的虚拟机指定内核启动时的内核参数，此处为虚拟机内核添加的参数为console=ttyS0，也就是说，当安装虚拟机时，分配一个ttyS0的虚拟终端，因为我们没有使用图形化控制台安装，所以要分配一个命令行的虚拟终端，以便执行安装操作和安装完成后的登录、执行命令等操作。  </li>\n</ul>\n<p>然后按照提示将需要进行设置的选项设置完成（与正常安装系统时设置一样，只是转换成文本形式）。  </p>\n<h1 id=\"删除虚拟机\"><a href=\"#删除虚拟机\" class=\"headerlink\" title=\"删除虚拟机\"></a>删除虚拟机</h1>","categories":["KVM"],"tags":["KVM配置文件和磁盘"]},{"title":"4-快照与克隆","url":"/2022/09/08/KVM/4-%E5%BF%AB%E7%85%A7%E4%B8%8E%E5%85%8B%E9%9A%86/","content":"<p><img src=\"https://s2.loli.net/2022/09/06/4PdOQiHzvqweAKj.webp\" alt=\"KVM.jpg\"></p>\n<span id=\"more\"></span>\n<h1 id=\"快照\"><a href=\"#快照\" class=\"headerlink\" title=\"快照\"></a>快照</h1><p>快照根据存储方式的不同可以分为<strong>内部快照</strong>与<strong>外部快照</strong>。<br>快照也有对应的配置文件，快找配置文件存放在 <strong>/var/lib/libvirt/qemu/snapshot/</strong> 下  </p>\n<h2 id=\"内部快照\"><a href=\"#内部快照\" class=\"headerlink\" title=\"内部快照\"></a>内部快照</h2><p>内部快照：内部快照只支持qcow2格式的虚拟机镜像，把快照及后续变动都保存在原来的qcow2文件内。<br>内部快照可以在虚拟机开机状态下创建，但创建过程中会处于paused状态。  </p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 为CLI_create-centos7.0创建名为test1的快照</span></span><br><span class=\"line\"><span class=\"meta\">~]#</span><span class=\"bash\"> virsh snapshot-create-as CLI_create-centos7.0 test1</span></span><br><span class=\"line\">Domain snapshot test1 created</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> virsh snapshot-create-as CLI_create-centos7.0 test1  --description &lt;string&gt;  创建快照时为快照添加描述信息，但需要使用snapshot-current才能查看描述信息</span></span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">查看此虚拟机的快照列表，注意此处的<span class=\"built_in\">stat</span>为保存该快照时虚拟机的状态，即快照中的系统是否为运行状态</span></span><br><span class=\"line\"><span class=\"meta\">~]#</span><span class=\"bash\"> virsh snapshot-list CLI_create-centos7.0</span> </span><br><span class=\"line\"> Name                 Creation Time             State</span><br><span class=\"line\">------------------------------------------------------------</span><br><span class=\"line\"> test1                2022-09-08 01:38:05 -0400 running</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">查看当前快照配置信息，可以从该配置信息开头确认当前虚拟机是处于什么快照</span></span><br><span class=\"line\"><span class=\"meta\">~]#</span><span class=\"bash\"> virsh snapshot-current CLI_create-centos7.0</span>  </span><br><span class=\"line\">&lt;domainsnapshot&gt;</span><br><span class=\"line\">  &lt;name&gt;test1&lt;/name&gt;</span><br><span class=\"line\">  &lt;state&gt;running&lt;/state&gt;</span><br><span class=\"line\">  &lt;creationTime&gt;1662615485&lt;/creationTime&gt;</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 查看指定快照信息</span></span><br><span class=\"line\"><span class=\"meta\">~]#</span><span class=\"bash\"> virsh snapshot-info CLI_create-centos7.0 test1</span> </span><br><span class=\"line\">Name:           test1</span><br><span class=\"line\">Domain:         CLI_create-centos7.0</span><br><span class=\"line\">Current:        yes</span><br><span class=\"line\">State:          running</span><br><span class=\"line\">Location:       internal</span><br><span class=\"line\">Parent:         -</span><br><span class=\"line\">Children:       0</span><br><span class=\"line\">Descendants:    0</span><br><span class=\"line\">Metadata:       yes</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 查看指定快照配置信息</span></span><br><span class=\"line\"><span class=\"meta\">~]#</span><span class=\"bash\"> virsh snapshot-dumpxml CLI_create-centos7.0 test1</span></span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 为CLI_create-centos7.0创建名为test2的快照</span></span><br><span class=\"line\"><span class=\"meta\">~]#</span><span class=\"bash\"> virsh snapshot-create-as CLI_create-centos7.0 test2</span></span><br><span class=\"line\">Domain snapshot test2 created</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 查看快照列表</span></span><br><span class=\"line\"><span class=\"meta\">~]#</span><span class=\"bash\"> virsh snapshot-list CLI_create-centos7.0</span> </span><br><span class=\"line\"> Name                 Creation Time             State</span><br><span class=\"line\">------------------------------------------------------------</span><br><span class=\"line\"> test1                2022-09-08 01:38:05 -0400 running</span><br><span class=\"line\"> test2                2022-09-08 02:53:02 -0400 shutoff</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 查看指定快照的父快照</span></span><br><span class=\"line\"><span class=\"meta\">~]#</span><span class=\"bash\"> virsh snapshot-parent CLI_create-centos7.0 test2</span> </span><br><span class=\"line\">test1</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 查看快照列表关系树</span></span><br><span class=\"line\"><span class=\"meta\">~]#</span><span class=\"bash\"> virsh snapshot-list CLI_create-centos7.0 --tree</span></span><br><span class=\"line\">test1</span><br><span class=\"line\">  |</span><br><span class=\"line\">  +- test2</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 恢复test1快照</span></span><br><span class=\"line\"><span class=\"meta\">~]#</span><span class=\"bash\"> virsh snapshot-revert CLI_create-centos7.0 test1</span></span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 删除test2快照，添加–children将其子裔快照一并删除，–children-only只删除子裔快照</span></span><br><span class=\"line\"><span class=\"meta\">~]#</span><span class=\"bash\"> virsh snapshot-delete CLI_create-centos7.0 test2</span></span><br><span class=\"line\">Domain snapshot test2 deleted</span><br></pre></td></tr></table></figure>\n\n<p><strong>注意点</strong>  </p>\n<ol>\n<li>不要使用<code>virsh snapshot-edit</code>修改快照名  </li>\n<li>当一个虚拟机使用多个qcow2文件时，在创建快照时需要加上–atomic参数以确保快照操作的原子性，防止磁盘快照只有部分成功  </li>\n</ol>\n<h2 id=\"外部快照（暂时先了解）\"><a href=\"#外部快照（暂时先了解）\" class=\"headerlink\" title=\"外部快照（暂时先了解）\"></a>外部快照（暂时先了解）</h2><p>外部快照：在创建时，快照被保存在单独一个文件中，创建快照时间点之后的数据被记录到一个新的qcow2文件中，原镜像文件成为新的qcow2文件的backing file（只读），在创建多个快照后，这些文件将形成一个链——backing chain。外部快照同时支持raw和qcow2格式的虚拟机镜像。  </p>\n<h1 id=\"克隆\"><a href=\"#克隆\" class=\"headerlink\" title=\"克隆\"></a>克隆</h1><p>被克隆的虚拟机不能是运行状态，在克隆前需要先将其暂停或者停止  </p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">~]#</span><span class=\"bash\"> virt-clone --auto-clone -o CLI_create-centos7.0 -n <span class=\"built_in\">test</span></span></span><br></pre></td></tr></table></figure>","categories":["KVM"],"tags":["快照与克隆"]},{"title":"虚拟化技术","url":"/2022/09/02/KVM/%E8%99%9A%E6%8B%9F%E5%8C%96%E6%8A%80%E6%9C%AF/","content":"<center> 虚拟化技术介绍、分类 </center>\n<span id=\"more\"></span>  \n\n<h1 id=\"虚拟化技术\"><a href=\"#虚拟化技术\" class=\"headerlink\" title=\"虚拟化技术\"></a>虚拟化技术</h1><p>简单解释就是将一台主机的资源（CPU、内存、磁盘空间、网络）分割、组合成多台虚拟主机的技术。  </p>\n<h1 id=\"硬件虚拟化与软件虚拟化\"><a href=\"#硬件虚拟化与软件虚拟化\" class=\"headerlink\" title=\"硬件虚拟化与软件虚拟化\"></a>硬件虚拟化与软件虚拟化</h1><p>物理平台本身提供了对特殊指令的截获和重定向的<strong>硬件支持</strong>。支持虚拟化的硬件，也是一些基于硬件实现软件虚拟化技术的关键。目前主要有两种：intel VT和AMD-V。  </p>\n<h1 id=\"软件虚拟化\"><a href=\"#软件虚拟化\" class=\"headerlink\" title=\"软件虚拟化\"></a>软件虚拟化</h1><p>利用软件技术，在现有的物理平台上实现对物理平台访问的截获和模拟。有些软件虚拟化技术需要硬件支持，有些则不需要。</p>\n<h2 id=\"全虚拟化与准虚拟化\"><a href=\"#全虚拟化与准虚拟化\" class=\"headerlink\" title=\"全虚拟化与准虚拟化\"></a>全虚拟化与准虚拟化</h2><h2 id=\"全虚拟化\"><a href=\"#全虚拟化\" class=\"headerlink\" title=\"全虚拟化\"></a>全虚拟化</h2><p>全虚拟化（full virtualization），又叫硬件辅助虚拟化技术，需要硬件虚拟化的支持。全虚拟化最大的优点就是运行在虚拟机上的操作系统没有经过任何修改，唯一的限制就是操作系统必须能够支持底层的硬件。它在虚拟机（VM）和硬件之间加了一个软件层–Hypervisor，或者叫做虚拟机管理程序（VMM），是用来建立与执行虚拟机器的软件、固件或硬件。  </p>\n<h3 id=\"一型虚拟化\"><a href=\"#一型虚拟化\" class=\"headerlink\" title=\"一型虚拟化\"></a>一型虚拟化</h3><p>Hypervisor 直接安装在物理机上，多个虚拟机在 Hypervisor 上运行。Hypervisor 实现方式一般是一个特殊定制的 Linux 系统。Xen 和 VMWare 的 ESXi 都属于这个类型，例如：VMWare的ESXi  </p>\n<h3 id=\"二型虚拟化\"><a href=\"#二型虚拟化\" class=\"headerlink\" title=\"二型虚拟化\"></a>二型虚拟化</h3><p>这种 hypervisor 运行在另一个操作系统（运行在物理硬件之上）中，例如：KVM  </p>\n<h2 id=\"准虚拟化\"><a href=\"#准虚拟化\" class=\"headerlink\" title=\"准虚拟化\"></a>准虚拟化</h2><p>需要改动客户操作系统，使它以为自己运行在虚拟环境下，能够与虚拟机监控机协同工作,不需要硬件虚拟化支持，消耗资源小性能好。这种方法就叫准虚拟化（para-virtualization），也叫半虚拟化。  </p>\n","categories":["虚拟化介绍"],"tags":["虚拟化介绍"]},{"title":"LVM","url":"/2022/09/10/Linux/LVM/","content":"<p><img src=\"https://s2.loli.net/2022/09/10/QDrWjs6Vz29cCFu.png\" alt=\"LVM.png\"></p>\n<span id=\"more\"></span>\n<h1 id=\"LVM概念\"><a href=\"#LVM概念\" class=\"headerlink\" title=\"LVM概念\"></a>LVM概念</h1><p>LVM(Logical Volume Manager)逻辑卷管理，是一种将一个或者多个硬盘的分区在逻辑上集合，相当于一个大硬盘来使用，当硬盘的空间不够时，可以将其他的硬盘的分区加入其中，相对于普通的分区有很大的灵活性。  </p>\n<ul>\n<li>物理卷PV：处于LVM最底层，可以是物理硬盘或者分区  </li>\n<li>卷组VG：建立在PV之上，可以含有一个或多个PV  </li>\n<li>逻辑卷LV：建立在VG之上，在逻辑卷之上建立文件系统  </li>\n<li>物理块PE：物理卷PV中可以分配的最小存储单元，PE的大小可以指定，默认为4MB，大小只能为2的幂数，最大为512M，PE大，读取速度快，但浪费空间。反之，读取速度慢，但节省空间  </li>\n<li>逻辑块LE：逻辑卷LV中最小的存储单元，在同一VG中LE和PE的大小是相同的  </li>\n</ul>\n<h1 id=\"创建LVM\"><a href=\"#创建LVM\" class=\"headerlink\" title=\"创建LVM\"></a>创建LVM</h1><h2 id=\"创建\"><a href=\"#创建\" class=\"headerlink\" title=\"创建\"></a>创建</h2>","categories":["Linux"],"tags":["LVM"]},{"title":"8-docker网络","url":"/2022/10/16/docker/8-docker%E7%BD%91%E7%BB%9C/","content":"<p><img src=\"/2022/10/16/docker/8-docker%E7%BD%91%E7%BB%9C/%E5%9B%BE%E7%89%87docker.jpg\" alt=\"docker\">  </p>\n<span id=\"more\"></span>\n<h1 id=\"docker网络\"><a href=\"#docker网络\" class=\"headerlink\" title=\"docker网络\"></a>docker网络</h1><p>docker安装后默认的三种网络为none、host、bridge。<br><strong>none</strong>：没有任何网路，没有任何网卡。安全性要求高并且不需要联网的应用可以使用 none 网络。<br><strong>host</strong>：连接到host网络的容器共享docker宿主机的网络，容器的网络配置、hostname与docker宿主机完全一致。<br><strong>bridge</strong>：桥接网络，使用最多，容器默认使用的网络。  </p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">~]#</span><span class=\"bash\"> docker network ls</span></span><br><span class=\"line\">NETWORK ID     NAME      DRIVER    SCOPE</span><br><span class=\"line\">a245b3871ac7   bridge    bridge    local</span><br><span class=\"line\">4b615d9327ee   host      host      local</span><br><span class=\"line\">05e237730870   none      null      local</span><br></pre></td></tr></table></figure>\n<p>在启动容器的时候可以使用<code>--network=none</code>来指定使用的网络  </p>\n<h2 id=\"bridge网络\"><a href=\"#bridge网络\" class=\"headerlink\" title=\"bridge网络\"></a>bridge网络</h2><p>安装docker时会创建docker0的网桥，容器默认使用的都是这个  </p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">]#</span><span class=\"bash\"> brctl show    <span class=\"comment\"># 需要安装bridge-utils</span></span> </span><br><span class=\"line\">bridge name\tbridge id\t\tSTP enabled\tinterfaces</span><br><span class=\"line\">docker0\t\t8000.0242b1443650\tno\t                  #此时是没有容器使用docker0</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">~]#</span><span class=\"bash\"> docker run -it -d busybox</span></span><br><span class=\"line\">ef8acee7abadee73a33c8ded047e7f57af8aaaf85a8bd6035fb271ee8ae99fb2   </span><br><span class=\"line\"><span class=\"meta\">~]#</span><span class=\"bash\"> brctl show</span></span><br><span class=\"line\">bridge name\tbridge id\t\tSTP enabled\tinterfaces</span><br><span class=\"line\">docker0\t\t8000.0242b1443650\tno\t\tveth6e01edd </span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">~]#</span><span class=\"bash\"> docker run -it -d --name=busybox2 busybox</span></span><br><span class=\"line\">d96d5db03d981f4bcdf0f5374a5ca1a1dd741f40dacce82eab8e1a1bc0b68f0e</span><br><span class=\"line\"><span class=\"meta\">~]#</span><span class=\"bash\"> brctl show</span></span><br><span class=\"line\">bridge name\tbridge id\t\tSTP enabled\tinterfaces</span><br><span class=\"line\">docker0\t\t8000.0242b1443650\tno\t\tveth2783997</span><br><span class=\"line\">\t\t\t\t\t\t\t            veth6e01edd</span><br></pre></td></tr></table></figure>\n<p>veth2783997、veth6e01edd为两个网络接口，对应着两个容器的网卡  </p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">~]#</span><span class=\"bash\"> docker network inspect bridge</span>  </span><br><span class=\"line\">[</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        &quot;Name&quot;: &quot;bridge&quot;,</span><br><span class=\"line\">        &quot;Id&quot;: &quot;e56c41006af568144839868cca47fad31c1c0f7251848bffc71621e12bd7f2ee&quot;,</span><br><span class=\"line\">        &quot;Created&quot;: &quot;2022-10-20T01:03:46.451081072+08:00&quot;,</span><br><span class=\"line\">        &quot;Scope&quot;: &quot;local&quot;,</span><br><span class=\"line\">        &quot;Driver&quot;: &quot;bridge&quot;,</span><br><span class=\"line\">        &quot;EnableIPv6&quot;: false,</span><br><span class=\"line\">        &quot;IPAM&quot;: &#123;</span><br><span class=\"line\">            &quot;Driver&quot;: &quot;default&quot;,</span><br><span class=\"line\">            &quot;Options&quot;: null,</span><br><span class=\"line\">            &quot;Config&quot;: [</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    &quot;Subnet&quot;: &quot;172.17.0.0/16&quot;,    #bridge的网络配置</span><br><span class=\"line\">                    &quot;Gateway&quot;: &quot;172.17.0.1&quot;       #bridge的网络配置，该网关就是docker0 </span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            ]</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        &quot;Internal&quot;: false,</span><br><span class=\"line\">        &quot;Attachable&quot;: false,</span><br><span class=\"line\">        &quot;Ingress&quot;: false,</span><br><span class=\"line\">        &quot;ConfigFrom&quot;: &#123;</span><br><span class=\"line\">            &quot;Network&quot;: &quot;&quot;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        &quot;ConfigOnly&quot;: false,</span><br><span class=\"line\">        &quot;Containers&quot;: &#123; #使用bridge网络的容器网络配置</span><br><span class=\"line\">            &quot;d96d5db03d981f4bcdf0f5374a5ca1a1dd741f40dacce82eab8e1a1bc0b68f0e&quot;: &#123;</span><br><span class=\"line\">                &quot;Name&quot;: &quot;busybox2&quot;,</span><br><span class=\"line\">                &quot;EndpointID&quot;: &quot;395664be54909dc79a763e74ca6a4aec83d342113ddbe4c287e2a2d70fcdb67d&quot;,</span><br><span class=\"line\">                &quot;MacAddress&quot;: &quot;02:42:ac:11:00:03&quot;,</span><br><span class=\"line\">                &quot;IPv4Address&quot;: &quot;172.17.0.3/16&quot;,</span><br><span class=\"line\">                &quot;IPv6Address&quot;: &quot;&quot;</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            &quot;ef8acee7abadee73a33c8ded047e7f57af8aaaf85a8bd6035fb271ee8ae99fb2&quot;: &#123;</span><br><span class=\"line\">                &quot;Name&quot;: &quot;lucid_spence&quot;,</span><br><span class=\"line\">                &quot;EndpointID&quot;: &quot;7b780bdfdf91d7dad89978c6f0a007ec5be2d3bb283b0ce9db24078e24adfd47&quot;,</span><br><span class=\"line\">                &quot;MacAddress&quot;: &quot;02:42:ac:11:00:02&quot;,</span><br><span class=\"line\">                &quot;IPv4Address&quot;: &quot;172.17.0.2/16&quot;,</span><br><span class=\"line\">                &quot;IPv6Address&quot;: &quot;&quot;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        &quot;Options&quot;: &#123;</span><br><span class=\"line\">            &quot;com.docker.network.bridge.default_bridge&quot;: &quot;true&quot;,</span><br><span class=\"line\">            &quot;com.docker.network.bridge.enable_icc&quot;: &quot;true&quot;,</span><br><span class=\"line\">            &quot;com.docker.network.bridge.enable_ip_masquerade&quot;: &quot;true&quot;,</span><br><span class=\"line\">            &quot;com.docker.network.bridge.host_binding_ipv4&quot;: &quot;0.0.0.0&quot;,</span><br><span class=\"line\">            &quot;com.docker.network.bridge.name&quot;: &quot;docker0&quot;,</span><br><span class=\"line\">            &quot;com.docker.network.driver.mtu&quot;: &quot;1500&quot;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        &quot;Labels&quot;: &#123;&#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n<h2 id=\"自定义网络\"><a href=\"#自定义网络\" class=\"headerlink\" title=\"自定义网络\"></a>自定义网络</h2><p>docker有三种网络驱动，bridge 、overlay 、macvlan。  </p>\n<h3 id=\"自定义bridge网络\"><a href=\"#自定义bridge网络\" class=\"headerlink\" title=\"自定义bridge网络\"></a>自定义bridge网络</h3><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">~]#</span><span class=\"bash\"> docker network create --driver bridge test_bridge</span></span><br><span class=\"line\">b4a9474e46432b19582d3c7e24506aa79486aa12d938fe2f3929ba716ef3fe3e</span><br><span class=\"line\"><span class=\"meta\">~]#</span><span class=\"bash\"> docker network ls</span></span><br><span class=\"line\">NETWORK ID     NAME          DRIVER    SCOPE</span><br><span class=\"line\">e56c41006af5   bridge        bridge    local</span><br><span class=\"line\">4b615d9327ee   host          host      local</span><br><span class=\"line\">05e237730870   none          null      local</span><br><span class=\"line\">b4a9474e4643   test_bridge   bridge    local</span><br><span class=\"line\"><span class=\"meta\">~]#</span><span class=\"bash\"> brctl show</span></span><br><span class=\"line\">bridge name\t\tbridge id\t\t\tSTP enabled\tinterfaces</span><br><span class=\"line\">br-b4a9474e4643\t8000.02426345e115\t    no\t\t\t</span><br><span class=\"line\">docker0\t\t\t8000.0242b1443650\tno\t\t\tveth2783997</span><br><span class=\"line\">\t\t\t\t\t\t\t\t\tveth6e01edd</span><br></pre></td></tr></table></figure>\n<p>创建一个新的bridge网络test_bridge，对应的会创建一个新的网桥，网桥的名后段就是test_bridge的短ID。<br>创建的新的test_bridge网络的网络配置docker自动分配的，在创建的时候可以指定IP网段。  </p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">~]#</span><span class=\"bash\"> docker network create --driver bridge  --subnet 172.19.0.0/16 --gateway 172.19.0.1 test_bridge_2</span></span><br><span class=\"line\">e3eb0f55cb6356a97189a748a3a6a821a53cf9e1583d9a574cfada2557dcc370 </span><br><span class=\"line\"><span class=\"meta\">~]#</span><span class=\"bash\"> docker network ls</span></span><br><span class=\"line\">NETWORK ID     NAME            DRIVER    SCOPE</span><br><span class=\"line\">e56c41006af5   bridge          bridge    local</span><br><span class=\"line\">4b615d9327ee   host            host      local</span><br><span class=\"line\">05e237730870   none            null      local</span><br><span class=\"line\">b4a9474e4643   test_bridge     bridge    local</span><br><span class=\"line\">e3eb0f55cb63   test_bridge_2   bridge    local</span><br></pre></td></tr></table></figure>\n<p>在创建容器的时候可以指定容器的IP，但是使用的网络必须是在创建时也指定- -subnet的。也就是使用test_bridge_2网络才可以指定容器IP，test_bridge则不行  </p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">~]#</span><span class=\"bash\"> docker run -it -d --network=test_bridge --ip 172.19.0.2 busybox</span></span><br><span class=\"line\">c320bd7389697c8aaf149d0853166cc882b988c763c25f1cc053a5a6c7d8cfd1</span><br><span class=\"line\">docker: Error response from daemon: user specified IP address is supported only when connecting to networks with user configured subnets.</span><br><span class=\"line\"><span class=\"meta\">~]#</span><span class=\"bash\"> docker run -it -d --network=test_bridge_2 --ip 172.19.0.2 busybox</span></span><br><span class=\"line\">09314af7bfdb84bc012aca1804d056e344db7609835040addfbd2b17f1aef8f4</span><br></pre></td></tr></table></figure>\n<h2 id=\"不同网络容器之间通信\"><a href=\"#不同网络容器之间通信\" class=\"headerlink\" title=\"不同网络容器之间通信\"></a>不同网络容器之间通信</h2><p>使用同一个bridge网络的容器之间是可以通信的，使用不同bridge网络的容器之间也可以实现通信。使用<code>docker network connect 网络名 容器</code>连接到指定网络，<code>docker network connect disconnect</code>断开指定的网络，具体的体现就是在对应的容器中多了一个对应网络的网卡。  </p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">~]#</span><span class=\"bash\"> docker run -it -d --network=test_bridge  --name=busybox1 busybox</span> </span><br><span class=\"line\">17f0e3f6fd1e729b21572e5d0eef9d280e50e5327edfe9fece15764fb22743b8</span><br><span class=\"line\"><span class=\"meta\">~]#</span><span class=\"bash\"> docker run -it -d --network=test_bridge  --name=busybox2 busybox</span> </span><br><span class=\"line\">79c883702435d5b00e6ee8ef8e4103d6025929296e9341ef5c3f98503cedb3e0</span><br><span class=\"line\"><span class=\"meta\">~]#</span><span class=\"bash\"> docker run -it -d --network=test_bridge_2  --name=busybox3 busybox</span> </span><br><span class=\"line\">fdd8fb26bbf26af839bae7312dd134cd7d5d94e697322d6ec61657eff4da28e9</span><br><span class=\"line\"><span class=\"meta\">~]#</span><span class=\"bash\"> docker <span class=\"built_in\">exec</span> -it busybox1 sh</span>      </span><br><span class=\"line\">/ # ping busybox2           #在同一个网络中可以使用容器名进行ping</span><br><span class=\"line\">PING busybox2 (172.18.0.3): 56 data bytes</span><br><span class=\"line\">64 bytes from 172.18.0.3: seq=0 ttl=64 time=0.224 ms</span><br><span class=\"line\">64 bytes from 172.18.0.3: seq=1 ttl=64 time=0.085 ms</span><br><span class=\"line\">64 bytes from 172.18.0.3: seq=2 ttl=64 time=0.098 ms</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">~]#</span><span class=\"bash\"> docker network connect test_bridge busybox3   <span class=\"comment\">#将busybox3添加一个test_bridge的网卡</span></span></span><br><span class=\"line\"><span class=\"meta\">~]#</span><span class=\"bash\"> docker <span class=\"built_in\">exec</span> -it busybox3 sh</span></span><br><span class=\"line\">/ # ip a </span><br><span class=\"line\">1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue qlen 1000</span><br><span class=\"line\">    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00</span><br><span class=\"line\">    inet 127.0.0.1/8 scope host lo</span><br><span class=\"line\">       valid_lft forever preferred_lft forever</span><br><span class=\"line\">20: eth0@if21: &lt;BROADCAST,MULTICAST,UP,LOWER_UP,M-DOWN&gt; mtu 1500 qdisc noqueue </span><br><span class=\"line\">    link/ether 02:42:ac:13:00:02 brd ff:ff:ff:ff:ff:ff</span><br><span class=\"line\">    inet 172.19.0.2/16 brd 172.19.255.255 scope global eth0</span><br><span class=\"line\">       valid_lft forever preferred_lft forever</span><br><span class=\"line\">22: eth1@if23: &lt;BROADCAST,MULTICAST,UP,LOWER_UP,M-DOWN&gt; mtu 1500 qdisc noqueue </span><br><span class=\"line\">    link/ether 02:42:ac:12:00:04 brd ff:ff:ff:ff:ff:ff</span><br><span class=\"line\">    inet 172.18.0.4/16 brd 172.18.255.255 scope global eth1</span><br><span class=\"line\">       valid_lft forever preferred_lft forever</span><br><span class=\"line\">/ # ping busybox1</span><br><span class=\"line\">PING busybox1 (172.18.0.2): 56 data bytes</span><br><span class=\"line\">64 bytes from 172.18.0.2: seq=0 ttl=64 time=0.158 ms</span><br><span class=\"line\">64 bytes from 172.18.0.2: seq=1 ttl=64 time=0.086 ms</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"容器之间的三种通信方式\"><a href=\"#容器之间的三种通信方式\" class=\"headerlink\" title=\"容器之间的三种通信方式\"></a>容器之间的三种通信方式</h2><p>容器之间可通过 IP，Docker DNS Server 或 joined 容器三种方式通信。  </p>\n<h3 id=\"IP通信\"><a href=\"#IP通信\" class=\"headerlink\" title=\"IP通信\"></a>IP通信</h3><p>属于同一个网络的容器之间是可以通信的。不同网络之间通过<code>docker network connect 网络名 容器</code>实现通信。  </p>\n<h3 id=\"Docker-DNS-Server\"><a href=\"#Docker-DNS-Server\" class=\"headerlink\" title=\"Docker DNS Server\"></a>Docker DNS Server</h3><p>docker内置了DNS服务，在IP通信的情况下可以使用DNS服务进行通信，busybox1与busybox2，以及将busybox3添加到test_bridge网络后，容器之间使用容器名就可以ping通。<br><strong>Docker DNS Server只能是在自定义网络中使用，默认的bridge网络无法使用DNS</strong>  </p>\n<h3 id=\"joined容器\"><a href=\"#joined容器\" class=\"headerlink\" title=\"joined容器\"></a>joined容器</h3><p>使多个容器共享一个网络栈，共享网卡和配置信息。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">~]#</span><span class=\"bash\"> docker run -it -d --name=test_join busybox</span></span><br><span class=\"line\">578c4ad593d44212bf8180120ff6a5d41b64a8ec60b89ccd6be746baafc474a9</span><br><span class=\"line\"><span class=\"meta\">~]#</span><span class=\"bash\"> docker run -it -d --network=container:test_join --name=test_join_2 busybox</span></span><br><span class=\"line\">9b4f485357a3e04a41fd1b883ffcc1ef381fb42b6fc3b3d01018c0fa8c46d584</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">~]#</span><span class=\"bash\"> docker <span class=\"built_in\">exec</span> -it test_join  sh</span></span><br><span class=\"line\">/ # ip a</span><br><span class=\"line\">1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue qlen 1000</span><br><span class=\"line\">    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00</span><br><span class=\"line\">    inet 127.0.0.1/8 scope host lo</span><br><span class=\"line\">       valid_lft forever preferred_lft forever</span><br><span class=\"line\">24: eth0@if25: &lt;BROADCAST,MULTICAST,UP,LOWER_UP,M-DOWN&gt; mtu 1500 qdisc noqueue </span><br><span class=\"line\">    link/ether 02:42:ac:11:00:02 brd ff:ff:ff:ff:ff:ff</span><br><span class=\"line\">    inet 172.17.0.2/16 brd 172.17.255.255 scope global eth0</span><br><span class=\"line\">       valid_lft forever preferred_lft forever</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">~]#</span><span class=\"bash\"> docker <span class=\"built_in\">exec</span> -it test_join_2  sh</span></span><br><span class=\"line\">/ # ip a</span><br><span class=\"line\">1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue qlen 1000</span><br><span class=\"line\">    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00</span><br><span class=\"line\">    inet 127.0.0.1/8 scope host lo</span><br><span class=\"line\">       valid_lft forever preferred_lft forever</span><br><span class=\"line\">24: eth0@if25: &lt;BROADCAST,MULTICAST,UP,LOWER_UP,M-DOWN&gt; mtu 1500 qdisc noqueue </span><br><span class=\"line\">    link/ether 02:42:ac:11:00:02 brd ff:ff:ff:ff:ff:ff</span><br><span class=\"line\">    inet 172.17.0.2/16 brd 172.17.255.255 scope global eth0</span><br><span class=\"line\">       valid_lft forever preferred_lft forever</span><br></pre></td></tr></table></figure>\n<p>可以发现test_join与test_join_2的网络配置是相同的。  </p>\n<h2 id=\"容器与外界通信\"><a href=\"#容器与外界通信\" class=\"headerlink\" title=\"容器与外界通信\"></a>容器与外界通信</h2><h3 id=\"容器访问外界\"><a href=\"#容器访问外界\" class=\"headerlink\" title=\"容器访问外界\"></a>容器访问外界</h3><p>例如容器内ping 百度，以下是通信过程。  </p>\n<ol>\n<li>ping <a href=\"http://www.baidu.com,容器网卡发包/\">www.baidu.com，容器网卡发包</a>  </li>\n<li>docker0收到包，交给NAT处理  </li>\n<li>NAT将源地址转换成宿主机网卡的IP  </li>\n<li>ping包从宿主机的网卡发出到达百度  </li>\n</ol>\n<h3 id=\"外界访问容器\"><a href=\"#外界访问容器\" class=\"headerlink\" title=\"外界访问容器\"></a>外界访问容器</h3><p>外部想要访问容器，容器需要将端口映射到宿主机的端口，通过<code>docker run -p 宿主机端口:容器端口</code>实现。外部访问时访问宿主机的端口也就是访问了容器的端口<br>每一个映射的端口，host 都会启动一个 docker-proxy 进程来处理访问容器的流量。  </p>\n<ol>\n<li>docker-proxy 监听映射后宿主的端口  </li>\n<li>当外界访问宿主机端口时，docker-proxy转发给容器  </li>\n<li>容器响应请求并返回结果  </li>\n</ol>\n","categories":["docker"],"tags":["docker网络"]},{"title":"9-docker监控","url":"/2022/10/21/docker/9-docker%E7%9B%91%E6%8E%A7/","content":"<p><img src=\"/2022/10/21/docker/9-docker%E7%9B%91%E6%8E%A7/%E5%9B%BE%E7%89%87docker.jpg\" alt=\"docker\">  </p>\n<span id=\"more\"></span>\n<h1 id=\"docker自带命令\"><a href=\"#docker自带命令\" class=\"headerlink\" title=\"docker自带命令\"></a>docker自带命令</h1><h2 id=\"docker-ps-查看容器\"><a href=\"#docker-ps-查看容器\" class=\"headerlink\" title=\"docker ps 查看容器\"></a>docker ps 查看容器</h2><p><strong>-a</strong>:显示所有的容器，包括未运行的。<br><strong>-f</strong>:根据条件过滤显示的内容。<br><strong>–format</strong>:指定返回值的模板文件。<br><strong>-l</strong>:显示最近创建的容器。<br><strong>-n</strong>:列出最近创建的n个容器。<br><strong>–no-trunc</strong> :不截断输出。<br><strong>-q</strong>:静默模式，只显示容器编号。<br><strong>-s</strong>:显示总的文件大小。  </p>\n<h2 id=\"docker-top-查看容器中运行的进程信息，支持ps命令参数\"><a href=\"#docker-top-查看容器中运行的进程信息，支持ps命令参数\" class=\"headerlink\" title=\"docker top 查看容器中运行的进程信息，支持ps命令参数\"></a>docker top 查看容器中运行的进程信息，支持ps命令参数</h2><h2 id=\"docker-stats-显示容器资源使用情况\"><a href=\"#docker-stats-显示容器资源使用情况\" class=\"headerlink\" title=\"docker stats 显示容器资源使用情况\"></a>docker stats 显示容器资源使用情况</h2><p><strong>-a</strong>：显示所有容器，包括未运行的<br><strong>–no-trunc</strong> :不截断输出  </p>\n<h2 id=\"Prometheus\"><a href=\"#Prometheus\" class=\"headerlink\" title=\"Prometheus\"></a>Prometheus</h2><p>单独章节学习Prometheus，具体查看 &lt;!–swig￼0–&gt;  </p>\n","categories":["docker"],"tags":["docker监控"]},{"title":"1-Prometheus概述及安装","url":"/2022/10/21/prometheus/1-Prometheus%E6%A6%82%E8%BF%B0%E5%8F%8A%E5%AE%89%E8%A3%85/","content":"<p><img src=\"https://s2.loli.net/2022/10/21/Dv2fVhPgOBrK7bF.jpg\" alt=\"prometheus\">  </p>\n<span id=\"more\"></span>\n<h1 id=\"Prometheus-概述\"><a href=\"#Prometheus-概述\" class=\"headerlink\" title=\"Prometheus 概述\"></a>Prometheus 概述</h1><p>Prometheus是一个优秀的监控工具，非常适合监控容器。<br><img src=\"/2022/10/21/prometheus/1-Prometheus%E6%A6%82%E8%BF%B0%E5%8F%8A%E5%AE%89%E8%A3%85/Prometheus.png\" alt=\"prometheus架构图\"><br><strong>Prometheus server</strong>：用于收集和存储时间序列数据。<br><strong>Exporter</strong>：采集插件，负责收集目标（host、container等）的性能数据，并通过HTTP接口供Prometheus server获取。prometheus sercer通过pull的方式拉取<br><strong>Pushgateway</strong>：各个目标主机可上报数据到pushgateway。Push gateway通过push的方式推送给prometheus sercer。本身也是一个http服务器，一般通过写脚本抓自己想要的数据，自定义一个监控数据，然后推送到pushgateway，然后pushgateway再推送到prometheus。<br><strong>Alertmanager</strong>: 从 Prometheus server 端接收到 alerts 后，会进行去重，分组，并路由到相应的接收方，发出报警。<br><strong>Grafana</strong>：监控仪表盘，可视化监控数据。<br><strong>service Discovery</strong>：服务发现。<br><strong>Retrieval</strong>：负责在活跃的target主机上抓取监控指标数据。<br><strong>Storage</strong>：存储主要是把采集到的数据存储到磁盘中。<br><strong>PromQL</strong>：是Prometheus提供的查询语言模块。。  </p>\n<h2 id=\"Prometheus工作方式\"><a href=\"#Prometheus工作方式\" class=\"headerlink\" title=\"Prometheus工作方式\"></a>Prometheus工作方式</h2><ol>\n<li>Prometheus定期从目标主机上获取数据，目标主机的监控数据可通过配置静态job或者服务发现的方式被prometheus采集到，这种方式默认的pull方式拉取指标；也可通过pushgateway把采集的数据上报到prometheus中；还可通过一些组件自带的exporter采集相应组件的数据。  </li>\n<li>Prometheus把采集到的监控指标数据保存到本地磁盘或者数据库。  </li>\n<li>Prometheus采集的监控指标数据按时间序列存储，通过配置报警规则，把触发的报警发送到alertmanager。  </li>\n<li>Prometheus 自带的web ui界面提供PromQL查询语言，可查询监控数据。  </li>\n<li>Grafana可接入prometheus数据源，把监控数据以图形化形式展示出。  </li>\n</ol>\n<h1 id=\"Prometheus安装部署\"><a href=\"#Prometheus安装部署\" class=\"headerlink\" title=\"Prometheus安装部署\"></a>Prometheus安装部署</h1><p>Prometheus有两种部署方式，二进制文件部署与容器化部署。  </p>\n<h2 id=\"容器化部署\"><a href=\"#容器化部署\" class=\"headerlink\" title=\"容器化部署\"></a>容器化部署</h2><p><code>docker run --name prometheus -d -p 127.0.0.1:9090:9090 prom/prometheus</code></p>\n<h2 id=\"二进制文件部署\"><a href=\"#二进制文件部署\" class=\"headerlink\" title=\"二进制文件部署\"></a>二进制文件部署</h2><p>从<a href=\"https://prometheus.io/download/\">Prometheus官网</a>下载对应安装包</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">~]#</span><span class=\"bash\"> tar xzf prometheus-2.39.1.linux-amd64.tar.gz -C /usr/<span class=\"built_in\">local</span>/</span></span><br><span class=\"line\"><span class=\"meta\">~]#</span><span class=\"bash\"> ln -s /usr/<span class=\"built_in\">local</span>/prometheus-2.39.1.linux-amd64/ /usr/<span class=\"built_in\">local</span>/prometheus</span></span><br><span class=\"line\"><span class=\"meta\">~]#</span><span class=\"bash\"> ln -s /usr/<span class=\"built_in\">local</span>/prometheus/prometheus /usr/<span class=\"built_in\">local</span>/bin/prometheus</span></span><br><span class=\"line\"><span class=\"meta\">~]#</span><span class=\"bash\"> ln -s /usr/<span class=\"built_in\">local</span>/prometheus/promtool /usr/<span class=\"built_in\">local</span>/bin/promtool</span></span><br><span class=\"line\"><span class=\"meta\">~]#</span><span class=\"bash\"> nohup /usr/<span class=\"built_in\">local</span>/prometheus/prometheus --config.file=/usr/<span class=\"built_in\">local</span>/prometheus/prometheus.yml &gt; /usr/<span class=\"built_in\">local</span>/prometheus/prometheus.log 2&gt;&amp;1 &amp;</span></span><br></pre></td></tr></table></figure>\n<p>通过localhost:9090即可进行访问。再次界面可以查询Prometheus收集上来的数据。  </p>\n<h2 id=\"主机数据展示\"><a href=\"#主机数据展示\" class=\"headerlink\" title=\"主机数据展示\"></a>主机数据展示</h2><p><code>localhost:9090/metrics</code>中可以查看到Prometheus server的监控指标数据。  </p>\n","categories":["Prometheus"],"tags":["Prometheus概述及安装"]},{"title":"2-Prometheus监控主机与容器","url":"/2022/10/22/prometheus/2-%E7%9B%91%E6%8E%A7%E4%B8%BB%E6%9C%BA%E4%B8%8E%E5%AE%B9%E5%99%A8/","content":"<p><img src=\"https://s2.loli.net/2022/10/21/Dv2fVhPgOBrK7bF.jpg\" alt=\"prometheus\">  </p>\n<span id=\"more\"></span>\n<h1 id=\"Prometheus监控\"><a href=\"#Prometheus监控\" class=\"headerlink\" title=\"Prometheus监控\"></a>Prometheus监控</h1><p>上一章部署了 prometheus server，想要对主机或容器进行监控需要在被监控端安装对应的Exporter。因为prometheus使用的是时间序列，所以<strong>prometheus server与被监控端要做好时间同步</strong>。<br>从prometheus官网中可以看到许多已经成行的<a href=\"https://prometheus.io/download/\">采集插件</a>，每个exporter采集的数据可以从对应exporter的github中查看<br><strong>black_exporter</strong>:黑盒采集器，通过 HTTP、HTTPS、DNS、TCP、ICMP 和 gRPC 对端点进行黑盒探测<br><strong>consul_exporter</strong><br><strong>graphite_exporter</strong>：导出 Graphite 的监控指标并对它们进行转换和公开以供 Prometheus 使用<br><strong>haproxy_exporter</strong><br><strong>memcached_exporter</strong><br><strong>mysqld_exporter</strong><br><strong>node_exporter</strong>：最常用的  </p>\n<h2 id=\"监控Linux主机（9100端口）\"><a href=\"#监控Linux主机（9100端口）\" class=\"headerlink\" title=\"监控Linux主机（9100端口）\"></a>监控Linux主机（9100端口）</h2><p>从Prometheus官网下载node_exporter组件，在远程linux主机上安装node_exporter组件,安装方式与Prometheus安装方式类似。  </p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">~]#</span><span class=\"bash\"> tar zxvf node_exporter-1.4.0.linux-amd64.tar.gz -C /usr/<span class=\"built_in\">local</span>/</span></span><br><span class=\"line\"><span class=\"meta\">~]#</span><span class=\"bash\"> ln -s /usr/<span class=\"built_in\">local</span>/node_exporter-1.4.0.linux-amd64/ /usr/<span class=\"built_in\">local</span>/node_exporter</span></span><br><span class=\"line\"><span class=\"meta\">~]#</span><span class=\"bash\"> ln -s /usr/<span class=\"built_in\">local</span>/node_exporter/node_exporter /usr/<span class=\"built_in\">local</span>/bin/node_exporter</span></span><br><span class=\"line\"><span class=\"meta\">~]#</span><span class=\"bash\"> nohup /usr/<span class=\"built_in\">local</span>/node_exporter/node_exporter &gt; /usr/<span class=\"built_in\">local</span>/node_exporter/node_exporter.log 2&gt;&amp;1 &amp;</span></span><br></pre></td></tr></table></figure>\n<p>查看9100端口是否被监听，以及访问 <code>node_ip:9100/metrics</code>查看收集的监控信息。  </p>\n<h3 id=\"Prometheus-server配置\"><a href=\"#Prometheus-server配置\" class=\"headerlink\" title=\"Prometheus server配置\"></a>Prometheus server配置</h3><figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">scrape_configs:</span></span><br><span class=\"line\">  <span class=\"comment\">#scrape_configs中添加以下配置</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">job_name:</span> <span class=\"string\">&quot;node&quot;</span></span><br><span class=\"line\">    <span class=\"attr\">static_configs:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">targets:</span> [<span class=\"string\">&quot;192.168.27.7:9100&quot;</span>] <span class=\"comment\">#添加多个[&quot;192.168.27.7:9100&quot;,&quot;192.168.27.8:9100&quot;]</span></span><br></pre></td></tr></table></figure>\n<p>配置修改完成后需要将Prometheus server重启，重启后在web管理界面-Status-Targets中可以看到node已经被添加。<br><img src=\"/2022/10/22/prometheus/2-%E7%9B%91%E6%8E%A7%E4%B8%BB%E6%9C%BA%E4%B8%8E%E5%AE%B9%E5%99%A8/%E6%B7%BB%E5%8A%A0node%E7%9B%91%E6%8E%A7.png\" alt=\"node监控\">  </p>\n<h2 id=\"监控Docker容器（8080端口）\"><a href=\"#监控Docker容器（8080端口）\" class=\"headerlink\" title=\"监控Docker容器（8080端口）\"></a>监控Docker容器（8080端口）</h2><p>推荐使用Google的cAdvisor工具，cAdvisor作为Docker容器运行，单个cAdvisor容器返回针对Docker守护进程和所有正在运行的容器的指标</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker run --volume=/:/rootfs:ro --privileged=true --restart=always --volume=/var/run:/var/run:rw --volume=/sys:/sys:ro --volume=/var/lib/docker/:/var/lib/docker:ro --publish=8080:8080 --detach=true --name=cadvisor google/cadvisor:latest</span><br></pre></td></tr></table></figure>\n<p>容器启动后，可以查看cAdvisor web界面<code>node_ip:8080</code>，以及查看<code>node_ip:8080/metrics</code>收集的监控信息。  </p>\n<h3 id=\"Prometheus-server配置-1\"><a href=\"#Prometheus-server配置-1\" class=\"headerlink\" title=\"Prometheus server配置\"></a>Prometheus server配置</h3><p>与添加node方法相同  </p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">scrape_configs:</span></span><br><span class=\"line\">  <span class=\"comment\">#scrape_configs中添加以下配置</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">job_name:</span> <span class=\"string\">&quot;docker&quot;</span></span><br><span class=\"line\">    <span class=\"attr\">static_configs:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">targets:</span> [<span class=\"string\">&quot;192.168.27.7:8080&quot;</span>] <span class=\"comment\">#添加多个[&quot;192.168.27.7:8080&quot;,&quot;192.168.27.8:8080&quot;]</span></span><br></pre></td></tr></table></figure>\n<p>配置修改完成后需要将Prometheus server重启，重启后在web管理界面-Status-Targets中可以看到docker已经被添加。<br><img src=\"/2022/10/22/prometheus/2-%E7%9B%91%E6%8E%A7%E4%B8%BB%E6%9C%BA%E4%B8%8E%E5%AE%B9%E5%99%A8/%E6%B7%BB%E5%8A%A0docker%E7%9B%91%E6%8E%A7.png\" alt=\"docker监控\">  </p>\n<h2 id=\"监控MYSQL（9104端口）\"><a href=\"#监控MYSQL（9104端口）\" class=\"headerlink\" title=\"监控MYSQL（9104端口）\"></a>监控MYSQL（9104端口）</h2><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">~]#</span><span class=\"bash\"> tar zxvf mysqld_exporter-0.14.0.linux-amd64.tar.gz -C /usr/<span class=\"built_in\">local</span>/</span></span><br><span class=\"line\"><span class=\"meta\">~]#</span><span class=\"bash\"> ln -s /usr/<span class=\"built_in\">local</span>/mysqld_exporter-0.14.0.linux-amd64/ /usr/<span class=\"built_in\">local</span>/mysqld_exporter</span></span><br><span class=\"line\"><span class=\"meta\">~]#</span><span class=\"bash\"> ln -s /usr/<span class=\"built_in\">local</span>/mysqld_exporter/mysqld_exporter /usr/<span class=\"built_in\">local</span>/bin/mysqld_exporter</span></span><br><span class=\"line\"><span class=\"meta\">~]#</span><span class=\"bash\"> nohup /usr/<span class=\"built_in\">local</span>/mysqld_exporter/mysqld_exporter &gt; /usr/<span class=\"built_in\">local</span>/mysqld_exporter/mysqld_exporter.log 2&gt;&amp;1 &amp;</span></span><br></pre></td></tr></table></figure>","categories":["Prometheus"],"tags":["Prometheus监控主机与容器"]},{"title":"3-Prometheus数据","url":"/2022/10/22/prometheus/3-Prometheus%E6%95%B0%E6%8D%AE/","content":"<p><img src=\"https://s2.loli.net/2022/10/21/Dv2fVhPgOBrK7bF.jpg\" alt=\"prometheus\">  </p>\n<span id=\"more\"></span>\n<h1 id=\"Prometheus-数据\"><a href=\"#Prometheus-数据\" class=\"headerlink\" title=\"Prometheus 数据\"></a>Prometheus 数据</h1><h2 id=\"时间序列数据\"><a href=\"#时间序列数据\" class=\"headerlink\" title=\"时间序列数据\"></a>时间序列数据</h2><p>时间序列数据通常由应用程序本身通过客户端库或称为exporter来作为HTTP端点暴露，由prometheus进行收集，包含指标、时间戳、测量值。<br><strong>指标</strong>：由指标名称和指标的标签组成，<code>&lt;metric name&gt;&#123;&lt;label name&gt;=&lt;label value&gt;, ...&#125;</code>  </p>\n<ul>\n<li>metric name：指标名称，由<code>[a-zA-Z_:][a-zA-Z0-9_:]*</code> 组成  </li>\n<li><code>&lt;label name&gt;=&lt;label value&gt;</code>:标签，键值对， <code>[a-zA-Z_][a-zA-Z0-9_]*</code> ， __ 开头的标签仅内部使用  </li>\n</ul>\n<p><strong>时间戳</strong>：精确到毫秒的时间戳<br><strong>测量值</strong>：一个float64的值  </p>\n<h2 id=\"指标类型\"><a href=\"#指标类型\" class=\"headerlink\" title=\"指标类型\"></a>指标类型</h2><h3 id=\"Counter\"><a href=\"#Counter\" class=\"headerlink\" title=\"Counter\"></a>Counter</h3><p>Counter是计数类型。用于累计值，比如请求次数、完成次数。一直增加，不会减少。重启进程后会被重置。可以方便了解事件变化速率。通常指标名称以total为结尾  </p>\n<h3 id=\"Gauge\"><a href=\"#Gauge\" class=\"headerlink\" title=\"Gauge\"></a>Gauge</h3><p>Gauge是测量器类型，是一个实际测量的值，可变大，可变小。比如剩余空间大小、剩余内存大小  </p>\n<h3 id=\"Histogram\"><a href=\"#Histogram\" class=\"headerlink\" title=\"Histogram\"></a>Histogram</h3><ul>\n<li>将一段时间范围内的数据进行采样（通常是请求持续时间或响应大小等），并将其计入可配置的存储桶（bucket）中. 后续可通过指定区间筛选样本，也可以统计样本总数，最后一般将数据展示为直方图。  </li>\n<li>对每个采样点值累计和(sum)  </li>\n<li>对采样点的次数累计和(count)  </li>\n<li>Histogram不会保存数据采样的值，存储的是区间的样本数统计值  </li>\n</ul>\n<p>一个Histogram可以理解为是由三个指标组成。<br><code>&lt;metric name&gt;_bucket&#123;le=&quot;上边界&quot;&#125;</code>:测量值为bucket中小于等于上边界的所有采样点数量<br><code>&lt;metric name&gt;_sum</code>：bucket中每个采样点值累计和<br><code>&lt;metric name&gt;_count</code>：bucket中采样点数量  </p>\n<h4 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h4><p><img src=\"/2022/10/22/prometheus/3-Prometheus%E6%95%B0%E6%8D%AE/%E7%A4%BA%E4%BE%8B%E6%95%B0%E6%8D%AE.png\"><br>在一个时间段中有以上的数据，对应的在指标中展示为  </p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> _bucket指标</span></span><br><span class=\"line\">&lt;metric name&gt;_bucket&#123;le=&quot;1&quot;&#125;    2   #采样点数值小于等于1的采样点的数量，即上图中采样点数值为0.1、0.2，一共两个采样点</span><br><span class=\"line\">&lt;metric name&gt;_bucket&#123;le=&quot;5&quot;&#125;    5</span><br><span class=\"line\">&lt;metric name&gt;_bucket&#123;le=&quot;10&quot;&#125;   10</span><br><span class=\"line\">&lt;metric name&gt;_bucket&#123;le=&quot;+Inf&quot;&#125; 10  # +Inf 为无穷</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">_sum指标</span></span><br><span class=\"line\">&lt;metric name&gt;_sum   51.1  #所有采样点值的和，即 0.1+0.2+1.3+3.2+4.6+6.5+7.6+8.8+8.8+10</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> _count指标</span></span><br><span class=\"line\">&lt;metric name&gt;_count 10   #采样点数量，与&lt;metric name&gt;_bucket&#123;le=&quot;+Inf&quot;&#125;数值一致</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"summary\"><a href=\"#summary\" class=\"headerlink\" title=\"summary\"></a>summary</h3><ul>\n<li>在客户端对于一段时间内（默认是10分钟）的每个采样点进行统计，并形成分位图。  </li>\n<li>统计班上所有同学的总成绩(sum)  </li>\n<li>统计班上同学的考试总人数(count)  </li>\n</ul>\n<p>一个summary指标可以理解为有三个指标组成。<br><code>&lt;metric name&gt;_bucket&#123;quantile=&quot;分位数&quot;&#125;</code>：百分位数的数值，例如quantile=0.5，即采样点数值的中位数，<br><code>&lt;metric name&gt;_sum</code>：每个采样点值累计和<br><code>&lt;metric name&gt;_count</code>：采样点数量  </p>\n<h4 id=\"实例-1\"><a href=\"#实例-1\" class=\"headerlink\" title=\"实例\"></a>实例</h4><p>有10个采样点数值为{1，2，3，4，5，6，7，8，9，10}  </p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">分位数计算方法 （n+1）y，n为数据个数，y为分位数，值为第几个数，例如要求某个分位数从公式得出值为2.25，则该分位数为第二个数+（第三个数-第二个数）0.25</span></span><br><span class=\"line\">&lt;metric name&gt;_bucket&#123;quantile=&quot;0&quot;&#125;      1</span><br><span class=\"line\">&lt;metric name&gt;_bucket&#123;quantile=&quot;0.25&quot;&#125;   2.75    #第一四分位数，（10+1）0.25=2.75，2+（3-2）0.75=2.75</span><br><span class=\"line\">&lt;metric name&gt;_bucket&#123;quantile=&quot;0.5&quot;&#125;    5.5     #第二四分位数，即中位数</span><br><span class=\"line\">&lt;metric name&gt;_bucket&#123;quantile=&quot;0.75&quot;&#125;   8.25    #第三四分位数</span><br><span class=\"line\">&lt;metric name&gt;_bucket&#123;quantile=&quot;1&quot;&#125;      10</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;metric name&gt;_sum   55</span><br><span class=\"line\">&lt;metric name&gt;_count 10</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"实际数据\"><a href=\"#实际数据\" class=\"headerlink\" title=\"实际数据\"></a>实际数据</h1><p>截取 http://Prometheus_server:9090/metrics 前面部分数据<br>每条数据会给出监控指标的解释以及类型</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\"># HELP go_gc_duration_seconds A summary of the pause duration of garbage collection cycles. 监控指标的含义  </span><br><span class=\"line\"># TYPE go_gc_duration_seconds summary  监控指标的类型</span><br><span class=\"line\">go_gc_duration_seconds&#123;quantile=&quot;0&quot;&#125; 3.6918e-05</span><br><span class=\"line\">go_gc_duration_seconds&#123;quantile=&quot;0.25&quot;&#125; 4.4529e-05</span><br><span class=\"line\">go_gc_duration_seconds&#123;quantile=&quot;0.5&quot;&#125; 5.0101e-05</span><br><span class=\"line\">go_gc_duration_seconds&#123;quantile=&quot;0.75&quot;&#125; 5.5256e-05</span><br><span class=\"line\">go_gc_duration_seconds&#123;quantile=&quot;1&quot;&#125; 9.5807e-05</span><br><span class=\"line\">go_gc_duration_seconds_sum 0.002263475</span><br><span class=\"line\">go_gc_duration_seconds_count 43</span><br><span class=\"line\"># HELP go_goroutines Number of goroutines that currently exist.</span><br><span class=\"line\"># TYPE go_goroutines gauge</span><br><span class=\"line\">go_goroutines 36</span><br><span class=\"line\"># HELP go_info Information about the Go environment.</span><br><span class=\"line\"># TYPE go_info gauge</span><br><span class=\"line\">go_info&#123;version=&quot;go1.19.2&quot;&#125; 1</span><br></pre></td></tr></table></figure>\n\n","categories":["Prometheus"],"tags":["Prometheus数据"]},{"title":"Linux修改句柄数","url":"/2022/10/23/Linux/Linux%E4%BF%AE%E6%94%B9%E5%8F%A5%E6%9F%84%E6%95%B0/","content":"<p><img src=\"https://i.loli.net/2021/08/02/cX51yi4KrLYRfJU.jpg\" alt=\"linux.jpg\">  </p>\n<span id=\"more\"></span>\n<h1 id=\"Linux句柄\"><a href=\"#Linux句柄\" class=\"headerlink\" title=\"Linux句柄\"></a>Linux句柄</h1><p>Linux中的句柄分为用户级、系统级。<br>用户级句柄：规定单个进程能够打开的最大文件句柄数量（默认大小1024）<br>系统级句柄：系统中最大文件句柄数量  </p>\n<h2 id=\"用户级句柄数量修改\"><a href=\"#用户级句柄数量修改\" class=\"headerlink\" title=\"用户级句柄数量修改\"></a>用户级句柄数量修改</h2><h3 id=\"临时修改\"><a href=\"#临时修改\" class=\"headerlink\" title=\"临时修改\"></a>临时修改</h3><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">ulimit -a #查看 open files 数值，或者直接使用ulimit -n</span><br><span class=\"line\">ulimit -SHn 10000 </span><br></pre></td></tr></table></figure>\n<p>ulimit分为软限制与硬限制。-H是硬限制，实际限制；-S是软限制，告警限制。 </p>\n<h3 id=\"永久修改\"><a href=\"#永久修改\" class=\"headerlink\" title=\"永久修改\"></a>永久修改</h3><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> nofile 个进程最多能打开的的文件数</span></span><br><span class=\"line\">echo &quot;* soft nofile 2048&quot;  &gt;&gt; /etc/security/limits.conf   </span><br><span class=\"line\">echo &quot;* hard nofile 2048&quot;  &gt;&gt; /etc/security/limits.conf</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> nproc 一个用户最多能创建的进程数</span></span><br><span class=\"line\">echo &quot;* soft nproc 2048&quot;  &gt;&gt; /etc/security/limits.conf</span><br><span class=\"line\">echo &quot;* hard nproc 2048&quot;  &gt;&gt; /etc/security/limits.conf</span><br></pre></td></tr></table></figure>\n<p>重新ssh连接查看或者重启查看。  </p>\n<h2 id=\"系统级句柄数修改\"><a href=\"#系统级句柄数修改\" class=\"headerlink\" title=\"系统级句柄数修改\"></a>系统级句柄数修改</h2><h3 id=\"临时修改-1\"><a href=\"#临时修改-1\" class=\"headerlink\" title=\"临时修改\"></a>临时修改</h3><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">echo  100000 &gt; /proc/sys/fs/file-max</span><br></pre></td></tr></table></figure>\n<h3 id=\"永久修改-1\"><a href=\"#永久修改-1\" class=\"headerlink\" title=\"永久修改\"></a>永久修改</h3><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">echo   fs.file-max = 100000  &gt;&gt; /etc/sysctl.conf</span><br><span class=\"line\">sysctl -p       #从文件中读取数据，默认从/etc/sysctl.conf中读取</span><br><span class=\"line\">sysctl -a|grep fs.file-max      #查看是否修改</span><br></pre></td></tr></table></figure>\n\n","categories":["Linux"],"tags":["Linux"]},{"title":"4-Prometheus配置文件","url":"/2022/10/29/prometheus/4-Prometheus%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/","content":"<p><img src=\"https://s2.loli.net/2022/10/21/Dv2fVhPgOBrK7bF.jpg\" alt=\"prometheus\">  </p>\n<span id=\"more\"></span>\n<h1 id=\"Prometheus配置文件\"><a href=\"#Prometheus配置文件\" class=\"headerlink\" title=\"Prometheus配置文件\"></a>Prometheus配置文件</h1><p>在前面章节Prometheus安装在/usr/local/prometheus中，Prometheus的配置文件为prometheus.yml。<br>Prometheus启动是可以使用参数 -config.file 指定配置文件。  </p>\n<h2 id=\"配置文件主体\"><a href=\"#配置文件主体\" class=\"headerlink\" title=\"配置文件主体\"></a>配置文件主体</h2><figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 此片段指定的是prometheus的全局配置， 比如采集间隔，抓取超时时间等.</span></span><br><span class=\"line\"><span class=\"attr\">global:</span></span><br><span class=\"line\">  <span class=\"comment\"># 抓取时间间隔，</span></span><br><span class=\"line\">  [ <span class=\"attr\">scrape_interval:</span> <span class=\"string\">&lt;duration&gt;</span> <span class=\"string\">|</span> <span class=\"string\">default</span> <span class=\"string\">=</span> <span class=\"string\">1m</span> ]</span><br><span class=\"line\"> </span><br><span class=\"line\">  <span class=\"comment\"># 抓取超时时间</span></span><br><span class=\"line\">  [ <span class=\"attr\">scrape_timeout:</span> <span class=\"string\">&lt;duration&gt;</span> <span class=\"string\">|</span> <span class=\"string\">default</span> <span class=\"string\">=</span> <span class=\"string\">10s</span> ]</span><br><span class=\"line\"> </span><br><span class=\"line\">  <span class=\"comment\"># 执行判断 rules 的时间间隔</span></span><br><span class=\"line\">  [ <span class=\"attr\">evaluation_interval:</span> <span class=\"string\">&lt;duration&gt;</span> <span class=\"string\">|</span> <span class=\"string\">default</span> <span class=\"string\">=</span> <span class=\"string\">1m</span> ]</span><br><span class=\"line\"> </span><br><span class=\"line\">  <span class=\"comment\"># 外部一些标签设置</span></span><br><span class=\"line\">  <span class=\"attr\">external_labels:</span></span><br><span class=\"line\">    [ <span class=\"string\">&lt;labelname&gt;:</span> <span class=\"string\">&lt;labelvalue&gt;</span> <span class=\"string\">...</span> ]</span><br><span class=\"line\"> </span><br><span class=\"line\">  <span class=\"comment\"># 记录 PromQL 查询的文件。</span></span><br><span class=\"line\">  <span class=\"comment\"># 重新加载配置将重新打开文件。</span></span><br><span class=\"line\">  [ <span class=\"attr\">query_log_file:</span> <span class=\"string\">&lt;string&gt;</span> ]</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\"># 此片段指定报警规则文件， prometheus根据这些规则信息，会推送报警信息到alertmanager中。</span></span><br><span class=\"line\"><span class=\"attr\">rule_files:</span></span><br><span class=\"line\">  [ <span class=\"bullet\">-</span> <span class=\"string\">&lt;filepath_glob&gt;</span> <span class=\"string\">...</span> ]</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\"># 此片段指定抓取配置，prometheus的数据采集通过此片段配置。</span></span><br><span class=\"line\"><span class=\"attr\">scrape_configs:</span></span><br><span class=\"line\">  [ <span class=\"bullet\">-</span> <span class=\"string\">&lt;scrape_config&gt;</span> <span class=\"string\">...</span> ]</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\"># 此片段指定报警配置， 这里主要是指定prometheus将报警规则推送到指定的alertmanager实例地址。</span></span><br><span class=\"line\"><span class=\"attr\">alerting:</span></span><br><span class=\"line\">  <span class=\"attr\">alert_relabel_configs:</span></span><br><span class=\"line\">    [ <span class=\"bullet\">-</span> <span class=\"string\">&lt;relabel_config&gt;</span> <span class=\"string\">...</span> ]</span><br><span class=\"line\">  <span class=\"attr\">alertmanagers:</span></span><br><span class=\"line\">    [ <span class=\"bullet\">-</span> <span class=\"string\">&lt;alertmanager_config&gt;</span> <span class=\"string\">...</span> ]</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\"># 指定后端的存储的写入api地址。</span></span><br><span class=\"line\"><span class=\"attr\">remote_write:</span></span><br><span class=\"line\">  [ <span class=\"bullet\">-</span> <span class=\"string\">&lt;remote_write&gt;</span> <span class=\"string\">...</span> ]</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\"># 指定后端的存储的读取api地址。</span></span><br><span class=\"line\"><span class=\"attr\">remote_read:</span></span><br><span class=\"line\">  [ <span class=\"bullet\">-</span> <span class=\"string\">&lt;remote_read&gt;</span> <span class=\"string\">...</span> ]</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"scrape-configs-配置\"><a href=\"#scrape-configs-配置\" class=\"headerlink\" title=\"scrape_configs 配置\"></a>scrape_configs 配置</h2><figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">scrape_configs:</span></span><br><span class=\"line\">  <span class=\"comment\"># 抓取指标的作业名称</span></span><br><span class=\"line\">  <span class=\"attr\">job_name:</span> <span class=\"string\">&lt;job_name&gt;</span></span><br><span class=\"line\">  <span class=\"comment\"># 抓取间隔,默认继承global值。</span></span><br><span class=\"line\">[ <span class=\"attr\">scrape_interval:</span> <span class=\"string\">&lt;duration&gt;</span> <span class=\"string\">|</span> <span class=\"string\">default</span> <span class=\"string\">=</span> <span class=\"string\">&lt;global_config.scrape_interval&gt;</span> ]</span><br><span class=\"line\">  <span class=\"comment\"># 抓取超时时间,默认继承global值。</span></span><br><span class=\"line\">[ <span class=\"attr\">scrape_timeout:</span> <span class=\"string\">&lt;duration&gt;</span> <span class=\"string\">|</span> <span class=\"string\">default</span> <span class=\"string\">=</span> <span class=\"string\">&lt;global_config.scrape_timeout&gt;</span> ]</span><br><span class=\"line\">  <span class=\"comment\"># 抓取路径， 默认是/metrics</span></span><br><span class=\"line\">[ <span class=\"attr\">metrics_path:</span> <span class=\"string\">&lt;path&gt;</span> <span class=\"string\">|</span> <span class=\"string\">default</span> <span class=\"string\">=</span> <span class=\"string\">/metrics</span> ]</span><br><span class=\"line\">  <span class=\"comment\"># 指定采集使用的协议，http或者https。</span></span><br><span class=\"line\">[ <span class=\"attr\">scheme:</span> <span class=\"string\">&lt;scheme&gt;</span> <span class=\"string\">|</span> <span class=\"string\">default</span> <span class=\"string\">=</span> <span class=\"string\">http</span> ]</span><br><span class=\"line\">  <span class=\"comment\"># 指定url参数。</span></span><br><span class=\"line\">  <span class=\"attr\">params:</span></span><br><span class=\"line\">    [ <span class=\"string\">&lt;string&gt;:</span> [<span class=\"string\">&lt;string&gt;</span>, <span class=\"string\">...</span>] ]</span><br><span class=\"line\">  <span class=\"comment\"># 指定认证信息。</span></span><br><span class=\"line\">  <span class=\"attr\">basic_auth:</span></span><br><span class=\"line\">  [ <span class=\"attr\">username:</span> <span class=\"string\">&lt;string&gt;</span> ]</span><br><span class=\"line\">  [ <span class=\"attr\">password:</span> <span class=\"string\">&lt;secret&gt;</span> ]</span><br><span class=\"line\">  [ <span class=\"attr\">password_file:</span> <span class=\"string\">&lt;string&gt;</span> ]</span><br><span class=\"line\">  <span class=\"comment\"># 指定token的数值， 用户get metrics认证使用</span></span><br><span class=\"line\">[ <span class=\"attr\">bearer_token:</span> <span class=\"string\">&lt;secret&gt;</span> ]</span><br><span class=\"line\">  <span class=\"comment\"># 指定获取token的文件， 用户get metrics认证使用</span></span><br><span class=\"line\">[ <span class=\"attr\">bearer_token_file:</span> <span class=\"string\">/path/to/bearer/token/file</span> ]</span><br><span class=\"line\">  <span class=\"comment\"># 指定获取metrics时需要的tls证书</span></span><br><span class=\"line\">  <span class=\"attr\">tls_config:</span></span><br><span class=\"line\">  [ <span class=\"string\">&lt;tls_config&gt;</span> ]</span><br><span class=\"line\"><span class=\"comment\"># 指定静态配置</span></span><br><span class=\"line\">  <span class=\"attr\">static_configs:</span></span><br><span class=\"line\">  [ <span class=\"bullet\">-</span> <span class=\"attr\">targets:</span></span><br><span class=\"line\">  [   <span class=\"bullet\">-</span> <span class=\"string\">&#x27;&lt;host&gt;&#x27;</span> ]<span class=\"string\">...</span> ]</span><br><span class=\"line\"><span class=\"comment\"># Consul服务发现配置列表，_sd_即为service discovery 服务发现</span></span><br><span class=\"line\">  <span class=\"attr\">consul_sd_configs:</span></span><br><span class=\"line\">  [ <span class=\"bullet\">-</span> <span class=\"string\">&lt;consul_sd_config&gt;</span> <span class=\"string\">...</span> ]</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://github.com/prometheus/prometheus/blob/release-2.39/config/testdata/conf.good.yml\">Prometheus官网示例配置文件</a>  </p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># my global config</span></span><br><span class=\"line\"><span class=\"attr\">global:</span></span><br><span class=\"line\">  <span class=\"attr\">scrape_interval:</span> <span class=\"string\">15s</span></span><br><span class=\"line\">  <span class=\"attr\">evaluation_interval:</span> <span class=\"string\">30s</span></span><br><span class=\"line\">  <span class=\"comment\"># scrape_timeout is set to the global default (10s).</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attr\">external_labels:</span></span><br><span class=\"line\">    <span class=\"attr\">monitor:</span> <span class=\"string\">codelab</span></span><br><span class=\"line\">    <span class=\"attr\">foo:</span> <span class=\"string\">bar</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">rule_files:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">&quot;first.rules&quot;</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">&quot;my/*.rules&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">remote_write:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">url:</span> <span class=\"string\">http://remote1/push</span></span><br><span class=\"line\">    <span class=\"attr\">name:</span> <span class=\"string\">drop_expensive</span></span><br><span class=\"line\">    <span class=\"attr\">write_relabel_configs:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">source_labels:</span> [<span class=\"string\">__name__</span>]</span><br><span class=\"line\">        <span class=\"attr\">regex:</span> <span class=\"string\">expensive.*</span></span><br><span class=\"line\">        <span class=\"attr\">action:</span> <span class=\"string\">drop</span></span><br><span class=\"line\">    <span class=\"attr\">oauth2:</span></span><br><span class=\"line\">      <span class=\"attr\">client_id:</span> <span class=\"string\">&quot;123&quot;</span></span><br><span class=\"line\">      <span class=\"attr\">client_secret:</span> <span class=\"string\">&quot;456&quot;</span></span><br><span class=\"line\">      <span class=\"attr\">token_url:</span> <span class=\"string\">&quot;http://remote1/auth&quot;</span></span><br><span class=\"line\">      <span class=\"attr\">tls_config:</span></span><br><span class=\"line\">        <span class=\"attr\">cert_file:</span> <span class=\"string\">valid_cert_file</span></span><br><span class=\"line\">        <span class=\"attr\">key_file:</span> <span class=\"string\">valid_key_file</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">url:</span> <span class=\"string\">http://remote2/push</span></span><br><span class=\"line\">    <span class=\"attr\">name:</span> <span class=\"string\">rw_tls</span></span><br><span class=\"line\">    <span class=\"attr\">tls_config:</span></span><br><span class=\"line\">      <span class=\"attr\">cert_file:</span> <span class=\"string\">valid_cert_file</span></span><br><span class=\"line\">      <span class=\"attr\">key_file:</span> <span class=\"string\">valid_key_file</span></span><br><span class=\"line\">    <span class=\"attr\">headers:</span></span><br><span class=\"line\">      <span class=\"attr\">name:</span> <span class=\"string\">value</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">remote_read:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">url:</span> <span class=\"string\">http://remote1/read</span></span><br><span class=\"line\">    <span class=\"attr\">read_recent:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">    <span class=\"attr\">name:</span> <span class=\"string\">default</span></span><br><span class=\"line\">    <span class=\"attr\">enable_http2:</span> <span class=\"literal\">false</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">url:</span> <span class=\"string\">http://remote3/read</span></span><br><span class=\"line\">    <span class=\"attr\">read_recent:</span> <span class=\"literal\">false</span></span><br><span class=\"line\">    <span class=\"attr\">name:</span> <span class=\"string\">read_special</span></span><br><span class=\"line\">    <span class=\"attr\">required_matchers:</span></span><br><span class=\"line\">      <span class=\"attr\">job:</span> <span class=\"string\">special</span></span><br><span class=\"line\">    <span class=\"attr\">tls_config:</span></span><br><span class=\"line\">      <span class=\"attr\">cert_file:</span> <span class=\"string\">valid_cert_file</span></span><br><span class=\"line\">      <span class=\"attr\">key_file:</span> <span class=\"string\">valid_key_file</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">scrape_configs:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">job_name:</span> <span class=\"string\">prometheus</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attr\">honor_labels:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">    <span class=\"comment\"># scrape_interval is defined by the configured global (15s).</span></span><br><span class=\"line\">    <span class=\"comment\"># scrape_timeout is defined by the global default (10s).</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># metrics_path defaults to &#x27;/metrics&#x27;</span></span><br><span class=\"line\">    <span class=\"comment\"># scheme defaults to &#x27;http&#x27;.</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attr\">file_sd_configs:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">files:</span></span><br><span class=\"line\">          <span class=\"bullet\">-</span> <span class=\"string\">foo/*.slow.json</span></span><br><span class=\"line\">          <span class=\"bullet\">-</span> <span class=\"string\">foo/*.slow.yml</span></span><br><span class=\"line\">          <span class=\"bullet\">-</span> <span class=\"string\">single/file.yml</span></span><br><span class=\"line\">        <span class=\"attr\">refresh_interval:</span> <span class=\"string\">10m</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">files:</span></span><br><span class=\"line\">          <span class=\"bullet\">-</span> <span class=\"string\">bar/*.yaml</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attr\">static_configs:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">targets:</span> [<span class=\"string\">&quot;localhost:9090&quot;</span>, <span class=\"string\">&quot;localhost:9191&quot;</span>]</span><br><span class=\"line\">        <span class=\"attr\">labels:</span></span><br><span class=\"line\">          <span class=\"attr\">my:</span> <span class=\"string\">label</span></span><br><span class=\"line\">          <span class=\"attr\">your:</span> <span class=\"string\">label</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attr\">relabel_configs:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">source_labels:</span> [<span class=\"string\">job</span>, <span class=\"string\">__meta_dns_name</span>]</span><br><span class=\"line\">        <span class=\"attr\">regex:</span> <span class=\"string\">(.*)some-[regex]</span></span><br><span class=\"line\">        <span class=\"attr\">target_label:</span> <span class=\"string\">job</span></span><br><span class=\"line\">        <span class=\"attr\">replacement:</span> <span class=\"string\">foo-$&#123;1&#125;</span></span><br><span class=\"line\">        <span class=\"comment\"># action defaults to &#x27;replace&#x27;</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">source_labels:</span> [<span class=\"string\">abc</span>]</span><br><span class=\"line\">        <span class=\"attr\">target_label:</span> <span class=\"string\">cde</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">replacement:</span> <span class=\"string\">static</span></span><br><span class=\"line\">        <span class=\"attr\">target_label:</span> <span class=\"string\">abc</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">regex:</span></span><br><span class=\"line\">        <span class=\"attr\">replacement:</span> <span class=\"string\">static</span></span><br><span class=\"line\">        <span class=\"attr\">target_label:</span> <span class=\"string\">abc</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attr\">authorization:</span></span><br><span class=\"line\">      <span class=\"attr\">credentials_file:</span> <span class=\"string\">valid_token_file</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attr\">tls_config:</span></span><br><span class=\"line\">      <span class=\"attr\">min_version:</span> <span class=\"string\">TLS10</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">job_name:</span> <span class=\"string\">service-x</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attr\">basic_auth:</span></span><br><span class=\"line\">      <span class=\"attr\">username:</span> <span class=\"string\">admin_name</span></span><br><span class=\"line\">      <span class=\"attr\">password:</span> <span class=\"string\">&quot;multiline\\nmysecret\\ntest&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attr\">scrape_interval:</span> <span class=\"string\">50s</span></span><br><span class=\"line\">    <span class=\"attr\">scrape_timeout:</span> <span class=\"string\">5s</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attr\">body_size_limit:</span> <span class=\"string\">10MB</span></span><br><span class=\"line\">    <span class=\"attr\">sample_limit:</span> <span class=\"number\">1000</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attr\">metrics_path:</span> <span class=\"string\">/my_path</span></span><br><span class=\"line\">    <span class=\"attr\">scheme:</span> <span class=\"string\">https</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attr\">dns_sd_configs:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">refresh_interval:</span> <span class=\"string\">15s</span></span><br><span class=\"line\">        <span class=\"attr\">names:</span></span><br><span class=\"line\">          <span class=\"bullet\">-</span> <span class=\"string\">first.dns.address.domain.com</span></span><br><span class=\"line\">          <span class=\"bullet\">-</span> <span class=\"string\">second.dns.address.domain.com</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">names:</span></span><br><span class=\"line\">          <span class=\"bullet\">-</span> <span class=\"string\">first.dns.address.domain.com</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attr\">relabel_configs:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">source_labels:</span> [<span class=\"string\">job</span>]</span><br><span class=\"line\">        <span class=\"attr\">regex:</span> <span class=\"string\">(.*)some-[regex]</span></span><br><span class=\"line\">        <span class=\"attr\">action:</span> <span class=\"string\">drop</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">source_labels:</span> [<span class=\"string\">__address__</span>]</span><br><span class=\"line\">        <span class=\"attr\">modulus:</span> <span class=\"number\">8</span></span><br><span class=\"line\">        <span class=\"attr\">target_label:</span> <span class=\"string\">__tmp_hash</span></span><br><span class=\"line\">        <span class=\"attr\">action:</span> <span class=\"string\">hashmod</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">source_labels:</span> [<span class=\"string\">__tmp_hash</span>]</span><br><span class=\"line\">        <span class=\"attr\">regex:</span> <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"attr\">action:</span> <span class=\"string\">keep</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">action:</span> <span class=\"string\">labelmap</span></span><br><span class=\"line\">        <span class=\"attr\">regex:</span> <span class=\"number\">1</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">action:</span> <span class=\"string\">labeldrop</span></span><br><span class=\"line\">        <span class=\"attr\">regex:</span> <span class=\"string\">d</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">action:</span> <span class=\"string\">labelkeep</span></span><br><span class=\"line\">        <span class=\"attr\">regex:</span> <span class=\"string\">k</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attr\">metric_relabel_configs:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">source_labels:</span> [<span class=\"string\">__name__</span>]</span><br><span class=\"line\">        <span class=\"attr\">regex:</span> <span class=\"string\">expensive_metric.*</span></span><br><span class=\"line\">        <span class=\"attr\">action:</span> <span class=\"string\">drop</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">job_name:</span> <span class=\"string\">service-y</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attr\">consul_sd_configs:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">server:</span> <span class=\"string\">&quot;localhost:1234&quot;</span></span><br><span class=\"line\">        <span class=\"attr\">token:</span> <span class=\"string\">mysecret</span></span><br><span class=\"line\">        <span class=\"attr\">services:</span> [<span class=\"string\">&quot;nginx&quot;</span>, <span class=\"string\">&quot;cache&quot;</span>, <span class=\"string\">&quot;mysql&quot;</span>]</span><br><span class=\"line\">        <span class=\"attr\">tags:</span> [<span class=\"string\">&quot;canary&quot;</span>, <span class=\"string\">&quot;v1&quot;</span>]</span><br><span class=\"line\">        <span class=\"attr\">node_meta:</span></span><br><span class=\"line\">          <span class=\"attr\">rack:</span> <span class=\"string\">&quot;123&quot;</span></span><br><span class=\"line\">        <span class=\"attr\">allow_stale:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">        <span class=\"attr\">scheme:</span> <span class=\"string\">https</span></span><br><span class=\"line\">        <span class=\"attr\">tls_config:</span></span><br><span class=\"line\">          <span class=\"attr\">ca_file:</span> <span class=\"string\">valid_ca_file</span></span><br><span class=\"line\">          <span class=\"attr\">cert_file:</span> <span class=\"string\">valid_cert_file</span></span><br><span class=\"line\">          <span class=\"attr\">key_file:</span> <span class=\"string\">valid_key_file</span></span><br><span class=\"line\">          <span class=\"attr\">insecure_skip_verify:</span> <span class=\"literal\">false</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attr\">relabel_configs:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">source_labels:</span> [<span class=\"string\">__meta_sd_consul_tags</span>]</span><br><span class=\"line\">        <span class=\"attr\">separator:</span> <span class=\"string\">&quot;,&quot;</span></span><br><span class=\"line\">        <span class=\"attr\">regex:</span> <span class=\"string\">label:([^=]+)=([^,]+)</span></span><br><span class=\"line\">        <span class=\"attr\">target_label:</span> <span class=\"string\">$&#123;1&#125;</span></span><br><span class=\"line\">        <span class=\"attr\">replacement:</span> <span class=\"string\">$&#123;2&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">job_name:</span> <span class=\"string\">service-z</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attr\">tls_config:</span></span><br><span class=\"line\">      <span class=\"attr\">cert_file:</span> <span class=\"string\">valid_cert_file</span></span><br><span class=\"line\">      <span class=\"attr\">key_file:</span> <span class=\"string\">valid_key_file</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attr\">authorization:</span></span><br><span class=\"line\">      <span class=\"attr\">credentials:</span> <span class=\"string\">mysecret</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">job_name:</span> <span class=\"string\">service-kubernetes</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attr\">kubernetes_sd_configs:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">role:</span> <span class=\"string\">endpoints</span></span><br><span class=\"line\">        <span class=\"attr\">api_server:</span> <span class=\"string\">&quot;https://localhost:1234&quot;</span></span><br><span class=\"line\">        <span class=\"attr\">tls_config:</span></span><br><span class=\"line\">          <span class=\"attr\">cert_file:</span> <span class=\"string\">valid_cert_file</span></span><br><span class=\"line\">          <span class=\"attr\">key_file:</span> <span class=\"string\">valid_key_file</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"attr\">basic_auth:</span></span><br><span class=\"line\">          <span class=\"attr\">username:</span> <span class=\"string\">&quot;myusername&quot;</span></span><br><span class=\"line\">          <span class=\"attr\">password:</span> <span class=\"string\">&quot;mysecret&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">job_name:</span> <span class=\"string\">service-kubernetes-namespaces</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attr\">kubernetes_sd_configs:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">role:</span> <span class=\"string\">endpoints</span></span><br><span class=\"line\">        <span class=\"attr\">api_server:</span> <span class=\"string\">&quot;https://localhost:1234&quot;</span></span><br><span class=\"line\">        <span class=\"attr\">namespaces:</span></span><br><span class=\"line\">          <span class=\"attr\">names:</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"string\">default</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attr\">basic_auth:</span></span><br><span class=\"line\">      <span class=\"attr\">username:</span> <span class=\"string\">&quot;myusername&quot;</span></span><br><span class=\"line\">      <span class=\"attr\">password_file:</span> <span class=\"string\">valid_password_file</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">job_name:</span> <span class=\"string\">service-kuma</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attr\">kuma_sd_configs:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">server:</span> <span class=\"string\">http://kuma-control-plane.kuma-system.svc:5676</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">job_name:</span> <span class=\"string\">service-marathon</span></span><br><span class=\"line\">    <span class=\"attr\">marathon_sd_configs:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">servers:</span></span><br><span class=\"line\">          <span class=\"bullet\">-</span> <span class=\"string\">&quot;https://marathon.example.com:443&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"attr\">auth_token:</span> <span class=\"string\">&quot;mysecret&quot;</span></span><br><span class=\"line\">        <span class=\"attr\">tls_config:</span></span><br><span class=\"line\">          <span class=\"attr\">cert_file:</span> <span class=\"string\">valid_cert_file</span></span><br><span class=\"line\">          <span class=\"attr\">key_file:</span> <span class=\"string\">valid_key_file</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">job_name:</span> <span class=\"string\">service-nomad</span></span><br><span class=\"line\">    <span class=\"attr\">nomad_sd_configs:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">server:</span> <span class=\"string\">&#x27;http://localhost:4646&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">job_name:</span> <span class=\"string\">service-ec2</span></span><br><span class=\"line\">    <span class=\"attr\">ec2_sd_configs:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">region:</span> <span class=\"string\">us-east-1</span></span><br><span class=\"line\">        <span class=\"attr\">access_key:</span> <span class=\"string\">access</span></span><br><span class=\"line\">        <span class=\"attr\">secret_key:</span> <span class=\"string\">mysecret</span></span><br><span class=\"line\">        <span class=\"attr\">profile:</span> <span class=\"string\">profile</span></span><br><span class=\"line\">        <span class=\"attr\">filters:</span></span><br><span class=\"line\">          <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">tag:environment</span></span><br><span class=\"line\">            <span class=\"attr\">values:</span></span><br><span class=\"line\">              <span class=\"bullet\">-</span> <span class=\"string\">prod</span></span><br><span class=\"line\"></span><br><span class=\"line\">          <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">tag:service</span></span><br><span class=\"line\">            <span class=\"attr\">values:</span></span><br><span class=\"line\">              <span class=\"bullet\">-</span> <span class=\"string\">web</span></span><br><span class=\"line\">              <span class=\"bullet\">-</span> <span class=\"string\">db</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">job_name:</span> <span class=\"string\">service-lightsail</span></span><br><span class=\"line\">    <span class=\"attr\">lightsail_sd_configs:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">region:</span> <span class=\"string\">us-east-1</span></span><br><span class=\"line\">        <span class=\"attr\">access_key:</span> <span class=\"string\">access</span></span><br><span class=\"line\">        <span class=\"attr\">secret_key:</span> <span class=\"string\">mysecret</span></span><br><span class=\"line\">        <span class=\"attr\">profile:</span> <span class=\"string\">profile</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">job_name:</span> <span class=\"string\">service-azure</span></span><br><span class=\"line\">    <span class=\"attr\">azure_sd_configs:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">environment:</span> <span class=\"string\">AzurePublicCloud</span></span><br><span class=\"line\">        <span class=\"attr\">authentication_method:</span> <span class=\"string\">OAuth</span></span><br><span class=\"line\">        <span class=\"attr\">subscription_id:</span> <span class=\"string\">11AAAA11-A11A-111A-A111-1111A1111A11</span></span><br><span class=\"line\">        <span class=\"attr\">resource_group:</span> <span class=\"string\">my-resource-group</span></span><br><span class=\"line\">        <span class=\"attr\">tenant_id:</span> <span class=\"string\">BBBB222B-B2B2-2B22-B222-2BB2222BB2B2</span></span><br><span class=\"line\">        <span class=\"attr\">client_id:</span> <span class=\"string\">333333CC-3C33-3333-CCC3-33C3CCCCC33C</span></span><br><span class=\"line\">        <span class=\"attr\">client_secret:</span> <span class=\"string\">mysecret</span></span><br><span class=\"line\">        <span class=\"attr\">port:</span> <span class=\"number\">9100</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">job_name:</span> <span class=\"string\">service-nerve</span></span><br><span class=\"line\">    <span class=\"attr\">nerve_sd_configs:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">servers:</span></span><br><span class=\"line\">          <span class=\"bullet\">-</span> <span class=\"string\">localhost</span></span><br><span class=\"line\">        <span class=\"attr\">paths:</span></span><br><span class=\"line\">          <span class=\"bullet\">-</span> <span class=\"string\">/monitoring</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">job_name:</span> <span class=\"string\">0123service-xxx</span></span><br><span class=\"line\">    <span class=\"attr\">metrics_path:</span> <span class=\"string\">/metrics</span></span><br><span class=\"line\">    <span class=\"attr\">static_configs:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">targets:</span></span><br><span class=\"line\">          <span class=\"bullet\">-</span> <span class=\"string\">localhost:9090</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">job_name:</span> <span class=\"string\">badfederation</span></span><br><span class=\"line\">    <span class=\"attr\">honor_timestamps:</span> <span class=\"literal\">false</span></span><br><span class=\"line\">    <span class=\"attr\">metrics_path:</span> <span class=\"string\">/federate</span></span><br><span class=\"line\">    <span class=\"attr\">static_configs:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">targets:</span></span><br><span class=\"line\">          <span class=\"bullet\">-</span> <span class=\"string\">localhost:9090</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">job_name:</span> <span class=\"string\">測試</span></span><br><span class=\"line\">    <span class=\"attr\">metrics_path:</span> <span class=\"string\">/metrics</span></span><br><span class=\"line\">    <span class=\"attr\">static_configs:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">targets:</span></span><br><span class=\"line\">          <span class=\"bullet\">-</span> <span class=\"string\">localhost:9090</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">job_name:</span> <span class=\"string\">httpsd</span></span><br><span class=\"line\">    <span class=\"attr\">http_sd_configs:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">url:</span> <span class=\"string\">&quot;http://example.com/prometheus&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">job_name:</span> <span class=\"string\">service-triton</span></span><br><span class=\"line\">    <span class=\"attr\">triton_sd_configs:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">account:</span> <span class=\"string\">&quot;testAccount&quot;</span></span><br><span class=\"line\">        <span class=\"attr\">dns_suffix:</span> <span class=\"string\">&quot;triton.example.com&quot;</span></span><br><span class=\"line\">        <span class=\"attr\">endpoint:</span> <span class=\"string\">&quot;triton.example.com&quot;</span></span><br><span class=\"line\">        <span class=\"attr\">port:</span> <span class=\"number\">9163</span></span><br><span class=\"line\">        <span class=\"attr\">refresh_interval:</span> <span class=\"string\">1m</span></span><br><span class=\"line\">        <span class=\"attr\">version:</span> <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"attr\">tls_config:</span></span><br><span class=\"line\">          <span class=\"attr\">cert_file:</span> <span class=\"string\">valid_cert_file</span></span><br><span class=\"line\">          <span class=\"attr\">key_file:</span> <span class=\"string\">valid_key_file</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">job_name:</span> <span class=\"string\">digitalocean-droplets</span></span><br><span class=\"line\">    <span class=\"attr\">digitalocean_sd_configs:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">authorization:</span></span><br><span class=\"line\">          <span class=\"attr\">credentials:</span> <span class=\"string\">abcdef</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">job_name:</span> <span class=\"string\">docker</span></span><br><span class=\"line\">    <span class=\"attr\">docker_sd_configs:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">host:</span> <span class=\"string\">unix:///var/run/docker.sock</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">job_name:</span> <span class=\"string\">dockerswarm</span></span><br><span class=\"line\">    <span class=\"attr\">dockerswarm_sd_configs:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">host:</span> <span class=\"string\">http://127.0.0.1:2375</span></span><br><span class=\"line\">        <span class=\"attr\">role:</span> <span class=\"string\">nodes</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">job_name:</span> <span class=\"string\">service-openstack</span></span><br><span class=\"line\">    <span class=\"attr\">openstack_sd_configs:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">role:</span> <span class=\"string\">instance</span></span><br><span class=\"line\">        <span class=\"attr\">region:</span> <span class=\"string\">RegionOne</span></span><br><span class=\"line\">        <span class=\"attr\">port:</span> <span class=\"number\">80</span></span><br><span class=\"line\">        <span class=\"attr\">refresh_interval:</span> <span class=\"string\">1m</span></span><br><span class=\"line\">        <span class=\"attr\">tls_config:</span></span><br><span class=\"line\">          <span class=\"attr\">ca_file:</span> <span class=\"string\">valid_ca_file</span></span><br><span class=\"line\">          <span class=\"attr\">cert_file:</span> <span class=\"string\">valid_cert_file</span></span><br><span class=\"line\">          <span class=\"attr\">key_file:</span> <span class=\"string\">valid_key_file</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">job_name:</span> <span class=\"string\">service-puppetdb</span></span><br><span class=\"line\">    <span class=\"attr\">puppetdb_sd_configs:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">url:</span> <span class=\"string\">https://puppetserver/</span></span><br><span class=\"line\">        <span class=\"attr\">query:</span> <span class=\"string\">&#x27;resources &#123; type = &quot;Package&quot; and title = &quot;httpd&quot; &#125;&#x27;</span></span><br><span class=\"line\">        <span class=\"attr\">include_parameters:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">        <span class=\"attr\">port:</span> <span class=\"number\">80</span></span><br><span class=\"line\">        <span class=\"attr\">refresh_interval:</span> <span class=\"string\">1m</span></span><br><span class=\"line\">        <span class=\"attr\">tls_config:</span></span><br><span class=\"line\">          <span class=\"attr\">ca_file:</span> <span class=\"string\">valid_ca_file</span></span><br><span class=\"line\">          <span class=\"attr\">cert_file:</span> <span class=\"string\">valid_cert_file</span></span><br><span class=\"line\">          <span class=\"attr\">key_file:</span> <span class=\"string\">valid_key_file</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">job_name:</span> <span class=\"string\">hetzner</span></span><br><span class=\"line\">    <span class=\"attr\">relabel_configs:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">action:</span> <span class=\"string\">uppercase</span></span><br><span class=\"line\">        <span class=\"attr\">source_labels:</span> [<span class=\"string\">instance</span>]</span><br><span class=\"line\">        <span class=\"attr\">target_label:</span> <span class=\"string\">instance</span></span><br><span class=\"line\">    <span class=\"attr\">hetzner_sd_configs:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">role:</span> <span class=\"string\">hcloud</span></span><br><span class=\"line\">        <span class=\"attr\">authorization:</span></span><br><span class=\"line\">          <span class=\"attr\">credentials:</span> <span class=\"string\">abcdef</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">role:</span> <span class=\"string\">robot</span></span><br><span class=\"line\">        <span class=\"attr\">basic_auth:</span></span><br><span class=\"line\">          <span class=\"attr\">username:</span> <span class=\"string\">abcdef</span></span><br><span class=\"line\">          <span class=\"attr\">password:</span> <span class=\"string\">abcdef</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">job_name:</span> <span class=\"string\">service-eureka</span></span><br><span class=\"line\">    <span class=\"attr\">eureka_sd_configs:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">server:</span> <span class=\"string\">&quot;http://eureka.example.com:8761/eureka&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">job_name:</span> <span class=\"string\">scaleway</span></span><br><span class=\"line\">    <span class=\"attr\">scaleway_sd_configs:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">role:</span> <span class=\"string\">instance</span></span><br><span class=\"line\">        <span class=\"attr\">project_id:</span> <span class=\"number\">11111111</span><span class=\"number\">-1111</span><span class=\"number\">-1111</span><span class=\"number\">-1111</span><span class=\"number\">-111111111112</span></span><br><span class=\"line\">        <span class=\"attr\">access_key:</span> <span class=\"string\">SCWXXXXXXXXXXXXXXXXX</span></span><br><span class=\"line\">        <span class=\"attr\">secret_key:</span> <span class=\"number\">11111111</span><span class=\"number\">-1111</span><span class=\"number\">-1111</span><span class=\"number\">-1111</span><span class=\"number\">-111111111111</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">role:</span> <span class=\"string\">baremetal</span></span><br><span class=\"line\">        <span class=\"attr\">project_id:</span> <span class=\"number\">11111111</span><span class=\"number\">-1111</span><span class=\"number\">-1111</span><span class=\"number\">-1111</span><span class=\"number\">-111111111112</span></span><br><span class=\"line\">        <span class=\"attr\">access_key:</span> <span class=\"string\">SCWXXXXXXXXXXXXXXXXX</span></span><br><span class=\"line\">        <span class=\"attr\">secret_key:</span> <span class=\"number\">11111111</span><span class=\"number\">-1111</span><span class=\"number\">-1111</span><span class=\"number\">-1111</span><span class=\"number\">-111111111111</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">job_name:</span> <span class=\"string\">linode-instances</span></span><br><span class=\"line\">    <span class=\"attr\">linode_sd_configs:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">authorization:</span></span><br><span class=\"line\">          <span class=\"attr\">credentials:</span> <span class=\"string\">abcdef</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">job_name:</span> <span class=\"string\">uyuni</span></span><br><span class=\"line\">    <span class=\"attr\">uyuni_sd_configs:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">server:</span> <span class=\"string\">https://localhost:1234</span></span><br><span class=\"line\">        <span class=\"attr\">username:</span> <span class=\"string\">gopher</span></span><br><span class=\"line\">        <span class=\"attr\">password:</span> <span class=\"string\">hole</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">job_name:</span> <span class=\"string\">ionos</span></span><br><span class=\"line\">    <span class=\"attr\">ionos_sd_configs:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">datacenter_id:</span> <span class=\"string\">8feda53f-15f0-447f-badf-ebe32dad2fc0</span></span><br><span class=\"line\">        <span class=\"attr\">authorization:</span></span><br><span class=\"line\">          <span class=\"attr\">credentials:</span> <span class=\"string\">abcdef</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">job_name:</span> <span class=\"string\">vultr</span></span><br><span class=\"line\">    <span class=\"attr\">vultr_sd_configs:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">authorization:</span></span><br><span class=\"line\">          <span class=\"attr\">credentials:</span> <span class=\"string\">abcdef</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">alerting:</span></span><br><span class=\"line\">  <span class=\"attr\">alertmanagers:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">scheme:</span> <span class=\"string\">https</span></span><br><span class=\"line\">      <span class=\"attr\">static_configs:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">targets:</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"string\">&quot;1.2.3.4:9093&quot;</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"string\">&quot;1.2.3.5:9093&quot;</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"string\">&quot;1.2.3.6:9093&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">storage:</span></span><br><span class=\"line\">  <span class=\"attr\">tsdb:</span></span><br><span class=\"line\">    <span class=\"attr\">out_of_order_time_window:</span> <span class=\"string\">30m</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">tracing:</span></span><br><span class=\"line\">  <span class=\"attr\">endpoint:</span> <span class=\"string\">&quot;localhost:4317&quot;</span></span><br><span class=\"line\">  <span class=\"attr\">client_type:</span> <span class=\"string\">&quot;grpc&quot;</span></span><br><span class=\"line\">  <span class=\"attr\">headers:</span></span><br><span class=\"line\">    <span class=\"attr\">foo:</span> <span class=\"string\">&quot;bar&quot;</span></span><br><span class=\"line\">  <span class=\"attr\">timeout:</span> <span class=\"string\">5s</span></span><br><span class=\"line\">  <span class=\"attr\">compression:</span> <span class=\"string\">&quot;gzip&quot;</span></span><br><span class=\"line\">  <span class=\"attr\">tls_config:</span></span><br><span class=\"line\">    <span class=\"attr\">cert_file:</span> <span class=\"string\">valid_cert_file</span></span><br><span class=\"line\">    <span class=\"attr\">key_file:</span> <span class=\"string\">valid_key_file</span></span><br><span class=\"line\">    <span class=\"attr\">insecure_skip_verify:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>","categories":["Prometheus"],"tags":["Prometheus配置文件"]},{"title":"Linux脚本开机自启动","url":"/2022/11/06/Linux/Linux%E8%84%9A%E6%9C%AC%E5%BC%80%E6%9C%BA%E8%87%AA%E5%90%AF%E5%8A%A8/","content":"<p><img src=\"https://i.loli.net/2021/08/02/cX51yi4KrLYRfJU.jpg\" alt=\"linux.jpg\">  </p>\n<span id=\"more\"></span>\n<h1 id=\"Linux脚本开机启动\"><a href=\"#Linux脚本开机启动\" class=\"headerlink\" title=\"Linux脚本开机启动\"></a>Linux脚本开机启动</h1><p>Linux系统文件执行顺序</p>\n<h2 id=\"方式一-etc-profile-d\"><a href=\"#方式一-etc-profile-d\" class=\"headerlink\" title=\"方式一 /etc/profile.d\"></a>方式一 /etc/profile.d</h2><p>将需要自启动的脚本放在 <strong>/etc/profile.d/</strong> 目录下，将脚本添加执行权限。<br><strong>需要注意的是，该方式的脚本必须为 .sh结尾，且每次远程连接服务器时都会启动一次该脚本</strong>。  </p>\n<h2 id=\"方式二-etc-rc-local\"><a href=\"#方式二-etc-rc-local\" class=\"headerlink\" title=\"方式二 /etc/rc.local\"></a>方式二 /etc/rc.local</h2><p>在/etc/rc.local文件中加入需要执行的脚本启动命令，且将 <strong>/etc/rc.d/rc.local</strong> 添加执行权限。使用该方式只会在开机时执行脚本  </p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">~]#</span><span class=\"bash\"> more /etc/rc.local</span> </span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">!/bin/bash</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> THIS FILE IS ADDED FOR COMPATIBILITY PURPOSES</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"></span></span><br><span class=\"line\"><span class=\"bash\"><span class=\"comment\"># It is highly advisable to create own systemd services or udev rules</span></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> to run scripts during boot instead of using this file.</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"></span></span><br><span class=\"line\"><span class=\"bash\"><span class=\"comment\"># In contrast to previous versions due to parallel execution during boot</span></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> this script will NOT be run after all other service</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"></span></span><br><span class=\"line\"><span class=\"bash\"><span class=\"comment\"># Please note that you must run &#x27;chmod +x /etc/rc.d/rc.local&#x27; to ensure</span></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> that this script will be executed during boot.</span></span><br><span class=\"line\"></span><br><span class=\"line\">touch /var/lock/subsys/local</span><br><span class=\"line\">sh /usr/local/prometheus/start.sh  #添加的执行脚本</span><br></pre></td></tr></table></figure>","categories":["Linux"],"tags":["Linux"]},{"title":"5-PromQL","url":"/2022/10/31/prometheus/5-PromQL/","content":"<p><img src=\"https://s2.loli.net/2022/10/21/Dv2fVhPgOBrK7bF.jpg\" alt=\"prometheus\">  </p>\n<span id=\"more\"></span>\n<h1 id=\"PromQL\"><a href=\"#PromQL\" class=\"headerlink\" title=\"PromQL\"></a>PromQL</h1><p>从之前中<a href=\"/2022/10/22/prometheus/3-Prometheus%E6%95%B0%E6%8D%AE/\" title=\"3-Prometheus数据\">3-Prometheus数据</a>学习了Prometheus的四种数据类型。<br>PromQL中使用 <strong>#</strong> 进行注释  </p>\n<h2 id=\"基础内容\"><a href=\"#基础内容\" class=\"headerlink\" title=\"基础内容\"></a>基础内容</h2><p><strong>瞬时向量（Instant vector）</strong>： 一组时间序列，每个时间序列包含一个样本，都共享相同的时间戳<br><strong>范围向量（Range vector）</strong>： 一组时间序列，其中包含每个时间序列随时间变化的数据点范围，即 node_cpu_seconds_total[5m]此类查询 ，在 Prometheus页面查询无法使用此类查询展现图表，必须是<strong>即时向量</strong>或者<strong>标量</strong>。<br><strong>标量（Scalar ）</strong>： 一个简单的数字浮点值  </p>\n<h3 id=\"标签选择器\"><a href=\"#标签选择器\" class=\"headerlink\" title=\"标签选择器\"></a>标签选择器</h3><p><code>node_cpu_seconds_total&#123;mode!=&quot;idle&quot;&#125;</code>，其中<code>mode</code>为node_cpu_seconds_total指标的一个标签，可以通过标签选择器进行过滤。<br><strong>=</strong> ：与字符串匹配<br><strong>!=</strong> ：与字符串不匹配<br><strong>=~</strong> ：与正则匹配，匹配为全锚定。<code>=~&quot;foo&quot;</code>相当于<code>=~&quot;^foo$&quot;</code>.<br><strong>!~</strong> ：与正则不匹配  </p>\n<h3 id=\"时间范围选择器\"><a href=\"#时间范围选择器\" class=\"headerlink\" title=\"时间范围选择器\"></a>时间范围选择器</h3><p>时间范围有以下单位：<br><strong>ms</strong>- 毫秒<br><strong>s</strong>- 秒<br><strong>m</strong>- 分钟<br><strong>h</strong>- 小时<br><strong>d</strong>- 天<br><strong>w</strong>- 周<br><strong>y</strong>- 年<br>使用方式<code>node_cpu_seconds_total[5m]</code></p>\n<h3 id=\"偏移修饰符\"><a href=\"#偏移修饰符\" class=\"headerlink\" title=\"偏移修饰符\"></a>偏移修饰符</h3><p>更改查询<strong>即时向量</strong>或<strong>范围向量</strong>的时间偏移量<br><code>node_cpu_seconds_total offset 5m</code> ：表示5分钟前的值<br><code>node_cpu_guest_seconds_total[5m] offset 1d</code>表示一天前5分钟的值  </p>\n<h3 id=\"修饰符\"><a href=\"#修饰符\" class=\"headerlink\" title=\"@修饰符\"></a>@修饰符</h3><p>通过@ 直接跳转到某个uinx时间戳，<br><code>node_cpu_guest_seconds_total @ 1667137698</code>:查询指标时间戳为1667137698，即时间为2022-10-30 21:48:18的值<br><code>node_cpu_guest_seconds_total[5m] @ 1667137698</code>:查询2022-10-30 21:48:18前5分钟的值  </p>\n<h2 id=\"运算\"><a href=\"#运算\" class=\"headerlink\" title=\"运算\"></a>运算</h2><h3 id=\"运算符\"><a href=\"#运算符\" class=\"headerlink\" title=\"运算符\"></a>运算符</h3><p><strong>+</strong> （加法）<br><strong>-</strong> （减法）<br><strong>*</strong> （乘法）<br><strong>/</strong> （除法）<br><strong>%</strong> （取模）<br><strong>^</strong> （幂）<br>使用运算符的结果与原指标的意义不再一样，输出的结果没有指标名称，只包含标签、值。<br>实际运算中不同的指标的标签名以及标签数量不一致，运算时有以下运算原则。  </p>\n<ol>\n<li>运算时按照标签相同的值进行运算，例如： node_cpu_seconds_total + node_cpu_seconds_total ，标签全部相同的值相加  </li>\n<li>两个瞬时向量的数量不同，结果数量与数量少的一致，node_cpu_guest_seconds_total + node_cpu_seconds_total，结果为 mode=”nice”、mode=”user”的两个向量相加  </li>\n</ol>\n<h3 id=\"逻辑比较\"><a href=\"#逻辑比较\" class=\"headerlink\" title=\"逻辑比较\"></a>逻辑比较</h3><p>== ：相等判断，相等为1(true)，不相等为0(false)<br>!= ：判断是否不相等，输出结果类似==<br>&gt;= ：输出结果类似==<br>&lt;= ：输出结果类似==<br>&gt; ：输出结果类似==<br>&lt; ：输出结果类似==  </p>\n<h3 id=\"逻辑运算\"><a href=\"#逻辑运算\" class=\"headerlink\" title=\"逻辑运算\"></a>逻辑运算</h3><p><strong>and</strong> ：对多个指标的数据集进行标签判断，获取两个指标集具有共同的标签的值 <strong>（优先展示or左边的指标）</strong><br><strong>or</strong> ：对多个指标集数据进行展示，如果有标签重复，则仅显示其中一个标签的值 <strong>（优先展示or左边的指标）</strong><br><strong>unless</strong> :对多个指标的数据集进行标签判断，获取两个指标集不具有共同的标签的值 <strong>（优先展示or左边的指标）</strong>  </p>\n<h3 id=\"向量匹配\"><a href=\"#向量匹配\" class=\"headerlink\" title=\"向量匹配\"></a>向量匹配</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">test1&#123;method=&quot;get&quot;, code=&quot;500&quot;&#125;  24</span><br><span class=\"line\">test1&#123;method=&quot;get&quot;, code=&quot;404&quot;&#125;  30</span><br><span class=\"line\">test1&#123;method=&quot;put&quot;, code=&quot;501&quot;&#125;  3</span><br><span class=\"line\">test1&#123;method=&quot;post&quot;, code=&quot;500&quot;&#125; 6</span><br><span class=\"line\">test1&#123;method=&quot;post&quot;, code=&quot;404&quot;&#125; 21</span><br><span class=\"line\"></span><br><span class=\"line\">test2&#123;method=&quot;get&quot;&#125;  600</span><br><span class=\"line\">test2&#123;method=&quot;del&quot;&#125;  34</span><br><span class=\"line\">test2&#123;method=&quot;post&quot;&#125; 120</span><br></pre></td></tr></table></figure>\n\n<p>两个指标test1与test2的标签以及数量不一致们可以使用ignoring忽略不共有的标签。   </p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">test1&#123; code=&quot;500&quot;&#125; / ignoring(code) test2   # </span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> test1&#123; code=<span class=\"string\">&quot;500&quot;</span>&#125; 可以过滤出以下两条</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> test1&#123;method=<span class=\"string\">&quot;get&quot;</span>, code=<span class=\"string\">&quot;500&quot;</span>&#125;  24</span> </span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> test1&#123;method=<span class=\"string\">&quot;post&quot;</span>, code=<span class=\"string\">&quot;500&quot;</span>&#125; 6</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 然后 ignoring(code) 将过滤出的两条的code标签忽略，进行运算</span></span><br><span class=\"line\">&#123;method=&quot;get&quot;&#125;  0.04            #  24 / 600</span><br><span class=\"line\">&#123;method=&quot;post&quot;&#125; 0.05            #   6 / 120</span><br></pre></td></tr></table></figure>\n<p>在以上的例子中<code>test1&#123; code=&quot;500&quot;&#125; / ignoring(code) test2</code>等同于<code>test1&#123; code=&quot;500&quot;&#125; / on(method) test2</code>,on 与 ignoring相反，意思为只考虑提供的列表中的标签。ignoring与on 结果的数目都与左边的指标数量相同，可以使用group_right以右边数量为准  </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">test1/ ignoring(code) group_left test2</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;method=&quot;get&quot;, code=&quot;500&quot;&#125;  0.04            //  24 / 600</span><br><span class=\"line\">&#123;method=&quot;get&quot;, code=&quot;404&quot;&#125;  0.05            //  30 / 600</span><br><span class=\"line\">&#123;method=&quot;post&quot;, code=&quot;500&quot;&#125; 0.05            //   6 / 120</span><br><span class=\"line\">&#123;method=&quot;post&quot;, code=&quot;404&quot;&#125; 0.175           //  21 / 120</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"函数\"><a href=\"#函数\" class=\"headerlink\" title=\"函数\"></a>函数</h1><h2 id=\"聚合函数\"><a href=\"#聚合函数\" class=\"headerlink\" title=\"聚合函数\"></a>聚合函数</h2><p>聚合函数可以与 <strong>without</strong>、<strong>by</strong> 一起使用<br>without：表示计算结果中移除列举的标签<br>by：表示计算结果中只保留列出的标签<br>通过without和by可以按照样本的问题对数据进⾏聚合  </p>\n<h3 id=\"sum\"><a href=\"#sum\" class=\"headerlink\" title=\"sum()\"></a>sum()</h3><p>求和函数，可以使用without、by根据标签进行聚合  </p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">sum by(handler) (prometheus_http_requests_total)</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;handler=&quot;/-/ready&quot;&#125;\t3</span><br><span class=\"line\">&#123;handler=&quot;/api/v1/label/:name/values&quot;&#125;\t4</span><br><span class=\"line\">&#123;handler=&quot;/api/v1/labels&quot;&#125;\t3</span><br><span class=\"line\">&#123;handler=&quot;/api/v1/metadata&quot;&#125;\t27</span><br><span class=\"line\">&#123;handler=&quot;/api/v1/query&quot;&#125;\t123</span><br><span class=\"line\">&#123;handler=&quot;/api/v1/query_range&quot;&#125;\t8</span><br><span class=\"line\">&#123;handler=&quot;/api/v1/rules&quot;&#125;\t1</span><br><span class=\"line\">&#123;handler=&quot;/api/v1/series&quot;&#125;\t3</span><br><span class=\"line\">&#123;handler=&quot;/api/v1/status/config&quot;&#125;\t1</span><br><span class=\"line\">&#123;handler=&quot;/api/v1/targets&quot;&#125;\t1</span><br><span class=\"line\">&#123;handler=&quot;/favicon.ico&quot;&#125;\t2</span><br><span class=\"line\">&#123;handler=&quot;/graph&quot;&#125;\t3</span><br><span class=\"line\">&#123;handler=&quot;/metrics&quot;&#125;\t403</span><br><span class=\"line\">&#123;handler=&quot;/static/*filepath&quot;&#125;\t11</span><br><span class=\"line\">&#123;handler=&quot;/&quot;&#125;\t1</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"avg\"><a href=\"#avg\" class=\"headerlink\" title=\"avg()\"></a>avg()</h3><p>所有值的平均值  </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">avg(prometheus_http_requests_total)</span><br><span class=\"line\">&#123;&#125;  43.06249999999999</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"count\"><a href=\"#count\" class=\"headerlink\" title=\"count()\"></a>count()</h3><p>返回分组中的时间序列数</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">count(prometheus_http_requests_total)</span><br><span class=\"line\">&#123;&#125;  16</span><br><span class=\"line\"></span><br><span class=\"line\">count by (code) (prometheus_http_requests_total)</span><br><span class=\"line\">&#123;code=&quot;200&quot;&#125;\t14</span><br><span class=\"line\">&#123;code=&quot;302&quot;&#125;\t1</span><br><span class=\"line\">&#123;code=&quot;400&quot;&#125;\t1</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"count-values\"><a href=\"#count-values\" class=\"headerlink\" title=\"count_values()\"></a>count_values()</h3><p>计算具有相同值的元素个数</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">count_values (&quot;handler&quot;,prometheus_http_requests_total)</span><br><span class=\"line\">&#123;handler=&quot;3&quot;&#125;\t2   #这表示值为3的有2条</span><br><span class=\"line\">&#123;handler=&quot;4&quot;&#125;\t1</span><br><span class=\"line\">&#123;handler=&quot;8&quot;&#125;\t2</span><br><span class=\"line\">&#123;handler=&quot;47&quot;&#125;\t1</span><br><span class=\"line\">&#123;handler=&quot;153&quot;&#125;\t1</span><br><span class=\"line\">&#123;handler=&quot;1&quot;&#125;\t4</span><br><span class=\"line\">&#123;handler=&quot;5&quot;&#125;\t1</span><br><span class=\"line\">&#123;handler=&quot;2&quot;&#125;\t1</span><br><span class=\"line\">&#123;handler=&quot;553&quot;&#125;\t1</span><br><span class=\"line\">&#123;handler=&quot;11&quot;&#125;\t1</span><br><span class=\"line\">&#123;handler=&quot;14&quot;&#125;\t1</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"min-、max\"><a href=\"#min-、max\" class=\"headerlink\" title=\"min()、max()\"></a>min()、max()</h3><p>组内最小值、最大值  </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">max by (instance,job)(prometheus_http_requests_total)</span><br><span class=\"line\">&#123;instance=&quot;localhost:9090&quot;, job=&quot;prometheus&quot;&#125;   575</span><br><span class=\"line\"></span><br><span class=\"line\">min by (instance,job)(prometheus_http_requests_total)</span><br><span class=\"line\">&#123;instance=&quot;localhost:9090&quot;, job=&quot;prometheus&quot;&#125;   1</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"stddev-、stdvar\"><a href=\"#stddev-、stdvar\" class=\"headerlink\" title=\"stddev()、stdvar()\"></a>stddev()、stdvar()</h3><p>stddev():标准差<br>stdvar():方差<br>方差与标准差可以反应数据集离散程度，例如：{2,4,6}与{3,4,5}的平均值都是4，但是两组数据的方差与标准差确不一样。<br>以以上两组数据计算方差：<br>{2,4,6}: ((2-4)^2+(4-4)^2+(6-4)^2)/3=(4+0+4)/3=2.666<br>{3,4,5}: ((3-4)^2+(4-4)^2+(5-4)^2)/3=(1+0+1)/3= 0.666<br>标准差计算方式就是将方差开根号<br>{2,4,6}标准差:1.632<br>{3,4,5}标准差:0.816  </p>\n<h3 id=\"topk-、bottomk\"><a href=\"#topk-、bottomk\" class=\"headerlink\" title=\"topk()、bottomk()\"></a>topk()、bottomk()</h3><p>topk():最大的K个元素<br>bottomk():最小的K个元素  </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">topk (2,node_cpu_seconds_total)</span><br><span class=\"line\">node_cpu_seconds_total&#123;cpu=&quot;0&quot;, instance=&quot;192.168.27.7:9100&quot;, job=&quot;node&quot;, mode=&quot;idle&quot;&#125;  331997.49</span><br><span class=\"line\">node_cpu_seconds_total&#123;cpu=&quot;0&quot;, instance=&quot;192.168.27.7:9100&quot;, job=&quot;node&quot;, mode=&quot;user&quot;&#125;  3076.4</span><br><span class=\"line\"></span><br><span class=\"line\">bottomk (2,node_cpu_seconds_total)</span><br><span class=\"line\">node_cpu_seconds_total&#123;cpu=&quot;0&quot;, instance=&quot;192.168.27.7:9100&quot;, job=&quot;node&quot;, mode=&quot;irq&quot;&#125;   0</span><br><span class=\"line\">node_cpu_seconds_total&#123;cpu=&quot;0&quot;, instance=&quot;192.168.27.7:9100&quot;, job=&quot;node&quot;, mode=&quot;steal&quot;&#125; 0</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"quantile\"><a href=\"#quantile\" class=\"headerlink\" title=\"quantile()\"></a>quantile()</h3><p>计算指定分位数  </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">quantile (0.5,node_cpu_seconds_total)  #计算中位数，即二分位数</span><br><span class=\"line\">&#123;&#125;  34.685</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"类型函数\"><a href=\"#类型函数\" class=\"headerlink\" title=\"类型函数\"></a>类型函数</h2><h3 id=\"vector\"><a href=\"#vector\" class=\"headerlink\" title=\"vector()\"></a>vector()</h3><p>vector( scalar )函数,参数为一个scalar数值，作为一个没有标签的向量返回  </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">vector(100)</span><br><span class=\"line\">&#123;&#125; 100</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"scalar\"><a href=\"#scalar\" class=\"headerlink\" title=\"scalar()\"></a>scalar()</h3><p>scalar(instant-vector)，参数为一个<strong>单元素</strong>瞬时向量，返回其唯一的时间序列值作为一个标量<br>如果元素不为1（大于1或者为0），则返回NaN  </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">scalar(vector(100))</span><br><span class=\"line\">scalar\t100</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"数学函数\"><a href=\"#数学函数\" class=\"headerlink\" title=\"数学函数\"></a>数学函数</h2><h3 id=\"abs\"><a href=\"#abs\" class=\"headerlink\" title=\"abs()\"></a>abs()</h3><p>abs(instant-vector),返回输入向量的所有值的绝对值  </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">abs(vector(-100))</span><br><span class=\"line\">&#123;&#125; 100</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"In\"><a href=\"#In\" class=\"headerlink\" title=\"In()\"></a>In()</h3><p>In(instant-vector),返回输入向量的所有值的自然对数（即以自然常数e为底数的对数）  </p>\n<h3 id=\"log2\"><a href=\"#log2\" class=\"headerlink\" title=\"log2()\"></a>log2()</h3><p>log2(instant-vector),返回输入向量的所有值的以2为底数的对数  </p>\n<h3 id=\"log10\"><a href=\"#log10\" class=\"headerlink\" title=\"log10()\"></a>log10()</h3><p>log10(instant-vector),返回输入向量的所有值的以10为底数的对数  </p>\n<h3 id=\"exp\"><a href=\"#exp\" class=\"headerlink\" title=\"exp()\"></a>exp()</h3><p>exp(instant-vector),返回输入向量的所有值的e的指数值  </p>\n<h3 id=\"sqrt\"><a href=\"#sqrt\" class=\"headerlink\" title=\"sqrt()\"></a>sqrt()</h3><p>sqrt(instant-vector),返回输入向量的所有的值的平方根  </p>\n<h3 id=\"ceil\"><a href=\"#ceil\" class=\"headerlink\" title=\"ceil()\"></a>ceil()</h3><p>ceil(instant-vector)，将输入向量所有值向上取整</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">ceil(vector(2.232323))</span><br><span class=\"line\">&#123;&#125;  2</span><br></pre></td></tr></table></figure>\n<h3 id=\"floor\"><a href=\"#floor\" class=\"headerlink\" title=\"floor()\"></a>floor()</h3><p>与ceil()函数相反，floor()函数为向下取整  </p>\n<h3 id=\"round\"><a href=\"#round\" class=\"headerlink\" title=\"round()\"></a>round()</h3><p>round(instant-vector),将输入向量所有值四舍五入至整数  </p>\n<h3 id=\"clamp\"><a href=\"#clamp\" class=\"headerlink\" title=\"clamp()\"></a>clamp()</h3><p>clamp(instant-vector,min,max),将输入向量所有值限制在min-max之间，小于min的修改为min，大于max的修改为max  </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">clamp(node_cpu_seconds_total,1,100)</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;cpu=&quot;0&quot;, instance=&quot;192.168.27.7:9100&quot;, job=&quot;node&quot;, mode=&quot;idle&quot;&#125;    100</span><br><span class=\"line\">&#123;cpu=&quot;0&quot;, instance=&quot;192.168.27.7:9100&quot;, job=&quot;node&quot;, mode=&quot;iowait&quot;&#125;  24.13</span><br><span class=\"line\">&#123;cpu=&quot;0&quot;, instance=&quot;192.168.27.7:9100&quot;, job=&quot;node&quot;, mode=&quot;irq&quot;&#125;     1</span><br><span class=\"line\">&#123;cpu=&quot;0&quot;, instance=&quot;192.168.27.7:9100&quot;, job=&quot;node&quot;, mode=&quot;nice&quot;&#125;    4</span><br><span class=\"line\">&#123;cpu=&quot;0&quot;, instance=&quot;192.168.27.7:9100&quot;, job=&quot;node&quot;, mode=&quot;softirq&quot;&#125; 45.67</span><br><span class=\"line\">&#123;cpu=&quot;0&quot;, instance=&quot;192.168.27.7:9100&quot;, job=&quot;node&quot;, mode=&quot;steal&quot;&#125;   1</span><br><span class=\"line\">&#123;cpu=&quot;0&quot;, instance=&quot;192.168.27.7:9100&quot;, job=&quot;node&quot;, mode=&quot;system&quot;&#125;  100</span><br><span class=\"line\">&#123;cpu=&quot;0&quot;, instance=&quot;192.168.27.7:9100&quot;, job=&quot;node&quot;, mode=&quot;user&quot;&#125;    100</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"clamp-mix-、clamp-max\"><a href=\"#clamp-mix-、clamp-max\" class=\"headerlink\" title=\"clamp_mix()、clamp_max()\"></a>clamp_mix()、clamp_max()</h3><p>clamp_min(instant-vector,min)、clamp_max(instant-vector,max),限制输入向量的最小值、最大值  </p>\n<h2 id=\"时间函数\"><a href=\"#时间函数\" class=\"headerlink\" title=\"时间函数\"></a>时间函数</h2><h3 id=\"time\"><a href=\"#time\" class=\"headerlink\" title=\"time()\"></a>time()</h3><p>time()函数，返回当前时间的时间戳  </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">time()</span><br><span class=\"line\">scalar\t1668010014.605</span><br></pre></td></tr></table></figure>\n<h3 id=\"minute\"><a href=\"#minute\" class=\"headerlink\" title=\"minute()\"></a>minute()</h3><p>mintue(instant-vector),参数为一个瞬时向量的时间戳，返回给定时间戳的分钟(0-59)  </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">minute(vector(time()))</span><br><span class=\"line\">&#123;&#125;  10</span><br></pre></td></tr></table></figure>\n<h3 id=\"hour\"><a href=\"#hour\" class=\"headerlink\" title=\"hour()\"></a>hour()</h3><p>hour(instant-vector),参数为一个瞬时向量的时间戳，返回给定时间戳的小时(0-23)  </p>\n<h3 id=\"month\"><a href=\"#month\" class=\"headerlink\" title=\"month()\"></a>month()</h3><p>month(instant-vector),参数为一个瞬时向量的时间戳，返回给定时间戳的月份(1-12)  </p>\n<h3 id=\"year\"><a href=\"#year\" class=\"headerlink\" title=\"year()\"></a>year()</h3><p>year(instant-vector),参数为一个瞬时向量的时间戳，返回给定时间戳的年份  </p>\n<h3 id=\"day-of-month\"><a href=\"#day-of-month\" class=\"headerlink\" title=\"day_of_month()\"></a>day_of_month()</h3><p>day_of_month(instant-vector)，参数为一个瞬时向量的时间戳，返回给定时间戳所在月份的第几天  </p>\n<h3 id=\"day-of-week\"><a href=\"#day-of-week\" class=\"headerlink\" title=\"day_of_week()\"></a>day_of_week()</h3><p>day_of_week(instant-vector)，参数为一个瞬时向量的时间戳，返回给定时间戳所在星期的第几天  </p>\n<h3 id=\"day-of-year\"><a href=\"#day-of-year\" class=\"headerlink\" title=\"day_of_year()\"></a>day_of_year()</h3><p>day_of_year(instant-vector)，参数为一个瞬时向量的时间戳，返回给定时间戳所在年份的第几天  </p>\n<h3 id=\"days-in-month\"><a href=\"#days-in-month\" class=\"headerlink\" title=\"days_in_month()\"></a>days_in_month()</h3><p>days_in_month(instant-vector)，参数为一个瞬时向量的时间戳，返回给定时间戳所在月份一共有几天  </p>\n<h3 id=\"timestamp\"><a href=\"#timestamp\" class=\"headerlink\" title=\"timestamp()\"></a>timestamp()</h3><p>查看样本的时间戳  </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">timestamp(node_cpu_seconds_total)</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;cpu=&quot;0&quot;, instance=&quot;192.168.27.7:9100&quot;, job=&quot;node&quot;, mode=&quot;idle&quot;&#125;    1668010938.442</span><br><span class=\"line\">&#123;cpu=&quot;0&quot;, instance=&quot;192.168.27.7:9100&quot;, job=&quot;node&quot;, mode=&quot;iowait&quot;&#125;  1668010938.442</span><br><span class=\"line\">&#123;cpu=&quot;0&quot;, instance=&quot;192.168.27.7:9100&quot;, job=&quot;node&quot;, mode=&quot;irq&quot;&#125;     1668010938.442</span><br><span class=\"line\">&#123;cpu=&quot;0&quot;, instance=&quot;192.168.27.7:9100&quot;, job=&quot;node&quot;, mode=&quot;nice&quot;&#125;    1668010938.442</span><br><span class=\"line\">&#123;cpu=&quot;0&quot;, instance=&quot;192.168.27.7:9100&quot;, job=&quot;node&quot;, mode=&quot;softirq&quot;&#125; 1668010938.442</span><br><span class=\"line\">&#123;cpu=&quot;0&quot;, instance=&quot;192.168.27.7:9100&quot;, job=&quot;node&quot;, mode=&quot;steal&quot;&#125;   1668010938.442</span><br><span class=\"line\">&#123;cpu=&quot;0&quot;, instance=&quot;192.168.27.7:9100&quot;, job=&quot;node&quot;, mode=&quot;system&quot;&#125;  1668010938.442</span><br><span class=\"line\">&#123;cpu=&quot;0&quot;, instance=&quot;192.168.27.7:9100&quot;, job=&quot;node&quot;, mode=&quot;user&quot;&#125;    1668010938.442</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"缺失与排序函数\"><a href=\"#缺失与排序函数\" class=\"headerlink\" title=\"缺失与排序函数\"></a>缺失与排序函数</h2><h3 id=\"absent\"><a href=\"#absent\" class=\"headerlink\" title=\"absent()\"></a>absent()</h3><p>absent(instant-vector),当给定向量为空时返回1，有样本数据则返回空</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">absent(up)</span><br><span class=\"line\">Empty query result</span><br><span class=\"line\"></span><br><span class=\"line\">absent(up_not_existent)</span><br><span class=\"line\">&#123;&#125;  1</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"sort\"><a href=\"#sort\" class=\"headerlink\" title=\"sort()\"></a>sort()</h3><p>sort(instant-vector),按照值进行排序，从上到下依次变大。  </p>\n<h3 id=\"sort-desc\"><a href=\"#sort-desc\" class=\"headerlink\" title=\"sort_desc()\"></a>sort_desc()</h3><p>sort_desc(instant-vector),按照值进行排序，从上到下依次变小。  </p>\n<h2 id=\"计数器\"><a href=\"#计数器\" class=\"headerlink\" title=\"计数器\"></a>计数器</h2><h3 id=\"rate\"><a href=\"#rate\" class=\"headerlink\" title=\"rate()\"></a>rate()</h3><p>rate(range-vector),计算<strong>计数器</strong>区间向量平均增长速率。rate会取指定时间范围内所有数据点，算出一组速率，然后取平均值作为结果。rate适合缓慢变化的计数器（counter）。  </p>\n<h3 id=\"irate\"><a href=\"#irate\" class=\"headerlink\" title=\"irate()\"></a>irate()</h3><p>rate(range-vector),计算<strong>计数器</strong>区间向量平均增长速率。irate取的是在指定时间范围内的最近两个数据点来算速率。irate适合快速变化的计数器（counter）。  </p>\n<h2 id=\"gauge类型处理函数\"><a href=\"#gauge类型处理函数\" class=\"headerlink\" title=\"gauge类型处理函数\"></a>gauge类型处理函数</h2><h3 id=\"changes\"><a href=\"#changes\" class=\"headerlink\" title=\"changes()\"></a>changes()</h3><p>changes(range-vector),返回区间内每个样本数据值的变化次数  </p>\n<h3 id=\"delta\"><a href=\"#delta\" class=\"headerlink\" title=\"delta()\"></a>delta()</h3><p>delta(range-vector),返回区间中每个元素第一个值与最后一个值的差  </p>\n<h3 id=\"idelta\"><a href=\"#idelta\" class=\"headerlink\" title=\"idelta()\"></a>idelta()</h3><p>idelta(range-vector),返回区间中最新的两个值的差  </p>\n","categories":["Prometheus"],"tags":["PromQL"]},{"title":"6-pushgateway安装以及使用","url":"/2022/11/10/prometheus/6-pushgateway%E5%AE%89%E8%A3%85%E4%BB%A5%E5%8F%8A%E4%BD%BF%E7%94%A8/","content":"<p><img src=\"https://s2.loli.net/2022/10/21/Dv2fVhPgOBrK7bF.jpg\" alt=\"prometheus\">  </p>\n<span id=\"more\"></span>\n<h1 id=\"pushgateway\"><a href=\"#pushgateway\" class=\"headerlink\" title=\"pushgateway\"></a>pushgateway</h1><p>各个目标主机可上报数据到pushgateway。Push gateway通过push的方式推送给prometheus sercer。本身也是一个http服务器，一般通过写脚本抓自己想要的数据，自定义一个监控数据，然后推送到pushgateway，然后pushgateway再推送到prometheus。  </p>\n<h2 id=\"pushgateway安装\"><a href=\"#pushgateway安装\" class=\"headerlink\" title=\"pushgateway安装\"></a>pushgateway安装</h2><p>从官网下载pushgateway安装包  </p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">~]#</span><span class=\"bash\"> tar zxvf pushgateway-1.4.3.linux-amd64.tar.gz -C /usr/<span class=\"built_in\">local</span>/</span></span><br><span class=\"line\"><span class=\"meta\">~]#</span><span class=\"bash\"> ln -s /usr/<span class=\"built_in\">local</span>/pushgateway-1.4.3.linux-amd64/ /usr/<span class=\"built_in\">local</span>/pushgateway</span></span><br><span class=\"line\"><span class=\"meta\">~]#</span><span class=\"bash\"> ln -s /usr/<span class=\"built_in\">local</span>/pushgateway/pushgateway /usr/<span class=\"built_in\">local</span>/bin/pushgateway</span></span><br><span class=\"line\"><span class=\"meta\">~]#</span><span class=\"bash\"> nohup /usr/<span class=\"built_in\">local</span>/pushgateway/pushgateway &gt; /usr/<span class=\"built_in\">local</span>/pushgateway/pushgateway.log 2&gt;&amp;1 &amp;</span></span><br></pre></td></tr></table></figure>\n<p>启动之后查看9091端口是否被监听，也可以查看<code>http://pushgateway_ip:9091</code>是否正常。  </p>\n<h3 id=\"prometheus-server配置\"><a href=\"#prometheus-server配置\" class=\"headerlink\" title=\"prometheus server配置\"></a>prometheus server配置</h3><p>在prometheus的配置文件中加入以下内容</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">job_name:</span> <span class=\"string\">&quot;pushgateway&quot;</span></span><br><span class=\"line\">  <span class=\"attr\">static_configs:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">targets:</span> [<span class=\"string\">&quot;192.168.27.7:9091&quot;</span>]</span><br></pre></td></tr></table></figure>\n<p>配置修改完成后需要将Prometheus server重启，重启后在web管理界面-Status-Targets中可以看到pushgateway已经被添加。  </p>\n<h2 id=\"使用pushgateway推送数据\"><a href=\"#使用pushgateway推送数据\" class=\"headerlink\" title=\"使用pushgateway推送数据\"></a>使用pushgateway推送数据</h2><p>手动推送几条数据给pushgateway。  </p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 简单样本</span></span><br><span class=\"line\">echo &quot;test_metric 987654321&quot; | curl --data-binary @- http://192.168.27.7:9091/metrics/job/pushgateway/instance/192.168.27.111</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 复杂样本</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> TYPE 要在样本前指明，并且一定要加<span class=\"comment\">#标记</span></span></span><br><span class=\"line\">cat &lt;&lt;EOF | curl --data-binary @- http://192.168.27.7:9091/metrics/job/pushgateway/instance/192.168.27.111</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">TYPE test_metric counter</span></span><br><span class=\"line\">test_metric&#123;label=&quot;val1&quot;&#125; 42.0</span><br><span class=\"line\">EOF</span><br></pre></td></tr></table></figure>\n<p><img src=\"/2022/11/10/prometheus/6-pushgateway%E5%AE%89%E8%A3%85%E4%BB%A5%E5%8F%8A%E4%BD%BF%E7%94%A8/pushgateway.png\"><br><img src=\"/2022/11/10/prometheus/6-pushgateway%E5%AE%89%E8%A3%85%E4%BB%A5%E5%8F%8A%E4%BD%BF%E7%94%A8/prometheus.png\"><br>可以发现pushgateway与prometheus中都可以查看到该数据<br><code>curl --data-binary</code>是将POST请求中的数据发送到pushgateway。<br><code>http://PUSHGATEWAY_IP:9091/metrics/job/EXPORTED_JOB/instance/EXPORTED_INSTANCE</code>推送地址为该格式，其中<code>instance/EXPORTED_INSTANCE</code>可以省略<br>可以使用脚本进行推送  </p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">!/bin/bash</span></span><br><span class=\"line\">metric_name=</span><br><span class=\"line\">metric_value=</span><br><span class=\"line\">type=</span><br><span class=\"line\">job_name=&quot;memory&quot;</span><br><span class=\"line\">instance_name=&quot;192.168.40.181&quot;</span><br><span class=\"line\">PUSHGATEWAY_IP=&quot;xxx.xxx.xxx.xxx&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">cat &lt;&lt;EOF | curl --data-binary @- http://$PUSHGATEWAY_IP:9091/metrics/job/$job_name/instance/$instance_name</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> TYPE <span class=\"variable\">$metric_name</span> <span class=\"variable\">$type</span></span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">metric_name <span class=\"variable\">$metric_value</span></span></span><br><span class=\"line\">EOF</span><br></pre></td></tr></table></figure>\n<p>定时推送可以使用crontab进行定时推送<br>例如设置成每15秒推送一次  </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">* * * * * /bin/bash xxx.sh</span><br><span class=\"line\">* * * * * (sleep 15;/bin/bash xxx.sh)</span><br><span class=\"line\">* * * * * (sleep 30;/bin/bash xxx.sh)</span><br><span class=\"line\">* * * * * (sleep 45;/bin/bash xxx.sh)</span><br></pre></td></tr></table></figure>","categories":["Prometheus"],"tags":["Pushgateway"]},{"title":"1-grafana安装","url":"/2022/11/10/grafana/1-grafana%E5%AE%89%E8%A3%85/","content":"<p><img src=\"https://s2.loli.net/2022/11/10/OfHeuAsG8yhmkY5.jpg\" alt=\"grafana.jpg\"> </p>\n<span id=\"more\"></span>\n<h1 id=\"grafana介绍\"><a href=\"#grafana介绍\" class=\"headerlink\" title=\"grafana介绍\"></a>grafana介绍</h1><p>grafana是一款开源数据绘图工具平台，他支持多种数据源以及有大量的插件可以使用。  </p>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><p>grafana的安装分为两种，一种是使用安装包，另一种是容器化部署。<br>这里在centos中使用安装包进行安装。相关安装方式可以从官网进行查看  </p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">wget https://dl.grafana.com/enterprise/release/grafana-enterprise-9.2.4-1.x86_64.rpm</span><br><span class=\"line\">sudo yum install grafana-enterprise-9.2.4-1.x86_64.rpm</span><br><span class=\"line\">systemctl restart grafana-server.service</span><br><span class=\"line\">systemctl enable grafana-server.service</span><br></pre></td></tr></table></figure>\n<p>默认监听在3000端口，默认密码为admin/admin<br>忘记密码重置密码方式：<code>grafana-cli admin reset-admin-password admin@PASSWORD</code>  </p>\n<h2 id=\"grafana配置文件\"><a href=\"#grafana配置文件\" class=\"headerlink\" title=\"grafana配置文件\"></a>grafana配置文件</h2><p>/etc/grafana/grafana.ini:主配置文件，当修改data、plugins路径时，还应修改/etc/sysconfig/grafana-server中对应的路径<br>/etc/sysconfig/grafana-server:配置文件  </p>\n<figure class=\"highlight ini\"><table><tr><td class=\"code\"><pre><span class=\"line\">~]<span class=\"comment\"># more /etc/sysconfig/grafana-server</span></span><br><span class=\"line\"><span class=\"attr\">GRAFANA_USER</span>=grafana  <span class=\"comment\"># 系统用户，安装时自动创建</span></span><br><span class=\"line\"><span class=\"attr\">GRAFANA_GROUP</span>=grafana  </span><br><span class=\"line\"><span class=\"attr\">GRAFANA_HOME</span>=/usr/share/grafana  <span class=\"comment\"># grafana家目录</span></span><br><span class=\"line\"><span class=\"attr\">LOG_DIR</span>=/var/log/grafana    <span class=\"comment\">#日志文件</span></span><br><span class=\"line\"><span class=\"attr\">DATA_DIR</span>=/var/lib/grafana   <span class=\"comment\">#插件和数据存放目录</span></span><br><span class=\"line\"><span class=\"attr\">MAX_OPEN_FILES</span>=<span class=\"number\">10000</span>    <span class=\"comment\">#最大支持打开文件数</span></span><br><span class=\"line\"><span class=\"attr\">CONF_DIR</span>=/etc/grafana   <span class=\"comment\">#配置文件目录，升级时建议备份</span></span><br><span class=\"line\"><span class=\"attr\">CONF_FILE</span>=/etc/grafana/grafana.ini  <span class=\"comment\">#主配置文件</span></span><br><span class=\"line\"><span class=\"attr\">RESTART_ON_UPGRADE</span>=<span class=\"literal\">true</span>     <span class=\"comment\">#更新重启</span></span><br><span class=\"line\"><span class=\"attr\">PLUGINS_DIR</span>=/var/lib/grafana/plugins    <span class=\"comment\">#插件存放目录</span></span><br><span class=\"line\"><span class=\"attr\">PROVISIONING_CFG_DIR</span>=/etc/grafana/provisioning  <span class=\"comment\">#通过读取配置文件方式来配置datasource和dashboard，而不是正在grafana图形窗口中操作</span></span><br><span class=\"line\"><span class=\"comment\"># Only used on systemd systems</span></span><br><span class=\"line\"><span class=\"attr\">PID_FILE_DIR</span>=/var/run/grafana <span class=\"comment\">#进程存放目录</span></span><br></pre></td></tr></table></figure>\n<p>/etc/init.d/grafana-server：启动脚本<br>/usr/sbin/grafana-cli：安装插件命令行  </p>\n","categories":["grafana"],"tags":["grafana安装"]},{"title":"2-grafana插件安装","url":"/2022/11/12/grafana/2-grafana%E6%8F%92%E4%BB%B6%E5%AE%89%E8%A3%85/","content":"<p><img src=\"https://s2.loli.net/2022/11/10/OfHeuAsG8yhmkY5.jpg\" alt=\"grafana.jpg\"> </p>\n<span id=\"more\"></span>\n<h1 id=\"grafana插件安装\"><a href=\"#grafana插件安装\" class=\"headerlink\" title=\"grafana插件安装\"></a>grafana插件安装</h1><p>插件安装分为两种方式：在线安装与离线安装  </p>\n<h2 id=\"在线安装插件\"><a href=\"#在线安装插件\" class=\"headerlink\" title=\"在线安装插件\"></a>在线安装插件</h2><p>在线安装插件可以在grafana的web界面进行安装，找到需要的插件进行安装即可<br><img src=\"/2022/11/12/grafana/2-grafana%E6%8F%92%E4%BB%B6%E5%AE%89%E8%A3%85/%E6%8F%92%E4%BB%B6%E5%AE%89%E8%A3%85.png\"><br>还可以使用grafana-cli进行安装，使用<strong>grafana-cli安装插件后需要将grafana服务重启</strong>  </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">grafana-cli plugins COMMANDS</span><br><span class=\"line\">COMMANDS:</span><br><span class=\"line\">   install                  install &lt;plugin id&gt; &lt;plugin version (optional)&gt;，安装指定插件，可以指定插件的版本</span><br><span class=\"line\">   list-remote              list remote available plugins，查看可以安装的插件</span><br><span class=\"line\">   list-versions            list-versions &lt;plugin id&gt;，查看指定插件的版本</span><br><span class=\"line\">   update, upgrade          update &lt;plugin id&gt;，更新插件</span><br><span class=\"line\">   update-all, upgrade-all  update all your installed plugins</span><br><span class=\"line\">   ls                       list all installed plugins，查看已经安装的插件</span><br><span class=\"line\">   uninstall, remove        uninstall &lt;plugin id&gt;，卸载插件</span><br><span class=\"line\">   help, h                  Shows a list of commands or help for one command</span><br></pre></td></tr></table></figure>\n<p>插件默认安装在<code>/var/lib/grafana/plugins</code>下，可以指定安装目录进行安装，需要添加参数 <code>--pluginsDir=PATH</code>，也可以修改<code>/usr/sbin/grafana-cli</code>中的配置  </p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">]#</span><span class=\"bash\"> more /usr/sbin/grafana-cli</span> </span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">! /usr/bin/env bash</span></span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> Wrapper <span class=\"keyword\">for</span> the grafana-cli binary</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> This file serves as a wrapper <span class=\"keyword\">for</span> the grafana-cli binary. It ensures we <span class=\"built_in\">set</span></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> the system-wide Grafana configuration that was bundled with the package as we</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> use the binary.</span></span><br><span class=\"line\"></span><br><span class=\"line\">DEFAULT=/etc/default/grafana</span><br><span class=\"line\"></span><br><span class=\"line\">GRAFANA_HOME=/usr/share/grafana</span><br><span class=\"line\">CONF_DIR=/etc/grafana</span><br><span class=\"line\">DATA_DIR=/var/lib/grafana</span><br><span class=\"line\">PLUGINS_DIR=/var/lib/grafana/plugins</span><br><span class=\"line\">LOG_DIR=/var/log/grafana</span><br><span class=\"line\"></span><br><span class=\"line\">CONF_FILE=$CONF_DIR/grafana.ini</span><br><span class=\"line\">PROVISIONING_CFG_DIR=$CONF_DIR/provisioning</span><br><span class=\"line\"></span><br><span class=\"line\">EXECUTABLE=$GRAFANA_HOME/bin/grafana-cli</span><br><span class=\"line\"></span><br><span class=\"line\">if [ ! -x $EXECUTABLE ]; then</span><br><span class=\"line\"> echo &quot;Program not installed or not executable&quot;</span><br><span class=\"line\"> exit 5</span><br><span class=\"line\">fi</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> overwrite settings from default file</span></span><br><span class=\"line\">if [ -f &quot;$DEFAULT&quot; ]; then</span><br><span class=\"line\">  . &quot;$DEFAULT&quot;</span><br><span class=\"line\">fi</span><br><span class=\"line\"></span><br><span class=\"line\">OPTS=&quot;--homepath=$&#123;GRAFANA_HOME&#125; \\</span><br><span class=\"line\">      --config=$&#123;CONF_FILE&#125; \\</span><br><span class=\"line\">      --pluginsDir=$&#123;PLUGINS_DIR&#125; \\</span><br><span class=\"line\">      --configOverrides=&#x27;cfg:default.paths.provisioning=$PROVISIONING_CFG_DIR \\</span><br><span class=\"line\">                        cfg:default.paths.data=$&#123;DATA_DIR&#125; \\</span><br><span class=\"line\">                        cfg:default.paths.logs=$&#123;LOG_DIR&#125; \\</span><br><span class=\"line\">                        cfg:default.paths.plugins=$&#123;PLUGINS_DIR&#125;&#x27;&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">eval $EXECUTABLE &quot;$OPTS&quot; &#x27;$@&#x27;</span><br></pre></td></tr></table></figure>\n<p>grafana的环境变量在多个配合文件中有相同定义需要全都修改，有些不方便  </p>\n<h2 id=\"离线安装\"><a href=\"#离线安装\" class=\"headerlink\" title=\"离线安装\"></a>离线安装</h2><p>离线安装可以在<a href=\"https://grafana.com/grafana/plugins/?plcmt=footer\">官网插件</a>中找到对应的插件安装包,下载后为一个压缩包，将压缩包解压后放在<code>/var/lib/grafana/plugins</code>下即可，<strong>注意不要忘记重启</strong>  </p>\n","categories":["grafana"],"tags":["grafana插件安装"]},{"title":"3-grafana界面介绍","url":"/2022/11/13/grafana/3-grafana%E7%95%8C%E9%9D%A2%E4%BB%8B%E7%BB%8D/","content":"<p><img src=\"https://s2.loli.net/2022/11/10/OfHeuAsG8yhmkY5.jpg\" alt=\"grafana.jpg\"> </p>\n<span id=\"more\"></span>\n<h1 id=\"grafana界面\"><a href=\"#grafana界面\" class=\"headerlink\" title=\"grafana界面\"></a>grafana界面</h1><p>根据grafana web界面左侧菜单介绍一下相关功能  </p>\n<h2 id=\"home\"><a href=\"#home\" class=\"headerlink\" title=\"home\"></a>home</h2><p>grafana logo，此处为界面的home page，从任何界面点击都会跳转到home page页，这个页面的各个模块也可以进行设置修改  </p>\n<h2 id=\"Search-dashboards\"><a href=\"#Search-dashboards\" class=\"headerlink\" title=\"Search dashboards\"></a>Search dashboards</h2><p>搜索当前用户可以查看的dashboard  </p>\n<h2 id=\"starred\"><a href=\"#starred\" class=\"headerlink\" title=\"starred\"></a>starred</h2><p>给dashboard添加星标后，会展示在该页面   </p>\n<h2 id=\"dashboards\"><a href=\"#dashboards\" class=\"headerlink\" title=\"dashboards\"></a>dashboards</h2><p>仪表盘菜单</p>\n<ul>\n<li>browse：可以再次界面创建folder、dashboard  </li>\n<li>playlists：可以将多个dashboard组成播放列表循环轮播，可以作为监控大屏轮播  </li>\n<li>snapshots  </li>\n<li>library panels：面板库，可以将设置好的面板添加到面板库中，创建时可直接选取  </li>\n<li>+New dashboard ：创建dashboard  </li>\n<li>+New folder：创建文件夹  </li>\n<li>+Import：导入，可以将panel、dashboard的JSON文件导入，也可以在现网状态下直接将<a href=\"https://grafana.com/grafana/dashboards/?plcmt=footer\">官网</a>中dashboard导入  </li>\n</ul>\n<h2 id=\"Explore\"><a href=\"#Explore\" class=\"headerlink\" title=\"Explore\"></a>Explore</h2><p>可以选择数据源进行临时查询，查询后的表可以添加到dashboard中  </p>\n<h2 id=\"Alerting\"><a href=\"#Alerting\" class=\"headerlink\" title=\"Alerting\"></a>Alerting</h2><p>告警配置  </p>\n<ul>\n<li>Alert rules ：告警规则配置  </li>\n<li>Contact points：告警消息模板、告警发送方式  </li>\n<li>Notification policies：告警默认发送方式以及发送告警的时间设置，根据告警的标签设置不通的发送方式  </li>\n<li>Silences：根据告警规则标签屏蔽告警  </li>\n<li>Alert groups:告警组  </li>\n<li>Admin:</li>\n<li>+New alert rule:创建告警规则</li>\n</ul>\n<h2 id=\"Configuration\"><a href=\"#Configuration\" class=\"headerlink\" title=\"Configuration\"></a>Configuration</h2><ul>\n<li>Data sources:grafana数据源，可以添加多种、多个数据源  </li>\n<li>users：grafana用户，,admin、可编辑、只读用户三种角色，创建用户时会给给出一个链接，需要访问链接进行创建用户  </li>\n<li>Teams：团队，可以创建对应的团队，并设置团队的主dashboard  </li>\n<li>plugins：插件，对应在前面章节中界面安装插件方式  </li>\n<li>Organization profile：当前用户所在的组织，不同的组织的dashboard是不共享的，可以在用户-Switch Organization切换用户   </li>\n</ul>\n<h2 id=\"server-admin\"><a href=\"#server-admin\" class=\"headerlink\" title=\"server admin\"></a>server admin</h2><p>管理所有用户和组织</p>\n<ul>\n<li>users：grafana中所有的用户信息，点击用户可以查看详细信息  </li>\n<li>Organizations：grafana中所有的组织，可以创建组织，一个用户可以属于多个组织  </li>\n<li>setting：grafana服务相关配置信息  </li>\n<li>Statistics and licensing：统计信息，包含仪表盘、标签、数据源、报警、用户、组织数量信息  </li>\n</ul>\n","categories":["grafana"],"tags":["grafana界面介绍"]},{"title":"4-dashboard","url":"/2022/11/22/grafana/4-dashboard/","content":"<p><img src=\"https://s2.loli.net/2022/11/10/OfHeuAsG8yhmkY5.jpg\" alt=\"grafana.jpg\"> </p>\n<span id=\"more\"></span>\n<h1 id=\"添加数据源\"><a href=\"#添加数据源\" class=\"headerlink\" title=\"添加数据源\"></a>添加数据源</h1><p>在创建dashboard之前需要先添加数据源。<br>Configuration–Data sources–Add data source，添加数据源，如没有要添加的数据源可以在plugins中查看对应的插件进行安装，安装后在添加数据源。<br>这里添加一个prometheus数据源，添加prometheus数据源只需要填写URL（prometheus web页面地址）即可，其他根据需求进行填写，添加后可以点击<code>save&amp;test</code>进行保存并测试。  </p>\n<h1 id=\"dashboard\"><a href=\"#dashboard\" class=\"headerlink\" title=\"dashboard\"></a>dashboard</h1><h2 id=\"创建dashboard\"><a href=\"#创建dashboard\" class=\"headerlink\" title=\"创建dashboard\"></a>创建dashboard</h2><p><code>+ New dashboard</code>–<code>Add a new panel</code>，可以为新的dashboard创建一个新的panel<br><img src=\"/2022/11/22/grafana/4-dashboard/%E5%88%9B%E5%BB%BAdashboard.png\">  </p>\n<h2 id=\"dashboard设置\"><a href=\"#dashboard设置\" class=\"headerlink\" title=\"dashboard设置\"></a>dashboard设置</h2><h3 id=\"Variables\"><a href=\"#Variables\" class=\"headerlink\" title=\"Variables\"></a>Variables</h3><p>变量在dashboard内定义后在仪表盘左上角行程可选项，对应的在panel中定义图表中可进行使用变量<br><img src=\"/2022/11/22/grafana/4-dashboard/Variables.png\"><br><strong>General</strong><br>Name：变量名称<br>Label:在仪表盘中显示的标签名<br>Hide：隐藏Label（标签名）、变量<br>Type：变量的类型，有多种变量  </p>\n<ul>\n<li>Interval：间隔，查询的时间跨度  </li>\n<li>Query：查询，编写数据源查询，通常返回度量名称、标签值等，如主机、主机组等  </li>\n<li>Datasource：指定数据源，如有多个同类型数据源，可以使用该变量在多个同类数据源中选择  </li>\n<li>Custom：用户自定义的变量  </li>\n<li>Constant：常量  </li>\n<li>Ad hoc filters：只适用于部分数据源，InfluxDB、Prometheus、Elasticsearch，  </li>\n<li>Text Box：文本，提供一个可以自由输入的文本框  </li>\n</ul>\n<p><strong>Query Options （查询选项）</strong><br>Data source:数据源<br>Refresh：刷新方式，On Dashboard load（仪表盘加载时）、On time range changed（时间范围发生变化）<br>Regex：正则，使用正则表达式类匹配对应的值<br>Sort：排序方式  </p>\n<p><strong>Selection Options</strong><br>Multi-value:允许多选，即在Dashboard变量可以选择多个值可以同时勾选多个<br><img src=\"/2022/11/22/grafana/4-dashboard/Multi-value.png\"><br>Include All option：所有，即在Dashboard变量中可以有一个All的选项，允许勾选<br><img src=\"/2022/11/22/grafana/4-dashboard/ALL.png\">  </p>\n<h3 id=\"link\"><a href=\"#link\" class=\"headerlink\" title=\"link\"></a>link</h3><p>dashboard link显示在dashboard右上角，在dashboard中进行设置，可以设置外部网站的链接或者其他dashboard的下拉菜单。<br><img src=\"/2022/11/22/grafana/4-dashboard/dashboard-link.png\"><br>dashboard link有两种类型，dashboards是grafana中其他dashboard，link是代表添加的其他URL。<br><img src=\"/2022/11/22/grafana/4-dashboard/dashboard.png\"><br><img src=\"/2022/11/22/grafana/4-dashboard/link.png\"><br><img src=\"/2022/11/22/grafana/4-dashboard/%E6%95%88%E6%9E%9C.png\">  因为在dashboard类型link中选择了<code>show as dropdown</code>，所以点击new link会显示下拉列表  </p>\n<h2 id=\"导入dashboard\"><a href=\"#导入dashboard\" class=\"headerlink\" title=\"导入dashboard\"></a>导入dashboard</h2><p>可以从<a href=\"https://grafana.com/grafana/dashboards/?plcmt=footer\">官网</a>找到适合的dashboard通过<code>+Import</code>使用对应的JSON或者外网状态下使用dashboard ID进行导入。<br><strong>dashboard推荐</strong><br>Node Exporter Full（1860）：prometheus node-exporter  </p>\n","categories":["grafana"],"tags":["dashboard"]},{"title":"5-panel可视化","url":"/2022/11/25/grafana/5-panel%E5%8F%AF%E8%A7%86%E5%8C%96/","content":"<p><img src=\"https://s2.loli.net/2022/11/10/OfHeuAsG8yhmkY5.jpg\" alt=\"grafana.jpg\">  </p>\n<span id=\"more\"></span>\n<h1 id=\"panel\"><a href=\"#panel\" class=\"headerlink\" title=\"panel\"></a>panel</h1><h2 id=\"panel预览\"><a href=\"#panel预览\" class=\"headerlink\" title=\"panel预览\"></a>panel预览</h2><p><img src=\"/2022/11/25/grafana/5-panel%E5%8F%AF%E8%A7%86%E5%8C%96/panel%E9%A2%84%E8%A7%88.png\"><br>Table view:试图转换为表格<br>Fill：在编辑界面中图表自动填充，并不是dashboard中的实际大小<br>Actual：编辑界面中预览的与实际dashboard中的大小一致，或者按照实际比例缩小  </p>\n<h2 id=\"数据部分\"><a href=\"#数据部分\" class=\"headerlink\" title=\"数据部分\"></a>数据部分</h2><p><strong>Query（查询选项卡）</strong><br><img src=\"/2022/11/25/grafana/5-panel%E5%8F%AF%E8%A7%86%E5%8C%96/Query.png\">  </p>\n<p><strong>Transform（转换选项卡）</strong><br>使用转换方法对返回的数据进行操作，转换是有顺序的，转换方法当有多个时，每个转换都会创建一个结果集，然后传递给处理管道中的下一个转换。<br>相关转换方法的解释以及使用查看<a href=\"https://grafana.com/docs/grafana/latest/panels-visualizations/query-transform-data/transform-data/#transform-data\">官网Transform data文档</a>  </p>\n<p><strong>Alert（告警选项卡）</strong><br>创建告警</p>\n<h2 id=\"panel显示配置\"><a href=\"#panel显示配置\" class=\"headerlink\" title=\"panel显示配置\"></a>panel显示配置</h2><p>图例相关配置，不同的可视化panel有不同的配置，具体查看<a href=\"https://grafana.com/docs/grafana/latest/panels-visualizations/visualizations/\">官网Visualizations文档</a><br><img src=\"/2022/11/25/grafana/5-panel%E5%8F%AF%E8%A7%86%E5%8C%96/%E6%98%BE%E7%A4%BA%E9%85%8D%E7%BD%AE.png\">  </p>\n","categories":["grafana"],"tags":["panel可视化"]},{"title":"6-grafana告警配置","url":"/2022/11/25/grafana/6-grafana%E5%91%8A%E8%AD%A6%E9%85%8D%E7%BD%AE/","content":"<p><img src=\"https://s2.loli.net/2022/11/10/OfHeuAsG8yhmkY5.jpg\" alt=\"grafana.jpg\">  </p>\n<span id=\"more\"></span>\n<h1 id=\"grafana-告警\"><a href=\"#grafana-告警\" class=\"headerlink\" title=\"grafana 告警\"></a>grafana 告警</h1><h2 id=\"创建告警规则\"><a href=\"#创建告警规则\" class=\"headerlink\" title=\"创建告警规则\"></a>创建告警规则</h2><p>告警规则可以通过<code>+New alert rule</code>创建，还可以在dashboard panel的Alter选项卡中进行创建。<br>使用Prometheus数据源创建一个<code>up</code>的告警规则<br><img src=\"/2022/11/25/grafana/6-grafana%E5%91%8A%E8%AD%A6%E9%85%8D%E7%BD%AE/%E8%AE%BE%E7%BD%AE%E5%91%8A%E8%AD%A61.png\"><br><img src=\"/2022/11/25/grafana/6-grafana%E5%91%8A%E8%AD%A6%E9%85%8D%E7%BD%AE/%E8%AE%BE%E7%BD%AE%E5%91%8A%E8%AD%A62.png\"><br><img src=\"/2022/11/25/grafana/6-grafana%E5%91%8A%E8%AD%A6%E9%85%8D%E7%BD%AE/%E8%AE%BE%E7%BD%AE%E5%91%8A%E8%AD%A63.png\">  </p>\n<h2 id=\"设置告警发送方式\"><a href=\"#设置告警发送方式\" class=\"headerlink\" title=\"设置告警发送方式\"></a>设置告警发送方式</h2><p>grafana发送告警的方式是比较多的，如邮件、钉钉、企业微信等</p>\n<h3 id=\"添加邮件发送方式-。，，，，\"><a href=\"#添加邮件发送方式-。，，，，\" class=\"headerlink\" title=\"添加邮件发送方式  。，，，，\"></a>添加邮件发送方式  。，，，，</h3><p>邮件发送方式需要先修改grafana的配置文件<code>vim /etc/grafana/grafana.ini</code>  </p>\n<figure class=\"highlight ini\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#################################### SMTP / Emailing ##########################</span></span><br><span class=\"line\"><span class=\"section\">[smtp]</span></span><br><span class=\"line\"><span class=\"attr\">enabled</span> = <span class=\"literal\">True</span>  <span class=\"comment\">#开启smtp</span></span><br><span class=\"line\"><span class=\"attr\">host</span> = smtp.<span class=\"number\">163</span>.com:<span class=\"number\">25</span>  <span class=\"comment\">#smtp服务器</span></span><br><span class=\"line\"><span class=\"attr\">user</span> = <span class=\"number\">17</span>XXXXXXX8@<span class=\"number\">163</span>.com <span class=\"comment\">#用户名</span></span><br><span class=\"line\"><span class=\"comment\"># If the password contains # or ; you have to wrap it with triple quotes. Ex &quot;&quot;&quot;#password;&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"attr\">password</span> = XXXXXXX    <span class=\"comment\">#密码</span></span><br><span class=\"line\"><span class=\"comment\">;cert_file =</span></span><br><span class=\"line\"><span class=\"comment\">;key_file =</span></span><br><span class=\"line\"><span class=\"comment\">;skip_verify = false</span></span><br><span class=\"line\"><span class=\"attr\">from_address</span> = <span class=\"number\">17</span>XXXXXXX8@<span class=\"number\">163</span>.com  <span class=\"comment\">#发件人邮箱</span></span><br><span class=\"line\"><span class=\"attr\">from_name</span> = test_name   <span class=\"comment\">#发件人名</span></span><br><span class=\"line\"><span class=\"comment\"># EHLO identity in SMTP dialog (defaults to instance_name)</span></span><br><span class=\"line\"><span class=\"comment\">;ehlo_identity = dashboard.example.com</span></span><br><span class=\"line\"><span class=\"comment\"># SMTP startTLS policy (defaults to &#x27;OpportunisticStartTLS&#x27;)</span></span><br><span class=\"line\"><span class=\"comment\">;startTLS_policy = NoStartTLS</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">[emails]</span></span><br><span class=\"line\"><span class=\"comment\">;welcome_email_on_sign_up = false</span></span><br><span class=\"line\"><span class=\"comment\">;templates_pattern = emails/*.html, emails/*.txt</span></span><br><span class=\"line\"><span class=\"comment\">;content_types = text/html</span></span><br></pre></td></tr></table></figure>\n<p>重启grafana服务，然后再grafana–Contact points–New contact point进行配置<br><img src=\"/2022/11/25/grafana/6-grafana%E5%91%8A%E8%AD%A6%E9%85%8D%E7%BD%AE/%E5%91%8A%E8%AD%A6%E9%82%AE%E4%BB%B6%E9%85%8D%E7%BD%AE.png\">  </p>\n<h3 id=\"添加企业微信发送方式\"><a href=\"#添加企业微信发送方式\" class=\"headerlink\" title=\"添加企业微信发送方式\"></a>添加企业微信发送方式</h3><p>首先需要<a href=\"https://work.weixin.qq.com/wework_admin/register_wx?from=myhome\">注册一个企业微信</a>，创建完成后登录创建一个群聊，群聊中添加一个机器人，记录一下这个机器人的Webhook。登录企业微信，查找企业ID，在应用管理-打卡-API中查看Secret。<br><img src=\"/2022/11/25/grafana/6-grafana%E5%91%8A%E8%AD%A6%E9%85%8D%E7%BD%AE/%E5%91%8A%E8%AD%A6%E5%BE%AE%E4%BF%A1%E9%85%8D%E7%BD%AE.png\">  </p>\n","categories":["grafana"],"tags":["grafana告警配置"]},{"title":"1-nginx相关概念","url":"/2022/11/27/Nginx/1-nginx%E7%9B%B8%E5%85%B3%E6%A6%82%E5%BF%B5/","content":"<p><img src=\"https://s2.loli.net/2022/11/27/xdGY8aqytLheSjp.jpg\" alt=\"nginx.jpg\"></p>\n<span id=\"more\"></span>\n<p><a href=\"https://docs.nginx.com/nginx/\">nginx官网文档</a>、<a href=\"https://nginx.org/en/docs/dirindex.html\">nginx指令索引</a>  </p>\n<h1 id=\"Nginx简介\"><a href=\"#Nginx简介\" class=\"headerlink\" title=\"Nginx简介\"></a>Nginx简介</h1><p>Nginx是一个高性能的HTTP和反向代理web服务器，也是一个IMAP、POP3、SMTP服务器，特点是占用内存少，并发性能强。  </p>\n<h2 id=\"Nginx作为web服务器\"><a href=\"#Nginx作为web服务器\" class=\"headerlink\" title=\"Nginx作为web服务器\"></a>Nginx作为web服务器</h2><p>Nginx可以作为静态页面的web服务器，异步非阻塞，使用IO多路复用的epoll模型。  </p>\n<h3 id=\"同步、异步、阻塞、非阻塞\"><a href=\"#同步、异步、阻塞、非阻塞\" class=\"headerlink\" title=\"同步、异步、阻塞、非阻塞\"></a>同步、异步、阻塞、非阻塞</h3><p><strong>同步与异步是通信模式的概念</strong><br>同步：发送方发送请求后，等待请求响应，才继续发送下一个请求<br>异步：发送方发送请求后，不需要等待响应，就继续发送下一个请求<br><strong>阻塞与非阻塞是进程处理调用的方式</strong><br>阻塞：结果返回之前线程处于挂起状态<br>非阻塞：线程不会被挂起，立即执行返回下一个调用  </p>\n<h2 id=\"正向代理（代理的是客户端）\"><a href=\"#正向代理（代理的是客户端）\" class=\"headerlink\" title=\"正向代理（代理的是客户端）\"></a>正向代理（代理的是客户端）</h2><p>客户端想要访问一个服务器，但是它可能无法直接访问这台服务器，这时候这可找一台可以访问目标服务器的另外一台服务器，而这台服务器就被当做是代理人的角色 ，称之为代理服务器，于是客户端把请求发给代理服务器，由代理服务器获得目标服务器的数据并返回给客户端。客户端是清楚目标服务器的地址的，而目标服务器是不清楚来自客户端，它只知道来自哪个代理服务器，所以正向代理可以屏蔽或隐藏客户端的信息。  </p>\n<h3 id=\"适用场景\"><a href=\"#适用场景\" class=\"headerlink\" title=\"适用场景\"></a>适用场景</h3><p><strong>访问被禁止的资源</strong>：让客户端访问原来不能访问的服务器，通过代理服务器进行访问。<br><strong>隐藏客户端的地址</strong>：代理服务器代表了客户端，看不到原始的客户端。<br><strong>进行客户访问控制</strong>：集中部署访问策略，控制客户端的访问行为，内部资源的控制。<br><strong>加速访问资源</strong>：代理服务器设置一个较大的缓冲区，会将部分请求的响应保存到缓冲区，其他用户访问时可以从缓冲区域直接读取信息。  </p>\n<h2 id=\"反向代理（代理的是服务器）\"><a href=\"#反向代理（代理的是服务器）\" class=\"headerlink\" title=\"反向代理（代理的是服务器）\"></a>反向代理（代理的是服务器）</h2><p>反向代理就是代理服务器为服务器作代理人，站在服务器这边，它就是对外屏蔽了服务器的信息，常用的场景就是多台服务器分布式部署，像一些大的网站，由于访问人数很多，就需要多台服务器来解决人数多的问题，这时这些服务器就由一个反向代理服务器来代理，客户端发来请求，先由反向代理服务器，然后按一定的规则分发到明确的服务器，而客户端不知道是哪台服务器。  </p>\n<h3 id=\"适用场景-1\"><a href=\"#适用场景-1\" class=\"headerlink\" title=\"适用场景\"></a>适用场景</h3><p><strong>隐藏服务器的IP</strong>：因为反向代理服务器代理了服务器所以客户端并不知道业务服务器的IP。<br><strong>负载均衡</strong>：反向代理服务器根据业务服务器的负载情况，将客户端的请求分别发送到不同的业务服务器。<br><strong>提高访问速度</strong>：对于静态内容及短时间内有大量访问请求的动态内容提供缓存服务。<br><strong>提供安全保障</strong>：对网站提供基于WEB攻击的防护、为后端提供加密和SSL加速、提供HTTP访问认证。  </p>\n<h2 id=\"负载均衡\"><a href=\"#负载均衡\" class=\"headerlink\" title=\"负载均衡\"></a>负载均衡</h2><p>单个服务器解决不了时，增加服务器的数量，然后将请求分发到各个服务器上，将原先请求集中到单个服务器上的情况改为将请求分发到多个服务器上，将负载分发到不同的服务器，也就是我们所说的负载均衡。  </p>\n<h2 id=\"动静分离\"><a href=\"#动静分离\" class=\"headerlink\" title=\"动静分离\"></a>动静分离</h2><p>为了加快网站的解析速度，可以把动态页面和静态页面由不同的服务器来解析，加快解析速度。降低原来单个服务器的压力。  </p>\n","categories":["nginx"],"tags":["nginx相关概念"]},{"title":"2-nginx安装","url":"/2022/11/27/Nginx/2-nginx%E5%AE%89%E8%A3%85/","content":"<p><img src=\"https://s2.loli.net/2022/11/27/xdGY8aqytLheSjp.jpg\" alt=\"nginx.jpg\">  </p>\n<span id=\"more\"></span>\n<h1 id=\"nginx安装\"><a href=\"#nginx安装\" class=\"headerlink\" title=\"nginx安装\"></a>nginx安装</h1><p>nginx安装有yum安装与编译安装，yum安装无法自定义、安装时无法添加模块，编译安装安装位置与模块都可以自定义，但是需要安装依赖。</p>\n<h2 id=\"编译安装\"><a href=\"#编译安装\" class=\"headerlink\" title=\"编译安装\"></a>编译安装</h2><p>从nginx官网下载安装包，Mainline version是主线版本也就是开发版本，Stable version是稳定版、Legacy versions历史版本。  </p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 安装依赖</span>  </span><br><span class=\"line\">yum install -y gcc gcc-c++ make automake autoconf libtool pcre* zlib openssl openssl-devel</span><br><span class=\"line\">tar zxvf nginx-1.22.1.tar.gz -C /usr/local/</span><br><span class=\"line\">cd /usr/local/nginx-1.22.1</span><br><span class=\"line\">./configure   #暂不指定参数</span><br><span class=\"line\">make &amp;&amp; make install</span><br></pre></td></tr></table></figure>\n<p>安装完成后默认的nginx安装位置在/usr/local/nginx，相关的配置文件都在该位置。  </p>\n<h2 id=\"将nginx添加为系统服务\"><a href=\"#将nginx添加为系统服务\" class=\"headerlink\" title=\"将nginx添加为系统服务\"></a>将nginx添加为系统服务</h2><figure class=\"highlight ini\"><table><tr><td class=\"code\"><pre><span class=\"line\">~]<span class=\"comment\"># /usr/lib/systemd/system/nginx.service</span></span><br><span class=\"line\"><span class=\"section\">[Unit]</span></span><br><span class=\"line\"><span class=\"attr\">Description</span>=nginx web service</span><br><span class=\"line\"><span class=\"attr\">Documentation</span>=http://nginx.org/en/docs/</span><br><span class=\"line\"><span class=\"attr\">After</span>=network.target</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">[Service]</span></span><br><span class=\"line\"><span class=\"attr\">Type</span>=forking</span><br><span class=\"line\"><span class=\"attr\">PIDFile</span>=/usr/local/nginx/logs/nginx.pid</span><br><span class=\"line\"><span class=\"attr\">ExecStartPre</span>=/usr/local/nginx/sbin/nginx -t -c /usr/local/nginx/conf/nginx.conf</span><br><span class=\"line\"><span class=\"attr\">ExecStart</span>=/usr/local/nginx/sbin/nginx</span><br><span class=\"line\"><span class=\"attr\">ExecReload</span>=/usr/local/nginx/sbin/nginx -s reload</span><br><span class=\"line\"><span class=\"attr\">ExecStop</span>=/usr/local/nginx/sbin/nginx -s stop</span><br><span class=\"line\"><span class=\"attr\">PrivateTmp</span>=<span class=\"literal\">true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">[Install]</span></span><br><span class=\"line\"><span class=\"attr\">WantedBy</span>=default.target</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"nginx服务启停\"><a href=\"#nginx服务启停\" class=\"headerlink\" title=\"nginx服务启停\"></a>nginx服务启停</h2><p>/usr/local/nginx/sbin/nginx相关参数<br>-v V：打印版本号、和配置<br>-t：测试配置正确性<br>-q：测试时只显示错误<br>-s：向主进程发送信号，stop（快速关机）、quit（优雅关机）、reopen（重新打开日志文件）、reload（重新加载配置文件）<br>-c：指定nginx配置文件路径<br>-g：指定nginx附加配置文件路径</p>\n","categories":["nginx"],"tags":["nginx安装"]},{"title":"3-nginx服务配置","url":"/2022/11/28/Nginx/3-nginx%E6%9C%8D%E5%8A%A1%E9%85%8D%E7%BD%AE/","content":"<p><img src=\"https://s2.loli.net/2022/11/27/xdGY8aqytLheSjp.jpg\" alt=\"nginx.jpg\">  </p>\n<span id=\"more\"></span>\n<h2 id=\"主配置文件\"><a href=\"#主配置文件\" class=\"headerlink\" title=\"主配置文件\"></a>主配置文件</h2><p>/usr/local/nginx/conf/nginx.conf为主配置文件，主配置文件，配置文件必须以<code>;</code>结尾</p>\n<figure class=\"highlight ini\"><table><tr><td class=\"code\"><pre><span class=\"line\">worker_processes  1<span class=\"comment\">;    #全局快</span></span><br><span class=\"line\">events &#123;     <span class=\"comment\"># events块</span></span><br><span class=\"line\">    worker_connections  1024<span class=\"comment\">;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">http &#123;     <span class=\"comment\">#http块</span></span><br><span class=\"line\">    include       mime.types<span class=\"comment\">;</span></span><br><span class=\"line\">    default_type  application/octet-stream<span class=\"comment\">;</span></span><br><span class=\"line\">    sendfile        on<span class=\"comment\">;</span></span><br><span class=\"line\">    keepalive_timeout  65<span class=\"comment\">;</span></span><br><span class=\"line\">    server &#123;     <span class=\"comment\"># server块</span></span><br><span class=\"line\">        listen       80<span class=\"comment\">;</span></span><br><span class=\"line\">        server_name  localhost<span class=\"comment\">;</span></span><br><span class=\"line\">        location / &#123;   <span class=\"comment\">#localtion块</span></span><br><span class=\"line\">            root   html<span class=\"comment\">;</span></span><br><span class=\"line\">            index  index.html index.htm<span class=\"comment\">;</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        error_page   500 502 503 504  /50x.html<span class=\"comment\">;</span></span><br><span class=\"line\">        <span class=\"attr\">location</span> = /<span class=\"number\">50</span>x.html &#123;     <span class=\"comment\">#localtion块</span></span><br><span class=\"line\">            root   html<span class=\"comment\">;</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>全局快:配置文件从开始到events块之间的，通常包括worker process数、nginx进程PID的存放路径、日志存放路径  </li>\n<li>events块：主要影响nginx服务器与用户的网络连接，对nginx服务器性能影响对较大。  </li>\n<li>http块：代理、缓存、日志定义等  </li>\n<li>server块：每一个server块相当于一台虚拟主机  </li>\n</ul>\n<p>配置讲解  </p>\n<figure class=\"highlight ini\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#user USER  [GROUP]，配置运行nginx的用户和用户组，注释或者nobody为所有用户都可执行</span></span><br><span class=\"line\"><span class=\"comment\">#只能在全局块中使用</span></span><br><span class=\"line\"><span class=\"comment\">#user  nobody;     </span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#工作进程的数量，配置的大小与CPU核数相关，可以设置为auto，为nginx进程自动检测</span></span><br><span class=\"line\"><span class=\"comment\">#只能在全局块中使用</span></span><br><span class=\"line\">worker_processes  1<span class=\"comment\">;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#错误日志存放路径，可以设置保存的错误日志的级别</span></span><br><span class=\"line\"><span class=\"comment\">#debug | info | notice | warn | error | crit | alert | emerg，设置某一级别后，比这一级别高的日志也会被记录</span></span><br><span class=\"line\"><span class=\"comment\">#可以在全局块、http、server块中使用</span></span><br><span class=\"line\"><span class=\"comment\">#error_log  logs/error.log;</span></span><br><span class=\"line\"><span class=\"comment\">#error_log  logs/error.log  notice;</span></span><br><span class=\"line\"><span class=\"comment\">#error_log  logs/error.log  info;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#PID文件存放路径</span></span><br><span class=\"line\"><span class=\"comment\">#只能在全局块中使用</span></span><br><span class=\"line\"><span class=\"comment\">#pid        logs/nginx.pid;</span></span><br><span class=\"line\"></span><br><span class=\"line\">events &#123;</span><br><span class=\"line\">    <span class=\"comment\">#单个工作进程可以允许同时建立外部连接的数量</span></span><br><span class=\"line\">    worker_connections  1024<span class=\"comment\">;</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">#防止多个进程对访问连接的争抢</span></span><br><span class=\"line\">    <span class=\"comment\">#只能在events块中进行设置</span></span><br><span class=\"line\">    <span class=\"comment\">#accept_mutex  on</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">#让nginx worker进程尽可能多地接受请求，worker进程一次性地接受监听队列里的所有请求，然后处理</span></span><br><span class=\"line\">    <span class=\"comment\">#multi_accept on/off;    #默认为off</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">#选择事件模型进行消息处理</span></span><br><span class=\"line\">    <span class=\"comment\">#method可选择内容有：select、poll、kqueue、epoll（linux下使用）、rtsig</span></span><br><span class=\"line\">    <span class=\"comment\">#use METHOD </span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">http &#123;</span><br><span class=\"line\">    <span class=\"comment\">#include 表示将其他nginx配置或者第三方模块引用到主配置文件</span></span><br><span class=\"line\">    include       mime.types<span class=\"comment\">;</span></span><br><span class=\"line\">    <span class=\"comment\">#配置用于处理前端请求的MIME类型</span></span><br><span class=\"line\">    default_type  application/octet-stream<span class=\"comment\">;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">#定义服务日志的格式，并为格式定一个名字</span></span><br><span class=\"line\">    <span class=\"comment\">#log_format  main  &#x27;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#x27;</span></span><br><span class=\"line\">    <span class=\"comment\">#                  &#x27;$status $body_bytes_sent &quot;$http_referer&quot; &#x27;</span></span><br><span class=\"line\">    <span class=\"comment\">#                  &#x27;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#x27;;</span></span><br><span class=\"line\">    <span class=\"comment\">#自定义服务日志，access_log path [format [buffer=size]]</span></span><br><span class=\"line\">    <span class=\"comment\">#format为log_format中定义的定义好的格式名称，size为临时存放日志的缓存区的大小</span></span><br><span class=\"line\">    <span class=\"comment\">#access_log  logs/access.log  main;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">#配置是否允许使用sendfile传输文件</span></span><br><span class=\"line\">    sendfile        on<span class=\"comment\">;</span></span><br><span class=\"line\">    <span class=\"comment\">#每个工作进程每次调用sendfile传输的数据量最大值</span></span><br><span class=\"line\">    <span class=\"comment\">#sendfile_max_chunk SIZE</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">#tcp_nopush     on;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">#keepalive超时时间</span></span><br><span class=\"line\">    <span class=\"comment\">#keepalive_timeout  0;</span></span><br><span class=\"line\">    keepalive_timeout  65<span class=\"comment\">;</span></span><br><span class=\"line\">    <span class=\"comment\">#限制用户某一连接的请求次数，默认为100</span></span><br><span class=\"line\">    <span class=\"comment\">#keepalive_requests NUMBER;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">#gzip压缩功能是够开启，是将网页静态资源压缩后传输到浏览器在进行解压，会消耗一定CPU资源，但会提高访问速度</span></span><br><span class=\"line\">    <span class=\"comment\">#gzip  on;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    server &#123;</span><br><span class=\"line\">        <span class=\"comment\">#监听所有IP 80端口</span></span><br><span class=\"line\">        <span class=\"comment\">#listen IP 监听具体IP的80端口、listen PORT 监听所有IP的指定端口</span></span><br><span class=\"line\">        listen       80<span class=\"comment\">;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">#对外提供的虚拟机；接受请求的域名、IP，由两段或者三段组成，demo.com  www.demo.com</span></span><br><span class=\"line\">        <span class=\"comment\">#可以有多个名，之间用空格隔开，第一个为主名;可以使用通配符*，但是只能在三段的首段或者尾段使用</span></span><br><span class=\"line\">        server_name  localhost<span class=\"comment\">;</span></span><br><span class=\"line\">        </span><br><span class=\"line\">        set $demo </span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">#charset koi8-r;</span></span><br><span class=\"line\">        <span class=\"comment\">#access_log  logs/host.access.log  main;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># location [=/~/~*/^~/] 请求字符串   </span></span><br><span class=\"line\">        <span class=\"comment\"># = 严格匹配 、^~ 匹配度最高的立即处理</span></span><br><span class=\"line\">        <span class=\"comment\"># 使用正则必必须用标识 ~ 字符串包含正则，区分大小写 、 ~* 字符串包含正则，不区分大小写</span></span><br><span class=\"line\">        location / &#123;  <span class=\"comment\">#  通用匹配, 如果没有其它匹配,任何请求都会匹配到。</span></span><br><span class=\"line\">            <span class=\"comment\"># 请求的根目录，此处为nginx下的html目录，相对路径为相对nginx安装目录</span></span><br><span class=\"line\">            root   html<span class=\"comment\">;    #访问地址为 server_name/location字符串    访问文件路径为 root值/location字符串</span></span><br><span class=\"line\">            index  index.html index.htm<span class=\"comment\">;  #index 为默认首页</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">#location /demo &#123;       #根据servername为localhost，当访问 localhost/demo时访问的文件为 /opt/demo下的文件</span></span><br><span class=\"line\">        <span class=\"comment\">#    root   /opt;               #还可以使用alisa更改，例如 alisa /opt/test;   实际访问的文件就是/opt/test下的文件</span></span><br><span class=\"line\">        <span class=\"comment\">#    index index.html;</span></span><br><span class=\"line\">        <span class=\"comment\">#&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">#设置网站的错误页面，error_page ERROR_CODE  PATH</span></span><br><span class=\"line\">        <span class=\"comment\">#ERROR_CODE为错误代码，多个代码之间用空格隔出</span></span><br><span class=\"line\">        <span class=\"comment\">#PATH为nginx安装目录html为根目录的相对路径，若不想将错误页面放在nginx安装目录，可以后面跟一个location模块重新定向到目录</span></span><br><span class=\"line\">        <span class=\"comment\">#error_page  404              /404.html;</span></span><br><span class=\"line\">        <span class=\"comment\"># redirect server error pages to the static page /50x.html</span></span><br><span class=\"line\">        <span class=\"comment\">#</span></span><br><span class=\"line\">        error_page   500 502 503 504  /50x.html<span class=\"comment\">;</span></span><br><span class=\"line\">        <span class=\"attr\">location</span> = /<span class=\"number\">50</span>x.html &#123;</span><br><span class=\"line\">            root   html<span class=\"comment\">;</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># proxy the PHP scripts to Apache listening on 127.0.0.1:80</span></span><br><span class=\"line\">        <span class=\"comment\">#</span></span><br><span class=\"line\">        <span class=\"comment\">#location ~ \\.php$ &#123;</span></span><br><span class=\"line\">        <span class=\"comment\">#    proxy_pass   http://127.0.0.1;</span></span><br><span class=\"line\">        <span class=\"comment\">#&#125;</span></span><br><span class=\"line\">        <span class=\"comment\"># pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000</span></span><br><span class=\"line\">        <span class=\"comment\">#</span></span><br><span class=\"line\">        <span class=\"comment\">#location ~ \\.php$ &#123;</span></span><br><span class=\"line\">        <span class=\"comment\">#    root           html;</span></span><br><span class=\"line\">        <span class=\"comment\">#    fastcgi_pass   127.0.0.1:9000;</span></span><br><span class=\"line\">        <span class=\"comment\">#    fastcgi_index  index.php;</span></span><br><span class=\"line\">        <span class=\"comment\">#    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;</span></span><br><span class=\"line\">        <span class=\"comment\">#    include        fastcgi_params;</span></span><br><span class=\"line\">        <span class=\"comment\">#&#125;</span></span><br><span class=\"line\">        <span class=\"comment\"># deny access to .htaccess files, if Apache&#x27;s document root</span></span><br><span class=\"line\">        <span class=\"comment\"># concurs with nginx&#x27;s one</span></span><br><span class=\"line\">        <span class=\"comment\">#</span></span><br><span class=\"line\">        <span class=\"comment\">#location ~ /\\.ht &#123;</span></span><br><span class=\"line\">        <span class=\"comment\">#    deny  all;</span></span><br><span class=\"line\">        <span class=\"comment\">#&#125;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\"># another virtual host using mix of IP-, name-, and port-based configuration</span></span><br><span class=\"line\">    <span class=\"comment\">#</span></span><br><span class=\"line\">    <span class=\"comment\">#server &#123;</span></span><br><span class=\"line\">    <span class=\"comment\">#    listen       8000;</span></span><br><span class=\"line\">    <span class=\"comment\">#    listen       somename:8080;</span></span><br><span class=\"line\">    <span class=\"comment\">#    server_name  somename  alias  another.alias;</span></span><br><span class=\"line\">    <span class=\"comment\">#    location / &#123;</span></span><br><span class=\"line\">    <span class=\"comment\">#        root   html;</span></span><br><span class=\"line\">    <span class=\"comment\">#        index  index.html index.htm;</span></span><br><span class=\"line\">    <span class=\"comment\">#    &#125;</span></span><br><span class=\"line\">    <span class=\"comment\">#&#125;</span></span><br><span class=\"line\">    <span class=\"comment\"># HTTPS server</span></span><br><span class=\"line\">    <span class=\"comment\">#</span></span><br><span class=\"line\">    <span class=\"comment\">#server &#123;</span></span><br><span class=\"line\">    <span class=\"comment\">#    listen       443 ssl;</span></span><br><span class=\"line\">    <span class=\"comment\">#    server_name  localhost;</span></span><br><span class=\"line\">    <span class=\"comment\">#    ssl_certificate      cert.pem;</span></span><br><span class=\"line\">    <span class=\"comment\">#    ssl_certificate_key  cert.key;</span></span><br><span class=\"line\">    <span class=\"comment\">#    ssl_session_cache    shared:SSL:1m;</span></span><br><span class=\"line\">    <span class=\"comment\">#    ssl_session_timeout  5m;</span></span><br><span class=\"line\">    <span class=\"comment\">#    ssl_ciphers  HIGH:!aNULL:!MD5;</span></span><br><span class=\"line\">    <span class=\"comment\">#    ssl_prefer_server_ciphers  on;</span></span><br><span class=\"line\">    <span class=\"comment\">#    location / &#123;</span></span><br><span class=\"line\">    <span class=\"comment\">#        root   html;</span></span><br><span class=\"line\">    <span class=\"comment\">#        index  index.html index.htm;</span></span><br><span class=\"line\">    <span class=\"comment\">#    &#125;</span></span><br><span class=\"line\">    <span class=\"comment\">#&#125;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","categories":["nginx"],"tags":["nginx服务配置"]},{"title":"4-nginx配置优化","url":"/2022/11/29/Nginx/4-nginx%E9%85%8D%E7%BD%AE%E4%BC%98%E5%8C%96/","content":"<p><img src=\"https://s2.loli.net/2022/11/27/xdGY8aqytLheSjp.jpg\" alt=\"nginx.jpg\">  </p>\n<span id=\"more\"></span>\n<h1 id=\"nginx配置优化\"><a href=\"#nginx配置优化\" class=\"headerlink\" title=\"nginx配置优化\"></a>nginx配置优化</h1><h2 id=\"work进程配置\"><a href=\"#work进程配置\" class=\"headerlink\" title=\"work进程配置\"></a>work进程配置</h2><ol>\n<li><p>worker_processes<br>设置工作进程的数量，最优配置是设置为与CPU核数相同  </p>\n</li>\n<li><p>worker_cpu_affinity<br>为每个进程分配CPU，该与worker_processes、核数有关  </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">#两核CPU</span><br><span class=\"line\">worker_processes 2;         # 2两个工作进程</span><br><span class=\"line\">worker_cpu_affinity 01 10;  </span><br><span class=\"line\"></span><br><span class=\"line\">#四核CPU</span><br><span class=\"line\">worker_processes 4; </span><br><span class=\"line\">worker_cpu_affinity 0001 0010 0100 1000;</span><br></pre></td></tr></table></figure></li>\n<li><p>worker_connections<br>一个工作进程同时可处理的最大请求数，nginx服务器最大连接数应为worker_processes*worker_connections</p>\n</li>\n<li><p>worker_rlimit_nofile<br>nginx服务器最大连接数，默认为linux的句柄数，若nginx连接数超过句柄数则会报错”too many opened files”  </p>\n</li>\n<li><p>accept_mutex<br>防止工作进程争抢请求，如果没有激活accept_mutex，那么所有的Worker都会被唤醒并争抢这一个请求，但最后只有一个Worker能获取新连接，其它的Worker会重新进入休眠状态，这就是惊群问题。它使服务器的性能下降，因为所有被唤醒的worker进程在重新进入waiting状态前会占用一段CPU时间，<strong>Nginx默认激活了accept_mutex</strong>，也就是说不会有惊群问题。当服务器连接数不多时，开启这个参数会让负载有一定程度的降低（因为不会唤醒多个worker进程）。<strong>但是当服务器的吞吐量很大时，为了效率，需要关闭这个参数（串行化的方式不然导致影响速度的降低）</strong>  </p>\n</li>\n<li><p>accept_mutex_delay<br>当accept_mutex功能启用后，只有一个持有mutex锁的worker进程会接受并处理请求，其他worker进程等待。accept_mutex_delay指定的时间就是这些worker进程的等待时间，过了等待时间下一个worker进程便取得mutex锁，处理请求。ccept_mutex_delay在events模块中指定，默认的值为500ms。</p>\n</li>\n<li><p>multi_accept<br>让nginx worker进程尽可能多地接受请求。它的作用是让worker进程一次性地接受监听队列里的所有请求，然后处理。如果web服务器面对的是一个持续的请求流，那么启用multi_accept可能会造成worker进程一次接受的请求大于worker_connections指定可以接受的请求数。这就是overflow，这个overflow会造成性能损失，overflow这部分的请求不会受到处理。</p>\n</li>\n</ol>\n","categories":["nginx"],"tags":["nginx配置优化"]},{"title":"6-nginx rewrite","url":"/2022/11/30/Nginx/6-nginx%E4%B9%8Brewrite/","content":"<p><img src=\"https://s2.loli.net/2022/11/27/xdGY8aqytLheSjp.jpg\" alt=\"nginx.jpg\">  </p>\n<span id=\"more\"></span>\n<h1 id=\"rewrite\"><a href=\"#rewrite\" class=\"headerlink\" title=\"rewrite\"></a>rewrite</h1><p>rewrite用于实现URL的重写以及重定向，例如旧的域名能够跳转到新的域名上，某网页发生改变需要跳转到新的页面等。<br>rewrite指定可以放置在server、location块、if块中，只能对域名后边的出去参数外的字符串起作用，例如：<code>http://192.168.27.11:9090/targets?search=#pool-prometheus</code>，就只对<code>/targets</code>起作用。<br><code>rewrite regex replacement [flag]</code>  </p>\n<ul>\n<li><strong>regex</strong>：正则匹配URL  </li>\n<li><strong>replacement</strong>：跳转后的内容，其中可以使用nginx内置变量，例如$host请求的主机名  </li>\n<li><strong>flag</strong>：标记<br>last :终止继续在本location块中处理接收到的URI，并将此处重写的URI作为一个新的URI，使用各location块进行处理。该标志将重写后的URI重新在server块中执行，为重写后的URI提供了转入到其他location块的机会，一般写在server、if中<br>break :将重写后的地址在当前的location块中继续执行，不会将新的URI转向到其他location块<br>redirect :返回302临时重定向，浏览器地址会显示跳转后的URL地址。<br>permanent :返回301永久重定向，浏览器地址栏会显示跳转后的URL地址。  <figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\"># rewrite demo,访问 http://nginx_ip/test时，URL会跳转为http://www.testtest.com/test,服务器中访问的文件为/opt/test下的文件</span><br><span class=\"line\">        location /test &#123;</span><br><span class=\"line\">            rewrite ^/(.*)$ http://www.testtest.com/$1;  #$1为rewrite中正则匹配到的内容，</span><br><span class=\"line\">            root /opt;</span><br><span class=\"line\">            index index.html;</span><br><span class=\"line\">        &#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h1 id=\"if\"><a href=\"#if\" class=\"headerlink\" title=\"if\"></a>if</h1><p><code>if (condition) &#123;&#125;</code>,可以在server块或location块中配置。<br>判断条件</p>\n<ul>\n<li>变量名：变量的值为<code>0开头的字符串</code>或为<code>空</code>，则条件为false  </li>\n<li>变量与字符串是否相等：使用<code>=</code>、<code>!=</code>，判断变量和字符串是否相等（字符串不需要加引号，<code>=</code>、<code>!=</code>前后需要加空格）  </li>\n<li>变量与字符串匹配：变量值中是否含有正则匹配内容,<code>~</code>正则区分大小写、<code>~*</code>正则不区分大小写，<code>!~</code>、<code>!~*</code>为相反  </li>\n<li>判断文件是否存在：<code>-f</code>、<code>!-f</code>，<code>-f FILE</code>当文件存在时为true  </li>\n<li>判断目录是否存在：<code>-d</code>、<code>!-d</code>  </li>\n</ul>\n<h1 id=\"break\"><a href=\"#break\" class=\"headerlink\" title=\"break\"></a>break</h1><p>中断当前作用域中的其他nginx配置，作用域中<code>break</code>前的指令配置生效，之后的不生效。可以在server、location、if中使用  </p>\n<h1 id=\"return\"><a href=\"#return\" class=\"headerlink\" title=\"return\"></a>return</h1><p>用于完成对请求的处理，直接向客户端返回响应状态代码。可以在server、location、if中使用  </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">return TEXT</span><br><span class=\"line\">return CODE</span><br><span class=\"line\">return URL</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"set\"><a href=\"#set\" class=\"headerlink\" title=\"set\"></a>set</h1><p>用于设置一个新的变量<br><code>set $test_name value</code>变量名称需要以<code>$</code>为开头  </p>\n<h1 id=\"rewrite-log\"><a href=\"#rewrite-log\" class=\"headerlink\" title=\"rewrite_log\"></a>rewrite_log</h1><p>是否开启rewrite日志输出功能<br><code>rewrite_log on/off</code>  </p>\n<h1 id=\"rewrite的使用\"><a href=\"#rewrite的使用\" class=\"headerlink\" title=\"rewrite的使用\"></a>rewrite的使用</h1><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">server&#123;</span><br><span class=\"line\">    listen 80;</span><br><span class=\"line\">    server_name old_web.com;</span><br><span class=\"line\">    rewrite ^/ http://www.new_web.com;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">server&#123;</span><br><span class=\"line\">    listen 80;</span><br><span class=\"line\">    server_name test1.com test2.com;</span><br><span class=\"line\">    if($host ~ test)&#123;</span><br><span class=\"line\">        rewrite ^(.*) http://www.test3.com/$1;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","categories":["nginx"],"tags":["rewrite"]},{"title":"5-nginx Gzip","url":"/2022/11/29/Nginx/5-nginx%E7%9A%84Gzip%E5%8E%8B%E7%BC%A9/","content":"<p><img src=\"https://s2.loli.net/2022/11/27/xdGY8aqytLheSjp.jpg\" alt=\"nginx.jpg\">  </p>\n<span id=\"more\"></span>\n<h1 id=\"Gzip压缩\"><a href=\"#Gzip压缩\" class=\"headerlink\" title=\"Gzip压缩\"></a>Gzip压缩</h1><p>Gzip对响应数据在线实时压缩，ngx_http_gzip_module模块，经过压缩后资源可以变为原来的30%左右，经过服务端压缩后传到浏览器并解压解析。会消耗一定的CPU资源，但是会节约出口带宽，可以提高访问速度。  </p>\n<ol>\n<li><p>gzip<br>开启或者关闭gzip<br><code>gzip on | off;</code>  </p>\n</li>\n<li><p>gzip_buffers<br>设置Gzip压缩文件使用缓存空间的大小<br><code>gzip_buffers NUMBER SIZE;</code><br>NUMBER:空间数<br>SIZE：每个缓存空间的大小  </p>\n</li>\n<li><p>gzip_comp_level<br>压缩级别，1-9，1为压缩程度最低，越大压缩程度越大，越费时间，一般使用5<br><code>gzip_comp_level LEVEL</code>  </p>\n</li>\n<li><p>gzip_disable<br>针对不同种类客户端发起的请求，可以选择性地关闭Gzip功能，不同的浏览器有不同的UA字符串，支持正则。<br><code>gzip_disable UA标识</code><br><code>gzip_disable &quot;MSIE [1-6]\\.&quot;; </code>  低版本IE不支持，可以关闭gzip压缩  </p>\n</li>\n<li><p>gzip_min_length<br>限制压缩数据的大小，防止很小的数据压缩后变大情况。默认为20，建议设置为1K<br><code>gzip_min_length 1k</code>  </p>\n</li>\n<li><p>gzip_types<br>指定MIME类型压缩，被设置的类型将被压缩。默认为text/html,设置为*，则为所有类型都进行压缩<br><code>gzip_types text/plain application/x-javascript text/css text/html application/xml;</code>  一般设置  </p>\n</li>\n<li><p>gzip_vary<br>发送带有<code>Vary: Accept-Encoding</code>头域的响应头部，告诉接收方数据经过压缩，这对不支持gzip压缩的客户端是有用的。<br><code>gzip_vary on/off</code>  </p>\n</li>\n<li><p>gzip_static<br>实时动态压缩会比较消耗CPU资源，使用静态压缩，提前将数据压缩，直接返回压缩后的数据。需要使用<br><code>gzip_static on/off</code>  </p>\n</li>\n</ol>\n","categories":["nginx"],"tags":["Gzip压缩"]},{"title":"7-nginx代理服务","url":"/2022/12/06/Nginx/7-nginx%E4%BB%A3%E7%90%86%E6%9C%8D%E5%8A%A1/","content":"<p><img src=\"https://s2.loli.net/2022/11/27/xdGY8aqytLheSjp.jpg\" alt=\"nginx.jpg\">  </p>\n<span id=\"more\"></span>\n<h1 id=\"正向代理\"><a href=\"#正向代理\" class=\"headerlink\" title=\"正向代理\"></a>正向代理</h1><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">server&#123;</span><br><span class=\"line\">    resolver 8.8.8.8;    #指定DNS服务器IP地址,默认使用53端口，是必须的指令</span><br><span class=\"line\">    resolver_timout 3s;  #DNS服务器域名解析超时时间</span><br><span class=\"line\">    listen 82;</span><br><span class=\"line\">    location /&#123;</span><br><span class=\"line\">        proxy_pass http://$http_host$request_uri;   #设置的代理服务器协议和地址</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>不设置server_name<br>linux中配置代理服务器  </p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">export http_proxy=http://proxy.com:82/</span><br><span class=\"line\">export https_proxy=http://proxy.com:82/</span><br></pre></td></tr></table></figure>\n\n\n<h1 id=\"反向代理\"><a href=\"#反向代理\" class=\"headerlink\" title=\"反向代理\"></a>反向代理</h1><h2 id=\"proxy-pass\"><a href=\"#proxy-pass\" class=\"headerlink\" title=\"proxy_pass\"></a>proxy_pass</h2><p>用来设置被代理的服务器的地址，可以使主机名、IP加端口  </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">proxy_pass http://www.demo.de/uri</span><br><span class=\"line\">proxy_pass http://localhost:8000/uri</span><br></pre></td></tr></table></figure>\n<p>还可以是一组后端服务器  </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">upsteam proxy_team&#123;</span><br><span class=\"line\">    server http://192.168.27.10/uri;</span><br><span class=\"line\">    server http://192.168.27.11/uri;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen 80;</span><br><span class=\"line\">    server_name www.demo.de;</span><br><span class=\"line\">    location /&#123;</span><br><span class=\"line\">        proxy_pass proxy_team;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">###或者</span><br><span class=\"line\"></span><br><span class=\"line\">upsteam proxy_team&#123;</span><br><span class=\"line\">    server 192.168.27.10/uri;   #此处不加http://,那么proxy_pass中就要加</span><br><span class=\"line\">    server 192.168.27.11/uri;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen 80;</span><br><span class=\"line\">    server_name www.demo.de;</span><br><span class=\"line\">    location /&#123;</span><br><span class=\"line\">        proxy_pass http://proxy_team;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>proxy_pass URL参数中不带URI，则不会改变原地址的URI；参数中带有URI，就会改变源地址的URI。（注意在host后的/也算是 URI）  </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">server&#123;</span><br><span class=\"line\">    listen 80;</span><br><span class=\"line\">    server_name www.demo.de;</span><br><span class=\"line\">    location /demo/&#123;</span><br><span class=\"line\">        ....</span><br><span class=\"line\">        proxy_pass http://192.168.27.12；   </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">#当访问www.demo.de/demo则会转向为http://192.168.27.12/demo</span><br><span class=\"line\"></span><br><span class=\"line\">server&#123;</span><br><span class=\"line\">    listen 80;</span><br><span class=\"line\">    server_name www.demo.de;</span><br><span class=\"line\">    location /demo/&#123;</span><br><span class=\"line\">        ....</span><br><span class=\"line\">        proxy_pass http://192.168.27.12/test；   </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">#当访问www.demo.de/demo则会转向为http://192.168.27.12/test</span><br></pre></td></tr></table></figure>\n","categories":["nginx"],"tags":["nginx代理服务"]},{"title":"8-nginx负载均衡","url":"/2022/12/09/Nginx/8-nginx%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/","content":"<p><img src=\"https://s2.loli.net/2022/11/27/xdGY8aqytLheSjp.jpg\" alt=\"nginx.jpg\">  </p>\n<span id=\"more\"></span>\n<h1 id=\"服务器组\"><a href=\"#服务器组\" class=\"headerlink\" title=\"服务器组\"></a>服务器组</h1><p>upstream设置后端服务器组</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">upstream test_team&#123;    #设置服务器组名为test_team</span><br><span class=\"line\">    #ip_hash      #请求按照IP的hash结果分配，每个访客固定访问一个后端服务器，不能与server中的weigth一同使用，并且必须是最前端的服务器，这样才能获取到客户端的IP</span><br><span class=\"line\">    server 192.168.27.11</span><br><span class=\"line\">    server 192.168.27.12 weight=5  # weight=5权重为5，默认为1，越大越优先用于处理请求</span><br><span class=\"line\">    server 192.168.27.13 fail_timeout=10s  max_fails=3 #10秒内连续三次失败，则在随后的10秒内认为服务器是无效的</span><br><span class=\"line\">    server 192.168.27.14 backup  #备用服务器，只有在正常服务器处于down或者busy时才会被使用</span><br><span class=\"line\">    server 192.168.27.15 down   #标记为永久down状态，通常与ip_hash配合使用</span><br><span class=\"line\">    #last_conn  #把请求分派给连接数最少的服务器</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"负载均衡\"><a href=\"#负载均衡\" class=\"headerlink\" title=\"负载均衡\"></a>负载均衡</h1><h2 id=\"例一-一般轮询规则\"><a href=\"#例一-一般轮询规则\" class=\"headerlink\" title=\"例一:一般轮询规则\"></a>例一:一般轮询规则</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">upstream backend&#123;</span><br><span class=\"line\">    server 192.168.27.11:80</span><br><span class=\"line\">    server 192.168.27.12:80</span><br><span class=\"line\">    server 192.168.27.13:80</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen 80；</span><br><span class=\"line\">    server_name www.test.demo;</span><br><span class=\"line\">    index index.html;</span><br><span class=\"line\">    location /&#123;</span><br><span class=\"line\">        proxy_pass http://backend;</span><br><span class=\"line\">        proxy_set_header HOST $host;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"例二：加权轮询规则\"><a href=\"#例二：加权轮询规则\" class=\"headerlink\" title=\"例二：加权轮询规则\"></a>例二：加权轮询规则</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">upstream backend&#123;</span><br><span class=\"line\">    server 192.168.27.11:80 weight=3</span><br><span class=\"line\">    server 192.168.27.12:80 weight=2</span><br><span class=\"line\">    server 192.168.27.13:80 weight=1</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen 80；</span><br><span class=\"line\">    server_name www.test.demo;</span><br><span class=\"line\">    index index.html;</span><br><span class=\"line\">    location /&#123;</span><br><span class=\"line\">        proxy_pass http://backend;</span><br><span class=\"line\">        proxy_set_header HOST $host;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"例三-对特定资源实现负载均衡\"><a href=\"#例三-对特定资源实现负载均衡\" class=\"headerlink\" title=\"例三:对特定资源实现负载均衡\"></a>例三:对特定资源实现负载均衡</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">upstream file&#123;</span><br><span class=\"line\">    server 192.168.27.11:80</span><br><span class=\"line\">    server 192.168.27.12:80</span><br><span class=\"line\">    server 192.168.27.13:80</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">upstream video&#123;</span><br><span class=\"line\">    server 192.168.27.11:80</span><br><span class=\"line\">    server 192.168.27.12:80</span><br><span class=\"line\">    server 192.168.27.13:80</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen 80；</span><br><span class=\"line\">    server_name www.test.demo;</span><br><span class=\"line\">    index index.html;</span><br><span class=\"line\">    location /file/&#123;</span><br><span class=\"line\">        proxy_pass http://file;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    location /video/&#123;</span><br><span class=\"line\">        proxy_pass http://video;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"例四：带有URL重写的负载均衡\"><a href=\"#例四：带有URL重写的负载均衡\" class=\"headerlink\" title=\"例四：带有URL重写的负载均衡\"></a>例四：带有URL重写的负载均衡</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">upstream backend&#123;</span><br><span class=\"line\">    server 192.168.27.11:80 weight=3</span><br><span class=\"line\">    server 192.168.27.12:80 weight=2</span><br><span class=\"line\">    server 192.168.27.13:80 weight=1</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen 80；</span><br><span class=\"line\">    server_name www.test.demo;</span><br><span class=\"line\">    index index.html;</span><br><span class=\"line\">    location /backend/&#123;</span><br><span class=\"line\">        rewrite ^(.*) XXX last;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    location /&#123;</span><br><span class=\"line\">        proxy_pass http://backend;</span><br><span class=\"line\">        proxy_set_header HOST $host;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","categories":["nginx"],"tags":["nginx负载均衡"]},{"title":"9-nginx缓存","url":"/2022/12/11/Nginx/9-nginx%E7%BC%93%E5%AD%98/","content":"<p><img src=\"https://s2.loli.net/2022/11/27/xdGY8aqytLheSjp.jpg\" alt=\"nginx.jpg\">  </p>\n<span id=\"more\"></span>\n<h1 id=\"nginx缓存机制\"><a href=\"#nginx缓存机制\" class=\"headerlink\" title=\"nginx缓存机制\"></a>nginx缓存机制</h1><h1 id=\"proxy-buffer\"><a href=\"#proxy-buffer\" class=\"headerlink\" title=\"proxy buffer\"></a>proxy buffer</h1><p>Proxy Buffer启用以后，Nginx服务器会异步地将被代理服务器的响应数据传递给客户端。<br>Nginx服务器首先尽可能地从被代理服务器那里接收响应数据，放置在Proxy Buffer中，Buffer的大小由proxy_buffer_size指令和proxy_buffers指令决定。如果在接收过程中，发现Buffer没有足够大小来接收一次响应的数据，Nginx服务器会将部分接收到的数据临时存放在磁盘的临时文件中，磁盘上的临时文件路径可以通过proxy_temp_path指令进行设置，临时文件的大小由proxy_max_temp_file_size指令和proxy_temp_file_write_size指令决定。<br>一次响应数据被接收完成或者Buffer已经装满后，Nginx服务器开始向客户端传输数据。每个Proxy Buffer装满数据后，在从开始向客户端发送一直到Proxy Buffer中的数据全部传输给客户端的整个过程中，它都处于BUSY状态，期间对它进行的其他操作都会失败。同时处于BUSY状态的Proxy Buffer总大小由proxy_busy_buffers_size指令限制，不能超过该指令设置的大小。<br>每个Proxy Buffer装满数据后，在从开始向客户端发送一直到Proxy Buffer中的数据全部传输给客户端的整个过程中，它都处于BUSY状态，期间对它进行的其他操作都会失败。同时处于BUSY状态的Proxy Buffer总大小由proxy_busy_buffers_size指令限制，不能超过该指令设置的大小<br><strong>注意：以下配置都是针对每一个请求起作用，也就是对每一个请求来配置自己的buffer</strong></p>\n<h2 id=\"proxy-buffering\"><a href=\"#proxy-buffering\" class=\"headerlink\" title=\"proxy_buffering\"></a>proxy_buffering</h2><p><code>proxy_buffering on|off;</code>该指令用于配置是否启用或者关闭proxy buffer  </p>\n<h2 id=\"proxy-buffers\"><a href=\"#proxy-buffers\" class=\"headerlink\" title=\"proxy_buffers\"></a>proxy_buffers</h2><p><code>proxy_buffers NUMBER SIZE;</code>配置接受一次被代理服务器响应数据的proxy buffer个数和每个buffer的大小，size的大小默认为一个内存页的大小，这里设置的缓冲区大小是针对每个请求连接而言的，对于每一个连接，都会分配 ”number*size“大小的内存缓冲区。  </p>\n<h2 id=\"proxy-buffer-size\"><a href=\"#proxy-buffer-size\" class=\"headerlink\" title=\"proxy_buffer_size\"></a>proxy_buffer_size</h2><p><code>proxy_buffer_size SIZE</code> 设置size用于读取从代理服务器收到的响应的第一部分的缓冲区。这部分通常包含一个小的响应头。默认情况下，缓冲区大小等于一个内存页。这是 4K 或 8K，具体取决于平台。但是，它可以做得更小。  </p>\n<h2 id=\"proxy-busy-buffers-size\"><a href=\"#proxy-busy-buffers-size\" class=\"headerlink\" title=\"proxy_busy_buffers_size\"></a>proxy_busy_buffers_size</h2><p><code>proxy_busy_buffers_size SIZE</code>设置读取从代理服务器收到的响应的第一部分的缓冲区，默认为一个内存页的大小。  </p>\n<h2 id=\"proxy-temp-path\"><a href=\"#proxy-temp-path\" class=\"headerlink\" title=\"proxy_temp_path\"></a>proxy_temp_path</h2><p><code>proxy_temp_path PATH [level1 [level2 [level3]]]</code>,临时存放代理服务器响应数据文件，proxy buffer装满后，响应数据仍没有接收完，响应数据就会被存放在该文件中<br>[level1 [level2 [level3]]]为临时文件的存放目录为几级目录，<code>proxy_temp_path /nginx/temp 1 2</code>则临时文件存放在/nginx/temp/1/10下  </p>\n<h2 id=\"proxy-max-temp-file-size\"><a href=\"#proxy-max-temp-file-size\" class=\"headerlink\" title=\"proxy_max_temp_file_size\"></a>proxy_max_temp_file_size</h2><p><code>proxy_max_temp_file_size SIZE</code> 临时文件的总体积的大小，默认为1024MB。  </p>\n<h2 id=\"proxy-temp-file-write-size\"><a href=\"#proxy-temp-file-write-size\" class=\"headerlink\" title=\"proxy_temp_file_write_size\"></a>proxy_temp_file_write_size</h2><p><code>proxy_temp_file_write_size size</code> 配置<strong>同时写入临时文件的数据量</strong>的大小，避免磁盘IO过大  </p>\n<h1 id=\"proxy-cache\"><a href=\"#proxy-cache\" class=\"headerlink\" title=\"proxy cache\"></a>proxy cache</h1><p>Proxy Cache主要实现Nginx服务器对客户端数据请求的快速响应。Nginx服务器在接收到被代理服务器的响应数据之后，一方面通过Porxy Buffer机制将数据传递给客户端，另一方面根据Proxy Cache的配置将这些数据缓存到本地硬盘上。当客户端下次要访问相同的数据时，Nginx服务器直接从硬盘检索到相应的数据返回给用户，从而减少与被代理服务器交互的时间。<br>Proxy Cache机制依赖于Porxy Buffer机制，只有在Porxy Buffer机制开启的情况下Proxy Cache的配置才发挥作用  </p>\n<h2 id=\"proxy-cache-1\"><a href=\"#proxy-cache-1\" class=\"headerlink\" title=\"proxy cache\"></a>proxy cache</h2><p><code>proxy cache ZONE | off</code> 用于配置一个公共的内存区域的名称，该区域存放缓存的索引。off为关闭proxy_cache功能。  </p>\n<h2 id=\"proxy-cache-bypass\"><a href=\"#proxy-cache-bypass\" class=\"headerlink\" title=\"proxy_cache_bypass\"></a>proxy_cache_bypass</h2><p><code>proxy_cache_bypass string</code> 用于设置向客户端发送数据时，不从缓存中获取的条件。string是条件变量，可以有多个，当有不为空或者不等于0时，相应数据不从缓存读取。  </p>\n<h2 id=\"proxy-cache-key\"><a href=\"#proxy-cache-key\" class=\"headerlink\" title=\"proxy_cache_key\"></a>proxy_cache_key</h2><p><code>proxy_cache_key string</code> 设置在内存中为缓存数据建立索引时使用的关键字。string为设置的关键字，支持变量  </p>\n<h2 id=\"proxy-cache-lock\"><a href=\"#proxy-cache-lock\" class=\"headerlink\" title=\"proxy_cache_lock\"></a>proxy_cache_lock</h2><p><code>proxy_cache_lock on | off</code> 是否开启缓存的锁功能。在缓存中，某些数据可以同时被多个请求返回的数据填充，开启锁后，只能有一个请求填充缓存中的某一数据项，这相当于给该数据项上锁，不允许其他请求操作。其他的请求如果也想填充该项，必须等待该数据项的锁被释放。这个等待时间由proxy_cache_lock_timeout指令配置  </p>\n<h2 id=\"proxy-cache-lock-timeout\"><a href=\"#proxy-cache-lock-timeout\" class=\"headerlink\" title=\"proxy_cache_lock_timeout\"></a>proxy_cache_lock_timeout</h2><p><code>proxy_cache_lock_timeout time</code>设置缓存的锁功能开启以后锁的超时时间，默认为5s。  </p>\n<h2 id=\"proxy-cache-min-uses\"><a href=\"#proxy-cache-min-uses\" class=\"headerlink\" title=\"proxy_cache_min_uses\"></a>proxy_cache_min_uses</h2><p><code>proxy_cache_min_uses NUM</code> 设置客户端请求发送的次数，相同的请求达到该次数时，才对请求的相应数据做缓存。</p>\n<h2 id=\"proxy-cache-path\"><a href=\"#proxy-cache-path\" class=\"headerlink\" title=\"proxy_cache_path\"></a>proxy_cache_path</h2><p><code>proxy_cache_path path [levels=levels] keys_zone=name:size1 [inactive=time1] [max_size=size2] [loader_files=number] [loader_sleep=time2] [loader_threshold=time3];</code> 缓存数据的路径，以及相关内容。<br><strong>[levels=levels]</strong>:levels=1表示一级hash目录，levels=1:2表示二级。<br><strong>keys_zone=name:size1</strong>：表示缓存索引的内存区域名称和大小<br>**[inactive=time1]**：强制更新缓存数据的时间，当缓存数据在设定时间内没有被访问时，缓存就被清除<br>**[max_size=size2]**：硬盘中缓存数据的大小限制，当缓存超过该值时，将会删除最近最少被访问的缓存  </p>\n<h2 id=\"proxy-cache-use-stale\"><a href=\"#proxy-cache-use-stale\" class=\"headerlink\" title=\"proxy_cache_use_stale\"></a>proxy_cache_use_stale</h2><p><code>proxy_cache_use_stale error | timeout | invalid_header | updating | http_500 | http_502 | http_503 | http_504 | http_403 | http_404 | http_429 | off</code> Nginx在访问被代理服务器过程中出现被代理的服务器无法访问或者访问错误等现象时， Nginx服务器可以使用历史缓存响应客户端的请求，这些数据不一定和被代理服务器上最新的数据相一致，但对于更新频率不高的后端服务器来说，Nginx服务器的该功能在一定程度上能够为客户端提供不间断访问。<br>updating状态,不是指被代理服务器在updating状态，而是指客户端请求的数据在Nginx服务器中正好处于更新状态。  </p>\n<h2 id=\"proxy-cache-valid\"><a href=\"#proxy-cache-valid\" class=\"headerlink\" title=\"proxy_cache_valid\"></a>proxy_cache_valid</h2><p><code>proxy_cache_valid CODE TIME</code> 针对不同的响应状态设置不同的缓存时间<br><code>proxy_cache_valid 200 10s</code>  </p>\n<h2 id=\"proxy-no-cache\"><a href=\"#proxy-no-cache\" class=\"headerlink\" title=\"proxy_no_cache\"></a>proxy_no_cache</h2><p><code>proxy_no_cache string</code> 设置何时不使用cache，string为一个、多个变量，不为空或者不为0时，不启用cache。  </p>\n<h1 id=\"proxy-store\"><a href=\"#proxy-store\" class=\"headerlink\" title=\"proxy store\"></a>proxy store</h1><p>proxy store是另一种缓存方法，不提供缓存过期时间、内存索引建立、不占用内存空间，对静态数据的效果比较好。  </p>\n<h2 id=\"proxy-store-1\"><a href=\"#proxy-store-1\" class=\"headerlink\" title=\"proxy_store\"></a>proxy_store</h2><p><code>proxy_store on|off|string</code> 是否开启store功能，string为自定义混存文件的存放位置，设置后store开启  </p>\n","categories":["nginx"],"tags":["nginx负载均衡"]},{"title":"2-pipeline","url":"/2022/12/20/Jenkins/2-pipeline/","content":"<p><img src=\"https://s2.loli.net/2022/12/20/wEX72epkWox34FU.jpg\" alt=\"Jenkins.jpg\"></p>\n<span id=\"more\"></span>\n<h1 id=\"Pipeline\"><a href=\"#Pipeline\" class=\"headerlink\" title=\"Pipeline\"></a>Pipeline</h1><p>Pipeline流水线是一套插件，从软件版本控制库到用户的过程自动化。<br>Jenkinsfile是Pipeline的表现形式，</p>\n","categories":["Jenkins"],"tags":["Jenkins安装"]},{"title":"1-jenkins介绍与安装","url":"/2022/12/20/Jenkins/1-jenkins%E4%BB%8B%E7%BB%8D%E4%B8%8E%E5%AE%89%E8%A3%85/","content":"<p><img src=\"https://s2.loli.net/2022/12/20/wEX72epkWox34FU.jpg\" alt=\"Jenkins.jpg\"></p>\n<span id=\"more\"></span>\n<h1 id=\"Jenkins介绍\"><a href=\"#Jenkins介绍\" class=\"headerlink\" title=\"Jenkins介绍\"></a>Jenkins介绍</h1><p>Jenkins是一个持续集成（CI）的工具，用于自动化任务，包括构建、测试和部署软件。  </p>\n<h2 id=\"Jenkins-job类型\"><a href=\"#Jenkins-job类型\" class=\"headerlink\" title=\"Jenkins job类型\"></a>Jenkins job类型</h2><p>Freestyle project：自由风格项目，主要的项目类型<br>Maven peoject：maven项目专有<br>Multiconfigration project：多配制项目，适合大量不同配置（环境、平台）构建<br>Pipeline：流水线项目，适合使用pipeline插件功能构建流水线任务<br>Multibranch pipeline：多分支流水线项目，根据SCM代码仓库中的分支创建多个pipeline项目  </p>\n<h1 id=\"Jenkins安装\"><a href=\"#Jenkins安装\" class=\"headerlink\" title=\"Jenkins安装\"></a>Jenkins安装</h1><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo wget -O /etc/yum.repos.d/jenkins.repo https://pkg.jenkins.io/redhat-stable/jenkins.repo</span><br><span class=\"line\">sudo rpm --import https://pkg.jenkins.io/redhat-stable/jenkins.io.key</span><br><span class=\"line\">yum install fontconfig java-11-openjdk</span><br><span class=\"line\">yum install jenkins</span><br><span class=\"line\">systemctl daemon-reload</span><br><span class=\"line\">systemctl start jenkins</span><br></pre></td></tr></table></figure>\n<p>启动完成后可以通过8080端口进行访问web界面<br>在wget时可能会报错，以下情况<code>yum install -y ca-certificates</code>即可</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">~]# wget -O /etc/yum.repos.d/jenkins.repo https://pkg.jenkins.io/redhat-stable/jenkins.repo</span><br><span class=\"line\">--2022-12-20 10:38:51--  https://pkg.jenkins.io/redhat-stable/jenkins.repo</span><br><span class=\"line\">正在解析主机 pkg.jenkins.io (pkg.jenkins.io)... 151.101.2.133, 151.101.66.133, 151.101.130.133, ...</span><br><span class=\"line\">正在连接 pkg.jenkins.io (pkg.jenkins.io)|151.101.2.133|:443... 已连接。</span><br><span class=\"line\">错误: 无法验证 pkg.jenkins.io 的由 “/C=US/O=Let&#x27;s Encrypt/CN=R3” 颁发的证书:</span><br><span class=\"line\">  颁发的证书已经过期。</span><br><span class=\"line\">要以不安全的方式连接至 pkg.jenkins.io，使用“--no-check-certificate”。</span><br></pre></td></tr></table></figure>\n<p>按照说明进行初始化即可</p>\n<h1 id=\"Jenkins相关文件及目录\"><a href=\"#Jenkins相关文件及目录\" class=\"headerlink\" title=\"Jenkins相关文件及目录\"></a>Jenkins相关文件及目录</h1><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">/etc/init.d/jenkins         #启动文件</span><br><span class=\"line\">/etc/logrotate.d/jenkins    #日志相关配置</span><br><span class=\"line\">/etc/sysconfig/jenkins      #配置文件</span><br><span class=\"line\">/usr/bin/jenkins</span><br><span class=\"line\">/usr/lib/systemd/system/jenkins.service</span><br><span class=\"line\">/usr/sbin/rcjenkins</span><br><span class=\"line\">/usr/share/java/jenkins.war</span><br><span class=\"line\">/usr/share/jenkins</span><br><span class=\"line\">/usr/share/jenkins/migrate</span><br><span class=\"line\">/var/cache/jenkins</span><br><span class=\"line\">/var/log/jenkins        #日志文件</span><br><span class=\"line\">/var/lib/jenkins        #家目录&amp;插件目录&amp;构建工作目录</span><br></pre></td></tr></table></figure>","categories":["Jenkins"],"tags":["Jenkins安装"]},{"title":"mysql教程","url":"/2023/02/17/mysql/mysql%E6%95%99%E7%A8%8B/","content":"<p><img src=\"https://s2.loli.net/2023/02/17/vPrdgcCKyN69lsM.jpg\">  </p>\n<span id=\"more\"></span>\n<h1 id=\"mysql语法\"><a href=\"#mysql语法\" class=\"headerlink\" title=\"mysql语法\"></a>mysql语法</h1><h2 id><a href=\"#\" class=\"headerlink\" title></a></h2><figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">连接数据库</span></span><br><span class=\"line\"><span class=\"comment\">mysql -h xxx.xxx.xxx.xxx -P 3306 -u root -p  </span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"comment\">-- 查看数据库列表</span></span><br><span class=\"line\"><span class=\"keyword\">show</span> databases;</span><br><span class=\"line\"><span class=\"comment\">-- 选择数据库</span></span><br><span class=\"line\">use DATABASE_NAME;</span><br><span class=\"line\"><span class=\"comment\">-- 查看数据库中表列表</span></span><br><span class=\"line\"><span class=\"keyword\">show</span> tables;</span><br><span class=\"line\"><span class=\"comment\">-- 查看表中字段信息(包含字段名、数据类型、是否NULL、键信息、默认值)</span></span><br><span class=\"line\"><span class=\"keyword\">desc</span> TABLE_NAME</span><br><span class=\"line\"><span class=\"keyword\">show</span> columns <span class=\"keyword\">from</span> TABLE_NAME;</span><br><span class=\"line\"><span class=\"comment\">-- 查看数据库或表的创建语句</span></span><br><span class=\"line\"><span class=\"keyword\">show</span> <span class=\"keyword\">create</span> DATABASE_NAME<span class=\"operator\">/</span>TABLE_NAME;</span><br><span class=\"line\"><span class=\"comment\">-- 查看服务器状态  </span></span><br><span class=\"line\"><span class=\"keyword\">show</span> status</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"数据库操作\"><a href=\"#数据库操作\" class=\"headerlink\" title=\"数据库操作\"></a>数据库操作</h2><figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 创建数据库  </span></span><br><span class=\"line\"><span class=\"keyword\">create</span> database DATABASE_NAME;</span><br><span class=\"line\"><span class=\"comment\">-- 删除数据库</span></span><br><span class=\"line\"><span class=\"keyword\">drop</span> database DATABASE_NAME;</span><br><span class=\"line\"><span class=\"comment\">-- 修改数据库名称</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"表操作\"><a href=\"#表操作\" class=\"headerlink\" title=\"表操作\"></a>表操作</h2><figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 创建新表</span></span><br><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">table</span> TABLE_NAME (</span><br><span class=\"line\">COLUMN_NAME1 <span class=\"type\">int</span> <span class=\"keyword\">not</span> <span class=\"keyword\">null</span> ,  <span class=\"comment\">-- 不为空</span></span><br><span class=\"line\">COLUMN_NAME2 <span class=\"type\">varchar</span>(<span class=\"number\">255</span>) <span class=\"keyword\">unique</span>,  <span class=\"comment\">-- 列值唯一</span></span><br><span class=\"line\">COLUMN_NAME3 <span class=\"type\">varchar</span>(<span class=\"number\">255</span>) <span class=\"keyword\">default</span> <span class=\"string\">&#x27;xxx&#x27;</span>, <span class=\"comment\">-- 默认值</span></span><br><span class=\"line\">COLUMN_NAME4 <span class=\"type\">varchar</span>(<span class=\"number\">255</span>) ,</span><br><span class=\"line\">COLUMN_NAME5 <span class=\"type\">varchar</span>(<span class=\"number\">255</span>) ,</span><br><span class=\"line\"><span class=\"keyword\">primary</span> key(COLUMN_NAME4), <span class=\"comment\">-- 主键，不为空、唯一</span></span><br><span class=\"line\"><span class=\"keyword\">foreign</span> key(COLUMN_NAME5) <span class=\"keyword\">references</span> TABLE_NAME(COLUMN_NAME), <span class=\"comment\">-- 外键，COLUMN_NAME5必须是TABLE_NAME表COLUMN_NAME中的值</span></span><br><span class=\"line\"><span class=\"keyword\">check</span> (COLUMN_NAME1 <span class=\"operator\">&gt;</span> <span class=\"number\">0</span> )  <span class=\"comment\">-- 只允许大于零的数</span></span><br><span class=\"line\">)</span><br><span class=\"line\"><span class=\"comment\">-- 复制表结构以及数据</span></span><br><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">table</span> NEW_TABLE <span class=\"keyword\">select</span> <span class=\"operator\">*</span> <span class=\"keyword\">from</span> OLD_TABLE;</span><br><span class=\"line\"><span class=\"comment\">-- 仅复制表结构</span></span><br><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">table</span> NEW_TABLE <span class=\"keyword\">like</span> OLD_TABLE;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 删除表</span></span><br><span class=\"line\"><span class=\"keyword\">drop</span> <span class=\"keyword\">table</span> TABLE_NAME;</span><br><span class=\"line\"><span class=\"comment\">-- 清空表数据</span></span><br><span class=\"line\"><span class=\"keyword\">truncate</span> TABLE_NAME;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 添加列</span></span><br><span class=\"line\"><span class=\"keyword\">alter</span> <span class=\"keyword\">table</span> TABLE_NAME <span class=\"keyword\">add</span> COLUMN_NAME <span class=\"type\">int</span> <span class=\"keyword\">not</span> <span class=\"keyword\">null</span> ;</span><br><span class=\"line\"><span class=\"comment\">-- 删除列</span></span><br><span class=\"line\"><span class=\"keyword\">alter</span> <span class=\"keyword\">table</span> TABLE_NAME <span class=\"keyword\">drop</span> COLUMN_NAME;</span><br><span class=\"line\"><span class=\"comment\">-- 修改字段类型</span></span><br><span class=\"line\"><span class=\"keyword\">alter</span> <span class=\"keyword\">table</span> TABLE_NAME modify COLUMN_NAME <span class=\"type\">varchar</span>(<span class=\"number\">255</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"增删改查\"><a href=\"#增删改查\" class=\"headerlink\" title=\"增删改查\"></a>增删改查</h2>","categories":["mysql"],"tags":["mysql"]},{"title":"mysql备份","url":"/2022/12/09/mysql/mysql%E5%A4%87%E4%BB%BD/","content":"<p><img src=\"https://s2.loli.net/2023/02/17/vPrdgcCKyN69lsM.jpg\">  </p>\n<span id=\"more\"></span>\n<h1 id=\"mysql备份\"><a href=\"#mysql备份\" class=\"headerlink\" title=\"mysql备份\"></a>mysql备份</h1><p>主要使用mysqldump进行热备份，</p>\n","categories":["mysql"],"tags":["mysql"]},{"title":"1-网络基础","url":"/2023/03/24/%E7%BD%91%E7%BB%9C/1-%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80/","content":"<center> 网络基础知识 </center>\n<span id=\"more\"></span>  \n# 部分基础知识  \n由网络位划分网段，子网掩码决定网络位的长度，网关连接不同的网段  \nIP：192.168.27.1  netmask：255.255.0.0  表示IP地址前两段是网络位  \nDHCP：自动分配IP地址\n\n<h1 id=\"TCP与UDP的区别\"><a href=\"#TCP与UDP的区别\" class=\"headerlink\" title=\"TCP与UDP的区别\"></a>TCP与UDP的区别</h1><p>TCP:可靠服务、完整性高、有连接、对延迟不敏感<br>UDP:无连接、对延迟敏感</p>\n<h1 id=\"OSI七层模型和TCP-IP四层模型\"><a href=\"#OSI七层模型和TCP-IP四层模型\" class=\"headerlink\" title=\"OSI七层模型和TCP/IP四层模型\"></a>OSI七层模型和TCP/IP四层模型</h1><p><img src=\"/2023/03/24/%E7%BD%91%E7%BB%9C/1-%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80/OSI%E6%A8%A1%E5%9E%8B%E4%B8%8ETCPIP%E6%A8%A1%E5%9E%8B.png\"></p>\n<h1 id=\"eNSP基础操作\"><a href=\"#eNSP基础操作\" class=\"headerlink\" title=\"eNSP基础操作\"></a>eNSP基础操作</h1><p>sysname NAME:修改路由器名<br>eNSP中路由器一般使用AR2220，连接使用AUTO即可  </p>\n<ul>\n<li>路由器配置IP<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;Huawei&gt;system-view    #用户进入系统，可以写作sys</span><br><span class=\"line\">Enter system view, return user view with Ctrl+Z.</span><br><span class=\"line\">[Huawei]interface GigabitEthernet 0/0/0   #进入端口0/0/0，或者是写作int g0/0/0</span><br><span class=\"line\">[Huawei-GigabitEthernet0/0/0]ip address  192.168.1.1 255.255.255.0   #配置IP地址以及子网掩码，可以写作ip add 192.168.1.1 255.255.255.0</span><br><span class=\"line\">Mar 24 2023 13:50:58-08:00 Huawei %%01IFNET/4/LINK_STATE(l)[1]:The line protocol IP on the interface GigabitEthernet0/0/0 has entered the UP state. </span><br><span class=\"line\">[Huawei-GigabitEthernet0/0/0]q  #退出0/0/0端口</span><br><span class=\"line\">[Huawei]q</span><br><span class=\"line\">&lt;Huawei&gt;save #保存配置</span><br></pre></td></tr></table></figure></li>\n<li>路由器开启DHCP<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;Huawei&gt;system-view </span><br><span class=\"line\">Enter system view, return user view with Ctrl+Z.</span><br><span class=\"line\">[Huawei]dhcp enable   #开启DHCP</span><br><span class=\"line\">Info: The operation may take a few seconds. Please wait for a moment.done.</span><br><span class=\"line\">[Huawei]interface GigabitEthernet 0/0/0  </span><br><span class=\"line\">[Huawei-GigabitEthernet0/0/0]dhcp select interface   #指定该接口使用DHCP</span><br><span class=\"line\">[Huawei-GigabitEthernet0/0/0]dhcp server dns-list 192.168.1.99  #添加DNS</span><br></pre></td></tr></table></figure></li>\n<li>查看路由器路由表<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">[Huawei]display ip routing-table</span><br><span class=\"line\">Route Flags: R - relay, D - download to fib</span><br><span class=\"line\">------------------------------------------------------------------------------</span><br><span class=\"line\">Routing Tables: Public</span><br><span class=\"line\">         Destinations : 10       Routes : 10       </span><br><span class=\"line\"></span><br><span class=\"line\">Destination/Mask    Proto   Pre  Cost      Flags NextHop         Interface</span><br><span class=\"line\"></span><br><span class=\"line\">  100.100.100.0/24  Direct  0    0           D   100.100.100.1   GigabitEthernet</span><br><span class=\"line\">0/0/1</span><br><span class=\"line\">  100.100.100.1/32  Direct  0    0           D   127.0.0.1       GigabitEthernet</span><br><span class=\"line\">0/0/1</span><br><span class=\"line\">100.100.100.255/32  Direct  0    0           D   127.0.0.1       GigabitEthernet</span><br><span class=\"line\">0/0/1</span><br><span class=\"line\">      127.0.0.0/8   Direct  0    0           D   127.0.0.1       InLoopBack0</span><br><span class=\"line\">      127.0.0.1/32  Direct  0    0           D   127.0.0.1       InLoopBack0</span><br><span class=\"line\">127.255.255.255/32  Direct  0    0           D   127.0.0.1       InLoopBack0</span><br><span class=\"line\">    192.168.1.0/24  Direct  0    0           D   192.168.1.1     GigabitEthernet</span><br><span class=\"line\">0/0/0</span><br><span class=\"line\">    192.168.1.1/32  Direct  0    0           D   127.0.0.1       GigabitEthernet</span><br><span class=\"line\">0/0/0</span><br><span class=\"line\">  192.168.1.255/32  Direct  0    0           D   127.0.0.1       GigabitEthernet</span><br><span class=\"line\">0/0/0</span><br><span class=\"line\">255.255.255.255/32  Direct  0    0           D   127.0.0.1       InLoopBack0</span><br><span class=\"line\"></span><br><span class=\"line\">[Huawei]display ip routing-table 100.100.100.100  #查看100.100.100.100的路由表</span><br><span class=\"line\">Route Flags: R - relay, D - download to fib</span><br><span class=\"line\">------------------------------------------------------------------------------</span><br><span class=\"line\">Routing Table : Public</span><br><span class=\"line\">Summary Count : 1</span><br><span class=\"line\">Destination/Mask    Proto   Pre  Cost      Flags NextHop         Interface</span><br><span class=\"line\"></span><br><span class=\"line\">  100.100.100.0/24  Direct  0    0           D   100.100.100.1   GigabitEthernet</span><br><span class=\"line\">0/0/1</span><br></pre></td></tr></table></figure></li>\n<li>添加静态路由,来回都要添加<br><img src=\"/2023/03/24/%E7%BD%91%E7%BB%9C/1-%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80/%E9%9D%99%E6%80%81%E8%B7%AF%E7%94%B1.png\">  <figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">[AR1]ip route-static 192.168.3.0 255.255.255.0 192.168.2.10  #添加静态路由，去192.168.3.x 255.255.255.0的通过192.168.2.10为下一跳</span><br><span class=\"line\">[AR2]ip route-static 192.168.1.0 255.255.255.0 192.168.2.1   #回包的路由</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h1 id=\"vlan\"><a href=\"#vlan\" class=\"headerlink\" title=\"vlan\"></a>vlan</h1><p>vlan：虚拟局域网，主要用在交换机中，是一种隔离技术，将物理的lan在逻辑上划分成多个广播域的通信，vlan内的主机可以直接通信，vlan之间不能直接通信<br>vlan 1：是默认的vlan<br>交换机的接口模式：access(连接终端)、trunk(连接其他交换机)<br><img src=\"/2023/03/24/%E7%BD%91%E7%BB%9C/1-%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80/vlan.png\"><br>该例子中两个pc原本可以ping通，分别划入不同的vlan中后则ping不通。  </p>\n<ul>\n<li>创建vlan<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;Huawei&gt;system-view </span><br><span class=\"line\">Enter system view, return user view with Ctrl+Z.</span><br><span class=\"line\">[Huawei]vlan 10   #创建vlan 10</span><br><span class=\"line\">[Huawei-vlan10]q</span><br><span class=\"line\">[Huawei]vlan 20   #创建vlan 20</span><br><span class=\"line\">[Huawei-vlan20]q  </span><br><span class=\"line\">[Huawei]display vlan </span><br><span class=\"line\">The total number of vlans is : 3</span><br><span class=\"line\">--------------------------------------------------------------------------------</span><br><span class=\"line\">U: Up;         D: Down;         TG: Tagged;         UT: Untagged;</span><br><span class=\"line\">MP: Vlan-mapping;               ST: Vlan-stacking;</span><br><span class=\"line\">#: ProtocolTransparent-vlan;    *: Management-vlan;</span><br><span class=\"line\">--------------------------------------------------------------------------------</span><br><span class=\"line\"></span><br><span class=\"line\">VID  Type    Ports                                                          </span><br><span class=\"line\">--------------------------------------------------------------------------------</span><br><span class=\"line\">1    common  UT:GE0/0/1(U)      GE0/0/2(U)      GE0/0/3(D)      GE0/0/4(D)      </span><br><span class=\"line\">                GE0/0/5(D)      GE0/0/6(D)      GE0/0/7(D)      GE0/0/8(D)      </span><br><span class=\"line\">                GE0/0/9(D)      GE0/0/10(D)     GE0/0/11(D)     GE0/0/12(D)     </span><br><span class=\"line\">                GE0/0/13(D)     GE0/0/14(D)     GE0/0/15(D)     GE0/0/16(D)     </span><br><span class=\"line\">                GE0/0/17(D)     GE0/0/18(D)     GE0/0/19(D)     GE0/0/20(D)     </span><br><span class=\"line\">                GE0/0/21(D)     GE0/0/22(D)     GE0/0/23(D)     GE0/0/24(D)     </span><br><span class=\"line\"></span><br><span class=\"line\">10   common  </span><br><span class=\"line\">20   common  </span><br><span class=\"line\"></span><br><span class=\"line\">VID  Status  Property      MAC-LRN Statistics Description      </span><br><span class=\"line\">--------------------------------------------------------------------------------</span><br><span class=\"line\"></span><br><span class=\"line\">1    enable  default       enable  disable    VLAN 0001                         </span><br><span class=\"line\">10   enable  default       enable  disable    VLAN 0010                         </span><br><span class=\"line\">20   enable  default       enable  disable    VLAN 0020  </span><br></pre></td></tr></table></figure></li>\n<li>配置vlan  <figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">[Huawei]int g0/0/1</span><br><span class=\"line\">[Huawei-GigabitEthernet0/0/1]port link-type access # 将接口模式改为access</span><br><span class=\"line\">[Huawei-GigabitEthernet0/0/1]port default vlan 10  #将0/0/1接口划分到vlan 10中</span><br><span class=\"line\">[Huawei-GigabitEthernet0/0/1]display vlan</span><br><span class=\"line\">The total number of vlans is : 3</span><br><span class=\"line\">--------------------------------------------------------------------------------</span><br><span class=\"line\">U: Up;         D: Down;         TG: Tagged;         UT: Untagged;</span><br><span class=\"line\">MP: Vlan-mapping;               ST: Vlan-stacking;</span><br><span class=\"line\">#: ProtocolTransparent-vlan;    *: Management-vlan;</span><br><span class=\"line\">--------------------------------------------------------------------------------</span><br><span class=\"line\"></span><br><span class=\"line\">VID  Type    Ports                                                          </span><br><span class=\"line\">--------------------------------------------------------------------------------</span><br><span class=\"line\">1    common  UT:GE0/0/2(U)      GE0/0/3(D)      GE0/0/4(D)      GE0/0/5(D)      </span><br><span class=\"line\">                GE0/0/6(D)      GE0/0/7(D)      GE0/0/8(D)      GE0/0/9(D)      </span><br><span class=\"line\">                GE0/0/10(D)     GE0/0/11(D)     GE0/0/12(D)     GE0/0/13(D)     </span><br><span class=\"line\">                GE0/0/14(D)     GE0/0/15(D)     GE0/0/16(D)     GE0/0/17(D)     </span><br><span class=\"line\">                GE0/0/18(D)     GE0/0/19(D)     GE0/0/20(D)     GE0/0/21(D)     </span><br><span class=\"line\">                GE0/0/22(D)     GE0/0/23(D)     GE0/0/24(D)                     </span><br><span class=\"line\"></span><br><span class=\"line\">10   common  UT:GE0/0/1(U)                                                      </span><br><span class=\"line\"></span><br><span class=\"line\">20   common  </span><br><span class=\"line\"></span><br><span class=\"line\">VID  Status  Property      MAC-LRN Statistics Description      </span><br><span class=\"line\">--------------------------------------------------------------------------------</span><br><span class=\"line\"></span><br><span class=\"line\">1    enable  default       enable  disable    VLAN 0001                         </span><br><span class=\"line\">10   enable  default       enable  disable    VLAN 0010                         </span><br><span class=\"line\">20   enable  default       enable  disable    VLAN 0020   </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">[Huawei-GigabitEthernet0/0/2]port default vlan 20</span><br><span class=\"line\">[Huawei-GigabitEthernet0/0/2]</span><br><span class=\"line\">Mar 24 2023 16:26:45-08:00 Huawei %%01IFNET/4/IF_STATE(l)[2]:Interface Vlanif1 h</span><br><span class=\"line\">as turned into DOWN state.</span><br><span class=\"line\">[Huawei-GigabitEthernet0/0/2]display vlan</span><br><span class=\"line\">The total number of vlans is : 3</span><br><span class=\"line\">--------------------------------------------------------------------------------</span><br><span class=\"line\">U: Up;         D: Down;         TG: Tagged;         UT: Untagged;</span><br><span class=\"line\">MP: Vlan-mapping;               ST: Vlan-stacking;</span><br><span class=\"line\">#: ProtocolTransparent-vlan;    *: Management-vlan;</span><br><span class=\"line\">--------------------------------------------------------------------------------</span><br><span class=\"line\"></span><br><span class=\"line\">VID  Type    Ports                                                          </span><br><span class=\"line\">--------------------------------------------------------------------------------</span><br><span class=\"line\">1    common  UT:GE0/0/3(D)      GE0/0/4(D)      GE0/0/5(D)      GE0/0/6(D)      </span><br><span class=\"line\">                GE0/0/7(D)      GE0/0/8(D)      GE0/0/9(D)      GE0/0/10(D)     </span><br><span class=\"line\">                GE0/0/11(D)     GE0/0/12(D)     GE0/0/13(D)     GE0/0/14(D)     </span><br><span class=\"line\">                GE0/0/15(D)     GE0/0/16(D)     GE0/0/17(D)     GE0/0/18(D)     </span><br><span class=\"line\">                GE0/0/19(D)     GE0/0/20(D)     GE0/0/21(D)     GE0/0/22(D)     </span><br><span class=\"line\">                GE0/0/23(D)     GE0/0/24(D)                                     </span><br><span class=\"line\"></span><br><span class=\"line\">10   common  UT:GE0/0/1(U)                                                      </span><br><span class=\"line\"></span><br><span class=\"line\">20   common  UT:GE0/0/2(U)                                                      </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">VID  Status  Property      MAC-LRN Statistics Description      </span><br><span class=\"line\">--------------------------------------------------------------------------------</span><br><span class=\"line\"></span><br><span class=\"line\">1    enable  default       enable  disable    VLAN 0001                         </span><br><span class=\"line\">10   enable  default       enable  disable    VLAN 0010                         </span><br><span class=\"line\">20   enable  default       enable  disable    VLAN 0020</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"trunk\"><a href=\"#trunk\" class=\"headerlink\" title=\"trunk\"></a>trunk</h2><p>连接不同的交换机，数据包之间会打上vlan的标签，用于其他交换机识别属于那个vlan<br><strong>注意两边的交换机都需要将对应的端口修改为trunk</strong><br><img src=\"/2023/03/24/%E7%BD%91%E7%BB%9C/1-%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80/trunk.png\"></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;Huawei&gt;system-view </span><br><span class=\"line\">Enter system view, return user view with Ctrl+Z.</span><br><span class=\"line\">[Huawei]int g0/0/3</span><br><span class=\"line\">[Huawei-GigabitEthernet0/0/3]port link-type trunk  #将端口类型修改为trunk</span><br><span class=\"line\">[Huawei-GigabitEthernet0/0/3]port trunk allow-pass vlan all #允许哪些vlan可以通过</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"三层交换\"><a href=\"#三层交换\" class=\"headerlink\" title=\"三层交换\"></a>三层交换</h1><p>三层交换就是将多一层的交换机充当为两个vlan的网关，实现两个vlan之间的互通<br><img src=\"/2023/03/24/%E7%BD%91%E7%BB%9C/1-%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80/%E4%B8%89%E5%B1%82%E4%BA%A4%E6%8D%A2.png\">  </p>\n<p>1.将LSW2中，0/0/1端口设置为trunk，并将所有vlan允许通过</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">[Huawei]int g0/0/1</span><br><span class=\"line\">[Huawei-GigabitEthernet0/0/1]port link-type trunk </span><br><span class=\"line\">[Huawei-GigabitEthernet0/0/1]port trunk allow-pass vlan all</span><br></pre></td></tr></table></figure>\n<p>2.将0/0/2、0/0/3端口设置为access，并划分如不同的vlan</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">[Huawei] vlan 10 </span><br><span class=\"line\">[Huawei] vlan 20</span><br><span class=\"line\">[Huawei] int g0/0/2</span><br><span class=\"line\">[Huawei-GigabitEthernet0/0/2] port link-type access</span><br><span class=\"line\">[Huawei-GigabitEthernet0/0/2] portt default vlan 10 </span><br><span class=\"line\">[Huawei] int g0/0/3</span><br><span class=\"line\">[Huawei-GigabitEthernet0/0/3] port link-type access</span><br><span class=\"line\">[Huawei-GigabitEthernet0/0/3] portt default vlan 20 </span><br></pre></td></tr></table></figure>\n<p>3.将LSW1中，0/0/1端口设置为trunk，并将所有vlan允许通过，并配置虚接口pc1与pc2对应的网关</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">[Huawei] vlan 10 </span><br><span class=\"line\">[Huawei] vlan 20</span><br><span class=\"line\">[Huawei]int g0/0/1</span><br><span class=\"line\">[Huawei-GigabitEthernet0/0/1]port link-type trunk </span><br><span class=\"line\">[Huawei-GigabitEthernet0/0/1]port trunk allow-pass vlan all</span><br><span class=\"line\">[Huawei-GigabitEthernet0/0/1]q</span><br><span class=\"line\">[Huawei]int Vlanif 10</span><br><span class=\"line\">[Huawei-Vlanif10]ip add 1.1.1.254 255.255.255.0  #1.1.1.254为PC1中填写的网关</span><br><span class=\"line\">[Huawei-Vlanif10]q</span><br><span class=\"line\">[Huawei]int Vlanif 20</span><br><span class=\"line\">[Huawei-Vlanif20]ip add 2.2.2.254 255.255.255.0</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"单臂路由\"><a href=\"#单臂路由\" class=\"headerlink\" title=\"单臂路由\"></a>单臂路由</h1><p>单臂路由就是路由器的一个接口通过配置子接口，实现原来互相隔离的Vlan之间的互联互通。<br><img src=\"/2023/03/24/%E7%BD%91%E7%BB%9C/1-%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80/%E5%8D%95%E8%87%82%E8%B7%AF%E7%94%B1.png\"><br>1.将交换机LSW1的0/0/2、0/0/3端口划分到vlan  </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">[Huawei]int g0/0/2</span><br><span class=\"line\">[Huawei-GigabitEthernet0/0/2]port link-type access</span><br><span class=\"line\">[Huawei-GigabitEthernet0/0/2]port default vlan 10</span><br><span class=\"line\">[Huawei-GigabitEthernet0/0/2]q</span><br><span class=\"line\">[Huawei]int g0/0/3</span><br><span class=\"line\">[Huawei-GigabitEthernet0/0/3]port link-type access</span><br><span class=\"line\">[Huawei-GigabitEthernet0/0/3]port default vlan 20</span><br></pre></td></tr></table></figure>\n<p>2.将换机LSW1的0/0/1接口设置为trunk，并允许多有vlan通过  </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">[Huawei]int g0/0/1</span><br><span class=\"line\">[Huawei-GigabitEthernet0/0/1]port link-type trunk</span><br><span class=\"line\">[Huawei-GigabitEthernet0/0/1]port trunk allow-pass vlan all</span><br></pre></td></tr></table></figure>\n<p>3.路由器AR1设置，将路由器的0/0/0端口配置两个子接口，分别对应两个vlan  </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">[Huawei]int g0/0/0.10   #子接口0/0/0.10</span><br><span class=\"line\">[Huawei-GigabitEthernet0/0/0.10]dot1q termination vid 10  #子接口与vlan关联</span><br><span class=\"line\">[Huawei-GigabitEthernet0/0/0.10]arp broadcast enable      #允许arp广播</span><br><span class=\"line\">[Huawei-GigabitEthernet0/0/0.10]ip add 1.1.1.254 255.255.255.0   #配置地址作为pc1的网关</span><br><span class=\"line\">[Huawei-GigabitEthernet0/0/0.10]display this    #查看当前视图的配置</span><br><span class=\"line\">[V200R003C00]</span><br><span class=\"line\">#</span><br><span class=\"line\">interface GigabitEthernet0/0/0.10</span><br><span class=\"line\"> dot1q termination vid 10</span><br><span class=\"line\"> ip address 1.1.1.254 255.255.255.0 </span><br><span class=\"line\"> arp broadcast enable</span><br><span class=\"line\">#</span><br><span class=\"line\">return</span><br><span class=\"line\">[Huawei-GigabitEthernet0/0/0.10]q</span><br><span class=\"line\">[Huawei]int g0/0/0.20  #子接口0/0/0.20</span><br><span class=\"line\">[Huawei-GigabitEthernet0/0/0.20]dot1q termination vid 20</span><br><span class=\"line\">[Huawei-GigabitEthernet0/0/0.20]ip add 2.2.2.254 255.255.255.0</span><br><span class=\"line\">[Huawei-GigabitEthernet0/0/0.20]arp broadcast enable</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"ACL\"><a href=\"#ACL\" class=\"headerlink\" title=\"ACL\"></a>ACL</h1><p>访问控制列表，提供安全访问，防止重要服务器资源被随意访问<br><img src=\"/2023/03/24/%E7%BD%91%E7%BB%9C/1-%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80/ACL.png\"><br>在三层路由基础上进行操作，实现PC1禁止访问PC3  </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">[Huawei]acl name test advance  #创建高级的ACL 名为test</span><br><span class=\"line\">[Huawei-acl-adv-test]rule deny ip source 1.1.1.0 0.255.255.255 destination 3.3.3.0 0.255.255.255    #阻止源1.1.1.0 0.255.255.255到3.3.3.0 0.255.255.255的访问 </span><br><span class=\"line\">[Huawei-acl-adv-test]rule permit ip source any destination any   #允许其他的访问</span><br><span class=\"line\">[Huawei-acl-adv-test]q</span><br><span class=\"line\">[Huawei]int g0/0/1   #0/0/1是访问的毕竟之路，将接口配置上acl规则</span><br><span class=\"line\">[Huawei-GigabitEthernet0/0/1]traffic-filter inbound acl name test </span><br></pre></td></tr></table></figure>\n\n<h1 id=\"NAT\"><a href=\"#NAT\" class=\"headerlink\" title=\"NAT\"></a>NAT</h1>","categories":["网络"],"tags":["网络基础"]},{"title":"eNSP相关问题","url":"/2023/03/24/%E7%BD%91%E7%BB%9C/eNSP%E7%9B%B8%E5%85%B3%E9%97%AE%E9%A2%98/","content":"<center> eNSP相关问题 </center>\n<span id=\"more\"></span>  \n\n<h1 id=\"在进行交换机实验时，命令行中一直有提示\"><a href=\"#在进行交换机实验时，命令行中一直有提示\" class=\"headerlink\" title=\"在进行交换机实验时，命令行中一直有提示\"></a>在进行交换机实验时，命令行中一直有提示</h1><p><img src=\"/2023/03/24/%E7%BD%91%E7%BB%9C/eNSP%E7%9B%B8%E5%85%B3%E9%97%AE%E9%A2%98/%E6%8F%90%E7%A4%BA.png\"><br>该提示为交换配置发生变化的正常提示，使用<code>un info en</code> 关闭当前配置信息告警即可  </p>\n","categories":["eNSP"],"tags":["eNSP"]}]