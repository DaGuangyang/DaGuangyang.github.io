<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>DaGuang</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2022-10-23T13:56:05.799Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>DaGuang</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Linux修改句柄数</title>
    <link href="http://example.com/2022/10/23/Linux/Linux%E4%BF%AE%E6%94%B9%E5%8F%A5%E6%9F%84%E6%95%B0/"/>
    <id>http://example.com/2022/10/23/Linux/Linux%E4%BF%AE%E6%94%B9%E5%8F%A5%E6%9F%84%E6%95%B0/</id>
    <published>2022-10-23T09:31:20.000Z</published>
    <updated>2022-10-23T13:56:05.799Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://i.loli.net/2021/08/02/cX51yi4KrLYRfJU.jpg" alt="linux.jpg">  </p><span id="more"></span><h1 id="Linux句柄"><a href="#Linux句柄" class="headerlink" title="Linux句柄"></a>Linux句柄</h1><p>Linux中的句柄分为用户级、系统级。<br>用户级句柄：规定单个进程能够打开的最大文件句柄数量（默认大小1024）<br>系统级句柄：系统中最大文件句柄数量  </p><h2 id="用户级句柄数量修改"><a href="#用户级句柄数量修改" class="headerlink" title="用户级句柄数量修改"></a>用户级句柄数量修改</h2><h3 id="临时修改"><a href="#临时修改" class="headerlink" title="临时修改"></a>临时修改</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ulimit -a #查看 open files 数值，或者直接使用ulimit -n</span><br><span class="line">ulimit -SHn 10000 </span><br></pre></td></tr></table></figure><p>ulimit分为软限制与硬限制。-H是硬限制，实际限制；-S是软限制，告警限制。 </p><h3 id="永久修改"><a href="#永久修改" class="headerlink" title="永久修改"></a>永久修改</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> nofile 个进程最多能打开的的文件数</span></span><br><span class="line">echo &quot;* soft nofile 2048&quot;  &gt;&gt; /etc/security/limits.conf   </span><br><span class="line">echo &quot;* hard nofile 2048&quot;  &gt;&gt; /etc/security/limits.conf</span><br><span class="line"><span class="meta">#</span><span class="bash"> nproc 一个用户最多能创建的进程数</span></span><br><span class="line">echo &quot;* soft nproc 2048&quot;  &gt;&gt; /etc/security/limits.conf</span><br><span class="line">echo &quot;* hard nproc 2048&quot;  &gt;&gt; /etc/security/limits.conf</span><br></pre></td></tr></table></figure><p>重新ssh连接查看或者重启查看。  </p><h2 id="系统级句柄数修改"><a href="#系统级句柄数修改" class="headerlink" title="系统级句柄数修改"></a>系统级句柄数修改</h2><h3 id="临时修改-1"><a href="#临时修改-1" class="headerlink" title="临时修改"></a>临时修改</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo  100000 &gt; /proc/sys/fs/file-max</span><br></pre></td></tr></table></figure><h3 id="永久修改-1"><a href="#永久修改-1" class="headerlink" title="永久修改"></a>永久修改</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">echo   fs.file-max = 100000  &gt;&gt; /etc/sysctl.conf</span><br><span class="line">sysctl -p       #从文件中读取数据，默认从/etc/sysctl.conf中读取</span><br><span class="line">sysctl -a|grep fs.file-max      #查看是否修改</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://i.loli.net/2021/08/02/cX51yi4KrLYRfJU.jpg&quot; alt=&quot;linux.jpg&quot;&gt;  &lt;/p&gt;</summary>
    
    
    
    <category term="Linux" scheme="http://example.com/categories/Linux/"/>
    
    
    <category term="Linux" scheme="http://example.com/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>3-Prometheus数据</title>
    <link href="http://example.com/2022/10/22/prometheus/3-Prometheus%E6%95%B0%E6%8D%AE/"/>
    <id>http://example.com/2022/10/22/prometheus/3-Prometheus%E6%95%B0%E6%8D%AE/</id>
    <published>2022-10-22T14:55:52.000Z</published>
    <updated>2022-10-22T18:27:15.776Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://s2.loli.net/2022/10/21/Dv2fVhPgOBrK7bF.jpg" alt="prometheus">  </p><span id="more"></span><h1 id="Prometheus-数据"><a href="#Prometheus-数据" class="headerlink" title="Prometheus 数据"></a>Prometheus 数据</h1><h2 id="时间序列数据"><a href="#时间序列数据" class="headerlink" title="时间序列数据"></a>时间序列数据</h2><p>时间序列数据通常由应用程序本身通过客户端库或称为exporter来作为HTTP端点暴露，由prometheus进行收集，包含指标、时间戳、测量值。<br><strong>指标</strong>：由指标名称和指标的标签组成，<code>&lt;metric name&gt;&#123;&lt;label name&gt;=&lt;label value&gt;, ...&#125;</code>  </p><ul><li>metric name：指标名称，由<code>[a-zA-Z_:][a-zA-Z0-9_:]*</code> 组成  </li><li><code>&lt;label name&gt;=&lt;label value&gt;</code>:标签，键值对， <code>[a-zA-Z_][a-zA-Z0-9_]*</code> ， __ 开头的标签仅内部使用  </li></ul><p><strong>时间戳</strong>：精确到毫秒的时间戳<br><strong>测量值</strong>：一个float64的值  </p><h2 id="指标类型"><a href="#指标类型" class="headerlink" title="指标类型"></a>指标类型</h2><h3 id="Counter"><a href="#Counter" class="headerlink" title="Counter"></a>Counter</h3><p>Counter是计数类型。用于累计值，比如请求次数、完成次数。一直增加，不会减少。重启进程后会被重置。可以方便了解事件变化速率。  </p><h3 id="Gauge"><a href="#Gauge" class="headerlink" title="Gauge"></a>Gauge</h3><p>Gauge是测量器类型，是一个实际测量的值，可变大，可变小。比如剩余空间大小、剩余内存大小  </p><h3 id="Histogram"><a href="#Histogram" class="headerlink" title="Histogram"></a>Histogram</h3><ul><li>将一段时间范围内的数据进行采样（通常是请求持续时间或响应大小等），并将其计入可配置的存储桶（bucket）中. 后续可通过指定区间筛选样本，也可以统计样本总数，最后一般将数据展示为直方图。  </li><li>对每个采样点值累计和(sum)  </li><li>对采样点的次数累计和(count)  </li><li>Histogram不会保存数据采样的值，存储的是区间的样本数统计值  </li></ul><p>一个Histogram可以理解为是由三个指标组成。<br><code>&lt;metric name&gt;_bucket&#123;le=&quot;上边界&quot;&#125;</code>:测量值为bucket中小于等于上边界的所有采样点数量<br><code>&lt;metric name&gt;_sum</code>：bucket中每个采样点值累计和<br><code>&lt;metric name&gt;_count</code>：bucket中采样点数量  </p><h4 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h4><p><img src="/2022/10/22/prometheus/3-Prometheus%E6%95%B0%E6%8D%AE/%E7%A4%BA%E4%BE%8B%E6%95%B0%E6%8D%AE.png"><br>在一个时间段中有以上的数据，对应的在指标中展示为  </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> _bucket指标</span></span><br><span class="line">&lt;metric name&gt;_bucket&#123;le=&quot;1&quot;&#125;    2   #采样点数值小于等于1的采样点的数量，即上图中采样点数值为0.1、0.2，一共两个采样点</span><br><span class="line">&lt;metric name&gt;_bucket&#123;le=&quot;5&quot;&#125;    5</span><br><span class="line">&lt;metric name&gt;_bucket&#123;le=&quot;10&quot;&#125;   10</span><br><span class="line">&lt;metric name&gt;_bucket&#123;le=&quot;+Inf&quot;&#125; 10  # +Inf 为无穷</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">_sum指标</span></span><br><span class="line">&lt;metric name&gt;_sum   51.1  #所有采样点值的和，即 0.1+0.2+1.3+3.2+4.6+6.5+7.6+8.8+8.8+10</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> _count指标</span></span><br><span class="line">&lt;metric name&gt;_count 10   #采样点数量，与&lt;metric name&gt;_bucket&#123;le=&quot;+Inf&quot;&#125;数值一致</span><br></pre></td></tr></table></figure><h3 id="summary"><a href="#summary" class="headerlink" title="summary"></a>summary</h3><ul><li>在客户端对于一段时间内（默认是10分钟）的每个采样点进行统计，并形成分位图。  </li><li>统计班上所有同学的总成绩(sum)  </li><li>统计班上同学的考试总人数(count)  </li></ul><p>一个summary指标可以理解为有三个指标组成。<br><code>&lt;metric name&gt;_bucket&#123;quantile=&quot;分位数&quot;&#125;</code>：百分位数的数值，例如quantile=0.5，即采样点数值的中位数，<br><code>&lt;metric name&gt;_sum</code>：每个采样点值累计和<br><code>&lt;metric name&gt;_count</code>：采样点数量  </p><h4 id="实例-1"><a href="#实例-1" class="headerlink" title="实例"></a>实例</h4><p>有10个采样点数值为{1，2，3，4，5，6，7，8，9，10}  </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">分位数计算方法 （n+1）y，n为数据个数，y为分位数，值为第几个数，例如要求某个分位数从公式得出值为2.25，则该分位数为第二个数+（第三个数-第二个数）0.25</span></span><br><span class="line">&lt;metric name&gt;_bucket&#123;quantile=&quot;0&quot;&#125;      1</span><br><span class="line">&lt;metric name&gt;_bucket&#123;quantile=&quot;0.25&quot;&#125;   2.75    #第一四分位数，（10+1）0.25=2.75，2+（3-2）0.75=2.75</span><br><span class="line">&lt;metric name&gt;_bucket&#123;quantile=&quot;0.5&quot;&#125;    5.5     #第二四分位数，即中位数</span><br><span class="line">&lt;metric name&gt;_bucket&#123;quantile=&quot;0.75&quot;&#125;   8.25    #第三四分位数</span><br><span class="line">&lt;metric name&gt;_bucket&#123;quantile=&quot;1&quot;&#125;      10</span><br><span class="line"></span><br><span class="line">&lt;metric name&gt;_sum   55</span><br><span class="line">&lt;metric name&gt;_count 10</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://s2.loli.net/2022/10/21/Dv2fVhPgOBrK7bF.jpg&quot; alt=&quot;prometheus&quot;&gt;  &lt;/p&gt;</summary>
    
    
    
    <category term="Prometheus" scheme="http://example.com/categories/Prometheus/"/>
    
    
    <category term="Prometheus数据" scheme="http://example.com/tags/Prometheus%E6%95%B0%E6%8D%AE/"/>
    
  </entry>
  
  <entry>
    <title>2-Prometheus监控主机与容器</title>
    <link href="http://example.com/2022/10/22/prometheus/2-%E7%9B%91%E6%8E%A7%E4%B8%BB%E6%9C%BA%E4%B8%8E%E5%AE%B9%E5%99%A8/"/>
    <id>http://example.com/2022/10/22/prometheus/2-%E7%9B%91%E6%8E%A7%E4%B8%BB%E6%9C%BA%E4%B8%8E%E5%AE%B9%E5%99%A8/</id>
    <published>2022-10-21T16:41:34.000Z</published>
    <updated>2022-10-21T17:50:57.928Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://s2.loli.net/2022/10/21/Dv2fVhPgOBrK7bF.jpg" alt="prometheus">  </p><span id="more"></span><h1 id="Prometheus监控"><a href="#Prometheus监控" class="headerlink" title="Prometheus监控"></a>Prometheus监控</h1><p>上一章部署了 prometheus server，想要对主机或容器进行监控需要在被监控端安装对应的Exporter。  </p><h2 id="监控Linux主机（9100端口）"><a href="#监控Linux主机（9100端口）" class="headerlink" title="监控Linux主机（9100端口）"></a>监控Linux主机（9100端口）</h2><p>从Prometheus官网下载node_exporter组件，在远程linux主机上安装node_exporter组件,安装方式与Prometheus安装方式类似。  </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">~]#</span><span class="bash"> tar zxvf node_exporter-1.4.0.linux-amd64.tar.gz -C /usr/<span class="built_in">local</span>/</span></span><br><span class="line"><span class="meta">~]#</span><span class="bash"> ln -s /usr/<span class="built_in">local</span>/node_exporter-1.4.0.linux-amd64/ node_exporter</span></span><br><span class="line"><span class="meta">~]#</span><span class="bash"> ln -s /usr/<span class="built_in">local</span>/node_exporter/node_exporter /usr/<span class="built_in">local</span>/bin/node_exporter</span></span><br><span class="line"><span class="meta">~]#</span><span class="bash"> nohup /usr/<span class="built_in">local</span>/node_exporter/node_exporter &gt; /usr/<span class="built_in">local</span>/node_exporter/node_exporter.log 2&gt;&amp;1 &amp;</span></span><br></pre></td></tr></table></figure><p>查看9100端口是否被监听，以及访问 <code>node_ip:9100/metrics</code>查看收集的监控信息。  </p><h3 id="Prometheus-server配置"><a href="#Prometheus-server配置" class="headerlink" title="Prometheus server配置"></a>Prometheus server配置</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">scrape_configs:</span></span><br><span class="line">  <span class="comment">#scrape_configs中添加以下配置</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">job_name:</span> <span class="string">&quot;node&quot;</span></span><br><span class="line">    <span class="attr">static_configs:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">targets:</span> [<span class="string">&quot;192.168.27.7:9100&quot;</span>] <span class="comment">#添加多个[&quot;192.168.27.7:9100&quot;,&quot;192.168.27.8:9100&quot;]</span></span><br></pre></td></tr></table></figure><p>配置修改完成后需要将Prometheus server重启，重启后在web管理界面-Status-Targets中可以看到node已经被添加。<br><img src="/2022/10/22/prometheus/2-%E7%9B%91%E6%8E%A7%E4%B8%BB%E6%9C%BA%E4%B8%8E%E5%AE%B9%E5%99%A8/%E6%B7%BB%E5%8A%A0node%E7%9B%91%E6%8E%A7.png" alt="node监控">  </p><h2 id="监控Docker容器（8080端口）"><a href="#监控Docker容器（8080端口）" class="headerlink" title="监控Docker容器（8080端口）"></a>监控Docker容器（8080端口）</h2><p>推荐使用Google的cAdvisor工具，cAdvisor作为Docker容器运行，单个cAdvisor容器返回针对Docker守护进程和所有正在运行的容器的指标</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --volume=/:/rootfs:ro --volume=/var/run:/var/run:rw --volume=/sys:/sys:ro --volume=/var/lib/docker/:/var/lib/docker:ro --publish=8080:8080 --detach=true --name=cadvisor google/cadvisor:latest</span><br></pre></td></tr></table></figure><p>容器启动后，可以查看cAdvisor web界面<code>node_ip:8080</code>，以及查看<code>node_ip:8080/metrics</code>收集的监控信息。  </p><h3 id="Prometheus-server配置-1"><a href="#Prometheus-server配置-1" class="headerlink" title="Prometheus server配置"></a>Prometheus server配置</h3><p>与添加node方法相同  </p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">scrape_configs:</span></span><br><span class="line">  <span class="comment">#scrape_configs中添加以下配置</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">job_name:</span> <span class="string">&quot;docker&quot;</span></span><br><span class="line">    <span class="attr">static_configs:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">targets:</span> [<span class="string">&quot;192.168.27.7:8080&quot;</span>] <span class="comment">#添加多个[&quot;192.168.27.7:8080&quot;,&quot;192.168.27.8:8080&quot;]</span></span><br></pre></td></tr></table></figure><p>配置修改完成后需要将Prometheus server重启，重启后在web管理界面-Status-Targets中可以看到docker已经被添加。<br><img src="/2022/10/22/prometheus/2-%E7%9B%91%E6%8E%A7%E4%B8%BB%E6%9C%BA%E4%B8%8E%E5%AE%B9%E5%99%A8/%E6%B7%BB%E5%8A%A0docker%E7%9B%91%E6%8E%A7.png" alt="docker监控">  </p><h2 id="监控MYSQL（9104端口）"><a href="#监控MYSQL（9104端口）" class="headerlink" title="监控MYSQL（9104端口）"></a>监控MYSQL（9104端口）</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">~]#</span><span class="bash"> tar zxvf mysqld_exporter-0.14.0.linux-amd64.tar.gz -C /usr/<span class="built_in">local</span>/</span></span><br><span class="line"><span class="meta">~]#</span><span class="bash"> ln -s /usr/<span class="built_in">local</span>/mysqld_exporter-0.14.0.linux-amd64/ mysqld_exporter</span></span><br><span class="line"><span class="meta">~]#</span><span class="bash"> ln -s /usr/<span class="built_in">local</span>/mysqld_exporter/mysqld_exporter /usr/<span class="built_in">local</span>/bin/mysqld_exporter</span></span><br><span class="line"><span class="meta">~]#</span><span class="bash"> nohup /usr/<span class="built_in">local</span>/mysqld_exporter/mysqld_exporter &gt; /usr/<span class="built_in">local</span>/mysqld_exporter/mysqld_exporter.log 2&gt;&amp;1 &amp;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://s2.loli.net/2022/10/21/Dv2fVhPgOBrK7bF.jpg&quot; alt=&quot;prometheus&quot;&gt;  &lt;/p&gt;</summary>
    
    
    
    <category term="Prometheus" scheme="http://example.com/categories/Prometheus/"/>
    
    
    <category term="Prometheus监控主机与容器" scheme="http://example.com/tags/Prometheus%E7%9B%91%E6%8E%A7%E4%B8%BB%E6%9C%BA%E4%B8%8E%E5%AE%B9%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>1-Prometheus概述及安装</title>
    <link href="http://example.com/2022/10/21/prometheus/1-Prometheus%E6%A6%82%E8%BF%B0%E5%8F%8A%E5%AE%89%E8%A3%85/"/>
    <id>http://example.com/2022/10/21/prometheus/1-Prometheus%E6%A6%82%E8%BF%B0%E5%8F%8A%E5%AE%89%E8%A3%85/</id>
    <published>2022-10-21T07:51:24.000Z</published>
    <updated>2022-10-22T15:11:57.972Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://s2.loli.net/2022/10/21/Dv2fVhPgOBrK7bF.jpg" alt="prometheus">  </p><span id="more"></span><h1 id="Prometheus-概述"><a href="#Prometheus-概述" class="headerlink" title="Prometheus 概述"></a>Prometheus 概述</h1><p>Prometheus是一个优秀的监控工具，非常适合监控容器。<br><img src="/2022/10/21/prometheus/1-Prometheus%E6%A6%82%E8%BF%B0%E5%8F%8A%E5%AE%89%E8%A3%85/Prometheus.png" alt="prometheus架构图"><br><strong>Prometheus server</strong>：用于收集和存储时间序列数据。<br><strong>Exporter</strong>：负责收集目标（host、container等）的性能数据，并通过HTTP接口供Prometheus server获取。prometheus sercer通过pull的方式拉取<br><strong>Pushgateway</strong>：各个目标主机可上报数据到pushgateway，然后prometheus server统一从pushgateway拉取数据。Push gateway通过push的方式推送给prometheus sercer<br><strong>Alertmanager</strong>: 从 Prometheus server 端接收到 alerts 后，会进行去重，分组，并路由到相应的接收方，发出报警。<br><strong>Grafana</strong>：监控仪表盘，可视化监控数据。<br><strong>service Discovery</strong>：服务发现。<br><strong>Retrieval</strong>：负责在活跃的target主机上抓取监控指标数据。<br><strong>Storage</strong>：存储主要是把采集到的数据存储到磁盘中。<br><strong>PromQL</strong>：是Prometheus提供的查询语言模块。。  </p><h2 id="Prometheus工作方式"><a href="#Prometheus工作方式" class="headerlink" title="Prometheus工作方式"></a>Prometheus工作方式</h2><ol><li>Prometheus定期从目标主机上获取数据，目标主机的监控数据可通过配置静态job或者服务发现的方式被prometheus采集到，这种方式默认的pull方式拉取指标；也可通过pushgateway把采集的数据上报到prometheus中；还可通过一些组件自带的exporter采集相应组件的数据。  </li><li>Prometheus把采集到的监控指标数据保存到本地磁盘或者数据库。  </li><li>Prometheus采集的监控指标数据按时间序列存储，通过配置报警规则，把触发的报警发送到alertmanager。  </li><li>Prometheus 自带的web ui界面提供PromQL查询语言，可查询监控数据。  </li><li>Grafana可接入prometheus数据源，把监控数据以图形化形式展示出。  </li></ol><h1 id="Prometheus安装部署"><a href="#Prometheus安装部署" class="headerlink" title="Prometheus安装部署"></a>Prometheus安装部署</h1><p>Prometheus有两种部署方式，二进制文件部署与容器化部署。  </p><h2 id="容器化部署"><a href="#容器化部署" class="headerlink" title="容器化部署"></a>容器化部署</h2><p><code>docker run --name prometheus -d -p 127.0.0.1:9090:9090 prom/prometheus</code></p><h2 id="二进制文件部署"><a href="#二进制文件部署" class="headerlink" title="二进制文件部署"></a>二进制文件部署</h2><p>从<a href="https://prometheus.io/download/">Prometheus官网</a>下载对应安装包</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">~]#</span><span class="bash"> tar xzf prometheus-2.39.1.linux-amd64.tar.gz -C /usr/<span class="built_in">local</span>/</span></span><br><span class="line"><span class="meta">~]#</span><span class="bash"> ln -s /usr/<span class="built_in">local</span>/prometheus-2.39.1.linux-amd64/ /usr/<span class="built_in">local</span>/prometheus</span></span><br><span class="line"><span class="meta">~]#</span><span class="bash"> ln -s /usr/<span class="built_in">local</span>/prometheus/prometheus /usr/<span class="built_in">local</span>/bin/prometheus</span></span><br><span class="line"><span class="meta">~]#</span><span class="bash"> ln -s /usr/<span class="built_in">local</span>/prometheus/promtool /usr/<span class="built_in">local</span>/bin/promtool</span></span><br><span class="line"><span class="meta">~]#</span><span class="bash"> nohup /usr/<span class="built_in">local</span>/prometheus/prometheus --config.file=/usr/<span class="built_in">local</span>/prometheus/prometheus.yml &gt; /usr/<span class="built_in">local</span>/prometheus/prometheus.log 2&gt;&amp;1 &amp;</span></span><br></pre></td></tr></table></figure><p>通过localhost:9090即可进行访问。再次界面可以查询Prometheus收集上来的数据。  </p><h2 id="主机数据展示"><a href="#主机数据展示" class="headerlink" title="主机数据展示"></a>主机数据展示</h2><p><code>localhost:9090/metrics</code>中可以查看到Prometheus server的监控指标数据。  </p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://s2.loli.net/2022/10/21/Dv2fVhPgOBrK7bF.jpg&quot; alt=&quot;prometheus&quot;&gt;  &lt;/p&gt;</summary>
    
    
    
    <category term="Prometheus" scheme="http://example.com/categories/Prometheus/"/>
    
    
    <category term="Prometheus概述及安装" scheme="http://example.com/tags/Prometheus%E6%A6%82%E8%BF%B0%E5%8F%8A%E5%AE%89%E8%A3%85/"/>
    
  </entry>
  
  <entry>
    <title>9-docker监控</title>
    <link href="http://example.com/2022/10/21/docker/9-docker%E7%9B%91%E6%8E%A7/"/>
    <id>http://example.com/2022/10/21/docker/9-docker%E7%9B%91%E6%8E%A7/</id>
    <published>2022-10-21T06:23:58.000Z</published>
    <updated>2022-10-21T06:38:51.431Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2022/10/21/docker/9-docker%E7%9B%91%E6%8E%A7/%E5%9B%BE%E7%89%87docker.jpg" alt="docker">  </p><span id="more"></span><h1 id="docker自带命令"><a href="#docker自带命令" class="headerlink" title="docker自带命令"></a>docker自带命令</h1><h2 id="docker-ps-查看容器"><a href="#docker-ps-查看容器" class="headerlink" title="docker ps 查看容器"></a>docker ps 查看容器</h2><p><strong>-a</strong>:显示所有的容器，包括未运行的。<br><strong>-f</strong>:根据条件过滤显示的内容。<br><strong>–format</strong>:指定返回值的模板文件。<br><strong>-l</strong>:显示最近创建的容器。<br><strong>-n</strong>:列出最近创建的n个容器。<br><strong>–no-trunc</strong> :不截断输出。<br><strong>-q</strong>:静默模式，只显示容器编号。<br><strong>-s</strong>:显示总的文件大小。  </p><h2 id="docker-top-查看容器中运行的进程信息，支持ps命令参数"><a href="#docker-top-查看容器中运行的进程信息，支持ps命令参数" class="headerlink" title="docker top 查看容器中运行的进程信息，支持ps命令参数"></a>docker top 查看容器中运行的进程信息，支持ps命令参数</h2><h2 id="docker-stats-显示容器资源使用情况"><a href="#docker-stats-显示容器资源使用情况" class="headerlink" title="docker stats 显示容器资源使用情况"></a>docker stats 显示容器资源使用情况</h2><p><strong>-a</strong>：显示所有容器，包括未运行的<br><strong>–no-trunc</strong> :不截断输出  </p><h2 id="Prometheus"><a href="#Prometheus" class="headerlink" title="Prometheus"></a>Prometheus</h2><p>单独章节学习Prometheus，具体查看 &lt;!–swig￼0–&gt;  </p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;/2022/10/21/docker/9-docker%E7%9B%91%E6%8E%A7/%E5%9B%BE%E7%89%87docker.jpg&quot; alt=&quot;docker&quot;&gt;  &lt;/p&gt;</summary>
    
    
    
    <category term="docker" scheme="http://example.com/categories/docker/"/>
    
    
    <category term="docker监控" scheme="http://example.com/tags/docker%E7%9B%91%E6%8E%A7/"/>
    
  </entry>
  
  <entry>
    <title>8-docker网络</title>
    <link href="http://example.com/2022/10/16/docker/8-docker%E7%BD%91%E7%BB%9C/"/>
    <id>http://example.com/2022/10/16/docker/8-docker%E7%BD%91%E7%BB%9C/</id>
    <published>2022-10-16T15:19:30.000Z</published>
    <updated>2022-10-19T19:02:39.316Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2022/10/16/docker/8-docker%E7%BD%91%E7%BB%9C/%E5%9B%BE%E7%89%87docker.jpg" alt="docker">  </p><span id="more"></span><h1 id="docker网络"><a href="#docker网络" class="headerlink" title="docker网络"></a>docker网络</h1><p>docker安装后默认的三种网络为none、host、bridge。<br><strong>none</strong>：没有任何网路，没有任何网卡。安全性要求高并且不需要联网的应用可以使用 none 网络。<br><strong>host</strong>：连接到host网络的容器共享docker宿主机的网络，容器的网络配置、hostname与docker宿主机完全一致。<br><strong>bridge</strong>：桥接网络，使用最多，容器默认使用的网络。  </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">~]#</span><span class="bash"> docker network ls</span></span><br><span class="line">NETWORK ID     NAME      DRIVER    SCOPE</span><br><span class="line">a245b3871ac7   bridge    bridge    local</span><br><span class="line">4b615d9327ee   host      host      local</span><br><span class="line">05e237730870   none      null      local</span><br></pre></td></tr></table></figure><p>在启动容器的时候可以使用<code>--network=none</code>来指定使用的网络  </p><h2 id="bridge网络"><a href="#bridge网络" class="headerlink" title="bridge网络"></a>bridge网络</h2><p>安装docker时会创建docker0的网桥，容器默认使用的都是这个  </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">]#</span><span class="bash"> brctl show    <span class="comment"># 需要安装bridge-utils</span></span> </span><br><span class="line">bridge namebridge idSTP enabledinterfaces</span><br><span class="line">docker08000.0242b1443650no                  #此时是没有容器使用docker0</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">~]#</span><span class="bash"> docker run -it -d busybox</span></span><br><span class="line">ef8acee7abadee73a33c8ded047e7f57af8aaaf85a8bd6035fb271ee8ae99fb2   </span><br><span class="line"><span class="meta">~]#</span><span class="bash"> brctl show</span></span><br><span class="line">bridge namebridge idSTP enabledinterfaces</span><br><span class="line">docker08000.0242b1443650noveth6e01edd </span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">~]#</span><span class="bash"> docker run -it -d --name=busybox2 busybox</span></span><br><span class="line">d96d5db03d981f4bcdf0f5374a5ca1a1dd741f40dacce82eab8e1a1bc0b68f0e</span><br><span class="line"><span class="meta">~]#</span><span class="bash"> brctl show</span></span><br><span class="line">bridge namebridge idSTP enabledinterfaces</span><br><span class="line">docker08000.0242b1443650noveth2783997</span><br><span class="line">            veth6e01edd</span><br></pre></td></tr></table></figure><p>veth2783997、veth6e01edd为两个网络接口，对应着两个容器的网卡  </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">~]#</span><span class="bash"> docker network inspect bridge</span>  </span><br><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;Name&quot;: &quot;bridge&quot;,</span><br><span class="line">        &quot;Id&quot;: &quot;e56c41006af568144839868cca47fad31c1c0f7251848bffc71621e12bd7f2ee&quot;,</span><br><span class="line">        &quot;Created&quot;: &quot;2022-10-20T01:03:46.451081072+08:00&quot;,</span><br><span class="line">        &quot;Scope&quot;: &quot;local&quot;,</span><br><span class="line">        &quot;Driver&quot;: &quot;bridge&quot;,</span><br><span class="line">        &quot;EnableIPv6&quot;: false,</span><br><span class="line">        &quot;IPAM&quot;: &#123;</span><br><span class="line">            &quot;Driver&quot;: &quot;default&quot;,</span><br><span class="line">            &quot;Options&quot;: null,</span><br><span class="line">            &quot;Config&quot;: [</span><br><span class="line">                &#123;</span><br><span class="line">                    &quot;Subnet&quot;: &quot;172.17.0.0/16&quot;,    #bridge的网络配置</span><br><span class="line">                    &quot;Gateway&quot;: &quot;172.17.0.1&quot;       #bridge的网络配置，该网关就是docker0 </span><br><span class="line">                &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;Internal&quot;: false,</span><br><span class="line">        &quot;Attachable&quot;: false,</span><br><span class="line">        &quot;Ingress&quot;: false,</span><br><span class="line">        &quot;ConfigFrom&quot;: &#123;</span><br><span class="line">            &quot;Network&quot;: &quot;&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;ConfigOnly&quot;: false,</span><br><span class="line">        &quot;Containers&quot;: &#123; #使用bridge网络的容器网络配置</span><br><span class="line">            &quot;d96d5db03d981f4bcdf0f5374a5ca1a1dd741f40dacce82eab8e1a1bc0b68f0e&quot;: &#123;</span><br><span class="line">                &quot;Name&quot;: &quot;busybox2&quot;,</span><br><span class="line">                &quot;EndpointID&quot;: &quot;395664be54909dc79a763e74ca6a4aec83d342113ddbe4c287e2a2d70fcdb67d&quot;,</span><br><span class="line">                &quot;MacAddress&quot;: &quot;02:42:ac:11:00:03&quot;,</span><br><span class="line">                &quot;IPv4Address&quot;: &quot;172.17.0.3/16&quot;,</span><br><span class="line">                &quot;IPv6Address&quot;: &quot;&quot;</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;ef8acee7abadee73a33c8ded047e7f57af8aaaf85a8bd6035fb271ee8ae99fb2&quot;: &#123;</span><br><span class="line">                &quot;Name&quot;: &quot;lucid_spence&quot;,</span><br><span class="line">                &quot;EndpointID&quot;: &quot;7b780bdfdf91d7dad89978c6f0a007ec5be2d3bb283b0ce9db24078e24adfd47&quot;,</span><br><span class="line">                &quot;MacAddress&quot;: &quot;02:42:ac:11:00:02&quot;,</span><br><span class="line">                &quot;IPv4Address&quot;: &quot;172.17.0.2/16&quot;,</span><br><span class="line">                &quot;IPv6Address&quot;: &quot;&quot;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;Options&quot;: &#123;</span><br><span class="line">            &quot;com.docker.network.bridge.default_bridge&quot;: &quot;true&quot;,</span><br><span class="line">            &quot;com.docker.network.bridge.enable_icc&quot;: &quot;true&quot;,</span><br><span class="line">            &quot;com.docker.network.bridge.enable_ip_masquerade&quot;: &quot;true&quot;,</span><br><span class="line">            &quot;com.docker.network.bridge.host_binding_ipv4&quot;: &quot;0.0.0.0&quot;,</span><br><span class="line">            &quot;com.docker.network.bridge.name&quot;: &quot;docker0&quot;,</span><br><span class="line">            &quot;com.docker.network.driver.mtu&quot;: &quot;1500&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;Labels&quot;: &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h2 id="自定义网络"><a href="#自定义网络" class="headerlink" title="自定义网络"></a>自定义网络</h2><p>docker有三种网络驱动，bridge 、overlay 、macvlan。  </p><h3 id="自定义bridge网络"><a href="#自定义bridge网络" class="headerlink" title="自定义bridge网络"></a>自定义bridge网络</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">~]#</span><span class="bash"> docker network create --driver bridge test_bridge</span></span><br><span class="line">b4a9474e46432b19582d3c7e24506aa79486aa12d938fe2f3929ba716ef3fe3e</span><br><span class="line"><span class="meta">~]#</span><span class="bash"> docker network ls</span></span><br><span class="line">NETWORK ID     NAME          DRIVER    SCOPE</span><br><span class="line">e56c41006af5   bridge        bridge    local</span><br><span class="line">4b615d9327ee   host          host      local</span><br><span class="line">05e237730870   none          null      local</span><br><span class="line">b4a9474e4643   test_bridge   bridge    local</span><br><span class="line"><span class="meta">~]#</span><span class="bash"> brctl show</span></span><br><span class="line">bridge namebridge idSTP enabledinterfaces</span><br><span class="line">br-b4a9474e46438000.02426345e115    no</span><br><span class="line">docker08000.0242b1443650noveth2783997</span><br><span class="line">veth6e01edd</span><br></pre></td></tr></table></figure><p>创建一个新的bridge网络test_bridge，对应的会创建一个新的网桥，网桥的名后段就是test_bridge的短ID。<br>创建的新的test_bridge网络的网络配置docker自动分配的，在创建的时候可以指定IP网段。  </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">~]#</span><span class="bash"> docker network create --driver bridge  --subnet 172.19.0.0/16 --gateway 172.19.0.1 test_bridge_2</span></span><br><span class="line">e3eb0f55cb6356a97189a748a3a6a821a53cf9e1583d9a574cfada2557dcc370 </span><br><span class="line"><span class="meta">~]#</span><span class="bash"> docker network ls</span></span><br><span class="line">NETWORK ID     NAME            DRIVER    SCOPE</span><br><span class="line">e56c41006af5   bridge          bridge    local</span><br><span class="line">4b615d9327ee   host            host      local</span><br><span class="line">05e237730870   none            null      local</span><br><span class="line">b4a9474e4643   test_bridge     bridge    local</span><br><span class="line">e3eb0f55cb63   test_bridge_2   bridge    local</span><br></pre></td></tr></table></figure><p>在创建容器的时候可以指定容器的IP，但是使用的网络必须是在创建时也指定- -subnet的。也就是使用test_bridge_2网络才可以指定容器IP，test_bridge则不行  </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">~]#</span><span class="bash"> docker run -it -d --network=test_bridge --ip 172.19.0.2 busybox</span></span><br><span class="line">c320bd7389697c8aaf149d0853166cc882b988c763c25f1cc053a5a6c7d8cfd1</span><br><span class="line">docker: Error response from daemon: user specified IP address is supported only when connecting to networks with user configured subnets.</span><br><span class="line"><span class="meta">~]#</span><span class="bash"> docker run -it -d --network=test_bridge_2 --ip 172.19.0.2 busybox</span></span><br><span class="line">09314af7bfdb84bc012aca1804d056e344db7609835040addfbd2b17f1aef8f4</span><br></pre></td></tr></table></figure><h2 id="不同网络容器之间通信"><a href="#不同网络容器之间通信" class="headerlink" title="不同网络容器之间通信"></a>不同网络容器之间通信</h2><p>使用同一个bridge网络的容器之间是可以通信的，使用不同bridge网络的容器之间也可以实现通信。使用<code>docker network connect 网络名 容器</code>连接到指定网络，<code>docker network connect disconnect</code>断开指定的网络，具体的体现就是在对应的容器中多了一个对应网络的网卡。  </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">~]#</span><span class="bash"> docker run -it -d --network=test_bridge  --name=busybox1 busybox</span> </span><br><span class="line">17f0e3f6fd1e729b21572e5d0eef9d280e50e5327edfe9fece15764fb22743b8</span><br><span class="line"><span class="meta">~]#</span><span class="bash"> docker run -it -d --network=test_bridge  --name=busybox2 busybox</span> </span><br><span class="line">79c883702435d5b00e6ee8ef8e4103d6025929296e9341ef5c3f98503cedb3e0</span><br><span class="line"><span class="meta">~]#</span><span class="bash"> docker run -it -d --network=test_bridge_2  --name=busybox3 busybox</span> </span><br><span class="line">fdd8fb26bbf26af839bae7312dd134cd7d5d94e697322d6ec61657eff4da28e9</span><br><span class="line"><span class="meta">~]#</span><span class="bash"> docker <span class="built_in">exec</span> -it busybox1 sh</span>      </span><br><span class="line">/ # ping busybox2           #在同一个网络中可以使用容器名进行ping</span><br><span class="line">PING busybox2 (172.18.0.3): 56 data bytes</span><br><span class="line">64 bytes from 172.18.0.3: seq=0 ttl=64 time=0.224 ms</span><br><span class="line">64 bytes from 172.18.0.3: seq=1 ttl=64 time=0.085 ms</span><br><span class="line">64 bytes from 172.18.0.3: seq=2 ttl=64 time=0.098 ms</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">~]#</span><span class="bash"> docker network connect test_bridge busybox3   <span class="comment">#将busybox3添加一个test_bridge的网卡</span></span></span><br><span class="line"><span class="meta">~]#</span><span class="bash"> docker <span class="built_in">exec</span> -it busybox3 sh</span></span><br><span class="line">/ # ip a </span><br><span class="line">1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue qlen 1000</span><br><span class="line">    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00</span><br><span class="line">    inet 127.0.0.1/8 scope host lo</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">20: eth0@if21: &lt;BROADCAST,MULTICAST,UP,LOWER_UP,M-DOWN&gt; mtu 1500 qdisc noqueue </span><br><span class="line">    link/ether 02:42:ac:13:00:02 brd ff:ff:ff:ff:ff:ff</span><br><span class="line">    inet 172.19.0.2/16 brd 172.19.255.255 scope global eth0</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">22: eth1@if23: &lt;BROADCAST,MULTICAST,UP,LOWER_UP,M-DOWN&gt; mtu 1500 qdisc noqueue </span><br><span class="line">    link/ether 02:42:ac:12:00:04 brd ff:ff:ff:ff:ff:ff</span><br><span class="line">    inet 172.18.0.4/16 brd 172.18.255.255 scope global eth1</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">/ # ping busybox1</span><br><span class="line">PING busybox1 (172.18.0.2): 56 data bytes</span><br><span class="line">64 bytes from 172.18.0.2: seq=0 ttl=64 time=0.158 ms</span><br><span class="line">64 bytes from 172.18.0.2: seq=1 ttl=64 time=0.086 ms</span><br></pre></td></tr></table></figure><h2 id="容器之间的三种通信方式"><a href="#容器之间的三种通信方式" class="headerlink" title="容器之间的三种通信方式"></a>容器之间的三种通信方式</h2><p>容器之间可通过 IP，Docker DNS Server 或 joined 容器三种方式通信。  </p><h3 id="IP通信"><a href="#IP通信" class="headerlink" title="IP通信"></a>IP通信</h3><p>属于同一个网络的容器之间是可以通信的。不同网络之间通过<code>docker network connect 网络名 容器</code>实现通信。  </p><h3 id="Docker-DNS-Server"><a href="#Docker-DNS-Server" class="headerlink" title="Docker DNS Server"></a>Docker DNS Server</h3><p>docker内置了DNS服务，在IP通信的情况下可以使用DNS服务进行通信，busybox1与busybox2，以及将busybox3添加到test_bridge网络后，容器之间使用容器名就可以ping通。<br><strong>Docker DNS Server只能是在自定义网络中使用，默认的bridge网络无法使用DNS</strong>  </p><h3 id="joined容器"><a href="#joined容器" class="headerlink" title="joined容器"></a>joined容器</h3><p>使多个容器共享一个网络栈，共享网卡和配置信息。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">~]#</span><span class="bash"> docker run -it -d --name=test_join busybox</span></span><br><span class="line">578c4ad593d44212bf8180120ff6a5d41b64a8ec60b89ccd6be746baafc474a9</span><br><span class="line"><span class="meta">~]#</span><span class="bash"> docker run -it -d --network=container:test_join --name=test_join_2 busybox</span></span><br><span class="line">9b4f485357a3e04a41fd1b883ffcc1ef381fb42b6fc3b3d01018c0fa8c46d584</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">~]#</span><span class="bash"> docker <span class="built_in">exec</span> -it test_join  sh</span></span><br><span class="line">/ # ip a</span><br><span class="line">1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue qlen 1000</span><br><span class="line">    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00</span><br><span class="line">    inet 127.0.0.1/8 scope host lo</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">24: eth0@if25: &lt;BROADCAST,MULTICAST,UP,LOWER_UP,M-DOWN&gt; mtu 1500 qdisc noqueue </span><br><span class="line">    link/ether 02:42:ac:11:00:02 brd ff:ff:ff:ff:ff:ff</span><br><span class="line">    inet 172.17.0.2/16 brd 172.17.255.255 scope global eth0</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">~]#</span><span class="bash"> docker <span class="built_in">exec</span> -it test_join_2  sh</span></span><br><span class="line">/ # ip a</span><br><span class="line">1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue qlen 1000</span><br><span class="line">    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00</span><br><span class="line">    inet 127.0.0.1/8 scope host lo</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">24: eth0@if25: &lt;BROADCAST,MULTICAST,UP,LOWER_UP,M-DOWN&gt; mtu 1500 qdisc noqueue </span><br><span class="line">    link/ether 02:42:ac:11:00:02 brd ff:ff:ff:ff:ff:ff</span><br><span class="line">    inet 172.17.0.2/16 brd 172.17.255.255 scope global eth0</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br></pre></td></tr></table></figure><p>可以发现test_join与test_join_2的网络配置是相同的。  </p><h2 id="容器与外界通信"><a href="#容器与外界通信" class="headerlink" title="容器与外界通信"></a>容器与外界通信</h2><h3 id="容器访问外界"><a href="#容器访问外界" class="headerlink" title="容器访问外界"></a>容器访问外界</h3><p>例如容器内ping 百度，以下是通信过程。  </p><ol><li>ping <a href="http://www.baidu.com,容器网卡发包/">www.baidu.com，容器网卡发包</a>  </li><li>docker0收到包，交给NAT处理  </li><li>NAT将源地址转换成宿主机网卡的IP  </li><li>ping包从宿主机的网卡发出到达百度  </li></ol><h3 id="外界访问容器"><a href="#外界访问容器" class="headerlink" title="外界访问容器"></a>外界访问容器</h3><p>外部想要访问容器，容器需要将端口映射到宿主机的端口，通过<code>docker run -p 宿主机端口:容器端口</code>实现。外部访问时访问宿主机的端口也就是访问了容器的端口<br>每一个映射的端口，host 都会启动一个 docker-proxy 进程来处理访问容器的流量。  </p><ol><li>docker-proxy 监听映射后宿主的端口  </li><li>当外界访问宿主机端口时，docker-proxy转发给容器  </li><li>容器响应请求并返回结果  </li></ol>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;/2022/10/16/docker/8-docker%E7%BD%91%E7%BB%9C/%E5%9B%BE%E7%89%87docker.jpg&quot; alt=&quot;docker&quot;&gt;  &lt;/p&gt;</summary>
    
    
    
    <category term="docker" scheme="http://example.com/categories/docker/"/>
    
    
    <category term="docker网络" scheme="http://example.com/tags/docker%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>LVM</title>
    <link href="http://example.com/2022/09/10/Linux/LVM/"/>
    <id>http://example.com/2022/09/10/Linux/LVM/</id>
    <published>2022-09-10T13:56:24.000Z</published>
    <updated>2022-09-11T10:48:31.440Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://s2.loli.net/2022/09/10/QDrWjs6Vz29cCFu.png" alt="LVM.png"></p><span id="more"></span><h1 id="LVM概念"><a href="#LVM概念" class="headerlink" title="LVM概念"></a>LVM概念</h1>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://s2.loli.net/2022/09/10/QDrWjs6Vz29cCFu.png&quot; alt=&quot;LVM.png&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="Linux" scheme="http://example.com/categories/Linux/"/>
    
    
    <category term="LVM" scheme="http://example.com/tags/LVM/"/>
    
  </entry>
  
  <entry>
    <title>4-快照与克隆</title>
    <link href="http://example.com/2022/09/08/KVM/4-%E5%BF%AB%E7%85%A7%E4%B8%8E%E5%85%8B%E9%9A%86/"/>
    <id>http://example.com/2022/09/08/KVM/4-%E5%BF%AB%E7%85%A7%E4%B8%8E%E5%85%8B%E9%9A%86/</id>
    <published>2022-09-08T05:07:22.000Z</published>
    <updated>2022-09-25T17:11:38.747Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://s2.loli.net/2022/09/06/4PdOQiHzvqweAKj.webp" alt="KVM.jpg"></p><span id="more"></span><h1 id="快照"><a href="#快照" class="headerlink" title="快照"></a>快照</h1><p>快照根据存储方式的不同可以分为<strong>内部快照</strong>与<strong>外部快照</strong>。<br>快照也有对应的配置文件，快找配置文件存放在 <strong>/var/lib/libvirt/qemu/snapshot/</strong> 下  </p><h2 id="内部快照"><a href="#内部快照" class="headerlink" title="内部快照"></a>内部快照</h2><p>内部快照：内部快照只支持qcow2格式的虚拟机镜像，把快照及后续变动都保存在原来的qcow2文件内。<br>内部快照可以在虚拟机开机状态下创建，但创建过程中会处于paused状态。  </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 为CLI_create-centos7.0创建名为test1的快照</span></span><br><span class="line"><span class="meta">~]#</span><span class="bash"> virsh snapshot-create-as CLI_create-centos7.0 test1</span></span><br><span class="line">Domain snapshot test1 created</span><br><span class="line"><span class="meta">#</span><span class="bash"> virsh snapshot-create-as CLI_create-centos7.0 test1  --description &lt;string&gt;  创建快照时为快照添加描述信息，但需要使用snapshot-current才能查看描述信息</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">查看此虚拟机的快照列表，注意此处的<span class="built_in">stat</span>为保存该快照时虚拟机的状态，即快照中的系统是否为运行状态</span></span><br><span class="line"><span class="meta">~]#</span><span class="bash"> virsh snapshot-list CLI_create-centos7.0</span> </span><br><span class="line"> Name                 Creation Time             State</span><br><span class="line">------------------------------------------------------------</span><br><span class="line"> test1                2022-09-08 01:38:05 -0400 running</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">查看当前快照配置信息，可以从该配置信息开头确认当前虚拟机是处于什么快照</span></span><br><span class="line"><span class="meta">~]#</span><span class="bash"> virsh snapshot-current CLI_create-centos7.0</span>  </span><br><span class="line">&lt;domainsnapshot&gt;</span><br><span class="line">  &lt;name&gt;test1&lt;/name&gt;</span><br><span class="line">  &lt;state&gt;running&lt;/state&gt;</span><br><span class="line">  &lt;creationTime&gt;1662615485&lt;/creationTime&gt;</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看指定快照信息</span></span><br><span class="line"><span class="meta">~]#</span><span class="bash"> virsh snapshot-info CLI_create-centos7.0 test1</span> </span><br><span class="line">Name:           test1</span><br><span class="line">Domain:         CLI_create-centos7.0</span><br><span class="line">Current:        yes</span><br><span class="line">State:          running</span><br><span class="line">Location:       internal</span><br><span class="line">Parent:         -</span><br><span class="line">Children:       0</span><br><span class="line">Descendants:    0</span><br><span class="line">Metadata:       yes</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看指定快照配置信息</span></span><br><span class="line"><span class="meta">~]#</span><span class="bash"> virsh snapshot-dumpxml CLI_create-centos7.0 test1</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 为CLI_create-centos7.0创建名为test2的快照</span></span><br><span class="line"><span class="meta">~]#</span><span class="bash"> virsh snapshot-create-as CLI_create-centos7.0 test2</span></span><br><span class="line">Domain snapshot test2 created</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看快照列表</span></span><br><span class="line"><span class="meta">~]#</span><span class="bash"> virsh snapshot-list CLI_create-centos7.0</span> </span><br><span class="line"> Name                 Creation Time             State</span><br><span class="line">------------------------------------------------------------</span><br><span class="line"> test1                2022-09-08 01:38:05 -0400 running</span><br><span class="line"> test2                2022-09-08 02:53:02 -0400 shutoff</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看指定快照的父快照</span></span><br><span class="line"><span class="meta">~]#</span><span class="bash"> virsh snapshot-parent CLI_create-centos7.0 test2</span> </span><br><span class="line">test1</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看快照列表关系树</span></span><br><span class="line"><span class="meta">~]#</span><span class="bash"> virsh snapshot-list CLI_create-centos7.0 --tree</span></span><br><span class="line">test1</span><br><span class="line">  |</span><br><span class="line">  +- test2</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 恢复test1快照</span></span><br><span class="line"><span class="meta">~]#</span><span class="bash"> virsh snapshot-revert CLI_create-centos7.0 test1</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 删除test2快照，添加–children将其子裔快照一并删除，–children-only只删除子裔快照</span></span><br><span class="line"><span class="meta">~]#</span><span class="bash"> virsh snapshot-delete CLI_create-centos7.0 test2</span></span><br><span class="line">Domain snapshot test2 deleted</span><br></pre></td></tr></table></figure><p><strong>注意点</strong>  </p><ol><li>不要使用<code>virsh snapshot-edit</code>修改快照名  </li><li>当一个虚拟机使用多个qcow2文件时，在创建快照时需要加上–atomic参数以确保快照操作的原子性，防止磁盘快照只有部分成功  </li></ol><h2 id="外部快照（暂时先了解）"><a href="#外部快照（暂时先了解）" class="headerlink" title="外部快照（暂时先了解）"></a>外部快照（暂时先了解）</h2><p>外部快照：在创建时，快照被保存在单独一个文件中，创建快照时间点之后的数据被记录到一个新的qcow2文件中，原镜像文件成为新的qcow2文件的backing file（只读），在创建多个快照后，这些文件将形成一个链——backing chain。外部快照同时支持raw和qcow2格式的虚拟机镜像。  </p><h1 id="克隆"><a href="#克隆" class="headerlink" title="克隆"></a>克隆</h1><p>被克隆的虚拟机不能是运行状态，在克隆前需要先将其暂停或者停止  </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">~]#</span><span class="bash"> virt-clone --auto-clone -o CLI_create-centos7.0 -n <span class="built_in">test</span></span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://s2.loli.net/2022/09/06/4PdOQiHzvqweAKj.webp&quot; alt=&quot;KVM.jpg&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="KVM" scheme="http://example.com/categories/KVM/"/>
    
    
    <category term="快照与克隆" scheme="http://example.com/tags/%E5%BF%AB%E7%85%A7%E4%B8%8E%E5%85%8B%E9%9A%86/"/>
    
  </entry>
  
  <entry>
    <title>3-KVM配置文件和磁盘</title>
    <link href="http://example.com/2022/09/08/KVM/3-KVM%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E5%92%8C%E7%A3%81%E7%9B%98/"/>
    <id>http://example.com/2022/09/08/KVM/3-KVM%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E5%92%8C%E7%A3%81%E7%9B%98/</id>
    <published>2022-09-07T17:24:29.000Z</published>
    <updated>2022-09-10T13:46:11.846Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://s2.loli.net/2022/09/06/4PdOQiHzvqweAKj.webp" alt="KVM.jpg"></p><span id="more"></span><h1 id="KVM配置文件"><a href="#KVM配置文件" class="headerlink" title="KVM配置文件"></a>KVM配置文件</h1><p>KVM虚拟机的配置文件存放在 <strong>/etc/libvirt/qemu</strong> 下，每个虚拟机对应一个xml文件，可以通过修改xml文件修改虚拟机硬件配置，但需要使用<code>virsh edit</code>进行修改，使用vim等进行修改则会被覆盖、无效，使用<code>virsh dumpxml</code>查看的就是这些xml文件。<br>在图形化界面中创建虚拟机时或在图形化界面中查看虚拟机硬件详情磁盘信息、虚拟机配置文件中，可以发现磁盘为一个qcow2文件，它既是虚拟机的磁盘，又是虚拟机的镜像。文件的大小并不一定是虚拟机中硬盘的大小，可能是分配的硬盘是”立即分配所有磁盘空间”,也可能是动态分配（随虚拟机中使用的磁盘空间变化，上限为分配的磁盘的大小），通过图形化窗口创建的虚拟机默认“立即分配所有磁盘空间”，想要实现动态分配需要在创建虚拟机之前通过命令创建一个动态分配的磁盘，即可以动态的qcow2文件。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 创建一个动态分配磁盘空间的磁盘，最大为50G,文件的创建目录为当前目录</span></span><br><span class="line">qemu-img create -f qcow2 testdisk1.qcow2 50G</span><br></pre></td></tr></table></figure><p><img src="/2022/09/08/KVM/3-KVM%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E5%92%8C%E7%A3%81%E7%9B%98/%E5%88%9B%E5%BB%BA.png" alt="创建虚拟机"><br><img src="/2022/09/08/KVM/3-KVM%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E5%92%8C%E7%A3%81%E7%9B%98/%E7%A1%AC%E4%BB%B6%E8%AF%A6%E6%83%85.png" alt="硬件详情">  </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">disk</span> <span class="attr">type</span>=<span class="string">&#x27;file&#x27;</span> <span class="attr">device</span>=<span class="string">&#x27;disk&#x27;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">driver</span> <span class="attr">name</span>=<span class="string">&#x27;qemu&#x27;</span> <span class="attr">type</span>=<span class="string">&#x27;qcow2&#x27;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">source</span> <span class="attr">file</span>=<span class="string">&#x27;/var/lib/libvirt/images/centos7.0.qcow2&#x27;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">backingStore</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">target</span> <span class="attr">dev</span>=<span class="string">&#x27;vda&#x27;</span> <span class="attr">bus</span>=<span class="string">&#x27;virtio&#x27;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">alias</span> <span class="attr">name</span>=<span class="string">&#x27;virtio-disk0&#x27;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">address</span> <span class="attr">type</span>=<span class="string">&#x27;pci&#x27;</span> <span class="attr">domain</span>=<span class="string">&#x27;0x0000&#x27;</span> <span class="attr">bus</span>=<span class="string">&#x27;0x00&#x27;</span> <span class="attr">slot</span>=<span class="string">&#x27;0x07&#x27;</span> <span class="attr">function</span>=<span class="string">&#x27;0x0&#x27;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">disk</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="通过命令创建虚拟机"><a href="#通过命令创建虚拟机" class="headerlink" title="通过命令创建虚拟机"></a>通过命令创建虚拟机</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">virt-install --name=kvm2 --vcpus=2 --memory=2048 --location=/home/yyg/Desktop/CentOS-7-x86_64-DVD-1810.iso --disk path=/var/lib/libvirt/images/test.qcow2 --network network=default --graphics none --extra-args=&#x27;console=ttyS0&#x27;</span><br></pre></td></tr></table></figure><ul><li>–name=kvm2表示为创建的虚拟机命名为kvm2。  </li><li>–vcpus=2表示设置虚拟机cpu有2个核心。  </li><li>–memory=2048表示设置内存为2G。  </li><li>––location=/home/yyg/Desktop/CentOS-7-x86_64-DVD-1810.iso 表示使用本地iso镜像安装虚拟机。  </li><li>–disk path=/var/lib/libvirt/images/test.qcow2 表示指定虚拟机的磁盘镜像的路径，示例中的路径是我提前通过qemu-img命令创建出来的磁盘，咱们做实验的时候需要自行创建好，如果不想提前创建好磁盘，也可以使用–disk size=50代替–disk path=/var/lib/libvirt/images/kvm2.qcow2，如果使用–disk size=50这个设置，virt-install命令会在/var/lib/libvirt/images/目录中自动创建一个50G的qcow2磁盘，磁盘的前缀名和虚拟机名相同，这个磁盘是预分配所有磁盘空间的，也就是说，会直接占用宿主机50G的磁盘空间。  </li><li>–network network=default表示使用kvm的默认网络  </li><li>–graphics none 表示我们安装的过程中，需要使用的图形化控制台，由于我们此处模拟的是纯命令行安装，所以图形化控制台指定为none，表示不使用图形化控制台安装虚拟机。  </li><li>–extra-args=’console=ttyS0’表示为创建的虚拟机指定内核启动时的内核参数，此处为虚拟机内核添加的参数为console=ttyS0，也就是说，当安装虚拟机时，分配一个ttyS0的虚拟终端，因为我们没有使用图形化控制台安装，所以要分配一个命令行的虚拟终端，以便执行安装操作和安装完成后的登录、执行命令等操作。  </li></ul><p>然后按照提示将需要进行设置的选项设置完成（与正常安装系统时设置一样，只是转换成文本形式）。  </p><h1 id="删除虚拟机"><a href="#删除虚拟机" class="headerlink" title="删除虚拟机"></a>删除虚拟机</h1>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://s2.loli.net/2022/09/06/4PdOQiHzvqweAKj.webp&quot; alt=&quot;KVM.jpg&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="KVM" scheme="http://example.com/categories/KVM/"/>
    
    
    <category term="KVM配置文件和磁盘" scheme="http://example.com/tags/KVM%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E5%92%8C%E7%A3%81%E7%9B%98/"/>
    
  </entry>
  
  <entry>
    <title>2-KVM相关命令</title>
    <link href="http://example.com/2022/09/07/KVM/2-KVM%E7%9B%B8%E5%85%B3%E5%91%BD%E4%BB%A4/"/>
    <id>http://example.com/2022/09/07/KVM/2-KVM%E7%9B%B8%E5%85%B3%E5%91%BD%E4%BB%A4/</id>
    <published>2022-09-07T13:53:00.000Z</published>
    <updated>2022-09-10T13:48:39.623Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://s2.loli.net/2022/09/06/4PdOQiHzvqweAKj.webp" alt="KVM.jpg"></p><span id="more"></span><h1 id="virsh-命令"><a href="#virsh-命令" class="headerlink" title="virsh 命令"></a>virsh 命令</h1><h2 id="域管理（客户机管理）"><a href="#域管理（客户机管理）" class="headerlink" title="域管理（客户机管理）"></a>域管理（客户机管理）</h2><table><thead><tr><th align="center">命令</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">list</td><td align="center">查看当前运行、挂起的虚拟机，–all查看所有虚拟机</td></tr><tr><td align="center">start/shutdown/reboot VM_NAME</td><td align="center">虚拟机启动、停止、重启</td></tr><tr><td align="center">destroy VM_NAME</td><td align="center">强制停止虚拟机，相当于断电</td></tr><tr><td align="center">undefine VM_NAME</td><td align="center">删除虚拟机</td></tr><tr><td align="center">console VM_NAME</td><td align="center">连接虚拟机，客户机无图形化界面时ctrl+]退出</td></tr><tr><td align="center">edit VM_NAME</td><td align="center">修改虚拟机xml配置</td></tr><tr><td align="center">autostart VM_NAME</td><td align="center">设置虚拟机自启动</td></tr><tr><td align="center">domiflist VM_NAME</td><td align="center">查看虚拟机网卡信息</td></tr><tr><td align="center">domblklist VM_NAME</td><td align="center">查看虚拟机硬盘信息</td></tr><tr><td align="center">dominfo VM_NAME</td><td align="center">列出指定虚拟机的信息</td></tr><tr><td align="center">suspend/resume VM_NAME</td><td align="center">挂起/恢复虚拟机</td></tr><tr><td align="center">domstat VM_NAME</td><td align="center">显示虚拟机状态</td></tr><tr><td align="center">domcontrol VM_NAME</td><td align="center">返回虚拟机状态，ok、error</td></tr><tr><td align="center">dumpxml VM_NAME</td><td align="center">直接显示demo的xml文件配置</td></tr><tr><td align="center">cpu-stats VM_NAME</td><td align="center">虚拟机的cpu状态</td></tr><tr><td align="center">setmen  VM_NAME  SIZE</td><td align="center">设置虚拟机内存</td></tr></tbody></table><h2 id="快照管理"><a href="#快照管理" class="headerlink" title="快照管理"></a>快照管理</h2><table><thead><tr><th align="center">命令</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">snapshot-create VM_NAME</td><td align="center">创建快照</td></tr><tr><td align="center">snapshot-create-as VM_NAME</td><td align="center">创建快照，可添加快照描述/指定快照名称</td></tr><tr><td align="center">snapshot-current VM_NAME</td><td align="center">查看当前快照详细配置</td></tr><tr><td align="center">snapshot-delete VM_NAME snapshot_name</td><td align="center">删除快照</td></tr><tr><td align="center">snapshot-dumpxml VM_NAME snapshot_name</td><td align="center">查看指定快照配置</td></tr><tr><td align="center">snapshot-edit VM_NAME snapshot_name</td><td align="center">编辑指定快照xml文件</td></tr><tr><td align="center">snapshot-info VM_NAME snapshot_name</td><td align="center">查看指定快照信息</td></tr><tr><td align="center">snapshot-list VM_NAME</td><td align="center">查看快照列表</td></tr><tr><td align="center">snapshot-parent VM_NAME</td><td align="center">查看指定快照的父快照名称</td></tr><tr><td align="center">snapshot-revert VM_NAME snapshot_name</td><td align="center">恢复指定快照</td></tr></tbody></table><h2 id="virt-manager"><a href="#virt-manager" class="headerlink" title="virt-manager"></a>virt-manager</h2><h2 id="virt-viewer"><a href="#virt-viewer" class="headerlink" title="virt-viewer"></a>virt-viewer</h2><h2 id="virt-install"><a href="#virt-install" class="headerlink" title="virt-install"></a>virt-install</h2><h2 id="virt-clone"><a href="#virt-clone" class="headerlink" title="virt-clone"></a>virt-clone</h2><h2 id="virt-top"><a href="#virt-top" class="headerlink" title="virt-top"></a>virt-top</h2>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://s2.loli.net/2022/09/06/4PdOQiHzvqweAKj.webp&quot; alt=&quot;KVM.jpg&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="KVM" scheme="http://example.com/categories/KVM/"/>
    
    
    <category term="KVM相关命令" scheme="http://example.com/tags/KVM%E7%9B%B8%E5%85%B3%E5%91%BD%E4%BB%A4/"/>
    
  </entry>
  
  <entry>
    <title>KVM相关问题以及解决</title>
    <link href="http://example.com/2022/09/03/KVM/KVM%E7%9B%B8%E5%85%B3%E9%97%AE%E9%A2%98%E4%BB%A5%E5%8F%8A%E8%A7%A3%E5%86%B3/"/>
    <id>http://example.com/2022/09/03/KVM/KVM%E7%9B%B8%E5%85%B3%E9%97%AE%E9%A2%98%E4%BB%A5%E5%8F%8A%E8%A7%A3%E5%86%B3/</id>
    <published>2022-09-02T18:08:52.000Z</published>
    <updated>2022-09-19T12:43:29.240Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://s2.loli.net/2022/09/06/4PdOQiHzvqweAKj.webp" alt="KVM.jpg"></p><span id="more"></span><h1 id="问题一：图形化Virtual-Machine-Manager中创建虚拟机时提示“KVM-is-not-available”"><a href="#问题一：图形化Virtual-Machine-Manager中创建虚拟机时提示“KVM-is-not-available”" class="headerlink" title="问题一：图形化Virtual Machine Manager中创建虚拟机时提示“KVM is not available”"></a>问题一：图形化Virtual Machine Manager中创建虚拟机时提示“KVM is not available”</h1><p><img src="/2022/09/03/KVM/KVM%E7%9B%B8%E5%85%B3%E9%97%AE%E9%A2%98%E4%BB%A5%E5%8F%8A%E8%A7%A3%E5%86%B3/Warning.png" alt="KVM is not available">  </p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><ol><li>检查是否加载模块<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">~]#</span><span class="bash">~]<span class="comment">#  lsmod |grep kvm</span></span></span><br><span class="line">kvm_intel             183621  4 </span><br><span class="line">kvm                   586948  1 kvm_intel</span><br><span class="line">irqbypass              13503  1 kvm</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">~]#</span><span class="bash"> modprobe kvm  <span class="comment">#如果没有就加载模块</span></span></span><br></pre></td></tr></table></figure></li><li>查看是否开启了CPU虚拟化,如果没有，则是在VMware workstation中虚拟机的CPU虚拟化没有开启  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">~]#</span><span class="bash"> lscpu | grep -E <span class="string">&#x27;vmx|svm&#x27;</span></span></span><br></pre></td></tr></table></figure></li></ol><h1 id="问题二：宿主机可正常联网，但KVM内部虚拟机使用nat模式DHCP无法联网"><a href="#问题二：宿主机可正常联网，但KVM内部虚拟机使用nat模式DHCP无法联网" class="headerlink" title="问题二：宿主机可正常联网，但KVM内部虚拟机使用nat模式DHCP无法联网"></a>问题二：宿主机可正常联网，但KVM内部虚拟机使用nat模式DHCP无法联网</h1><h2 id="解决方案-1"><a href="#解决方案-1" class="headerlink" title="解决方案"></a>解决方案</h2><p>需要将宿主机的路由转发功能开启  </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">~]#</span><span class="bash"> vim /etc/sysctl.conf</span></span><br><span class="line">net.ipv4.ip_forward=1</span><br></pre></td></tr></table></figure><h1 id="问题三：console连接KVM-centos7-一直等待"><a href="#问题三：console连接KVM-centos7-一直等待" class="headerlink" title="问题三：console连接KVM centos7 一直等待"></a>问题三：console连接KVM centos7 一直等待</h1><h2 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h2><p>出现在在图形化界面中手动创建centos7虚拟机，使用console命令连接时一直等待  </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">~]#</span><span class="bash">  virsh console centos7.0</span> </span><br><span class="line">Connected to domain centos7.0</span><br><span class="line">Escape character is ^]</span><br></pre></td></tr></table></figure><h2 id="解决方案-2"><a href="#解决方案-2" class="headerlink" title="解决方案"></a>解决方案</h2><p>在客户机中修改kernel启动参数  </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">~]#</span><span class="bash"> grubby --update-kernel=ALL --args=<span class="string">&quot;console=ttyS0&quot;</span></span></span><br><span class="line"><span class="meta">~]#</span><span class="bash"> reboot</span></span><br></pre></td></tr></table></figure><h1 id="问题四：console连接客户机报“error-operation-failed-Active-console-session-exists-for-this-domain”"><a href="#问题四：console连接客户机报“error-operation-failed-Active-console-session-exists-for-this-domain”" class="headerlink" title="问题四：console连接客户机报“error: operation failed: Active console session exists for this domain”"></a>问题四：console连接客户机报“error: operation failed: Active console session exists for this domain”</h1><h2 id="解决方案-3"><a href="#解决方案-3" class="headerlink" title="解决方案"></a>解决方案</h2><ol><li>可能有其他的连接，ps aux | grep console查看，若有则杀死进程后重新连接  </li><li>没有其他连接进程还是无法连接，尝试将宿主机重启  </li></ol>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://s2.loli.net/2022/09/06/4PdOQiHzvqweAKj.webp&quot; alt=&quot;KVM.jpg&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="KVM" scheme="http://example.com/categories/KVM/"/>
    
    
    <category term="KVM相关问题以及解决" scheme="http://example.com/tags/KVM%E7%9B%B8%E5%85%B3%E9%97%AE%E9%A2%98%E4%BB%A5%E5%8F%8A%E8%A7%A3%E5%86%B3/"/>
    
  </entry>
  
  <entry>
    <title>1-KVM环境准备、图形化使用</title>
    <link href="http://example.com/2022/09/03/KVM/1-KVM%E7%8E%AF%E5%A2%83%E5%87%86%E5%A4%87%E3%80%81%E5%9B%BE%E5%BD%A2%E5%8C%96%E4%BD%BF%E7%94%A8/"/>
    <id>http://example.com/2022/09/03/KVM/1-KVM%E7%8E%AF%E5%A2%83%E5%87%86%E5%A4%87%E3%80%81%E5%9B%BE%E5%BD%A2%E5%8C%96%E4%BD%BF%E7%94%A8/</id>
    <published>2022-09-02T17:32:12.000Z</published>
    <updated>2022-09-08T01:03:37.334Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://s2.loli.net/2022/09/06/4PdOQiHzvqweAKj.webp" alt="KVM.jpg"></p><span id="more"></span><h1 id="KVM环境准备"><a href="#KVM环境准备" class="headerlink" title="KVM环境准备"></a>KVM环境准备</h1><p>在VMware workstation创建虚拟机，然后在虚拟机中搭建KVM环境进行学习。<br>1.在VMware workstation中对虚拟机进行设置。因为KVM是需要硬件虚拟化支持的，所以要将虚拟机CPU的虚拟化开启<br><img src="/2022/09/03/KVM/1-KVM%E7%8E%AF%E5%A2%83%E5%87%86%E5%A4%87%E3%80%81%E5%9B%BE%E5%BD%A2%E5%8C%96%E4%BD%BF%E7%94%A8/%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%A1%AC%E4%BB%B6%E8%AE%BE%E7%BD%AE.png" alt="虚拟机硬件设置"><br>2.在VMware workstation中创建虚拟机时，安装一个带有GUI的系统，方便对KVM图形化的熟悉。<br>这样KVM的基础的环境就准备完毕。</p><h2 id="KVM部署"><a href="#KVM部署" class="headerlink" title="KVM部署"></a>KVM部署</h2><p>在KVM部署前检查是否支持虚拟化</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">~]#</span><span class="bash"> lscpu | grep -E <span class="string">&#x27;vmx|svm&#x27;</span></span></span><br><span class="line">Flags: fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush mmx fxsr sse sse2 ss ht syscall nx pdpe1gb rdtscp lm constant_tsc arch_perfmon nopl xtopology tsc_reliable nonstop_tsc eagerfpu pni pclmulqdq vmx ssse3 fma cx16 pcid sse4_1 sse4_2 x2apic movbe popcnt tsc_deadline_timer aes xsave avx f16c rdrand hypervisor lahf_lm abm 3dnowprefetch ssbd ibrs ibpb stibp tpr_shadow vnmi ept vpid fsgsbase tsc_adjust bmi1 avx2 smep bmi2 invpcid rdseed adx smap clflushopt xsaveopt xsavec xgetbv1 arat spec_ctrl intel_stibp flush_l1d arch_capabilities</span><br></pre></td></tr></table></figure><p>安装对应的虚拟化组件  </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">~]#</span><span class="bash"> yum install qemu-kvm qemu-img virt-manager libvirt libvirt-python virt-manager libvirt-client virt-install virt-viewer -y</span></span><br></pre></td></tr></table></figure><p>设置虚拟机接口管理组件启动和自启  </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">~]#</span><span class="bash"> systemctl start libvirtd</span></span><br><span class="line"><span class="meta">~]#</span><span class="bash"> systemctl <span class="built_in">enable</span> libvirtd</span></span><br></pre></td></tr></table></figure><h2 id="图形化中使用KVM创建虚拟机"><a href="#图形化中使用KVM创建虚拟机" class="headerlink" title="图形化中使用KVM创建虚拟机"></a>图形化中使用KVM创建虚拟机</h2><p>在宿主机的图形化桌面中打开一个命令行窗口，输入virt-manager命令，即可弹出对应的图形化管理窗口，或者在桌面的菜单栏中的应用程序中，选择“虚拟机管理器”（英文界面选择Virtual Machine Manager），都可以打开virt-manager。<br>在virt-manager中创建虚拟机过程比较简单，只需要将所要安装的系统镜像上传到KVM的宿主机中，KVM中虚拟机安装过程省略。  </p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://s2.loli.net/2022/09/06/4PdOQiHzvqweAKj.webp&quot; alt=&quot;KVM.jpg&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="KVM" scheme="http://example.com/categories/KVM/"/>
    
    
    <category term="KVM环境准备、图形化使用" scheme="http://example.com/tags/KVM%E7%8E%AF%E5%A2%83%E5%87%86%E5%A4%87%E3%80%81%E5%9B%BE%E5%BD%A2%E5%8C%96%E4%BD%BF%E7%94%A8/"/>
    
  </entry>
  
  <entry>
    <title>虚拟化技术</title>
    <link href="http://example.com/2022/09/02/KVM/%E8%99%9A%E6%8B%9F%E5%8C%96%E6%8A%80%E6%9C%AF/"/>
    <id>http://example.com/2022/09/02/KVM/%E8%99%9A%E6%8B%9F%E5%8C%96%E6%8A%80%E6%9C%AF/</id>
    <published>2022-09-02T14:10:13.000Z</published>
    <updated>2022-10-19T19:07:55.155Z</updated>
    
    <content type="html"><![CDATA[<center> 虚拟化技术介绍、分类 </center><span id="more"></span>  <h1 id="虚拟化技术"><a href="#虚拟化技术" class="headerlink" title="虚拟化技术"></a>虚拟化技术</h1><p>简单解释就是将一台主机的资源（CPU、内存、磁盘空间、网络）分割、组合成多台虚拟主机的技术。  </p><h1 id="硬件虚拟化与软件虚拟化"><a href="#硬件虚拟化与软件虚拟化" class="headerlink" title="硬件虚拟化与软件虚拟化"></a>硬件虚拟化与软件虚拟化</h1><p>物理平台本身提供了对特殊指令的截获和重定向的<strong>硬件支持</strong>。支持虚拟化的硬件，也是一些基于硬件实现软件虚拟化技术的关键。目前主要有两种：intel VT和AMD-V。  </p><h1 id="软件虚拟化"><a href="#软件虚拟化" class="headerlink" title="软件虚拟化"></a>软件虚拟化</h1><p>利用软件技术，在现有的物理平台上实现对物理平台访问的截获和模拟。有些软件虚拟化技术需要硬件支持，有些则不需要。</p><h2 id="全虚拟化与准虚拟化"><a href="#全虚拟化与准虚拟化" class="headerlink" title="全虚拟化与准虚拟化"></a>全虚拟化与准虚拟化</h2><h2 id="全虚拟化"><a href="#全虚拟化" class="headerlink" title="全虚拟化"></a>全虚拟化</h2><p>全虚拟化（full virtualization），又叫硬件辅助虚拟化技术，需要硬件虚拟化的支持。全虚拟化最大的优点就是运行在虚拟机上的操作系统没有经过任何修改，唯一的限制就是操作系统必须能够支持底层的硬件。它在虚拟机（VM）和硬件之间加了一个软件层–Hypervisor，或者叫做虚拟机管理程序（VMM），是用来建立与执行虚拟机器的软件、固件或硬件。  </p><h3 id="一型虚拟化"><a href="#一型虚拟化" class="headerlink" title="一型虚拟化"></a>一型虚拟化</h3><p>Hypervisor 直接安装在物理机上，多个虚拟机在 Hypervisor 上运行。Hypervisor 实现方式一般是一个特殊定制的 Linux 系统。Xen 和 VMWare 的 ESXi 都属于这个类型，例如：VMWare的ESXi  </p><h3 id="二型虚拟化"><a href="#二型虚拟化" class="headerlink" title="二型虚拟化"></a>二型虚拟化</h3><p>这种 hypervisor 运行在另一个操作系统（运行在物理硬件之上）中，例如：KVM  </p><h2 id="准虚拟化"><a href="#准虚拟化" class="headerlink" title="准虚拟化"></a>准虚拟化</h2><p>需要改动客户操作系统，使它以为自己运行在虚拟环境下，能够与虚拟机监控机协同工作,不需要硬件虚拟化支持，消耗资源小性能好。这种方法就叫准虚拟化（para-virtualization），也叫半虚拟化。  </p>]]></content>
    
    
    <summary type="html">&lt;center&gt; 虚拟化技术介绍、分类 &lt;/center&gt;</summary>
    
    
    
    <category term="虚拟化介绍" scheme="http://example.com/categories/%E8%99%9A%E6%8B%9F%E5%8C%96%E4%BB%8B%E7%BB%8D/"/>
    
    
    <category term="虚拟化介绍" scheme="http://example.com/tags/%E8%99%9A%E6%8B%9F%E5%8C%96%E4%BB%8B%E7%BB%8D/"/>
    
  </entry>
  
  <entry>
    <title>7-K8S核心技术Service</title>
    <link href="http://example.com/2022/07/07/K8s/7-K8S%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AFService/"/>
    <id>http://example.com/2022/07/07/K8s/7-K8S%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AFService/</id>
    <published>2022-07-07T02:49:59.000Z</published>
    <updated>2022-09-08T01:01:43.267Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://s2.loli.net/2022/06/27/5UbYtS64yAIPXzM.jpg" alt="k8s">  </p><span id="more"></span><h1 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h1><p>在k8s中可以通过pod的ip来进行访问，但是pod的ip不是固定的，而service资源会对提供同一个服务的多个pod进行聚合，提供一个统一的入口，通过访问service的入口地址就能访问到后面的pod服务。  </p><h2 id="Service存在的意义"><a href="#Service存在的意义" class="headerlink" title="Service存在的意义"></a>Service存在的意义</h2><h3 id="防止pod失联（服务发现）"><a href="#防止pod失联（服务发现）" class="headerlink" title="防止pod失联（服务发现）"></a>防止pod失联（服务发现）</h3><p>service充当注册中心的作用，当前有多个前端、后端pod时，前端可以通过service访问后端。</p><h3 id="定义pod访问策略（负载均衡）"><a href="#定义pod访问策略（负载均衡）" class="headerlink" title="定义pod访问策略（负载均衡）"></a>定义pod访问策略（负载均衡）</h3><p>前端pod访问后端pod时，中间会通过service，这里service还能辺负载均衡，将前端请求分发到各个后端pod。  </p><h2 id="service资源类型"><a href="#service资源类型" class="headerlink" title="service资源类型"></a>service资源类型</h2><p><strong>ClusterIP</strong>：集群内部访问，默认方式<br><strong>NodePort</strong>：对外访问应用使用<br><strong>LoadBalancer</strong>：对外访问应用使用，公有云  </p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">~]#</span> <span class="string">kubectl</span> <span class="string">get</span> <span class="string">svc</span> <span class="string">nginx</span> <span class="string">-o</span> <span class="string">yaml</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">creationTimestamp:</span> <span class="string">&quot;2022-07-14T14:01:34Z&quot;</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">nginx</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">nginx</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">default</span></span><br><span class="line">  <span class="attr">resourceVersion:</span> <span class="string">&quot;266455&quot;</span></span><br><span class="line">  <span class="attr">selfLink:</span> <span class="string">/api/v1/namespaces/default/services/nginx</span></span><br><span class="line">  <span class="attr">uid:</span> <span class="string">d45f429a-23b9-435f-a7ed-704996bb1999</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">clusterIP:</span> <span class="number">10.1</span><span class="number">.160</span><span class="number">.174</span></span><br><span class="line">  <span class="attr">externalTrafficPolicy:</span> <span class="string">Cluster</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">nodePort:</span> <span class="number">30619</span>    <span class="comment">#容器所在节点的端口，即外部机器可以访问的端口</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">80</span>           <span class="comment">#service的端口，即k8s中服务之间的访问端口</span></span><br><span class="line">    <span class="attr">protocol:</span> <span class="string">TCP</span></span><br><span class="line">    <span class="attr">targetPort:</span> <span class="number">80</span>     <span class="comment">#pod的端口</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">nginx</span></span><br><span class="line">  <span class="attr">sessionAffinity:</span> <span class="string">None</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">NodePort</span></span><br><span class="line"><span class="attr">status:</span></span><br><span class="line">  <span class="attr">loadBalancer:</span> &#123;&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://s2.loli.net/2022/06/27/5UbYtS64yAIPXzM.jpg&quot; alt=&quot;k8s&quot;&gt;  &lt;/p&gt;</summary>
    
    
    
    <category term="Kubernetes" scheme="http://example.com/categories/Kubernetes/"/>
    
    
    <category term="Service" scheme="http://example.com/tags/Service/"/>
    
  </entry>
  
  <entry>
    <title>k8s相关使用以及问题</title>
    <link href="http://example.com/2022/07/03/K8s/k8s%E7%9B%B8%E5%85%B3%E4%BD%BF%E7%94%A8%E4%BB%A5%E5%8F%8A%E9%97%AE%E9%A2%98/"/>
    <id>http://example.com/2022/07/03/K8s/k8s%E7%9B%B8%E5%85%B3%E4%BD%BF%E7%94%A8%E4%BB%A5%E5%8F%8A%E9%97%AE%E9%A2%98/</id>
    <published>2022-07-03T04:30:21.000Z</published>
    <updated>2022-08-12T02:50:36.935Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://s2.loli.net/2022/06/27/5UbYtS64yAIPXzM.jpg" alt="k8s.jpg">  </p><span id="more"></span><h1 id="相关使用技巧"><a href="#相关使用技巧" class="headerlink" title="相关使用技巧"></a>相关使用技巧</h1><h2 id="kubectl命令补全"><a href="#kubectl命令补全" class="headerlink" title="kubectl命令补全"></a>kubectl命令补全</h2><p>解决无法使用Tab键补全kubectl命令问题</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">yum -y install bash-completion</span><br><span class="line">source /usr/share/bash-completion/bash_completion</span><br><span class="line">source &lt;(kubectl completion bash)</span><br><span class="line">echo &quot;source &lt;(kubectl completion bash)&quot; &gt;&gt; ~/.bashrc </span><br></pre></td></tr></table></figure><h2 id="node节点使用kubectl命令"><a href="#node节点使用kubectl命令" class="headerlink" title="node节点使用kubectl命令"></a>node节点使用kubectl命令</h2><p>解决kubectl无法在node上使用的问题<br>将主节点的<code>/etc/kubernetes/admin.conf</code>拷贝到node节点相同目录下，然后再node节点中配置一下环境变量。  </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">echo &quot;export KUBECONFIG=/etc/kubernetes/admin.conf&quot; &gt;&gt; ~/.bash_profile</span><br><span class="line">source ~/.bash_profile</span><br></pre></td></tr></table></figure><h1 id="问题以及解决"><a href="#问题以及解决" class="headerlink" title="问题以及解决"></a>问题以及解决</h1>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://s2.loli.net/2022/06/27/5UbYtS64yAIPXzM.jpg&quot; alt=&quot;k8s.jpg&quot;&gt;  &lt;/p&gt;</summary>
    
    
    
    <category term="Kubernetes" scheme="http://example.com/categories/Kubernetes/"/>
    
    
    <category term="k8s相关使用以及问题" scheme="http://example.com/tags/k8s%E7%9B%B8%E5%85%B3%E4%BD%BF%E7%94%A8%E4%BB%A5%E5%8F%8A%E9%97%AE%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>6-K8S核心技术Controller</title>
    <link href="http://example.com/2022/07/01/K8s/6-K8S%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AFController/"/>
    <id>http://example.com/2022/07/01/K8s/6-K8S%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AFController/</id>
    <published>2022-07-01T01:49:07.000Z</published>
    <updated>2022-08-12T01:54:35.470Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://s2.loli.net/2022/06/27/5UbYtS64yAIPXzM.jpg" alt="k8s.jpg">  </p><span id="more"></span><h1 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h1><p>k8s通常不会直接创建pod，而是通过controller来管理pod，controller中定义了pod的部署特性，为对应不同场景，k8s提供了多种controller。  </p><ol><li><p><strong>ReplicationController(RC)</strong> ：上一代无状态pod应用控制器，不建议使用，建议使用Deployment、ReplicaSet来取代  </p></li><li><p><strong>ReplicaSet(RS)</strong> ：新一代的ReplicationController实现了pod的多副本管理，使用Deployment时会自动创建ReplicaSet，也就是说Deployment是通过ReplicaSet来管理pod的多个副本，通常不使用ReplicaSet，而是通过Deployment去使用ReplicaSet(ReplicaSet不支持滚动更新，但是Deployment支持)  </p></li><li><p><strong>Deployment(deploy)</strong> ：用于管理无状态应用，是构建在ReplicaSet之上的，更为高级的控制器  </p></li><li><p><strong>StatefuleSet(sts)</strong> ：用于管理有状态应用，如数据库服务程序，与Deployment不同的是StatefulSet会为每一个pod创建一个独有的持久性标识，并确保pod间的顺序。有序收缩、有序删除  </p></li><li><p><strong>DeamonSet(ds)</strong> ：用于确保每一个节点都运行了某pod的一个副本，包括后来新增的节点，节点移除则导致pod回收。  </p></li><li><p><strong>job</strong> ：用于管理运行完成后即可终止的应用。  </p></li><li><p><strong>cronjob</strong> ：用于管理定时反复执行的任务  </p></li></ol><h2 id="Deployment（deploy）"><a href="#Deployment（deploy）" class="headerlink" title="Deployment（deploy）"></a>Deployment（deploy）</h2><h3 id="创建deployment"><a href="#创建deployment" class="headerlink" title="创建deployment"></a>创建deployment</h3><p>更多参数查看<a href="https://kubernetes.io/docs/reference/kubernetes-api/workload-resources/deployment-v1/">官方api文档</a><br>编辑</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span>   <span class="comment"># Deployment所在的api</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span>      <span class="comment"># 资源类型</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">nginx-deployment</span>  <span class="comment"># deployment名</span></span><br><span class="line">  <span class="attr">labels:</span>                 <span class="comment"># deployment标签</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">nginx</span></span><br><span class="line"><span class="attr">spec:</span>                       <span class="comment">#</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">3</span>               <span class="comment"># pod资源副本数</span></span><br><span class="line">  <span class="attr">selector:</span>                 <span class="comment"># 管理pod的标签</span></span><br><span class="line">    <span class="attr">matchLabels:</span>            <span class="comment"># 相当于使用matchExpressions &#123;key: app, operator: In, values: nginx&#125;</span></span><br><span class="line">      <span class="attr">app:</span> <span class="string">nginx</span></span><br><span class="line">  <span class="attr">template:</span>                 <span class="comment"># 定义要创建的pod</span></span><br><span class="line">    <span class="attr">metadata:</span>               <span class="comment"># pod的元数据</span></span><br><span class="line">      <span class="attr">labels:</span>               <span class="comment"># pod的标签</span></span><br><span class="line">        <span class="attr">app:</span> <span class="string">nginx</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">nginx</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">nginx:1.14.2</span></span><br><span class="line">        <span class="attr">ports:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">80</span>   <span class="comment">#指定要暴露的端口</span></span><br></pre></td></tr></table></figure><p>使用以上yaml创建nginx-deployment.yaml文件  </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">~]#</span><span class="bash"> kubectl apply -f nginx-deployment.yaml   <span class="comment"># 使用nginx-deployment.yaml创建deployment</span></span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">~]#</span><span class="bash"> kubectl get deploy</span></span><br><span class="line">NAME               READY        UP-TO-DATE   AVAILABLE   AGE</span><br><span class="line">nginx-deployment   3/3          3            3           15m</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">~]#</span><span class="bash"> kubectl rollout status deployment/nginx-deployment   <span class="comment">#查看nginx-deployment deployment发布状态</span></span></span><br><span class="line">deployment &quot;nginx-deployment&quot; successfully rolled out</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">~]#</span><span class="bash"> kubectl get pod,rs -o wide --show-labels  <span class="comment">#查看由deployment创建的pod、replicaSet</span></span></span><br><span class="line">NAME                                    READY   STATUS    RESTARTS   AGE   IP            NODE         NOMINATED NODE   READINESS GATES   LABELS</span><br><span class="line">pod/nginx-deployment-7fd6966748-bhlxj   1/1     Running   0          29m   10.244.2.8    k8s-node02   &lt;none&gt;           &lt;none&gt;            app=nginx,pod-template-hash=7fd6966748</span><br><span class="line">pod/nginx-deployment-7fd6966748-m85w9   1/1     Running   0          29m   10.244.1.11   k8s-node01   &lt;none&gt;           &lt;none&gt;            app=nginx,pod-template-hash=7fd6966748</span><br><span class="line">pod/nginx-deployment-7fd6966748-sx54r   1/1     Running   0          29m   10.244.2.9    k8s-node02   &lt;none&gt;           &lt;none&gt;            app=nginx,pod-template-hash=7fd6966748</span><br><span class="line"></span><br><span class="line">NAME                                                DESIRED   CURRENT   READY   AGE   CONTAINERS   IMAGES         SELECTOR                                 LABELS</span><br><span class="line">replicaset.extensions/nginx-deployment-7fd6966748   3         3         3       29m   nginx        nginx:1.14.2   app=nginx,pod-template-hash=7fd6966748   app=nginx,pod-template-hash=7fd6966748</span><br></pre></td></tr></table></figure><p>pod-template-hash标签是由spec.template（PodTemplate）生成的hash值，这个标签添加到由deployment生成的pod、ReplicaSet中  </p><h3 id="更新Deployment"><a href="#更新Deployment" class="headerlink" title="更新Deployment"></a>更新Deployment</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">~]#</span><span class="bash"> kubectl <span class="built_in">set</span> image deployment/nginx-deployment nginx=nginx:1.16.1   <span class="comment">#将nginx版本由创建时的1.14.2版本改为1.16.1</span></span></span><br><span class="line">deployment.extensions/nginx-deployment image updated</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">~]#</span><span class="bash"> kubectl edit deployment/nginx-deployment  <span class="comment">#使用编辑器直接修改nginx的版本</span></span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">~]#</span><span class="bash"> kubectl rollout status deployment/nginx-deployment   <span class="comment">#查看nginx-deployment deployment发布状态</span></span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">~]#</span><span class="bash"> kubectl get rs         <span class="comment"># 可以发现新的rs扩容到3个，并将旧rs缩容到0个</span></span></span><br><span class="line">NAME                          DESIRED   CURRENT   READY   AGE</span><br><span class="line">nginx-deployment-6f9d665859   3         3         3       8h</span><br><span class="line">nginx-deployment-7fd6966748   0         0         0       9h</span><br></pre></td></tr></table></figure><p>deployment更新的过程类似于，先创建一个新的rs，等待就绪后，将旧rs缩容到2，也就是创建一个新的，缩容一个旧的，直到新的rs扩容为3，旧的rs缩容为0。  </p><h4 id="Rollover"><a href="#Rollover" class="headerlink" title="Rollover"></a>Rollover</h4><p>Deployment每次更新都会创建新的rs、pod，当Deployment正在更新时再次被更新，正在扩容的rs将被当做为旧rs，然后在进行滚动更新。<br>例如：当Deployment正在创建5个nginx:1.14.2的副本，在创建了3个的时候将nginx改为nginx:1.16.1，这个时候刚创建的3个将被杀死，并开始创建新的副本，不会等待nginx:1.14.2创建完成后在进行更新  </p><h4 id="Deployment标签不可变"><a href="#Deployment标签不可变" class="headerlink" title="Deployment标签不可变"></a>Deployment标签不可变</h4><p>在 API 版本 apps/v1 中，Deployment 标签选择算符在创建后是不可变的。</p><h3 id="回滚Deployment"><a href="#回滚Deployment" class="headerlink" title="回滚Deployment"></a>回滚Deployment</h3><p>Deployment的所有上线记录都会保留在系统中，以便随时回滚。  </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">~]#</span><span class="bash"> kubectl rollout <span class="built_in">history</span> deployment/nginx-deployment  <span class="comment"># 查看deployment/nginx-deployment历史本本</span></span></span><br><span class="line">deployment.extensions/nginx-deployment</span><br><span class="line">REVISION  CHANGE-CAUSE</span><br><span class="line">3         &lt;none&gt;</span><br><span class="line">4         &lt;none&gt;</span><br><span class="line"><span class="meta">#</span><span class="bash"> 可以看到有两个历史版本，但是change-cause是空，CHANGE-CAUSE 的内容是从 Deployment 的 kubernetes.io/change-cause 注解复制过来的。</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">~]#</span><span class="bash"> kubectl annotate deployment/nginx-deployment kubernetes.io/change-cause=<span class="string">&quot;image updated to 1.16.1&quot;</span></span>   </span><br><span class="line"><span class="meta">#</span><span class="bash">当前nginx版本为1.16.1，为change-cause设定</span></span><br><span class="line">deployment.extensions/nginx-deployment annotated</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">~]#</span><span class="bash"> kubectl rollout <span class="built_in">history</span> deployment/nginx-deployment</span></span><br><span class="line">deployment.extensions/nginx-deployment</span><br><span class="line">REVISION  CHANGE-CAUSE</span><br><span class="line">3         &lt;none&gt;</span><br><span class="line">4         image updated to 1.16.1</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">~]#</span><span class="bash"> kubectl rollout <span class="built_in">history</span> deployment/nginx-deployment --revision=4  <span class="comment">#查看对应版本的详细记录</span></span></span><br><span class="line">deployment.extensions/nginx-deployment with revision #4</span><br><span class="line">Pod Template:</span><br><span class="line">  Labels:       app=nginx</span><br><span class="line">        pod-template-hash=6f9d665859</span><br><span class="line">  Annotations:  kubernetes.io/change-cause: image updated to 1.16.1</span><br><span class="line">  Containers:</span><br><span class="line">   nginx:</span><br><span class="line">    Image:      nginx:1.16.1</span><br><span class="line">    Port:       80/TCP</span><br><span class="line">    Host Port:  0/TCP</span><br><span class="line">    Environment:        &lt;none&gt;</span><br><span class="line">    Mounts:     &lt;none&gt;</span><br><span class="line">  Volumes:      &lt;none&gt;</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">~]#</span><span class="bash"> kubectl rollout undo deployment/nginx-deployment --to-revision=3  <span class="comment">#回滚到版本3</span></span></span><br><span class="line">deployment.extensions/nginx-deployment rolled back</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">~]#</span><span class="bash"> kubectl describe deploy nginx-deployment  <span class="comment">#查看当前nginx-deployment描述信息</span></span></span><br><span class="line">Name:                   nginx-deployment</span><br><span class="line">Namespace:              default</span><br><span class="line">CreationTimestamp:      Sat, 02 Jul 2022 21:56:47 +0800</span><br><span class="line">Labels:                 app=nginx</span><br><span class="line">Annotations:            deployment.kubernetes.io/revision: 5</span><br><span class="line">                        kubectl.kubernetes.io/last-applied-configuration:</span><br><span class="line">                          &#123;&quot;apiVersion&quot;:&quot;apps/v1&quot;,&quot;kind&quot;:&quot;Deployment&quot;,&quot;metadata&quot;:&#123;&quot;annotations&quot;:&#123;&#125;,&quot;labels&quot;:&#123;&quot;app&quot;:&quot;nginx&quot;&#125;,&quot;name&quot;:&quot;nginx-deployment&quot;,&quot;namespace&quot;:&quot;d...</span><br><span class="line">Selector:               app=nginx</span><br><span class="line">Replicas:               3 desired | 3 updated | 3 total | 3 available | 0 unavailable</span><br><span class="line">StrategyType:           RollingUpdate</span><br><span class="line">MinReadySeconds:        0</span><br><span class="line">RollingUpdateStrategy:  25% max unavailable, 25% max surge</span><br><span class="line">Pod Template:</span><br><span class="line">  Labels:  app=nginx</span><br><span class="line">  Containers:</span><br><span class="line">   nginx:</span><br><span class="line">    Image:        nginx:1.14.2</span><br><span class="line">    Port:         80/TCP</span><br><span class="line">    Host Port:    0/TCP</span><br><span class="line">    Environment:  &lt;none&gt;</span><br><span class="line">    Mounts:       &lt;none&gt;</span><br><span class="line">  Volumes:        &lt;none&gt;</span><br><span class="line">Conditions:</span><br><span class="line">  Type           Status  Reason</span><br><span class="line">  ----           ------  ------</span><br><span class="line">  Available      True    MinimumReplicasAvailable</span><br><span class="line">  Progressing    True    NewReplicaSetAvailable</span><br><span class="line">OldReplicaSets:  &lt;none&gt;</span><br><span class="line">NewReplicaSet:   nginx-deployment-7fd6966748 (3/3 replicas created)</span><br><span class="line">Events:</span><br><span class="line">  Type    Reason             Age                From                   Message</span><br><span class="line">  ----    ------             ----               ----                   -------</span><br><span class="line">  Normal  ScalingReplicaSet  66s (x2 over 11h)  deployment-controller  Scaled up replica set nginx-deployment-7fd6966748 to 1</span><br><span class="line">  Normal  ScalingReplicaSet  63s (x2 over 11h)  deployment-controller  Scaled down replica set nginx-deployment-6f9d665859 to 2</span><br><span class="line">  Normal  ScalingReplicaSet  63s (x2 over 11h)  deployment-controller  Scaled up replica set nginx-deployment-7fd6966748 to 2</span><br><span class="line">  Normal  ScalingReplicaSet  61s (x2 over 12h)  deployment-controller  Scaled up replica set nginx-deployment-7fd6966748 to 3</span><br><span class="line">  Normal  ScalingReplicaSet  61s                deployment-controller  Scaled down replica set nginx-deployment-6f9d665859 to 1</span><br><span class="line">  Normal  ScalingReplicaSet  59s                deployment-controller  Scaled down replica set nginx-deployment-6f9d665859 to 0</span><br></pre></td></tr></table></figure><h3 id="弹性伸缩"><a href="#弹性伸缩" class="headerlink" title="弹性伸缩"></a>弹性伸缩</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">~]#</span><span class="bash"> kubectl scale deployment/nginx-deployment --replicas=2  <span class="comment">#将deployment的副本数调整为2</span></span></span><br><span class="line">deployment.extensions/nginx-deployment scaled</span><br></pre></td></tr></table></figure><h3 id="暂停与恢复上线"><a href="#暂停与恢复上线" class="headerlink" title="暂停与恢复上线"></a>暂停与恢复上线</h3><p>在deployment上线过程中可以将此过程进行暂停以及恢复，可以在暂停期间进行修改，暂停之前的状态将继续发挥作用，新的更新在暂停期间不会发挥任何作用。暂停期间不能进行回滚  </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">~]#</span><span class="bash"> kubectl rollout pause deployment/nginx-deployment  <span class="comment">#暂停</span></span></span><br><span class="line">deployment.extensions/nginx-deployment paused</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">~]#</span><span class="bash"> kubectl rollout resume  deployment/nginx-deployment  <span class="comment">#恢复</span></span></span><br><span class="line">deployment.extensions/nginx-deployment resumed</span><br></pre></td></tr></table></figure><h3 id="deployment状态"><a href="#deployment状态" class="headerlink" title="deployment状态"></a>deployment状态</h3><p>查看当前状态</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">~]#</span><span class="bash"> kubectl describe deploy nginx-deployment</span></span><br><span class="line">Name:                   nginx-deployment</span><br><span class="line">Namespace:              default</span><br><span class="line">CreationTimestamp:      Sat, 02 Jul 2022 21:56:47 +0800</span><br><span class="line">Labels:                 app=nginx</span><br><span class="line">Annotations:            deployment.kubernetes.io/revision: 5</span><br><span class="line">                        kubectl.kubernetes.io/last-applied-configuration:</span><br><span class="line">                          &#123;&quot;apiVersion&quot;:&quot;apps/v1&quot;,&quot;kind&quot;:&quot;Deployment&quot;,&quot;metadata&quot;:&#123;&quot;annotations&quot;:&#123;&#125;,&quot;labels&quot;:&#123;&quot;app&quot;:&quot;nginx&quot;&#125;,&quot;name&quot;:&quot;nginx-deployment&quot;,&quot;namespace&quot;:&quot;d...</span><br><span class="line">Selector:               app=nginx</span><br><span class="line">Replicas:               2 desired | 2 updated | 2 total | 2 available | 0 unavailable</span><br><span class="line">StrategyType:           RollingUpdate</span><br><span class="line">MinReadySeconds:        0</span><br><span class="line">RollingUpdateStrategy:  25% max unavailable, 25% max surge</span><br><span class="line">Pod Template:</span><br><span class="line">  Labels:  app=nginx</span><br><span class="line">  Containers:</span><br><span class="line">   nginx:</span><br><span class="line">    Image:        nginx:1.14.2</span><br><span class="line">    Port:         80/TCP</span><br><span class="line">    Host Port:    0/TCP</span><br><span class="line">    Environment:  &lt;none&gt;</span><br><span class="line">    Mounts:       &lt;none&gt;</span><br><span class="line">  Volumes:        &lt;none&gt;</span><br><span class="line">Conditions:</span><br><span class="line">  Type           Status  Reason</span><br><span class="line">  ----           ------  ------</span><br><span class="line">  Available      True    MinimumReplicasAvailable</span><br><span class="line">  Progressing    True    NewReplicaSetAvailable</span><br><span class="line">OldReplicaSets:  &lt;none&gt;</span><br><span class="line">NewReplicaSet:   nginx-deployment-7fd6966748 (2/2 replicas created)</span><br><span class="line">Events:</span><br><span class="line">  Type    Reason             Age                From                   Message</span><br><span class="line">  ----    ------             ----               ----                   -------</span><br><span class="line">  Normal  ScalingReplicaSet  50m (x2 over 12h)  deployment-controller  Scaled up replica set nginx-deployment-7fd6966748 to 1</span><br><span class="line">  Normal  ScalingReplicaSet  50m (x2 over 12h)  deployment-controller  Scaled down replica set nginx-deployment-6f9d665859 to 2</span><br><span class="line">  Normal  ScalingReplicaSet  50m (x2 over 12h)  deployment-controller  Scaled up replica set nginx-deployment-7fd6966748 to 2</span><br><span class="line">  Normal  ScalingReplicaSet  50m (x2 over 13h)  deployment-controller  Scaled up replica set nginx-deployment-7fd6966748 to 3</span><br><span class="line">  Normal  ScalingReplicaSet  50m                deployment-controller  Scaled down replica set nginx-deployment-6f9d665859 to 1</span><br><span class="line">  Normal  ScalingReplicaSet  50m                deployment-controller  Scaled down replica set nginx-deployment-6f9d665859 to 0</span><br><span class="line">  Normal  ScalingReplicaSet  46m (x3 over 12h)  deployment-controller  Scaled down replica set nginx-deployment-7fd6966748 to 2</span><br></pre></td></tr></table></figure><p>deployment有三种运行状态， Progressing（进行中）、 Complete（已完成）、 Failed（失败），该状态会被添加到conditions中  </p><h4 id="Progressing（进行中）"><a href="#Progressing（进行中）" class="headerlink" title="Progressing（进行中）"></a>Progressing（进行中）</h4><ul><li>type: Progressing</li><li>status: “True”</li><li>reason: NewReplicaSetCreated | reason: FoundNewReplicaSet | reason: ReplicaSetUpdated</li></ul><h4 id="Complete（已完成）"><a href="#Complete（已完成）" class="headerlink" title="Complete（已完成）"></a>Complete（已完成）</h4><ul><li>type: Progressing</li><li>status: True</li><li>reason: NewReplicaSetAvailable</li></ul><p>Progressing 会一直持续为true，即使副本的可用状态有变化，Progressing状态也不会发生变化  </p><h4 id="Failed（失败）"><a href="#Failed（失败）" class="headerlink" title="Failed（失败）"></a>Failed（失败）</h4><p>检测该状态的方法是在deployment的资源清单中加入截止时间参数.spec.progressDeadlineSeconds。超过该参数设定的时间范围将会把deployment的状态发送到conditions中  </p><ul><li>Type=Progressing</li><li>Status=False</li><li>Reason=ProgressDeadlineExceeded</li></ul><h3 id="deployment-yaml参数介绍"><a href="#deployment-yaml参数介绍" class="headerlink" title="deployment yaml参数介绍"></a>deployment yaml参数介绍</h3><p>相关参数查看官方文档<a href="https://kubernetes.io/docs/reference/kubernetes-api/workload-resources/deployment-v1/">deployment API</a>、<a href="https://kubernetes.io/zh-cn/docs/reference/kubernetes-api/common-definitions/object-meta/">公共定义ObjectMeta</a>、<a href="https://kubernetes.io/docs/reference/kubernetes-api/workload-resources/pod-v1/">pod API</a>  </p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">extensions/v1beta1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">annotations:</span></span><br><span class="line">    <span class="attr">deployment.kubernetes.io/revision:</span> <span class="string">&quot;5&quot;</span>   <span class="comment">#当前deployment版本序号</span></span><br><span class="line">    <span class="attr">kubectl.kubernetes.io/last-applied-configuration:</span> <span class="string">|</span></span><br><span class="line"><span class="string">      &#123;&quot;apiVersion&quot;:&quot;apps/v1&quot;,&quot;kind&quot;:&quot;Deployment&quot;,&quot;metadata&quot;:&#123;&quot;annotations&quot;:&#123;&#125;,&quot;labels&quot;:&#123;&quot;app&quot;:&quot;nginx&quot;&#125;,&quot;name&quot;:&quot;nginx-deployment&quot;,&quot;namespace&quot;:&quot;default&quot;&#125;,&quot;spec&quot;:&#123;&quot;replicas&quot;:3,&quot;selector&quot;:&#123;&quot;matchLabels&quot;:</span></span><br><span class="line"><span class="string"></span>&#123;<span class="string">&quot;app&quot;</span><span class="string">:&quot;nginx&quot;</span>&#125;<span class="string">&#125;,&quot;template&quot;:&#123;&quot;metadata&quot;:&#123;&quot;labels&quot;:&#123;&quot;app&quot;:&quot;nginx&quot;&#125;&#125;,&quot;spec&quot;:&#123;&quot;containers&quot;:[&#123;&quot;image&quot;:&quot;nginx:1.14.2&quot;,&quot;name&quot;:&quot;nginx&quot;,&quot;ports&quot;:[&#123;&quot;containerPort&quot;:80&#125;]&#125;]&#125;&#125;&#125;&#125;</span></span><br><span class="line">  <span class="attr">creationTimestamp:</span> <span class="string">&quot;2022-07-02T13:56:47Z&quot;</span>  </span><br><span class="line">  <span class="attr">generation:</span> <span class="number">9</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">nginx</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">nginx-deployment</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">default</span></span><br><span class="line">  <span class="attr">resourceVersion:</span> <span class="string">&quot;155887&quot;</span></span><br><span class="line">  <span class="attr">selfLink:</span> <span class="string">/apis/extensions/v1beta1/namespaces/default/deployments/nginx-deployment</span></span><br><span class="line">  <span class="attr">uid:</span> <span class="string">9d3bea0f-dfd8-4787-9448-b2e91e46e4a8</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">progressDeadlineSeconds:</span> <span class="number">600</span>   <span class="comment">#进行状态截止时间</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">2</span>                    <span class="comment">#副本数</span></span><br><span class="line">  <span class="attr">revisionHistoryLimit:</span> <span class="number">10</span>       <span class="comment">#历史版本保存数量</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">app:</span> <span class="string">nginx</span></span><br><span class="line">  <span class="attr">strategy:</span>                     <span class="comment">#pod更新策略，有rollingUpdate与Recreate（创建新pod前会将所有pod先杀死）两种</span></span><br><span class="line">    <span class="attr">rollingUpdate:</span></span><br><span class="line">      <span class="attr">maxSurge:</span> <span class="number">25</span><span class="string">%</span>             <span class="comment">#可以超出预期pod量的大小</span></span><br><span class="line">      <span class="attr">maxUnavailable:</span> <span class="number">25</span><span class="string">%</span>       <span class="comment">#最大不可用百分比</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">RollingUpdate</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">creationTimestamp:</span> <span class="literal">null</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">app:</span> <span class="string">nginx</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">image:</span> <span class="string">nginx:1.14.2</span></span><br><span class="line">        <span class="attr">imagePullPolicy:</span> <span class="string">IfNotPresent</span>  <span class="comment">#镜像下载策略  IfNotPresent：如果本地有就不检查，如果没有就拉取</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">nginx</span></span><br><span class="line">        <span class="attr">ports:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">80</span></span><br><span class="line">          <span class="attr">protocol:</span> <span class="string">TCP</span></span><br><span class="line">        <span class="attr">resources:</span> &#123;&#125;    <span class="comment">#容器所需的计算资源</span></span><br><span class="line">        <span class="attr">terminationMessagePath:</span> <span class="string">/dev/termination-log</span></span><br><span class="line">        <span class="attr">terminationMessagePolicy:</span> <span class="string">File</span></span><br><span class="line">      <span class="attr">dnsPolicy:</span> <span class="string">ClusterFirst</span></span><br><span class="line">      <span class="attr">restartPolicy:</span> <span class="string">Always</span>    <span class="comment">#重启策略</span></span><br><span class="line">      <span class="attr">schedulerName:</span> <span class="string">default-scheduler</span></span><br><span class="line">      <span class="attr">securityContext:</span> &#123;&#125;</span><br><span class="line">      <span class="attr">terminationGracePeriodSeconds:</span> <span class="number">30</span></span><br><span class="line"><span class="attr">status:</span></span><br><span class="line">  <span class="attr">availableReplicas:</span> <span class="number">2</span></span><br><span class="line">  <span class="attr">conditions:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">lastTransitionTime:</span> <span class="string">&quot;2022-07-02T13:58:44Z&quot;</span></span><br><span class="line">    <span class="attr">lastUpdateTime:</span> <span class="string">&quot;2022-07-02T13:58:44Z&quot;</span></span><br><span class="line">    <span class="attr">message:</span> <span class="string">Deployment</span> <span class="string">has</span> <span class="string">minimum</span> <span class="string">availability.</span></span><br><span class="line">    <span class="attr">reason:</span> <span class="string">MinimumReplicasAvailable</span></span><br><span class="line">    <span class="attr">status:</span> <span class="string">&quot;True&quot;</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">Available</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">lastTransitionTime:</span> <span class="string">&quot;2022-07-03T03:31:18Z&quot;</span></span><br><span class="line">    <span class="attr">lastUpdateTime:</span> <span class="string">&quot;2022-07-03T03:31:18Z&quot;</span></span><br><span class="line">    <span class="attr">message:</span> <span class="string">ReplicaSet</span> <span class="string">&quot;nginx-deployment-7fd6966748&quot;</span> <span class="string">has</span> <span class="string">successfully</span> <span class="string">progressed.</span></span><br><span class="line">    <span class="attr">reason:</span> <span class="string">NewReplicaSetAvailable</span></span><br><span class="line">    <span class="attr">status:</span> <span class="string">&quot;True&quot;</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">Progressing</span></span><br><span class="line">  <span class="attr">observedGeneration:</span> <span class="number">9</span></span><br><span class="line">  <span class="attr">readyReplicas:</span> <span class="number">2</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">2</span></span><br><span class="line">  <span class="attr">updatedReplicas:</span> <span class="number">2</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://s2.loli.net/2022/06/27/5UbYtS64yAIPXzM.jpg&quot; alt=&quot;k8s.jpg&quot;&gt;  &lt;/p&gt;</summary>
    
    
    
    <category term="Kubernetes" scheme="http://example.com/categories/Kubernetes/"/>
    
    
    <category term="controller" scheme="http://example.com/tags/controller/"/>
    
  </entry>
  
  <entry>
    <title>Namespace</title>
    <link href="http://example.com/2022/06/29/Linux/Linux%E4%B9%8BNamespace/"/>
    <id>http://example.com/2022/06/29/Linux/Linux%E4%B9%8BNamespace/</id>
    <published>2022-06-29T13:24:38.000Z</published>
    <updated>2022-07-04T04:58:56.942Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://i.loli.net/2021/08/02/cX51yi4KrLYRfJU.jpg" alt="linux.jpg">  </p><span id="more"></span><h1 id="Namespace"><a href="#Namespace" class="headerlink" title="Namespace"></a>Namespace</h1><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>Linux namespace是Kernel的一个功能，可以将一些系统资源进行隔离。Namespace 是 Linux 内核用来隔离内核资源的方式。通过 namespace 可以让一些进程只能看到与自己相关的一部分资源，而另外一些进程也只能看到与它们自己相关的资源，这两拨进程根本就感觉不到对方的存在。Linux namespaces 是对全局系统资源的一种封装隔离，使得处于不同 namespace 的进程拥有独立的全局系统资源，改变一个 namespace 中的系统资源只会影响当前 namespace 里的进程，对其他 namespace 中的进程没有影响。  </p><p>用户可以创建指定类型的namespace，并将程序放入该namespace中，表示从前的系统中隔离出一个进程的运行环境，在此运行环境中的进程将认为自己拥有该namespace中的独立资源。 实际即使没有手动创建namespace，Linux系统开机后也会创建一个默认的namespace，称为 <strong>root namespace</strong>，所有进程默认都运行在root namespace中，每个进程都认为自己拥有该namespace中所有的全局资源。<br>每一个namespace都是基于当前内核，<strong>root namespace直接基于内核</strong>，<strong>用户创建的namespace运行环境基于当前所在的namespace</strong>，不直接基于内核是因为namespace可能会修改某些运行时内核参数。  </p><h2 id="namespace资源类型"><a href="#namespace资源类型" class="headerlink" title="namespace资源类型"></a>namespace资源类型</h2><p>每种资源都是随着Linux内核版本更新逐渐加入的，所以有些内核版本可能不具备某种namespace  </p><table><thead><tr><th align="center">namespace类型</th><th align="center">隔离的资源</th></tr></thead><tbody><tr><td align="center">IPC</td><td align="center">SystemV IPC(信号量、消息队列、共享内存)和POSIX消息队列</td></tr><tr><td align="center">Network</td><td align="center">网络设备、网络栈、端口</td></tr><tr><td align="center">Mount</td><td align="center">文件系统挂载点</td></tr><tr><td align="center">PID</td><td align="center">进程编号</td></tr><tr><td align="center">User</td><td align="center">用户和用户组</td></tr><tr><td align="center">UTS</td><td align="center">主机名和NIS域名</td></tr><tr><td align="center">Cgroup</td><td align="center">Cgroup的根目录</td></tr></tbody></table><h2 id="查看进程所在的namespace"><a href="#查看进程所在的namespace" class="headerlink" title="查看进程所在的namespace"></a>查看进程所在的namespace</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">]# ll /proc/$$/ns  &amp;&amp; ll /proc/1/ns</span><br><span class="line">total 0</span><br><span class="line">lrwxrwxrwx 1 root root 0 Jul  4 12:08 ipc -&gt; ipc:[4026531839]</span><br><span class="line">lrwxrwxrwx 1 root root 0 Jul  4 12:08 mnt -&gt; mnt:[4026531840]</span><br><span class="line">lrwxrwxrwx 1 root root 0 Jul  4 11:35 net -&gt; net:[4026531956]</span><br><span class="line">lrwxrwxrwx 1 root root 0 Jul  4 11:35 pid -&gt; pid:[4026531836]</span><br><span class="line">lrwxrwxrwx 1 root root 0 Jul  4 12:08 user -&gt; user:[4026531837]</span><br><span class="line">lrwxrwxrwx 1 root root 0 Jul  4 12:08 uts -&gt; uts:[4026531838]</span><br><span class="line">total 0</span><br><span class="line">lrwxrwxrwx 1 root root 0 Jul  4 11:18 ipc -&gt; ipc:[4026531839]</span><br><span class="line">lrwxrwxrwx 1 root root 0 Jul  4 11:18 mnt -&gt; mnt:[4026531840]</span><br><span class="line">lrwxrwxrwx 1 root root 0 Jun 30 23:28 net -&gt; net:[4026531956]</span><br><span class="line">lrwxrwxrwx 1 root root 0 Jun 30 23:28 pid -&gt; pid:[4026531836]</span><br><span class="line">lrwxrwxrwx 1 root root 0 Jul  4 11:18 user -&gt; user:[4026531837]</span><br><span class="line">lrwxrwxrwx 1 root root 0 Jul  4 11:18 uts -&gt; uts:[4026531838]</span><br></pre></td></tr></table></figure><p>路径下的文件都是软连接，指向的文件名中的数字表示namespace的inode，如果不同进程对应的文件的inode相同说明两个进程是在同一个namespace中。  </p><h2 id="Cgroup"><a href="#Cgroup" class="headerlink" title="Cgroup"></a>Cgroup</h2><p>Cgroups(Control Groups) 是Linux内核提供的一种可以限制、记录、隔离进程组（process groups）所使用的物理资源（如：cpu,memory,IO等等）的机制。可以对一组进程及将来的子进程的资源的限制、控制和统计的能力，这些资源包括CPU，内存，存储，网络等。通过Cgroups，可以方便的限制某个进程的资源占用，并且可以实时的监控进程的监控和统计信息。Cgroups也是LXC为实现虚拟化所使用的资源管理手段，可以说没有cgroups就没有LXC (Linux Container)。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">]#</span><span class="bash"> ll /sys/fs/cgroup/</span></span><br><span class="line">total 0</span><br><span class="line">drwxr-xr-x 2 root root  0 Jun 30 23:27 blkio                        #​​​定​​​输​​​入​​​/输​​​出​​​限​​​制​​​</span><br><span class="line">lrwxrwxrwx 1 root root 11 Jun 30 23:27 cpu -&gt; cpu,cpuacct           #使​​​用​​​调​​​度​​​程​​​序​​​提​​​供​​​对​​​CPU的​​​cgroup任​​​务访​​问</span><br><span class="line">​lrwxrwxrwx 1 root root 11 Jun 30 23:27 cpuacct -&gt; cpu,cpuacct       #自​​​动​​​生​​​成​​​cgroup中​​​任​​​务​​​所​​​使​​​用​​​的​​​CPU报​​​告</span><br><span class="line">drwxr-xr-x 3 root root  0 Jun 30 23:27 cpu,cpuacct</span><br><span class="line">drwxr-xr-x 2 root root  0 Jun 30 23:27 cpuset                       #​​​为​​​cgroup中​​​的​​​任​​​务​​​分​​​配​​​独​​​立​​​CPU（在​​​多​​​核​​​系​​​统​​​）和​​​内​​​存​​​节​​​点​​​</span><br><span class="line">drwxr-xr-x 2 root root  0 Jun 30 23:27 devices                      #允​​​许​​​或​​​者​​​拒​​​绝​​​ cgroup 中​​​的​​​任​​​务​​​访​​​问​​​设​​​备</span><br><span class="line">drwxr-xr-x 2 root root  0 Jun 30 23:27 freezer                      #挂​​​起​​​或​​​者​​​恢​​​复​​​ cgroup 中​​​的​​​任​​​务</span><br><span class="line">drwxr-xr-x 2 root root  0 Jun 30 23:27 hugetlb                      #主要针对于HugeTLB系统进行限制，这是一个大页文件系统</span><br><span class="line">drwxr-xr-x 3 root root  0 Jun 30 23:27 memory                       #设​​​定​​​ cgroup 中​​​任​​​务​​​使​​​用​​​的​​​内​​​存​​​限​​​制​​​，并​​​自​​​动​​​生​​​成​​​​​内​​​存​​​资​​​源使用​​​报​​​告</span><br><span class="line">lrwxrwxrwx 1 root root 16 Jun 30 23:27 net_cls -&gt; net_cls,net_prio</span><br><span class="line">drwxr-xr-x 2 root root  0 Jun 30 23:27 net_cls,net_prio</span><br><span class="line">lrwxrwxrwx 1 root root 16 Jun 30 23:27 net_prio -&gt; net_cls,net_prio</span><br><span class="line">drwxr-xr-x 2 root root  0 Jun 30 23:27 perf_event</span><br><span class="line">drwxr-xr-x 2 root root  0 Jun 30 23:27 pids</span><br><span class="line">drwxr-xr-x 4 root root  0 Jun 30 23:27 systemd</span><br></pre></td></tr></table></figure><h3 id="Cgroup分配限制资源"><a href="#Cgroup分配限制资源" class="headerlink" title="Cgroup分配限制资源"></a>Cgroup分配限制资源</h3><p>拿menory为例，进入<code>/sys/fs/cgroup/memory</code>下创建<code>test</code>，这样就相当创建一个menory的控制组，进入到test下会发现自动创建了许多文件，每个文件对应不同的限制条件，再将需要进行限制进程的PID添加到tasks中，这样就对这个进程的menory进行了限制，需要删除的话将这个目录删除即可  </p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://i.loli.net/2021/08/02/cX51yi4KrLYRfJU.jpg&quot; alt=&quot;linux.jpg&quot;&gt;  &lt;/p&gt;</summary>
    
    
    
    <category term="Linux" scheme="http://example.com/categories/Linux/"/>
    
    
    <category term="namespace" scheme="http://example.com/tags/namespace/"/>
    
  </entry>
  
  <entry>
    <title>5-K8S核心技术pod</title>
    <link href="http://example.com/2022/06/29/K8s/5-K8S%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AFpod/"/>
    <id>http://example.com/2022/06/29/K8s/5-K8S%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AFpod/</id>
    <published>2022-06-29T02:05:09.000Z</published>
    <updated>2022-07-02T14:37:30.250Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://s2.loli.net/2022/06/27/5UbYtS64yAIPXzM.jpg" alt="k8s.jpg">  </p><span id="more"></span><h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>pod是k8s中最小的单元，是一个抽象的概念，是一组容器的集合，是资源对象模型中用户创建或部署的最小的资源对象模型，也是k8s上运行容器化应用的资源对象，其他对象都是用来支撑或扩展pod对象功能的。每一个pod都有一个特殊的被称为“根容器”的pause容器，pause容器对应的镜像属于k8s平台的一部分。<br>pause容器又叫infra容器，后面将介绍改容器的作用。<br><img src="/2022/06/29/K8s/5-K8S%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AFpod/pod.png" alt="pod">  </p><h2 id="pod基本概念"><a href="#pod基本概念" class="headerlink" title="pod基本概念"></a>pod基本概念</h2><ul><li>最小部署单元  </li><li>pod是由一个或多个容器组成  </li><li>一个pod内的容器共享网络命名空间  </li><li>pod是短暂的  </li><li>每个pod包含一个或多个紧密相关的用户业务容器  </li></ul><h2 id="pod存在的意义"><a href="#pod存在的意义" class="headerlink" title="pod存在的意义"></a>pod存在的意义</h2><ol><li>容器是但进程设计，一个容器运行一个应用进程  </li><li>pod是多进程设计，一个pod中可以有多个容器，可以运行多个应用进程  </li><li>pod的存在是为了亲密作用  <ul><li>多应用之间进行交互  </li><li>网络之间的调用  </li><li>多个应用之间需要频繁调用  </li></ul></li></ol><p>pod的设计理念是支持多个容器在pod中共享网络地址和文件系统，可以通过进程通信和文件共享这种简单高效的方式完成组合。可以将pod看做是运行在k8s上的小机器人，k8s的业务可以分为以下几种：  </p><ul><li>长期伺服型：long-running  </li><li>批处理：batch  </li><li>节点后台支撑型：node-deamon  </li><li>有状态应用型：stateful application<br>对应的控制器分别为:deployment、job、deamonSet、statefulSet  </li></ul><h2 id="pod实现机制"><a href="#pod实现机制" class="headerlink" title="pod实现机制"></a>pod实现机制</h2><p>容器本身之间是隔离的，一般通过namespace和group进行隔离，而pod中共享网络、共享存储是通过pause容器来实现的  </p><h3 id="pause容器"><a href="#pause容器" class="headerlink" title="pause容器"></a>pause容器</h3><p>pause容器又叫infra容器，每个pod中都会有一个pause容器，其他容器称为业务容器，这些业务容器共享pause容器的网络和volume挂载卷；因此容器之间的通信和数据交换更为高效，可以充分利用这一点将一组密切关系的服务放在一个pod中；同一个pod中的容器之间使用localhost就能互相通信。这样pause容器就实现了pod内的共享网络与共享存储。  </p><h3 id="pause提供的功能"><a href="#pause提供的功能" class="headerlink" title="pause提供的功能"></a>pause提供的功能</h3><ul><li><em><strong>PID命名空间：作为Pod的“init进程”（pid=1，也即所有其它容器的父容器，所有其它进程的父进程），负责僵尸进程的回收，1.8之后的版本默认不共享PID</strong></em></li><li>网络命名空间：pod中的多个通容器可以访问同一个IP和端口范围  </li><li>IPC命名空间：pod中的多个容器能够使用systemV IPC或POSIX消息队列进行通信  </li><li>UTS命名空间：pod中的多个容器共享一个主机名、volume  </li></ul><h3 id="pause代码"><a href="#pause代码" class="headerlink" title="pause代码"></a>pause代码</h3><p><a href="https://github.com/kubernetes/kubernetes/blob/master/build/pause/linux/pause.c">github pause代码</a>  </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Copyright 2016 The Kubernetes Authors.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);</span></span><br><span class="line"><span class="comment">you may not use this file except in compliance with the License.</span></span><br><span class="line"><span class="comment">You may obtain a copy of the License at</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    http://www.apache.org/licenses/LICENSE-2.0</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Unless required by applicable law or agreed to in writing, software</span></span><br><span class="line"><span class="comment">distributed under the License is distributed on an &quot;AS IS&quot; BASIS,</span></span><br><span class="line"><span class="comment">WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span></span><br><span class="line"><span class="comment">See the License for the specific language governing permissions and</span></span><br><span class="line"><span class="comment">limitations under the License.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;signal.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/wait.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> STRINGIFY(x) #x</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> VERSION_STRING(x) STRINGIFY(x)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> VERSION</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> VERSION HEAD</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sigdown</span><span class="params">(<span class="keyword">int</span> signo)</span> </span>&#123;</span><br><span class="line">  psignal(signo, <span class="string">&quot;Shutting down, got signal&quot;</span>);</span><br><span class="line">  <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sigreap</span><span class="params">(<span class="keyword">int</span> signo)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">while</span> (waitpid(<span class="number">-1</span>, <span class="literal">NULL</span>, WNOHANG) &gt; <span class="number">0</span>)</span><br><span class="line">    ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> i;</span><br><span class="line">  <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt; argc; ++i) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!strcasecmp(argv[i], <span class="string">&quot;-v&quot;</span>)) &#123;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;pause.c %s\n&quot;</span>, VERSION_STRING(VERSION));</span><br><span class="line">      <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (getpid() != <span class="number">1</span>)</span><br><span class="line">    <span class="comment">/* Not an error because pause sees use outside of infra containers. */</span></span><br><span class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;Warning: pause should be the first process\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (sigaction(SIGINT, &amp;(struct sigaction)&#123;.sa_handler = sigdown&#125;, <span class="literal">NULL</span>) &lt; <span class="number">0</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">if</span> (sigaction(SIGTERM, &amp;(struct sigaction)&#123;.sa_handler = sigdown&#125;, <span class="literal">NULL</span>) &lt; <span class="number">0</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">  <span class="keyword">if</span> (sigaction(SIGCHLD, &amp;(struct sigaction)&#123;.sa_handler = sigreap,</span><br><span class="line">                                             .sa_flags = SA_NOCLDSTOP&#125;,</span><br><span class="line">                <span class="literal">NULL</span>) &lt; <span class="number">0</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (;;)</span><br><span class="line">    pause();</span><br><span class="line">  <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;Error: infinite loop terminated\n&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">42</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="共享namespace"><a href="#共享namespace" class="headerlink" title="共享namespace"></a>共享namespace</h3><p>在Linux系统中，创建一个新的子进程的时候，该进程就会集成父进程的namespace，k8s的pod就是模拟这种方式。创建pod时，里面第一个被创建的容器永远都是pause容器（系统自动创建），pause容器创建完成后才会创建用户业务容器，系统会为pause创建namespace，同一个pod内创建的业务容器都加入到pause容器的namespace，这样就处于同一个namespace中。从pause代码中可以发现最后是一个死循环+pause函数调用，pause函数的作用是让当前进程暂停，因为要维持namespace的存在就必须有一个属于这个namespace的进程或者文件存在，所以为了维护Pod里面pause创建的Namespace，pause就必须一直存在。  </p><h3 id="充当系统init进程"><a href="#充当系统init进程" class="headerlink" title="充当系统init进程"></a>充当系统init进程</h3><p>在Linux系统中，pid=1的进程我们称之为“init”进程，是内核启动的第一个用户级进程，现在比较新的Linux发行版的init进程就是systemd进程。这个进程有许多工作，其中一个重要工作就是负责“收养孤儿进程”，防止产生太多僵尸进程。简单介绍一下相关的基本概念：Linux系统维护了一个进程表，记录每个进程的状态信息和退出码（exit code），当一个进程退出时，它在表中的信息会一直保留，直到其父进程调用wait（包括waitpid）获取其退出码。所谓僵尸进程就是进程已经退出了，但它的信息还在进程表里面。正常情况下，进程退出时父进程会马上查询该表，并回收子进程的相关资源，所以僵尸进程的持续状态一般都很短。但如果（1）父进程启动子进程之后没有调用wait或者（2）父进程先于子进程挂掉了，那子进程就会变成僵尸进程。如果是第2种情况，即父进程先于子进程死掉了，那操作系统就会把init进程设置为该父进程所有子进程的父进程，即init进程收养了该父进程的所有子进程。当这些子进程退出时，init进程就会充当父进程的角色，从而避免长时间的僵尸进程。但对于第1种情况，一般认为是代码有缺陷，这种情况因为子进程的父进程存在（只是没有调用wait而已），init进程是不会做处理的。此时子进程会成为僵尸进程长期存在，如果要消除这种僵尸进程，只能kill掉父进程。<br>而pause容器的第二个功能就是充当这个init进程，负责回收僵尸进程。从上面的代码可以看到，pause启动的时候会判断自己的pid是否为1。不过如果要实现该功能，则Pod内的所有容器必须和pause共享PID Namespace。在K8s 1.8版本之前默认是开启PID Namespace共享的，之后版本默认关闭了，用户可以通过–docker-disable-shared-pid=true/false自行设置。开启PID Namespace的好处就是可以享受pause回收僵尸进程的功能，并且因为容器同处于一个PID Namespace，进程间通信也会变得非常方便。但也有一些弊端，比如有些容器进程的PID也必须为1（比如systemd进程），这就会和pause容器产生冲突，另外也会涉及一些安全问题。  </p><h2 id="影响pod调度的属性"><a href="#影响pod调度的属性" class="headerlink" title="影响pod调度的属性"></a>影响pod调度的属性</h2><h3 id="根据request进行调度"><a href="#根据request进行调度" class="headerlink" title="根据request进行调度"></a>根据request进行调度</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">resources:</span> <span class="comment">#资源管理</span></span><br><span class="line">  <span class="attr">requests:</span> <span class="comment">#容器运行时，最低资源需求，也就是说最少需要多少资源容器才能正常运行</span></span><br><span class="line">    <span class="attr">cpu:</span> <span class="number">0.1</span> <span class="comment">#CPU资源（核数），两种方式，浮点数或者是整数+m，0.1=100m，最少值为0.001核（1m）</span></span><br><span class="line">    <span class="attr">memory:</span> <span class="string">32Mi</span> <span class="comment">#内存使用量</span></span><br><span class="line">  <span class="attr">limits:</span> <span class="comment">#资源限制，表示最大占用的资源</span></span><br><span class="line">    <span class="attr">cpu:</span> <span class="number">0.5</span></span><br><span class="line">    <span class="attr">memory:</span> <span class="string">32Mi</span></span><br></pre></td></tr></table></figure><h3 id="根据nodeSelector调度"><a href="#根据nodeSelector调度" class="headerlink" title="根据nodeSelector调度"></a>根据nodeSelector调度</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">nodeSelector:</span></span><br><span class="line">    <span class="attr">KEY:</span> <span class="string">VALUE</span>   <span class="comment">#会将pod调度到设定有该标签的node上</span></span><br></pre></td></tr></table></figure><p>Label 是 Kubernetes 系统中另一个核心概念。一个 Label 是一个 key=value 的键值对，其中 key 与 value 由用户自己指 定。Label 可以附加到各种资源对象上，如 Node、Pod、Service、RC，一个资源对象可以定义任意数量的 Label， 同一个 Label 也可以被添加到任意数量的资源对象上，Label 通常在资源对象定义时确定，也可以在对象创建后动态 添加或删除。  </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 为node节点设定标签</span></span><br><span class="line">kubectl label node NODE_NAME KEY: VALUE</span><br></pre></td></tr></table></figure><h3 id="节点亲和性-nodeAffinity"><a href="#节点亲和性-nodeAffinity" class="headerlink" title="节点亲和性 nodeAffinity"></a>节点亲和性 nodeAffinity</h3><p><strong>硬亲和</strong>  </p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">affinity:</span> </span><br><span class="line">  <span class="attr">nodeAffinity:</span> </span><br><span class="line">    <span class="attr">requiredDuringSchedulingIgnoredDuringExecution:</span> </span><br><span class="line">      <span class="attr">nodeSelectorTerms:</span>   <span class="comment">#写多个满足其中一条就可以</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">matchExpressions:</span>  <span class="comment">#可以写多个满足必须同时满足</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">key:</span> <span class="string">KEY</span> <span class="comment">#node节点的标签 </span></span><br><span class="line">              <span class="attr">operator:</span> <span class="string">In</span>  <span class="comment"># 运算关系</span></span><br><span class="line">              <span class="attr">values:</span> </span><br><span class="line">                <span class="bullet">-</span> <span class="string">VALUE1</span> </span><br><span class="line">                <span class="bullet">-</span> <span class="string">VALUE2</span> </span><br></pre></td></tr></table></figure><p>通过<strong>required</strong>DuringSchedulingIgnoredDuringExecution硬亲和，约束条件必须满足。<br>上面的例子则表示为pod将会调度到标签KEY为VALUE1或VALUE2的节点上。  </p><p><strong>软亲和</strong>  </p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">affinity:</span></span><br><span class="line">  <span class="attr">nodeAffinity:</span></span><br><span class="line">    <span class="attr">preferredDuringSchedulingIgnoredDuringExecution:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">weight:</span>  <span class="number">60</span>  <span class="comment">#权重，1-100越大优先级越高</span></span><br><span class="line">      <span class="attr">preference:</span></span><br><span class="line">        <span class="attr">matchExpressions:</span></span><br><span class="line">        <span class="bullet">-</span> &#123;<span class="attr">key:</span> <span class="string">xxx</span>, <span class="attr">operator:</span> <span class="string">In</span>, <span class="attr">values:</span> <span class="string">xxx</span>&#125;</span><br><span class="line">    <span class="bullet">-</span> <span class="attr">weight:</span>  <span class="number">30</span></span><br><span class="line">      <span class="attr">preference:</span></span><br><span class="line">        <span class="attr">matchExpressions:</span></span><br><span class="line">        <span class="bullet">-</span> &#123;<span class="attr">key:</span> <span class="string">xxx</span>, <span class="attr">operator:</span> <span class="string">Exists</span>, <span class="attr">values:</span> <span class="string">xxx</span>&#125;</span><br></pre></td></tr></table></figure><p><strong>preferred</strong>DuringSchedulingIgnoredDuringExecution软亲和为尝试满足约束条件  </p><table><thead><tr><th align="center">operator参数</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">In</td><td align="center">label 的值在某个列表中</td></tr><tr><td align="center">NotIn</td><td align="center">label 的值不在某个列表中</td></tr><tr><td align="center">Gt</td><td align="center">label 的值大于某个值</td></tr><tr><td align="center">Lt</td><td align="center">label 的值小于某个值</td></tr><tr><td align="center">Exists</td><td align="center">某个 label 存在</td></tr><tr><td align="center">DoesNotExist</td><td align="center">某个 label 不存在</td></tr></tbody></table><h2 id="污点与污点容忍"><a href="#污点与污点容忍" class="headerlink" title="污点与污点容忍"></a>污点与污点容忍</h2><h3 id="污点"><a href="#污点" class="headerlink" title="污点"></a>污点</h3><p>使用kubectl taint可以为node设置污点，node被设置污点后将会与pod存在一种互斥关系，可以让node拒绝pod的调度，甚至将已经存在的pod驱逐出去<br>污点的组成  KEY=VALUE:EFFECT  其中value可以为空，EFFECT描述污点的作用，有以下三个选项：  </p><ul><li>NoSchedule ： 不会将pod调度到具有该污点的node上 </li><li>PreferNoSchedule：尽量避免将pod调度到有该污点的node上  </li><li>NoExecute：不会将pod调度到有该污点的node上，同时会将node上已有的pod驱逐  </li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 设置污点</span></span><br><span class="line">kubectl taint nodes NODENAME  KEY=VAULE:EFFECT</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看node的污点</span></span><br><span class="line">kubectl describe node NODENAME|grep Taint</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 去除污点</span></span><br><span class="line">kubectl taint nodes NODENAME KEY:EFFECT-</span><br></pre></td></tr></table></figure><h3 id="污点容忍"><a href="#污点容忍" class="headerlink" title="污点容忍"></a>污点容忍</h3><p>设置了污点的node和pod之间产生互斥关系，pod将一定程度上不会调度到这个node上，但可以为pod设置容忍度，设置了容忍度的pod将会容忍指定的污点，从而可以调度到该node上，污点与污点容忍组合使用，避免pod调度到不适合的node上。每个node可以有一个或多个污点，不能忍受这些污点的pod是不会被节点接受的  </p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">tolerations:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">key:</span> <span class="string">“key1”</span>            <span class="comment">#要与污点key保持一致才会生效</span></span><br><span class="line">    <span class="attr">operator:</span> <span class="string">“Equal”</span>    </span><br><span class="line">    <span class="attr">value:</span> <span class="string">“value1”</span>      <span class="comment">#要与污点value保持一致才会生效</span></span><br><span class="line">    <span class="attr">effect:</span> <span class="string">“NoExecute”</span></span><br><span class="line">    <span class="attr">tolerationSeconds:</span> <span class="number">3600</span>  <span class="comment"># 表示pod即使被驱逐可以继续运行时间</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">key:</span> <span class="string">“key1”</span></span><br><span class="line">    <span class="attr">operator:</span> <span class="string">“Equal”</span></span><br><span class="line">    <span class="attr">value:</span> <span class="string">“value1”</span></span><br><span class="line">    <span class="attr">effect:</span> <span class="string">“NoExecute”</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">key:</span> <span class="string">“key2”</span></span><br><span class="line">    <span class="attr">operator:</span> <span class="string">“Exists”</span>   <span class="comment">#若为Exists，则会忽略value</span></span><br><span class="line">    <span class="attr">effect:</span> <span class="string">“NoSchedule”</span></span><br></pre></td></tr></table></figure><p>当有多个master时，防止资源浪费，可以进行设置，让master也启动pod</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl taint nodes NODENAME node-role.kubernetes.io/master=:PreferNoSchedule</span><br></pre></td></tr></table></figure><p>当node有多个污点时，pod必须忍受所有的污点才可以调度到该node </p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://s2.loli.net/2022/06/27/5UbYtS64yAIPXzM.jpg&quot; alt=&quot;k8s.jpg&quot;&gt;  &lt;/p&gt;</summary>
    
    
    
    <category term="Kubernetes" scheme="http://example.com/categories/Kubernetes/"/>
    
    
    <category term="pod" scheme="http://example.com/tags/pod/"/>
    
  </entry>
  
  <entry>
    <title>4-YAML文件介绍</title>
    <link href="http://example.com/2022/06/29/K8s/4-YAML%E6%96%87%E4%BB%B6%E4%BB%8B%E7%BB%8D/"/>
    <id>http://example.com/2022/06/29/K8s/4-YAML%E6%96%87%E4%BB%B6%E4%BB%8B%E7%BB%8D/</id>
    <published>2022-06-28T16:48:35.000Z</published>
    <updated>2022-08-23T02:06:23.245Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://s2.loli.net/2022/06/27/5UbYtS64yAIPXzM.jpg" alt="k8s.jpg">  </p><span id="more"></span><h1 id="YAMl"><a href="#YAMl" class="headerlink" title="YAMl"></a>YAMl</h1><p>跳转至 <a href="/2022/03/24/YAML/YAML%E5%9F%BA%E7%A1%80/" title="YAML基础">YAML基础</a> 进行YAML学习。  </p><h2 id="k8s中YAML"><a href="#k8s中YAML" class="headerlink" title="k8s中YAML"></a>k8s中YAML</h2><p>k8s集群中对资源管理和资源对象编排部署都可由通过YAML文件来解决，也就是把需要对资源对象操作编辑到YAML文件中，把这种文件叫做<strong>资源清单文件</strong>，通过kubectl命令直接使用资源清单文件可以实现对大量的资源对象进行编排部署。  </p><h2 id="k8s中YAML文件组成部分"><a href="#k8s中YAML文件组成部分" class="headerlink" title="k8s中YAML文件组成部分"></a>k8s中YAML文件组成部分</h2><p><img src="/2022/06/29/K8s/4-YAML%E6%96%87%E4%BB%B6%E4%BB%8B%E7%BB%8D/YAML.png" alt="YAML">  </p><h2 id="属性说明"><a href="#属性说明" class="headerlink" title="属性说明"></a>属性说明</h2><table><thead><tr><th align="center">属性名称</th><th align="center">介绍</th></tr></thead><tbody><tr><td align="center">apiVersion</td><td align="center">API版本</td></tr><tr><td align="center">kind</td><td align="center">资源类型</td></tr><tr><td align="center">metadata</td><td align="center">资源元数据</td></tr><tr><td align="center">spec</td><td align="center">资源规格</td></tr><tr><td align="center">replicas</td><td align="center">副本数量</td></tr><tr><td align="center">selector</td><td align="center">标签选择器</td></tr><tr><td align="center">template</td><td align="center">pod模板</td></tr><tr><td align="center">containers</td><td align="center">容器配置</td></tr></tbody></table><h2 id="快速编写YAML文件"><a href="#快速编写YAML文件" class="headerlink" title="快速编写YAML文件"></a>快速编写YAML文件</h2><p>一般很少手写YAML文件，一般会借助工具来创建  </p><h3 id="使用kubectl-create"><a href="#使用kubectl-create" class="headerlink" title="使用kubectl create"></a>使用kubectl create</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl create deployment web --image=nginx -o yaml --dry-run &gt; lmy.yml</span><br></pre></td></tr></table></figure><h3 id="使用kubectl-get-deployment"><a href="#使用kubectl-get-deployment" class="headerlink" title="使用kubectl get deployment"></a>使用kubectl get deployment</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl get deployment web -o yaml --export &gt; lmy.yml</span><br></pre></td></tr></table></figure><h2 id="使用yaml文件创建资源"><a href="#使用yaml文件创建资源" class="headerlink" title="使用yaml文件创建资源"></a>使用yaml文件创建资源</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">kubectl create -f FILENAME  #资源不存在则创建资源，资源存在则抛出异常</span><br><span class="line">kubectl apply -f FILENAME   #资源不存在则创建资源，资源存在且文件中的配置改变则修改资源</span><br></pre></td></tr></table></figure><h2 id="yaml参数说明"><a href="#yaml参数说明" class="headerlink" title="yaml参数说明"></a>yaml参数说明</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span> <span class="comment">#指定api版本，此值必须在kubectl apiversion中</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span> <span class="comment">#指定创建资源的角色/类型</span></span><br><span class="line"><span class="attr">metadata:</span> <span class="comment">#资源的元数据/属性</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">web04-pod</span> <span class="comment">#资源的名字，在同一个namespace中必须唯一</span></span><br><span class="line">  <span class="attr">labels:</span> <span class="comment">#设定资源的标签</span></span><br><span class="line">    <span class="attr">k8s-app:</span> <span class="string">apache</span></span><br><span class="line">    <span class="attr">version:</span> <span class="string">v1</span></span><br><span class="line">    <span class="attr">kubernetes.io/cluster-service:</span> <span class="string">&quot;true&quot;</span></span><br><span class="line">  <span class="attr">annotations:</span>            <span class="comment">#自定义注解列表</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">String</span>        <span class="comment">#自定义注解名字</span></span><br><span class="line"><span class="attr">spec:</span> <span class="comment">#specification of the resource content 指定该资源的内容，定义，规范，目标状态，用户定义</span></span><br><span class="line">  <span class="attr">restartPolicy:</span> <span class="string">Always</span> <span class="comment">#表明该容器一直运行，默认k8s的策略，在此容器退出后，会立即创建一个相同的容器</span></span><br><span class="line">                        <span class="comment">#Onfailure，当容器停止且退出状态码不为0时，由kubelet自动重启该容器</span></span><br><span class="line">                        <span class="comment">#Never，不论容器运行状态如何，kubelet都不会重启该容器</span></span><br><span class="line">  <span class="attr">nodeSelector:</span>     <span class="comment">#节点选择，先给主机打标签kubectl label nodes kube-node1 zone=node1</span></span><br><span class="line">    <span class="attr">zone:</span> <span class="string">node1</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">web04-pod</span> <span class="comment">#容器的名字</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">web:apache</span> <span class="comment">#容器使用的镜像地址</span></span><br><span class="line">    <span class="attr">imagePullPolicy:</span> <span class="string">Never</span> <span class="comment">#三个选择Always、Never、IfNotPresent，每次启动时检查和更新（从registery）images的策略，</span></span><br><span class="line">                           <span class="comment"># Always，每次都重新拉取镜像</span></span><br><span class="line">                           <span class="comment"># Never，仅使用本地镜像</span></span><br><span class="line">                           <span class="comment"># IfNotPresent，如果本地有就用本地镜像，如果没有就拉取</span></span><br><span class="line">    <span class="attr">command:</span> [<span class="string">&#x27;sh&#x27;</span>] <span class="comment">#启动容器的运行命令，将覆盖容器中的Entrypoint,对应Dockefile中的ENTRYPOINT</span></span><br><span class="line">    <span class="attr">args:</span> [<span class="string">&quot;$(str)&quot;</span>] <span class="comment">#启动容器的命令参数，对应Dockerfile中CMD参数</span></span><br><span class="line">    <span class="attr">env:</span> <span class="comment">#指定容器中的环境变量</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">str</span> <span class="comment">#变量的名字</span></span><br><span class="line">      <span class="attr">value:</span> <span class="string">&quot;/etc/run.sh&quot;</span> <span class="comment">#变量的值</span></span><br><span class="line">    <span class="attr">resources:</span> <span class="comment">#资源管理</span></span><br><span class="line">      <span class="attr">requests:</span> <span class="comment">#容器运行时，最低资源需求，也就是说最少需要多少资源容器才能正常运行</span></span><br><span class="line">        <span class="attr">cpu:</span> <span class="number">0.1</span> <span class="comment">#CPU资源（核数），两种方式，浮点数或者是整数+m，0.1=100m，最少值为0.001核（1m）</span></span><br><span class="line">        <span class="attr">memory:</span> <span class="string">32Mi</span> <span class="comment">#内存使用量</span></span><br><span class="line">      <span class="attr">limits:</span> <span class="comment">#资源限制，表示最大占用的资源</span></span><br><span class="line">        <span class="attr">cpu:</span> <span class="number">0.5</span></span><br><span class="line">        <span class="attr">memory:</span> <span class="string">32Mi</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">80</span> <span class="comment">#容器开发对外的端口</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">httpd</span>  <span class="comment">#名称</span></span><br><span class="line">      <span class="attr">protocol:</span> <span class="string">TCP</span></span><br><span class="line">    <span class="attr">livenessProbe:</span> <span class="comment"># pod内容器健康检查的设置，检查失败将会杀死容器，然后根据restartPolicy来进行操作</span></span><br><span class="line">      <span class="attr">httpGet:</span> <span class="comment">#通过httpget检查健康，返回200-399之间，则认为容器正常</span></span><br><span class="line">        <span class="attr">path:</span> <span class="string">/</span> <span class="comment">#URI地址</span></span><br><span class="line">        <span class="attr">port:</span> <span class="number">80</span></span><br><span class="line">        <span class="comment">#host: 127.0.0.1 #主机地址</span></span><br><span class="line">        <span class="attr">scheme:</span> <span class="string">HTTP</span></span><br><span class="line">      <span class="attr">initialDelaySeconds:</span> <span class="number">180</span> <span class="comment">#表明第一次检测在容器启动后多长时间后开始</span></span><br><span class="line">      <span class="attr">timeoutSeconds:</span> <span class="number">5</span> <span class="comment">#检测的超时时间</span></span><br><span class="line">      <span class="attr">periodSeconds:</span> <span class="number">15</span>  <span class="comment">#检查间隔时间</span></span><br><span class="line">      <span class="comment">#也可以用这种方法</span></span><br><span class="line">      <span class="comment">#exec: 执行命令的方法进行监测，如果其退出码不为0，则认为容器正常</span></span><br><span class="line">      <span class="comment">#  command:</span></span><br><span class="line">      <span class="comment">#    - cat</span></span><br><span class="line">      <span class="comment">#    - /tmp/health</span></span><br><span class="line">      <span class="comment">#也可以用这种方法</span></span><br><span class="line">      <span class="comment">#tcpSocket: //通过tcpSocket检查健康</span></span><br><span class="line">      <span class="comment">#  port: number</span></span><br><span class="line">    <span class="attr">lifecycle:</span> <span class="comment">#生命周期管理</span></span><br><span class="line">      <span class="attr">postStart:</span> <span class="comment">#容器运行之前运行的任务</span></span><br><span class="line">        <span class="attr">exec:</span></span><br><span class="line">          <span class="attr">command:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">&#x27;sh&#x27;</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">&#x27;yum upgrade -y&#x27;</span></span><br><span class="line">      <span class="attr">preStop:</span> <span class="comment">#容器关闭之前运行的任务</span></span><br><span class="line">        <span class="attr">exec:</span></span><br><span class="line">          <span class="attr">command:</span> [<span class="string">&#x27;service httpd stop&#x27;</span>]</span><br><span class="line">    <span class="attr">volumeMounts:</span>  </span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">volume</span> <span class="comment">#挂载设备的名字，与volumes[*].name 需要对应</span></span><br><span class="line">      <span class="attr">mountPath:</span> <span class="string">/data</span> <span class="comment">#挂载到容器的某个路径下</span></span><br><span class="line">      <span class="attr">readOnly:</span> <span class="literal">True</span></span><br><span class="line">  <span class="attr">volumes:</span> <span class="comment">#定义一组挂载设备</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">volume</span> <span class="comment">#定义一个挂载设备的名字</span></span><br><span class="line">    <span class="comment">#meptyDir: &#123;&#125;</span></span><br><span class="line">    <span class="attr">hostPath:</span></span><br><span class="line">      <span class="attr">path:</span> <span class="string">/opt</span> <span class="comment">#挂载设备类型为hostPath，路径为宿主机下的/opt,这里设备类型支持很多种</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://s2.loli.net/2022/06/27/5UbYtS64yAIPXzM.jpg&quot; alt=&quot;k8s.jpg&quot;&gt;  &lt;/p&gt;</summary>
    
    
    
    <category term="Kubernetes" scheme="http://example.com/categories/Kubernetes/"/>
    
    
    <category term="YAML文件介绍" scheme="http://example.com/tags/YAML%E6%96%87%E4%BB%B6%E4%BB%8B%E7%BB%8D/"/>
    
  </entry>
  
  <entry>
    <title>3-k8s集群管理工具kubectl</title>
    <link href="http://example.com/2022/06/28/K8s/3-k8s%E9%9B%86%E7%BE%A4%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7kubectl/"/>
    <id>http://example.com/2022/06/28/K8s/3-k8s%E9%9B%86%E7%BE%A4%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7kubectl/</id>
    <published>2022-06-28T14:45:32.000Z</published>
    <updated>2022-08-23T02:10:16.167Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://s2.loli.net/2022/06/27/5UbYtS64yAIPXzM.jpg" alt="k8s.jpg">  </p><span id="more"></span><h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>kubectl是k8s集群的命令行工具，通过kubectl能够对集群本身进行管理，并能够在集群上进行容器化应用的安装和部署  </p><h1 id="命令格式"><a href="#命令格式" class="headerlink" title="命令格式"></a>命令格式</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl [command] [type] [name] [flags]</span><br></pre></td></tr></table></figure><p><strong>参数</strong><br><strong>command</strong>：指定要对资源执行的操作，例如：create、get、describe、delete<br><strong>type</strong>：指定资源类型，资源类型是大小写敏感的，可以使用单数、复数、缩略的形式<br><strong>name</strong>：资源的名称，大小写敏感，且可以省略，省略则会显示所有的资源<br><strong>flags</strong>：指定可选参数  </p><h2 id="kubectl中的简写"><a href="#kubectl中的简写" class="headerlink" title="kubectl中的简写"></a>kubectl中的简写</h2><p>certificatesigningrequests (缩写 csr)<br>componentstatuses (缩写 cs)<br>configmaps (缩写 cm)<br>customresourcedefinition (缩写 crd)<br><strong>daemonsets (缩写 ds)</strong><br><strong>deployments (缩写 deploy)</strong><br>endpoints (缩写 ep)<br>events (缩写 ev)<br>horizontalpodautoscalers (缩写 hpa)<br>ingresses (缩写 ing)<br>limitranges (缩写 limits)<br>namespaces (缩写 ns)<br>networkpolicies (缩写 netpol)<br><strong>nodes (缩写 no)</strong><br>persistentvolumeclaims (缩写 pvc)<br>persistentvolumes (缩写 pv)<br>poddisruptionbudgets (缩写 pdb)<br><strong>pods (缩写 po)</strong><br>podsecuritypolicies (缩写 psp)<br><strong>replicasets (缩写 rs)</strong><br>replicationcontrollers (缩写 rc)<br>resourcequotas (缩写 quota)<br>serviceaccounts (缩写 sa)<br><strong>services (缩写 svc)</strong><br><strong>statefulsets (缩写 sts)</strong><br>storageclasses (缩写 sc)</p><h2 id="获取帮助信息"><a href="#获取帮助信息" class="headerlink" title="获取帮助信息"></a>获取帮助信息</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 获取kubectl帮助信息</span></span><br><span class="line">kubectl --help</span><br><span class="line"><span class="meta">#</span><span class="bash"> 获取某个命令的介绍和使用</span>  </span><br><span class="line">kubectl get --help</span><br></pre></td></tr></table></figure><h2 id="基础命令"><a href="#基础命令" class="headerlink" title="基础命令"></a>基础命令</h2><table><thead><tr><th align="center">命令</th><th align="center">介绍</th></tr></thead><tbody><tr><td align="center">create</td><td align="center">通过文件名或者标准输入创建资源</td></tr><tr><td align="center">expose</td><td align="center">使用 replication controller, service, deployment 或者 pod并暴露它作为一个 新的 Kubernetes Service</td></tr><tr><td align="center">run</td><td align="center">在集群中运行一个指定镜像</td></tr><tr><td align="center">set</td><td align="center">在对象上设定特定的功能</td></tr><tr><td align="center">get</td><td align="center">显示一个或多个资源</td></tr><tr><td align="center">edit</td><td align="center">编辑一个资源</td></tr><tr><td align="center">delete</td><td align="center">通过文件名、标准输入、资源名、标签来删除资源</td></tr></tbody></table><h2 id="create"><a href="#create" class="headerlink" title="create"></a>create</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">kubectl create -f FILENAEM  #使用yaml文件创建资源</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="部署命令"><a href="#部署命令" class="headerlink" title="部署命令"></a>部署命令</h2><table><thead><tr><th align="center">命令</th><th align="center">介绍</th></tr></thead><tbody><tr><td align="center">rollout</td><td align="center">管理资源的发布</td></tr><tr><td align="center">scale</td><td align="center">为deployment、replicaSet、replicaController、job设置一个新的副本数量</td></tr><tr><td align="center">autoscale</td><td align="center">动调整一个 Deployment, ReplicaSet, 或者 ReplicationController的副本数量</td></tr></tbody></table><h2 id="集群管理命令"><a href="#集群管理命令" class="headerlink" title="集群管理命令"></a>集群管理命令</h2><table><thead><tr><th align="center">命令</th><th align="center">介绍</th></tr></thead><tbody><tr><td align="center">certificate</td><td align="center">修改证书资源</td></tr><tr><td align="center">cluster-info</td><td align="center">显示集群信息</td></tr><tr><td align="center">top</td><td align="center">显示资源</td></tr><tr><td align="center">cordon</td><td align="center">标记 node 为不可被调度</td></tr><tr><td align="center">uncordon</td><td align="center">标记 node 为 可被调度</td></tr><tr><td align="center">drain</td><td align="center">驱逐节点上的应用，准备下线维护</td></tr><tr><td align="center">taint</td><td align="center">更新一个或者多个 node 上的 taints</td></tr></tbody></table><h2 id="故障和调试命令"><a href="#故障和调试命令" class="headerlink" title="故障和调试命令"></a>故障和调试命令</h2><table><thead><tr><th align="center">命令</th><th align="center">介绍</th></tr></thead><tbody><tr><td align="center">describe</td><td align="center">显示特定资源或资源组的详细信息</td></tr><tr><td align="center">log</td><td align="center">输出容器在 pod 中的日志</td></tr><tr><td align="center">attach</td><td align="center">连接到现有容器中一个正在运行的进程</td></tr><tr><td align="center">exec</td><td align="center">执行命令到容器</td></tr><tr><td align="center">port-forward</td><td align="center">将一个或多个本地端口转发到pod</td></tr><tr><td align="center">proxy</td><td align="center">运行一个 proxy 到 Kubernetes API server</td></tr><tr><td align="center">cp</td><td align="center">拷贝文件或目录到容器中</td></tr><tr><td align="center">auth</td><td align="center">检查授权</td></tr></tbody></table><h2 id="其他命令"><a href="#其他命令" class="headerlink" title="其他命令"></a>其他命令</h2><table><thead><tr><th align="center">命令</th><th align="center">介绍</th></tr></thead><tbody><tr><td align="center">apply</td><td align="center">通过文件名或标准输入对资源应用的配置</td></tr><tr><td align="center">patch</td><td align="center">使用补丁修改、更新资源的字段</td></tr><tr><td align="center">replace</td><td align="center">通过文件名或标准输入替换一个资源</td></tr><tr><td align="center">convert</td><td align="center">不同API版本之前转换配置文件</td></tr><tr><td align="center">label</td><td align="center">更新资源上的标签</td></tr><tr><td align="center">annotate</td><td align="center">更新资源上的注释</td></tr><tr><td align="center">completion</td><td align="center">用于实现kubectl工具自动补全</td></tr><tr><td align="center">config</td><td align="center">修改k8s文件</td></tr><tr><td align="center">plugin</td><td align="center">运行一个命令行插件</td></tr><tr><td align="center">version</td><td align="center">打印客户端和服务版本信息</td></tr></tbody></table>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://s2.loli.net/2022/06/27/5UbYtS64yAIPXzM.jpg&quot; alt=&quot;k8s.jpg&quot;&gt;  &lt;/p&gt;</summary>
    
    
    
    <category term="Kubernetes" scheme="http://example.com/categories/Kubernetes/"/>
    
    
    <category term="K8S集群管理工具kubectl" scheme="http://example.com/tags/K8S%E9%9B%86%E7%BE%A4%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7kubectl/"/>
    
  </entry>
  
</feed>
