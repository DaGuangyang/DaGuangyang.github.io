<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>DaGuang</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2022-09-07T18:16:21.874Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>DaGuang</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>3-KVM配置文件和磁盘</title>
    <link href="http://example.com/2022/09/08/KVM/3-KVM%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E5%92%8C%E7%A3%81%E7%9B%98/"/>
    <id>http://example.com/2022/09/08/KVM/3-KVM%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E5%92%8C%E7%A3%81%E7%9B%98/</id>
    <published>2022-09-07T17:24:29.000Z</published>
    <updated>2022-09-07T18:16:21.874Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://s2.loli.net/2022/09/06/4PdOQiHzvqweAKj.webp" alt="KVM.jpg"></p><span id="more"></span><h1 id="KVM配置文件"><a href="#KVM配置文件" class="headerlink" title="KVM配置文件"></a>KVM配置文件</h1><p>KVM虚拟机的配置文件存放在 <strong>/etc/libvirt/qemu</strong> 下，每个虚拟机对应一个xml文件，可以通过修改xml文件修改虚拟机硬件配置，但需要使用<code>virsh edit</code>进行修改，使用vim等进行修改则会被覆盖、无效，使用<code>virsh dumpxml</code>查看的就是这些xml文件。<br>在图形化界面中创建虚拟机时或在图形化界面中查看虚拟机硬件详情磁盘信息、虚拟机配置文件中，可以发现磁盘为一个qcow2文件，它既是虚拟机的磁盘，又是虚拟机的镜像。文件的大小并不一定是虚拟机中硬盘的大小，可能是分配的硬盘是”立即分配所有磁盘空间”,也可能是动态分配（随虚拟机中使用的磁盘空间变化，上限为分配的磁盘的大小），通过图形化窗口创建的虚拟机默认“立即分配所有磁盘空间”，想要实现动态分配需要在创建虚拟机之前通过命令创建一个动态分配的磁盘，即可以动态的qcow2文件。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 创建一个动态分配磁盘空间的磁盘，最大为50G,文件的创建目录为当前目录</span></span><br><span class="line">qemu-img create -f qcow2 testdisk1.qcow2 50G</span><br></pre></td></tr></table></figure><p><img src="/2022/09/08/KVM/3-KVM%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E5%92%8C%E7%A3%81%E7%9B%98/%E5%88%9B%E5%BB%BA.png" alt="创建虚拟机"><br><img src="/2022/09/08/KVM/3-KVM%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E5%92%8C%E7%A3%81%E7%9B%98/%E7%A1%AC%E4%BB%B6%E8%AF%A6%E6%83%85.png" alt="硬件详情">  </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">disk</span> <span class="attr">type</span>=<span class="string">&#x27;file&#x27;</span> <span class="attr">device</span>=<span class="string">&#x27;disk&#x27;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">driver</span> <span class="attr">name</span>=<span class="string">&#x27;qemu&#x27;</span> <span class="attr">type</span>=<span class="string">&#x27;qcow2&#x27;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">source</span> <span class="attr">file</span>=<span class="string">&#x27;/var/lib/libvirt/images/centos7.0.qcow2&#x27;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">backingStore</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">target</span> <span class="attr">dev</span>=<span class="string">&#x27;vda&#x27;</span> <span class="attr">bus</span>=<span class="string">&#x27;virtio&#x27;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">alias</span> <span class="attr">name</span>=<span class="string">&#x27;virtio-disk0&#x27;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">address</span> <span class="attr">type</span>=<span class="string">&#x27;pci&#x27;</span> <span class="attr">domain</span>=<span class="string">&#x27;0x0000&#x27;</span> <span class="attr">bus</span>=<span class="string">&#x27;0x00&#x27;</span> <span class="attr">slot</span>=<span class="string">&#x27;0x07&#x27;</span> <span class="attr">function</span>=<span class="string">&#x27;0x0&#x27;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">disk</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="通过命令创建虚拟机"><a href="#通过命令创建虚拟机" class="headerlink" title="通过命令创建虚拟机"></a>通过命令创建虚拟机</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">virt-install --name=kvm2 --vcpus=2 --memory=2048 --location=/home/yyg/Desktop/CentOS-7-x86_64-DVD-1810.iso --disk path=/var/lib/libvirt/images/test.qcow2 --network network=default --graphics none --extra-args=&#x27;console=ttyS0&#x27;</span><br></pre></td></tr></table></figure><ul><li>–name=kvm2表示为创建的虚拟机命名为kvm2。  </li><li>–vcpus=2表示设置虚拟机cpu有2个核心。  </li><li>–memory=2048表示设置内存为2G。  </li><li>––location=/home/yyg/Desktop/CentOS-7-x86_64-DVD-1810.iso 表示使用本地iso镜像安装虚拟机。  </li><li>–disk path=/var/lib/libvirt/images/test.qcow2 表示指定虚拟机的磁盘镜像的路径，示例中的路径是我提前通过qemu-img命令创建出来的磁盘，咱们做实验的时候需要自行创建好，如果不想提前创建好磁盘，也可以使用–disk size=50代替–disk path=/var/lib/libvirt/images/kvm2.qcow2，如果使用–disk size=50这个设置，virt-install命令会在/var/lib/libvirt/images/目录中自动创建一个50G的qcow2磁盘，磁盘的前缀名和虚拟机名相同，这个磁盘是预分配所有磁盘空间的，也就是说，会直接占用宿主机50G的磁盘空间。  </li><li>–network network=default表示使用kvm的默认网络  </li><li>–graphics none 表示我们安装的过程中，需要使用的图形化控制台，由于我们此处模拟的是纯命令行安装，所以图形化控制台指定为none，表示不使用图形化控制台安装虚拟机。  </li><li>–extra-args=’console=ttyS0’表示为创建的虚拟机指定内核启动时的内核参数，此处为虚拟机内核添加的参数为console=ttyS0，也就是说，当安装虚拟机时，分配一个ttyS0的虚拟终端，因为我们没有使用图形化控制台安装，所以要分配一个命令行的虚拟终端，以便执行安装操作和安装完成后的登录、执行命令等操作。  </li></ul><p>然后按照提示将需要进行设置的选项设置完成（与正常安装系统时设置一样，只是转换成文本形式）。  </p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://s2.loli.net/2022/09/06/4PdOQiHzvqweAKj.webp&quot; alt=&quot;KVM.jpg&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="KVM" scheme="http://example.com/categories/KVM/"/>
    
    
    <category term="KVM配置文件和磁盘" scheme="http://example.com/tags/KVM%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E5%92%8C%E7%A3%81%E7%9B%98/"/>
    
  </entry>
  
  <entry>
    <title>2-KVM相关命令</title>
    <link href="http://example.com/2022/09/07/KVM/2-KVM%E7%9B%B8%E5%85%B3%E5%91%BD%E4%BB%A4/"/>
    <id>http://example.com/2022/09/07/KVM/2-KVM%E7%9B%B8%E5%85%B3%E5%91%BD%E4%BB%A4/</id>
    <published>2022-09-07T13:53:00.000Z</published>
    <updated>2022-09-07T18:18:07.292Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://s2.loli.net/2022/09/06/4PdOQiHzvqweAKj.webp" alt="KVM.jpg"></p><span id="more"></span><h1 id="virsh-命令"><a href="#virsh-命令" class="headerlink" title="virsh 命令"></a>virsh 命令</h1><h2 id="域管理（客户机管理）"><a href="#域管理（客户机管理）" class="headerlink" title="域管理（客户机管理）"></a>域管理（客户机管理）</h2><table><thead><tr><th align="center">命令</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">list</td><td align="center">查看当前运行、挂起的虚拟机，–all查看所有虚拟机</td></tr><tr><td align="center">start/shutdown/reboot VM_NAME</td><td align="center">虚拟机启动、停止、重启</td></tr><tr><td align="center">destroy VM_NAME</td><td align="center">强制停止虚拟机</td></tr><tr><td align="center">undefine VM_NAME</td><td align="center">取消虚拟机定义</td></tr><tr><td align="center">console VM_NAME</td><td align="center">连接虚拟机，客户机无图形化界面时ctrl+]退出</td></tr><tr><td align="center">edit VM_NAME</td><td align="center">修改虚拟机xml配置</td></tr><tr><td align="center">autostart VM_NAME</td><td align="center">设置虚拟机自启动</td></tr><tr><td align="center">domiflist VM_NAME</td><td align="center">查看虚拟机网卡信息</td></tr><tr><td align="center">domblklist VM_NAME</td><td align="center">查看虚拟机硬盘信息</td></tr><tr><td align="center">dominfo VM_NAME</td><td align="center">列出指定虚拟机的信息</td></tr><tr><td align="center">suspend/resume VM_NAME</td><td align="center">挂起/恢复虚拟机</td></tr><tr><td align="center">domstat VM_NAME</td><td align="center">显示虚拟机状态</td></tr><tr><td align="center">domcontrol VM_NAME</td><td align="center">返回虚拟机状态，ok、error</td></tr><tr><td align="center">dumpxml VM_NAME</td><td align="center">直接显示demo的xml文件配置</td></tr><tr><td align="center">cpu-stats VM_NAME</td><td align="center">虚拟机的cpu状态</td></tr><tr><td align="center">setmen  VM_NAME  SIZE</td><td align="center">设置虚拟机内存</td></tr></tbody></table><h2 id="virt-manager"><a href="#virt-manager" class="headerlink" title="virt-manager"></a>virt-manager</h2><h2 id="virt-viewer"><a href="#virt-viewer" class="headerlink" title="virt-viewer"></a>virt-viewer</h2><h2 id="virt-install"><a href="#virt-install" class="headerlink" title="virt-install"></a>virt-install</h2><h2 id="virt-top"><a href="#virt-top" class="headerlink" title="virt-top"></a>virt-top</h2>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://s2.loli.net/2022/09/06/4PdOQiHzvqweAKj.webp&quot; alt=&quot;KVM.jpg&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="KVM" scheme="http://example.com/categories/KVM/"/>
    
    
    <category term="KVM相关命令" scheme="http://example.com/tags/KVM%E7%9B%B8%E5%85%B3%E5%91%BD%E4%BB%A4/"/>
    
  </entry>
  
  <entry>
    <title>KVM相关问题以及解决</title>
    <link href="http://example.com/2022/09/03/KVM/KVM%E7%9B%B8%E5%85%B3%E9%97%AE%E9%A2%98%E4%BB%A5%E5%8F%8A%E8%A7%A3%E5%86%B3/"/>
    <id>http://example.com/2022/09/03/KVM/KVM%E7%9B%B8%E5%85%B3%E9%97%AE%E9%A2%98%E4%BB%A5%E5%8F%8A%E8%A7%A3%E5%86%B3/</id>
    <published>2022-09-02T18:08:52.000Z</published>
    <updated>2022-09-07T18:35:10.677Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://s2.loli.net/2022/09/06/4PdOQiHzvqweAKj.webp" alt="KVM.jpg"></p><span id="more"></span><h1 id="问题一：图形化Virtual-Machine-Manager中创建虚拟机时提示“KVM-is-not-available”"><a href="#问题一：图形化Virtual-Machine-Manager中创建虚拟机时提示“KVM-is-not-available”" class="headerlink" title="问题一：图形化Virtual Machine Manager中创建虚拟机时提示“KVM is not available”"></a>问题一：图形化Virtual Machine Manager中创建虚拟机时提示“KVM is not available”</h1><p><img src="/2022/09/03/KVM/KVM%E7%9B%B8%E5%85%B3%E9%97%AE%E9%A2%98%E4%BB%A5%E5%8F%8A%E8%A7%A3%E5%86%B3/Warning.png" alt="KVM is not available">  </p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><ol><li>检查是否加载模块<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">~]#</span><span class="bash">~]<span class="comment">#  lsmod |grep kvm</span></span></span><br><span class="line">kvm_intel             183621  4 </span><br><span class="line">kvm                   586948  1 kvm_intel</span><br><span class="line">irqbypass              13503  1 kvm</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">~]#</span><span class="bash"> modprobe kvm  <span class="comment">#如果没有就加载模块</span></span></span><br></pre></td></tr></table></figure></li><li>查看是否开启了CPU虚拟化,如果没有，则是在VMware workstation中虚拟机的CPU虚拟化没有开启  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">~]#</span><span class="bash"> lscpu | grep -E <span class="string">&#x27;vmx|svm&#x27;</span></span></span><br></pre></td></tr></table></figure></li></ol><h1 id="问题二：宿主机可正常联网，但KVM内部虚拟机使用net模式DHCP无法联网"><a href="#问题二：宿主机可正常联网，但KVM内部虚拟机使用net模式DHCP无法联网" class="headerlink" title="问题二：宿主机可正常联网，但KVM内部虚拟机使用net模式DHCP无法联网"></a>问题二：宿主机可正常联网，但KVM内部虚拟机使用net模式DHCP无法联网</h1><h2 id="解决方案-1"><a href="#解决方案-1" class="headerlink" title="解决方案"></a>解决方案</h2><p>需要将宿主机的路由转发功能开启  </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">~]#</span><span class="bash"> vim /etc/sysctl.conf</span></span><br><span class="line">net.ipv4.ip_forward=1</span><br></pre></td></tr></table></figure><h1 id="问题三：console连接KVM-centos7-一直等待"><a href="#问题三：console连接KVM-centos7-一直等待" class="headerlink" title="问题三：console连接KVM centos7 一直等待"></a>问题三：console连接KVM centos7 一直等待</h1><h2 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h2><p>出现在在图形化界面中手动创建centos7虚拟机，使用console命令连接时一直等待  </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">~]#</span><span class="bash">  virsh console centos7.0</span> </span><br><span class="line">Connected to domain centos7.0</span><br><span class="line">Escape character is ^]</span><br></pre></td></tr></table></figure><h2 id="解决方案-2"><a href="#解决方案-2" class="headerlink" title="解决方案"></a>解决方案</h2><p>在客户机中修改kernel启动参数  </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">~]#</span><span class="bash"> grubby --update-kernel=ALL --args=<span class="string">&quot;console=ttyS0&quot;</span></span></span><br><span class="line"><span class="meta">~]#</span><span class="bash"> reboot</span></span><br></pre></td></tr></table></figure><h1 id="问题四：console连接客户机报“error-operation-failed-Active-console-session-exists-for-this-domain”"><a href="#问题四：console连接客户机报“error-operation-failed-Active-console-session-exists-for-this-domain”" class="headerlink" title="问题四：console连接客户机报“error: operation failed: Active console session exists for this domain”"></a>问题四：console连接客户机报“error: operation failed: Active console session exists for this domain”</h1><h2 id="解决方案-3"><a href="#解决方案-3" class="headerlink" title="解决方案"></a>解决方案</h2><ol><li>可能有其他的连接，ps aux | grep console查看，若有则杀死进程后重新连接  </li><li>没有其他连接进程还是无法连接，尝试将宿主机重启  </li></ol>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://s2.loli.net/2022/09/06/4PdOQiHzvqweAKj.webp&quot; alt=&quot;KVM.jpg&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="KVM" scheme="http://example.com/categories/KVM/"/>
    
    
    <category term="KVM相关问题以及解决" scheme="http://example.com/tags/KVM%E7%9B%B8%E5%85%B3%E9%97%AE%E9%A2%98%E4%BB%A5%E5%8F%8A%E8%A7%A3%E5%86%B3/"/>
    
  </entry>
  
  <entry>
    <title>1-KVM环境准备、图形化使用</title>
    <link href="http://example.com/2022/09/03/KVM/1-KVM%E7%8E%AF%E5%A2%83%E5%87%86%E5%A4%87%E3%80%81%E5%9B%BE%E5%BD%A2%E5%8C%96%E4%BD%BF%E7%94%A8/"/>
    <id>http://example.com/2022/09/03/KVM/1-KVM%E7%8E%AF%E5%A2%83%E5%87%86%E5%A4%87%E3%80%81%E5%9B%BE%E5%BD%A2%E5%8C%96%E4%BD%BF%E7%94%A8/</id>
    <published>2022-09-02T17:32:12.000Z</published>
    <updated>2022-09-07T14:09:37.170Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://s2.loli.net/2022/09/06/4PdOQiHzvqweAKj.webp" alt="KVM.jpg"></p><span id="more"></span><h1 id="KVM环境准备"><a href="#KVM环境准备" class="headerlink" title="KVM环境准备"></a>KVM环境准备</h1><p>在VMware workstation创建虚拟机，然后在虚拟机中搭建KVM环境进行学习。<br>1.在VMware workstation中对虚拟机进行设置。因为KVM是需要硬件虚拟化支持的，所以要将虚拟机CPU的旬虚拟化开启<br><img src="/2022/09/03/KVM/1-KVM%E7%8E%AF%E5%A2%83%E5%87%86%E5%A4%87%E3%80%81%E5%9B%BE%E5%BD%A2%E5%8C%96%E4%BD%BF%E7%94%A8/%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%A1%AC%E4%BB%B6%E8%AE%BE%E7%BD%AE.png" alt="虚拟机硬件设置"><br>2.在VMware workstation中创建虚拟机时，安装一个带有GUI的系统，方便对KVM图形化的熟悉。<br>这样KVM的基础的环境就准备完毕。</p><h2 id="KVM部署"><a href="#KVM部署" class="headerlink" title="KVM部署"></a>KVM部署</h2><p>在KVM部署前检查是否支持虚拟化</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">~]#</span><span class="bash"> lscpu | grep -E <span class="string">&#x27;vmx|svm&#x27;</span></span></span><br><span class="line">Flags: fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush mmx fxsr sse sse2 ss ht syscall nx pdpe1gb rdtscp lm constant_tsc arch_perfmon nopl xtopology tsc_reliable nonstop_tsc eagerfpu pni pclmulqdq vmx ssse3 fma cx16 pcid sse4_1 sse4_2 x2apic movbe popcnt tsc_deadline_timer aes xsave avx f16c rdrand hypervisor lahf_lm abm 3dnowprefetch ssbd ibrs ibpb stibp tpr_shadow vnmi ept vpid fsgsbase tsc_adjust bmi1 avx2 smep bmi2 invpcid rdseed adx smap clflushopt xsaveopt xsavec xgetbv1 arat spec_ctrl intel_stibp flush_l1d arch_capabilities</span><br></pre></td></tr></table></figure><p>安装对应的虚拟化组件  </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">~]#</span><span class="bash"> yum install qemu-kvm qemu-img virt-manager libvirt libvirt-python virt-manager libvirt-client virt-install virt-viewer -y</span></span><br></pre></td></tr></table></figure><p>设置虚拟机接口管理组件启动和自启  </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">~]#</span><span class="bash"> systemctl start libvirtd</span></span><br><span class="line"><span class="meta">~]#</span><span class="bash"> systemctl <span class="built_in">enable</span> libvirtd</span></span><br></pre></td></tr></table></figure><h2 id="图形化中使用KVM创建虚拟机"><a href="#图形化中使用KVM创建虚拟机" class="headerlink" title="图形化中使用KVM创建虚拟机"></a>图形化中使用KVM创建虚拟机</h2><p>在宿主机的图形化桌面中打开一个命令行窗口，输入virt-manager命令，即可弹出对应的图形化管理窗口，或者在桌面的菜单栏中的应用程序中，选择“虚拟机管理器”（英文界面选择Virtual Machine Manager），都可以打开virt-manager。<br>在virt-manager中创建虚拟机过程比较简单，只需要将所要安装的系统镜像上传到KVM的宿主机中，KVM中虚拟机安装过程省略。  </p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://s2.loli.net/2022/09/06/4PdOQiHzvqweAKj.webp&quot; alt=&quot;KVM.jpg&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="KVM" scheme="http://example.com/categories/KVM/"/>
    
    
    <category term="KVM环境准备、图形化使用" scheme="http://example.com/tags/KVM%E7%8E%AF%E5%A2%83%E5%87%86%E5%A4%87%E3%80%81%E5%9B%BE%E5%BD%A2%E5%8C%96%E4%BD%BF%E7%94%A8/"/>
    
  </entry>
  
  <entry>
    <title>虚拟化技术</title>
    <link href="http://example.com/2022/09/02/KVM/1-%E8%99%9A%E6%8B%9F%E5%8C%96%E6%8A%80%E6%9C%AF/"/>
    <id>http://example.com/2022/09/02/KVM/1-%E8%99%9A%E6%8B%9F%E5%8C%96%E6%8A%80%E6%9C%AF/</id>
    <published>2022-09-02T14:10:13.000Z</published>
    <updated>2022-09-06T09:44:43.585Z</updated>
    
    <content type="html"><![CDATA[<center> 虚拟化技术介绍、分类 </center><span id="more"></span># 虚拟化技术  简单解释就是将一台主机的资源（CPU、内存、磁盘空间、网络）分割、组合成多台虚拟主机的技术。  <h1 id="硬件虚拟化与软件虚拟化"><a href="#硬件虚拟化与软件虚拟化" class="headerlink" title="硬件虚拟化与软件虚拟化"></a>硬件虚拟化与软件虚拟化</h1><p>物理平台本身提供了对特殊指令的截获和重定向的<strong>硬件支持</strong>。支持虚拟化的硬件，也是一些基于硬件实现软件虚拟化技术的关键。目前主要有两种：intel VT和AMD-V。  </p><h1 id="软件虚拟化"><a href="#软件虚拟化" class="headerlink" title="软件虚拟化"></a>软件虚拟化</h1><p>利用软件技术，在现有的物理平台上实现对物理平台访问的截获和模拟。有些软件虚拟化技术需要硬件支持，有些则不需要。</p><h2 id="全虚拟化与准虚拟化"><a href="#全虚拟化与准虚拟化" class="headerlink" title="全虚拟化与准虚拟化"></a>全虚拟化与准虚拟化</h2><h2 id="全虚拟化"><a href="#全虚拟化" class="headerlink" title="全虚拟化"></a>全虚拟化</h2><p>全虚拟化（full virtualization），又叫硬件辅助虚拟化技术，需要硬件虚拟化的支持。全虚拟化最大的优点就是运行在虚拟机上的操作系统没有经过任何修改，唯一的限制就是操作系统必须能够支持底层的硬件。它在虚拟机（VM）和硬件之间加了一个软件层–Hypervisor，或者叫做虚拟机管理程序（VMM），是用来建立与执行虚拟机器的软件、固件或硬件。  </p><h3 id="一型虚拟化"><a href="#一型虚拟化" class="headerlink" title="一型虚拟化"></a>一型虚拟化</h3><p>Hypervisor 直接安装在物理机上，多个虚拟机在 Hypervisor 上运行。Hypervisor 实现方式一般是一个特殊定制的 Linux 系统。Xen 和 VMWare 的 ESXi 都属于这个类型，例如：VMWare的ESXi  </p><h3 id="二型虚拟化"><a href="#二型虚拟化" class="headerlink" title="二型虚拟化"></a>二型虚拟化</h3><p>这种 hypervisor 运行在另一个操作系统（运行在物理硬件之上）中，例如：KVM</p><h2 id="准虚拟化"><a href="#准虚拟化" class="headerlink" title="准虚拟化"></a>准虚拟化</h2><p>需要改动客户操作系统，使它以为自己运行在虚拟环境下，能够与虚拟机监控机协同工作,不需要硬件虚拟化支持。这种方法就叫准虚拟化（para-virtualization），也叫半虚拟化。  </p>]]></content>
    
    
    <summary type="html">&lt;center&gt; 虚拟化技术介绍、分类 &lt;/center&gt;</summary>
    
    
    
    <category term="虚拟化介绍" scheme="http://example.com/categories/%E8%99%9A%E6%8B%9F%E5%8C%96%E4%BB%8B%E7%BB%8D/"/>
    
    
    <category term="虚拟化介绍" scheme="http://example.com/tags/%E8%99%9A%E6%8B%9F%E5%8C%96%E4%BB%8B%E7%BB%8D/"/>
    
  </entry>
  
  <entry>
    <title>K8S核心技术Service</title>
    <link href="http://example.com/2022/07/07/K8s/7-K8S%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AFService/"/>
    <id>http://example.com/2022/07/07/K8s/7-K8S%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AFService/</id>
    <published>2022-07-07T02:49:59.000Z</published>
    <updated>2022-07-26T02:55:49.576Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://s2.loli.net/2022/06/27/5UbYtS64yAIPXzM.jpg" alt="k8s">  </p><span id="more"></span><h1 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h1><p>在k8s中可以通过pod的ip来进行访问，但是pod的ip不是固定的，而service资源会对提供同一个服务的多个pod进行聚合，提供一个统一的入口，通过访问service的入口地址就能访问到后面的pod服务。  </p><h2 id="Service存在的意义"><a href="#Service存在的意义" class="headerlink" title="Service存在的意义"></a>Service存在的意义</h2><h3 id="防止pod失联（服务发现）"><a href="#防止pod失联（服务发现）" class="headerlink" title="防止pod失联（服务发现）"></a>防止pod失联（服务发现）</h3><p>service充当注册中心的作用，当前有多个前端、后端pod时，前端可以通过service访问后端。</p><h3 id="定义pod访问策略（负载均衡）"><a href="#定义pod访问策略（负载均衡）" class="headerlink" title="定义pod访问策略（负载均衡）"></a>定义pod访问策略（负载均衡）</h3><p>前端pod访问后端pod时，中间会通过service，这里service还能辺负载均衡，将前端请求分发到各个后端pod。  </p><h2 id="service资源类型"><a href="#service资源类型" class="headerlink" title="service资源类型"></a>service资源类型</h2><p><strong>ClusterIP</strong>：集群内部访问，默认方式<br><strong>NodePort</strong>：对外访问应用使用<br><strong>LoadBalancer</strong>：对外访问应用使用，公有云  </p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">~]#</span> <span class="string">kubectl</span> <span class="string">get</span> <span class="string">svc</span> <span class="string">nginx</span> <span class="string">-o</span> <span class="string">yaml</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">creationTimestamp:</span> <span class="string">&quot;2022-07-14T14:01:34Z&quot;</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">nginx</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">nginx</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">default</span></span><br><span class="line">  <span class="attr">resourceVersion:</span> <span class="string">&quot;266455&quot;</span></span><br><span class="line">  <span class="attr">selfLink:</span> <span class="string">/api/v1/namespaces/default/services/nginx</span></span><br><span class="line">  <span class="attr">uid:</span> <span class="string">d45f429a-23b9-435f-a7ed-704996bb1999</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">clusterIP:</span> <span class="number">10.1</span><span class="number">.160</span><span class="number">.174</span></span><br><span class="line">  <span class="attr">externalTrafficPolicy:</span> <span class="string">Cluster</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">nodePort:</span> <span class="number">30619</span>    <span class="comment">#容器所在节点的端口，即外部机器可以访问的端口</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">80</span>           <span class="comment">#service的端口，即k8s中服务之间的访问端口</span></span><br><span class="line">    <span class="attr">protocol:</span> <span class="string">TCP</span></span><br><span class="line">    <span class="attr">targetPort:</span> <span class="number">80</span>     <span class="comment">#pod的端口</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">nginx</span></span><br><span class="line">  <span class="attr">sessionAffinity:</span> <span class="string">None</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">NodePort</span></span><br><span class="line"><span class="attr">status:</span></span><br><span class="line">  <span class="attr">loadBalancer:</span> &#123;&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://s2.loli.net/2022/06/27/5UbYtS64yAIPXzM.jpg&quot; alt=&quot;k8s&quot;&gt;  &lt;/p&gt;</summary>
    
    
    
    <category term="Kubernetes" scheme="http://example.com/categories/Kubernetes/"/>
    
    
    <category term="Service" scheme="http://example.com/tags/Service/"/>
    
  </entry>
  
  <entry>
    <title>k8s相关使用以及问题</title>
    <link href="http://example.com/2022/07/03/K8s/k8s%E7%9B%B8%E5%85%B3%E4%BD%BF%E7%94%A8%E4%BB%A5%E5%8F%8A%E9%97%AE%E9%A2%98/"/>
    <id>http://example.com/2022/07/03/K8s/k8s%E7%9B%B8%E5%85%B3%E4%BD%BF%E7%94%A8%E4%BB%A5%E5%8F%8A%E9%97%AE%E9%A2%98/</id>
    <published>2022-07-03T04:30:21.000Z</published>
    <updated>2022-08-12T02:50:36.935Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://s2.loli.net/2022/06/27/5UbYtS64yAIPXzM.jpg" alt="k8s.jpg">  </p><span id="more"></span><h1 id="相关使用技巧"><a href="#相关使用技巧" class="headerlink" title="相关使用技巧"></a>相关使用技巧</h1><h2 id="kubectl命令补全"><a href="#kubectl命令补全" class="headerlink" title="kubectl命令补全"></a>kubectl命令补全</h2><p>解决无法使用Tab键补全kubectl命令问题</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">yum -y install bash-completion</span><br><span class="line">source /usr/share/bash-completion/bash_completion</span><br><span class="line">source &lt;(kubectl completion bash)</span><br><span class="line">echo &quot;source &lt;(kubectl completion bash)&quot; &gt;&gt; ~/.bashrc </span><br></pre></td></tr></table></figure><h2 id="node节点使用kubectl命令"><a href="#node节点使用kubectl命令" class="headerlink" title="node节点使用kubectl命令"></a>node节点使用kubectl命令</h2><p>解决kubectl无法在node上使用的问题<br>将主节点的<code>/etc/kubernetes/admin.conf</code>拷贝到node节点相同目录下，然后再node节点中配置一下环境变量。  </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">echo &quot;export KUBECONFIG=/etc/kubernetes/admin.conf&quot; &gt;&gt; ~/.bash_profile</span><br><span class="line">source ~/.bash_profile</span><br></pre></td></tr></table></figure><h1 id="问题以及解决"><a href="#问题以及解决" class="headerlink" title="问题以及解决"></a>问题以及解决</h1>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://s2.loli.net/2022/06/27/5UbYtS64yAIPXzM.jpg&quot; alt=&quot;k8s.jpg&quot;&gt;  &lt;/p&gt;</summary>
    
    
    
    <category term="Kubernetes" scheme="http://example.com/categories/Kubernetes/"/>
    
    
    <category term="k8s相关使用以及问题" scheme="http://example.com/tags/k8s%E7%9B%B8%E5%85%B3%E4%BD%BF%E7%94%A8%E4%BB%A5%E5%8F%8A%E9%97%AE%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>6-K8S核心技术Controller</title>
    <link href="http://example.com/2022/07/01/K8s/6-K8S%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AFController/"/>
    <id>http://example.com/2022/07/01/K8s/6-K8S%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AFController/</id>
    <published>2022-07-01T01:49:07.000Z</published>
    <updated>2022-08-12T01:54:35.470Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://s2.loli.net/2022/06/27/5UbYtS64yAIPXzM.jpg" alt="k8s.jpg">  </p><span id="more"></span><h1 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h1><p>k8s通常不会直接创建pod，而是通过controller来管理pod，controller中定义了pod的部署特性，为对应不同场景，k8s提供了多种controller。  </p><ol><li><p><strong>ReplicationController(RC)</strong> ：上一代无状态pod应用控制器，不建议使用，建议使用Deployment、ReplicaSet来取代  </p></li><li><p><strong>ReplicaSet(RS)</strong> ：新一代的ReplicationController实现了pod的多副本管理，使用Deployment时会自动创建ReplicaSet，也就是说Deployment是通过ReplicaSet来管理pod的多个副本，通常不使用ReplicaSet，而是通过Deployment去使用ReplicaSet(ReplicaSet不支持滚动更新，但是Deployment支持)  </p></li><li><p><strong>Deployment(deploy)</strong> ：用于管理无状态应用，是构建在ReplicaSet之上的，更为高级的控制器  </p></li><li><p><strong>StatefuleSet(sts)</strong> ：用于管理有状态应用，如数据库服务程序，与Deployment不同的是StatefulSet会为每一个pod创建一个独有的持久性标识，并确保pod间的顺序。有序收缩、有序删除  </p></li><li><p><strong>DeamonSet(ds)</strong> ：用于确保每一个节点都运行了某pod的一个副本，包括后来新增的节点，节点移除则导致pod回收。  </p></li><li><p><strong>job</strong> ：用于管理运行完成后即可终止的应用。  </p></li><li><p><strong>cronjob</strong> ：用于管理定时反复执行的任务  </p></li></ol><h2 id="Deployment（deploy）"><a href="#Deployment（deploy）" class="headerlink" title="Deployment（deploy）"></a>Deployment（deploy）</h2><h3 id="创建deployment"><a href="#创建deployment" class="headerlink" title="创建deployment"></a>创建deployment</h3><p>更多参数查看<a href="https://kubernetes.io/docs/reference/kubernetes-api/workload-resources/deployment-v1/">官方api文档</a><br>编辑</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span>   <span class="comment"># Deployment所在的api</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span>      <span class="comment"># 资源类型</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">nginx-deployment</span>  <span class="comment"># deployment名</span></span><br><span class="line">  <span class="attr">labels:</span>                 <span class="comment"># deployment标签</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">nginx</span></span><br><span class="line"><span class="attr">spec:</span>                       <span class="comment">#</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">3</span>               <span class="comment"># pod资源副本数</span></span><br><span class="line">  <span class="attr">selector:</span>                 <span class="comment"># 管理pod的标签</span></span><br><span class="line">    <span class="attr">matchLabels:</span>            <span class="comment"># 相当于使用matchExpressions &#123;key: app, operator: In, values: nginx&#125;</span></span><br><span class="line">      <span class="attr">app:</span> <span class="string">nginx</span></span><br><span class="line">  <span class="attr">template:</span>                 <span class="comment"># 定义要创建的pod</span></span><br><span class="line">    <span class="attr">metadata:</span>               <span class="comment"># pod的元数据</span></span><br><span class="line">      <span class="attr">labels:</span>               <span class="comment"># pod的标签</span></span><br><span class="line">        <span class="attr">app:</span> <span class="string">nginx</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">nginx</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">nginx:1.14.2</span></span><br><span class="line">        <span class="attr">ports:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">80</span>   <span class="comment">#指定要暴露的端口</span></span><br></pre></td></tr></table></figure><p>使用以上yaml创建nginx-deployment.yaml文件  </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">~]#</span><span class="bash"> kubectl apply -f nginx-deployment.yaml   <span class="comment"># 使用nginx-deployment.yaml创建deployment</span></span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">~]#</span><span class="bash"> kubectl get deploy</span></span><br><span class="line">NAME               READY        UP-TO-DATE   AVAILABLE   AGE</span><br><span class="line">nginx-deployment   3/3          3            3           15m</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">~]#</span><span class="bash"> kubectl rollout status deployment/nginx-deployment   <span class="comment">#查看nginx-deployment deployment发布状态</span></span></span><br><span class="line">deployment &quot;nginx-deployment&quot; successfully rolled out</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">~]#</span><span class="bash"> kubectl get pod,rs -o wide --show-labels  <span class="comment">#查看由deployment创建的pod、replicaSet</span></span></span><br><span class="line">NAME                                    READY   STATUS    RESTARTS   AGE   IP            NODE         NOMINATED NODE   READINESS GATES   LABELS</span><br><span class="line">pod/nginx-deployment-7fd6966748-bhlxj   1/1     Running   0          29m   10.244.2.8    k8s-node02   &lt;none&gt;           &lt;none&gt;            app=nginx,pod-template-hash=7fd6966748</span><br><span class="line">pod/nginx-deployment-7fd6966748-m85w9   1/1     Running   0          29m   10.244.1.11   k8s-node01   &lt;none&gt;           &lt;none&gt;            app=nginx,pod-template-hash=7fd6966748</span><br><span class="line">pod/nginx-deployment-7fd6966748-sx54r   1/1     Running   0          29m   10.244.2.9    k8s-node02   &lt;none&gt;           &lt;none&gt;            app=nginx,pod-template-hash=7fd6966748</span><br><span class="line"></span><br><span class="line">NAME                                                DESIRED   CURRENT   READY   AGE   CONTAINERS   IMAGES         SELECTOR                                 LABELS</span><br><span class="line">replicaset.extensions/nginx-deployment-7fd6966748   3         3         3       29m   nginx        nginx:1.14.2   app=nginx,pod-template-hash=7fd6966748   app=nginx,pod-template-hash=7fd6966748</span><br></pre></td></tr></table></figure><p>pod-template-hash标签是由spec.template（PodTemplate）生成的hash值，这个标签添加到由deployment生成的pod、ReplicaSet中  </p><h3 id="更新Deployment"><a href="#更新Deployment" class="headerlink" title="更新Deployment"></a>更新Deployment</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">~]#</span><span class="bash"> kubectl <span class="built_in">set</span> image deployment/nginx-deployment nginx=nginx:1.16.1   <span class="comment">#将nginx版本由创建时的1.14.2版本改为1.16.1</span></span></span><br><span class="line">deployment.extensions/nginx-deployment image updated</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">~]#</span><span class="bash"> kubectl edit deployment/nginx-deployment  <span class="comment">#使用编辑器直接修改nginx的版本</span></span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">~]#</span><span class="bash"> kubectl rollout status deployment/nginx-deployment   <span class="comment">#查看nginx-deployment deployment发布状态</span></span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">~]#</span><span class="bash"> kubectl get rs         <span class="comment"># 可以发现新的rs扩容到3个，并将旧rs缩容到0个</span></span></span><br><span class="line">NAME                          DESIRED   CURRENT   READY   AGE</span><br><span class="line">nginx-deployment-6f9d665859   3         3         3       8h</span><br><span class="line">nginx-deployment-7fd6966748   0         0         0       9h</span><br></pre></td></tr></table></figure><p>deployment更新的过程类似于，先创建一个新的rs，等待就绪后，将旧rs缩容到2，也就是创建一个新的，缩容一个旧的，直到新的rs扩容为3，旧的rs缩容为0。  </p><h4 id="Rollover"><a href="#Rollover" class="headerlink" title="Rollover"></a>Rollover</h4><p>Deployment每次更新都会创建新的rs、pod，当Deployment正在更新时再次被更新，正在扩容的rs将被当做为旧rs，然后在进行滚动更新。<br>例如：当Deployment正在创建5个nginx:1.14.2的副本，在创建了3个的时候将nginx改为nginx:1.16.1，这个时候刚创建的3个将被杀死，并开始创建新的副本，不会等待nginx:1.14.2创建完成后在进行更新  </p><h4 id="Deployment标签不可变"><a href="#Deployment标签不可变" class="headerlink" title="Deployment标签不可变"></a>Deployment标签不可变</h4><p>在 API 版本 apps/v1 中，Deployment 标签选择算符在创建后是不可变的。</p><h3 id="回滚Deployment"><a href="#回滚Deployment" class="headerlink" title="回滚Deployment"></a>回滚Deployment</h3><p>Deployment的所有上线记录都会保留在系统中，以便随时回滚。  </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">~]#</span><span class="bash"> kubectl rollout <span class="built_in">history</span> deployment/nginx-deployment  <span class="comment"># 查看deployment/nginx-deployment历史本本</span></span></span><br><span class="line">deployment.extensions/nginx-deployment</span><br><span class="line">REVISION  CHANGE-CAUSE</span><br><span class="line">3         &lt;none&gt;</span><br><span class="line">4         &lt;none&gt;</span><br><span class="line"><span class="meta">#</span><span class="bash"> 可以看到有两个历史版本，但是change-cause是空，CHANGE-CAUSE 的内容是从 Deployment 的 kubernetes.io/change-cause 注解复制过来的。</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">~]#</span><span class="bash"> kubectl annotate deployment/nginx-deployment kubernetes.io/change-cause=<span class="string">&quot;image updated to 1.16.1&quot;</span></span>   </span><br><span class="line"><span class="meta">#</span><span class="bash">当前nginx版本为1.16.1，为change-cause设定</span></span><br><span class="line">deployment.extensions/nginx-deployment annotated</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">~]#</span><span class="bash"> kubectl rollout <span class="built_in">history</span> deployment/nginx-deployment</span></span><br><span class="line">deployment.extensions/nginx-deployment</span><br><span class="line">REVISION  CHANGE-CAUSE</span><br><span class="line">3         &lt;none&gt;</span><br><span class="line">4         image updated to 1.16.1</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">~]#</span><span class="bash"> kubectl rollout <span class="built_in">history</span> deployment/nginx-deployment --revision=4  <span class="comment">#查看对应版本的详细记录</span></span></span><br><span class="line">deployment.extensions/nginx-deployment with revision #4</span><br><span class="line">Pod Template:</span><br><span class="line">  Labels:       app=nginx</span><br><span class="line">        pod-template-hash=6f9d665859</span><br><span class="line">  Annotations:  kubernetes.io/change-cause: image updated to 1.16.1</span><br><span class="line">  Containers:</span><br><span class="line">   nginx:</span><br><span class="line">    Image:      nginx:1.16.1</span><br><span class="line">    Port:       80/TCP</span><br><span class="line">    Host Port:  0/TCP</span><br><span class="line">    Environment:        &lt;none&gt;</span><br><span class="line">    Mounts:     &lt;none&gt;</span><br><span class="line">  Volumes:      &lt;none&gt;</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">~]#</span><span class="bash"> kubectl rollout undo deployment/nginx-deployment --to-revision=3  <span class="comment">#回滚到版本3</span></span></span><br><span class="line">deployment.extensions/nginx-deployment rolled back</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">~]#</span><span class="bash"> kubectl describe deploy nginx-deployment  <span class="comment">#查看当前nginx-deployment描述信息</span></span></span><br><span class="line">Name:                   nginx-deployment</span><br><span class="line">Namespace:              default</span><br><span class="line">CreationTimestamp:      Sat, 02 Jul 2022 21:56:47 +0800</span><br><span class="line">Labels:                 app=nginx</span><br><span class="line">Annotations:            deployment.kubernetes.io/revision: 5</span><br><span class="line">                        kubectl.kubernetes.io/last-applied-configuration:</span><br><span class="line">                          &#123;&quot;apiVersion&quot;:&quot;apps/v1&quot;,&quot;kind&quot;:&quot;Deployment&quot;,&quot;metadata&quot;:&#123;&quot;annotations&quot;:&#123;&#125;,&quot;labels&quot;:&#123;&quot;app&quot;:&quot;nginx&quot;&#125;,&quot;name&quot;:&quot;nginx-deployment&quot;,&quot;namespace&quot;:&quot;d...</span><br><span class="line">Selector:               app=nginx</span><br><span class="line">Replicas:               3 desired | 3 updated | 3 total | 3 available | 0 unavailable</span><br><span class="line">StrategyType:           RollingUpdate</span><br><span class="line">MinReadySeconds:        0</span><br><span class="line">RollingUpdateStrategy:  25% max unavailable, 25% max surge</span><br><span class="line">Pod Template:</span><br><span class="line">  Labels:  app=nginx</span><br><span class="line">  Containers:</span><br><span class="line">   nginx:</span><br><span class="line">    Image:        nginx:1.14.2</span><br><span class="line">    Port:         80/TCP</span><br><span class="line">    Host Port:    0/TCP</span><br><span class="line">    Environment:  &lt;none&gt;</span><br><span class="line">    Mounts:       &lt;none&gt;</span><br><span class="line">  Volumes:        &lt;none&gt;</span><br><span class="line">Conditions:</span><br><span class="line">  Type           Status  Reason</span><br><span class="line">  ----           ------  ------</span><br><span class="line">  Available      True    MinimumReplicasAvailable</span><br><span class="line">  Progressing    True    NewReplicaSetAvailable</span><br><span class="line">OldReplicaSets:  &lt;none&gt;</span><br><span class="line">NewReplicaSet:   nginx-deployment-7fd6966748 (3/3 replicas created)</span><br><span class="line">Events:</span><br><span class="line">  Type    Reason             Age                From                   Message</span><br><span class="line">  ----    ------             ----               ----                   -------</span><br><span class="line">  Normal  ScalingReplicaSet  66s (x2 over 11h)  deployment-controller  Scaled up replica set nginx-deployment-7fd6966748 to 1</span><br><span class="line">  Normal  ScalingReplicaSet  63s (x2 over 11h)  deployment-controller  Scaled down replica set nginx-deployment-6f9d665859 to 2</span><br><span class="line">  Normal  ScalingReplicaSet  63s (x2 over 11h)  deployment-controller  Scaled up replica set nginx-deployment-7fd6966748 to 2</span><br><span class="line">  Normal  ScalingReplicaSet  61s (x2 over 12h)  deployment-controller  Scaled up replica set nginx-deployment-7fd6966748 to 3</span><br><span class="line">  Normal  ScalingReplicaSet  61s                deployment-controller  Scaled down replica set nginx-deployment-6f9d665859 to 1</span><br><span class="line">  Normal  ScalingReplicaSet  59s                deployment-controller  Scaled down replica set nginx-deployment-6f9d665859 to 0</span><br></pre></td></tr></table></figure><h3 id="弹性伸缩"><a href="#弹性伸缩" class="headerlink" title="弹性伸缩"></a>弹性伸缩</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">~]#</span><span class="bash"> kubectl scale deployment/nginx-deployment --replicas=2  <span class="comment">#将deployment的副本数调整为2</span></span></span><br><span class="line">deployment.extensions/nginx-deployment scaled</span><br></pre></td></tr></table></figure><h3 id="暂停与恢复上线"><a href="#暂停与恢复上线" class="headerlink" title="暂停与恢复上线"></a>暂停与恢复上线</h3><p>在deployment上线过程中可以将此过程进行暂停以及恢复，可以在暂停期间进行修改，暂停之前的状态将继续发挥作用，新的更新在暂停期间不会发挥任何作用。暂停期间不能进行回滚  </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">~]#</span><span class="bash"> kubectl rollout pause deployment/nginx-deployment  <span class="comment">#暂停</span></span></span><br><span class="line">deployment.extensions/nginx-deployment paused</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">~]#</span><span class="bash"> kubectl rollout resume  deployment/nginx-deployment  <span class="comment">#恢复</span></span></span><br><span class="line">deployment.extensions/nginx-deployment resumed</span><br></pre></td></tr></table></figure><h3 id="deployment状态"><a href="#deployment状态" class="headerlink" title="deployment状态"></a>deployment状态</h3><p>查看当前状态</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">~]#</span><span class="bash"> kubectl describe deploy nginx-deployment</span></span><br><span class="line">Name:                   nginx-deployment</span><br><span class="line">Namespace:              default</span><br><span class="line">CreationTimestamp:      Sat, 02 Jul 2022 21:56:47 +0800</span><br><span class="line">Labels:                 app=nginx</span><br><span class="line">Annotations:            deployment.kubernetes.io/revision: 5</span><br><span class="line">                        kubectl.kubernetes.io/last-applied-configuration:</span><br><span class="line">                          &#123;&quot;apiVersion&quot;:&quot;apps/v1&quot;,&quot;kind&quot;:&quot;Deployment&quot;,&quot;metadata&quot;:&#123;&quot;annotations&quot;:&#123;&#125;,&quot;labels&quot;:&#123;&quot;app&quot;:&quot;nginx&quot;&#125;,&quot;name&quot;:&quot;nginx-deployment&quot;,&quot;namespace&quot;:&quot;d...</span><br><span class="line">Selector:               app=nginx</span><br><span class="line">Replicas:               2 desired | 2 updated | 2 total | 2 available | 0 unavailable</span><br><span class="line">StrategyType:           RollingUpdate</span><br><span class="line">MinReadySeconds:        0</span><br><span class="line">RollingUpdateStrategy:  25% max unavailable, 25% max surge</span><br><span class="line">Pod Template:</span><br><span class="line">  Labels:  app=nginx</span><br><span class="line">  Containers:</span><br><span class="line">   nginx:</span><br><span class="line">    Image:        nginx:1.14.2</span><br><span class="line">    Port:         80/TCP</span><br><span class="line">    Host Port:    0/TCP</span><br><span class="line">    Environment:  &lt;none&gt;</span><br><span class="line">    Mounts:       &lt;none&gt;</span><br><span class="line">  Volumes:        &lt;none&gt;</span><br><span class="line">Conditions:</span><br><span class="line">  Type           Status  Reason</span><br><span class="line">  ----           ------  ------</span><br><span class="line">  Available      True    MinimumReplicasAvailable</span><br><span class="line">  Progressing    True    NewReplicaSetAvailable</span><br><span class="line">OldReplicaSets:  &lt;none&gt;</span><br><span class="line">NewReplicaSet:   nginx-deployment-7fd6966748 (2/2 replicas created)</span><br><span class="line">Events:</span><br><span class="line">  Type    Reason             Age                From                   Message</span><br><span class="line">  ----    ------             ----               ----                   -------</span><br><span class="line">  Normal  ScalingReplicaSet  50m (x2 over 12h)  deployment-controller  Scaled up replica set nginx-deployment-7fd6966748 to 1</span><br><span class="line">  Normal  ScalingReplicaSet  50m (x2 over 12h)  deployment-controller  Scaled down replica set nginx-deployment-6f9d665859 to 2</span><br><span class="line">  Normal  ScalingReplicaSet  50m (x2 over 12h)  deployment-controller  Scaled up replica set nginx-deployment-7fd6966748 to 2</span><br><span class="line">  Normal  ScalingReplicaSet  50m (x2 over 13h)  deployment-controller  Scaled up replica set nginx-deployment-7fd6966748 to 3</span><br><span class="line">  Normal  ScalingReplicaSet  50m                deployment-controller  Scaled down replica set nginx-deployment-6f9d665859 to 1</span><br><span class="line">  Normal  ScalingReplicaSet  50m                deployment-controller  Scaled down replica set nginx-deployment-6f9d665859 to 0</span><br><span class="line">  Normal  ScalingReplicaSet  46m (x3 over 12h)  deployment-controller  Scaled down replica set nginx-deployment-7fd6966748 to 2</span><br></pre></td></tr></table></figure><p>deployment有三种运行状态， Progressing（进行中）、 Complete（已完成）、 Failed（失败），该状态会被添加到conditions中  </p><h4 id="Progressing（进行中）"><a href="#Progressing（进行中）" class="headerlink" title="Progressing（进行中）"></a>Progressing（进行中）</h4><ul><li>type: Progressing</li><li>status: “True”</li><li>reason: NewReplicaSetCreated | reason: FoundNewReplicaSet | reason: ReplicaSetUpdated</li></ul><h4 id="Complete（已完成）"><a href="#Complete（已完成）" class="headerlink" title="Complete（已完成）"></a>Complete（已完成）</h4><ul><li>type: Progressing</li><li>status: True</li><li>reason: NewReplicaSetAvailable</li></ul><p>Progressing 会一直持续为true，即使副本的可用状态有变化，Progressing状态也不会发生变化  </p><h4 id="Failed（失败）"><a href="#Failed（失败）" class="headerlink" title="Failed（失败）"></a>Failed（失败）</h4><p>检测该状态的方法是在deployment的资源清单中加入截止时间参数.spec.progressDeadlineSeconds。超过该参数设定的时间范围将会把deployment的状态发送到conditions中  </p><ul><li>Type=Progressing</li><li>Status=False</li><li>Reason=ProgressDeadlineExceeded</li></ul><h3 id="deployment-yaml参数介绍"><a href="#deployment-yaml参数介绍" class="headerlink" title="deployment yaml参数介绍"></a>deployment yaml参数介绍</h3><p>相关参数查看官方文档<a href="https://kubernetes.io/docs/reference/kubernetes-api/workload-resources/deployment-v1/">deployment API</a>、<a href="https://kubernetes.io/zh-cn/docs/reference/kubernetes-api/common-definitions/object-meta/">公共定义ObjectMeta</a>、<a href="https://kubernetes.io/docs/reference/kubernetes-api/workload-resources/pod-v1/">pod API</a>  </p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">extensions/v1beta1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">annotations:</span></span><br><span class="line">    <span class="attr">deployment.kubernetes.io/revision:</span> <span class="string">&quot;5&quot;</span>   <span class="comment">#当前deployment版本序号</span></span><br><span class="line">    <span class="attr">kubectl.kubernetes.io/last-applied-configuration:</span> <span class="string">|</span></span><br><span class="line"><span class="string">      &#123;&quot;apiVersion&quot;:&quot;apps/v1&quot;,&quot;kind&quot;:&quot;Deployment&quot;,&quot;metadata&quot;:&#123;&quot;annotations&quot;:&#123;&#125;,&quot;labels&quot;:&#123;&quot;app&quot;:&quot;nginx&quot;&#125;,&quot;name&quot;:&quot;nginx-deployment&quot;,&quot;namespace&quot;:&quot;default&quot;&#125;,&quot;spec&quot;:&#123;&quot;replicas&quot;:3,&quot;selector&quot;:&#123;&quot;matchLabels&quot;:</span></span><br><span class="line"><span class="string"></span>&#123;<span class="string">&quot;app&quot;</span><span class="string">:&quot;nginx&quot;</span>&#125;<span class="string">&#125;,&quot;template&quot;:&#123;&quot;metadata&quot;:&#123;&quot;labels&quot;:&#123;&quot;app&quot;:&quot;nginx&quot;&#125;&#125;,&quot;spec&quot;:&#123;&quot;containers&quot;:[&#123;&quot;image&quot;:&quot;nginx:1.14.2&quot;,&quot;name&quot;:&quot;nginx&quot;,&quot;ports&quot;:[&#123;&quot;containerPort&quot;:80&#125;]&#125;]&#125;&#125;&#125;&#125;</span></span><br><span class="line">  <span class="attr">creationTimestamp:</span> <span class="string">&quot;2022-07-02T13:56:47Z&quot;</span>  </span><br><span class="line">  <span class="attr">generation:</span> <span class="number">9</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">nginx</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">nginx-deployment</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">default</span></span><br><span class="line">  <span class="attr">resourceVersion:</span> <span class="string">&quot;155887&quot;</span></span><br><span class="line">  <span class="attr">selfLink:</span> <span class="string">/apis/extensions/v1beta1/namespaces/default/deployments/nginx-deployment</span></span><br><span class="line">  <span class="attr">uid:</span> <span class="string">9d3bea0f-dfd8-4787-9448-b2e91e46e4a8</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">progressDeadlineSeconds:</span> <span class="number">600</span>   <span class="comment">#进行状态截止时间</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">2</span>                    <span class="comment">#副本数</span></span><br><span class="line">  <span class="attr">revisionHistoryLimit:</span> <span class="number">10</span>       <span class="comment">#历史版本保存数量</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">app:</span> <span class="string">nginx</span></span><br><span class="line">  <span class="attr">strategy:</span>                     <span class="comment">#pod更新策略，有rollingUpdate与Recreate（创建新pod前会将所有pod先杀死）两种</span></span><br><span class="line">    <span class="attr">rollingUpdate:</span></span><br><span class="line">      <span class="attr">maxSurge:</span> <span class="number">25</span><span class="string">%</span>             <span class="comment">#可以超出预期pod量的大小</span></span><br><span class="line">      <span class="attr">maxUnavailable:</span> <span class="number">25</span><span class="string">%</span>       <span class="comment">#最大不可用百分比</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">RollingUpdate</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">creationTimestamp:</span> <span class="literal">null</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">app:</span> <span class="string">nginx</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">image:</span> <span class="string">nginx:1.14.2</span></span><br><span class="line">        <span class="attr">imagePullPolicy:</span> <span class="string">IfNotPresent</span>  <span class="comment">#镜像下载策略  IfNotPresent：如果本地有就不检查，如果没有就拉取</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">nginx</span></span><br><span class="line">        <span class="attr">ports:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">80</span></span><br><span class="line">          <span class="attr">protocol:</span> <span class="string">TCP</span></span><br><span class="line">        <span class="attr">resources:</span> &#123;&#125;    <span class="comment">#容器所需的计算资源</span></span><br><span class="line">        <span class="attr">terminationMessagePath:</span> <span class="string">/dev/termination-log</span></span><br><span class="line">        <span class="attr">terminationMessagePolicy:</span> <span class="string">File</span></span><br><span class="line">      <span class="attr">dnsPolicy:</span> <span class="string">ClusterFirst</span></span><br><span class="line">      <span class="attr">restartPolicy:</span> <span class="string">Always</span>    <span class="comment">#重启策略</span></span><br><span class="line">      <span class="attr">schedulerName:</span> <span class="string">default-scheduler</span></span><br><span class="line">      <span class="attr">securityContext:</span> &#123;&#125;</span><br><span class="line">      <span class="attr">terminationGracePeriodSeconds:</span> <span class="number">30</span></span><br><span class="line"><span class="attr">status:</span></span><br><span class="line">  <span class="attr">availableReplicas:</span> <span class="number">2</span></span><br><span class="line">  <span class="attr">conditions:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">lastTransitionTime:</span> <span class="string">&quot;2022-07-02T13:58:44Z&quot;</span></span><br><span class="line">    <span class="attr">lastUpdateTime:</span> <span class="string">&quot;2022-07-02T13:58:44Z&quot;</span></span><br><span class="line">    <span class="attr">message:</span> <span class="string">Deployment</span> <span class="string">has</span> <span class="string">minimum</span> <span class="string">availability.</span></span><br><span class="line">    <span class="attr">reason:</span> <span class="string">MinimumReplicasAvailable</span></span><br><span class="line">    <span class="attr">status:</span> <span class="string">&quot;True&quot;</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">Available</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">lastTransitionTime:</span> <span class="string">&quot;2022-07-03T03:31:18Z&quot;</span></span><br><span class="line">    <span class="attr">lastUpdateTime:</span> <span class="string">&quot;2022-07-03T03:31:18Z&quot;</span></span><br><span class="line">    <span class="attr">message:</span> <span class="string">ReplicaSet</span> <span class="string">&quot;nginx-deployment-7fd6966748&quot;</span> <span class="string">has</span> <span class="string">successfully</span> <span class="string">progressed.</span></span><br><span class="line">    <span class="attr">reason:</span> <span class="string">NewReplicaSetAvailable</span></span><br><span class="line">    <span class="attr">status:</span> <span class="string">&quot;True&quot;</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">Progressing</span></span><br><span class="line">  <span class="attr">observedGeneration:</span> <span class="number">9</span></span><br><span class="line">  <span class="attr">readyReplicas:</span> <span class="number">2</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">2</span></span><br><span class="line">  <span class="attr">updatedReplicas:</span> <span class="number">2</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://s2.loli.net/2022/06/27/5UbYtS64yAIPXzM.jpg&quot; alt=&quot;k8s.jpg&quot;&gt;  &lt;/p&gt;</summary>
    
    
    
    <category term="Kubernetes" scheme="http://example.com/categories/Kubernetes/"/>
    
    
    <category term="controller" scheme="http://example.com/tags/controller/"/>
    
  </entry>
  
  <entry>
    <title>Namespace</title>
    <link href="http://example.com/2022/06/29/Linux/Linux%E4%B9%8BNamespace/"/>
    <id>http://example.com/2022/06/29/Linux/Linux%E4%B9%8BNamespace/</id>
    <published>2022-06-29T13:24:38.000Z</published>
    <updated>2022-07-04T04:58:56.942Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://i.loli.net/2021/08/02/cX51yi4KrLYRfJU.jpg" alt="linux.jpg">  </p><span id="more"></span><h1 id="Namespace"><a href="#Namespace" class="headerlink" title="Namespace"></a>Namespace</h1><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>Linux namespace是Kernel的一个功能，可以将一些系统资源进行隔离。Namespace 是 Linux 内核用来隔离内核资源的方式。通过 namespace 可以让一些进程只能看到与自己相关的一部分资源，而另外一些进程也只能看到与它们自己相关的资源，这两拨进程根本就感觉不到对方的存在。Linux namespaces 是对全局系统资源的一种封装隔离，使得处于不同 namespace 的进程拥有独立的全局系统资源，改变一个 namespace 中的系统资源只会影响当前 namespace 里的进程，对其他 namespace 中的进程没有影响。  </p><p>用户可以创建指定类型的namespace，并将程序放入该namespace中，表示从前的系统中隔离出一个进程的运行环境，在此运行环境中的进程将认为自己拥有该namespace中的独立资源。 实际即使没有手动创建namespace，Linux系统开机后也会创建一个默认的namespace，称为 <strong>root namespace</strong>，所有进程默认都运行在root namespace中，每个进程都认为自己拥有该namespace中所有的全局资源。<br>每一个namespace都是基于当前内核，<strong>root namespace直接基于内核</strong>，<strong>用户创建的namespace运行环境基于当前所在的namespace</strong>，不直接基于内核是因为namespace可能会修改某些运行时内核参数。  </p><h2 id="namespace资源类型"><a href="#namespace资源类型" class="headerlink" title="namespace资源类型"></a>namespace资源类型</h2><p>每种资源都是随着Linux内核版本更新逐渐加入的，所以有些内核版本可能不具备某种namespace  </p><table><thead><tr><th align="center">namespace类型</th><th align="center">隔离的资源</th></tr></thead><tbody><tr><td align="center">IPC</td><td align="center">SystemV IPC(信号量、消息队列、共享内存)和POSIX消息队列</td></tr><tr><td align="center">Network</td><td align="center">网络设备、网络栈、端口</td></tr><tr><td align="center">Mount</td><td align="center">文件系统挂载点</td></tr><tr><td align="center">PID</td><td align="center">进程编号</td></tr><tr><td align="center">User</td><td align="center">用户和用户组</td></tr><tr><td align="center">UTS</td><td align="center">主机名和NIS域名</td></tr><tr><td align="center">Cgroup</td><td align="center">Cgroup的根目录</td></tr></tbody></table><h2 id="查看进程所在的namespace"><a href="#查看进程所在的namespace" class="headerlink" title="查看进程所在的namespace"></a>查看进程所在的namespace</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">]# ll /proc/$$/ns  &amp;&amp; ll /proc/1/ns</span><br><span class="line">total 0</span><br><span class="line">lrwxrwxrwx 1 root root 0 Jul  4 12:08 ipc -&gt; ipc:[4026531839]</span><br><span class="line">lrwxrwxrwx 1 root root 0 Jul  4 12:08 mnt -&gt; mnt:[4026531840]</span><br><span class="line">lrwxrwxrwx 1 root root 0 Jul  4 11:35 net -&gt; net:[4026531956]</span><br><span class="line">lrwxrwxrwx 1 root root 0 Jul  4 11:35 pid -&gt; pid:[4026531836]</span><br><span class="line">lrwxrwxrwx 1 root root 0 Jul  4 12:08 user -&gt; user:[4026531837]</span><br><span class="line">lrwxrwxrwx 1 root root 0 Jul  4 12:08 uts -&gt; uts:[4026531838]</span><br><span class="line">total 0</span><br><span class="line">lrwxrwxrwx 1 root root 0 Jul  4 11:18 ipc -&gt; ipc:[4026531839]</span><br><span class="line">lrwxrwxrwx 1 root root 0 Jul  4 11:18 mnt -&gt; mnt:[4026531840]</span><br><span class="line">lrwxrwxrwx 1 root root 0 Jun 30 23:28 net -&gt; net:[4026531956]</span><br><span class="line">lrwxrwxrwx 1 root root 0 Jun 30 23:28 pid -&gt; pid:[4026531836]</span><br><span class="line">lrwxrwxrwx 1 root root 0 Jul  4 11:18 user -&gt; user:[4026531837]</span><br><span class="line">lrwxrwxrwx 1 root root 0 Jul  4 11:18 uts -&gt; uts:[4026531838]</span><br></pre></td></tr></table></figure><p>路径下的文件都是软连接，指向的文件名中的数字表示namespace的inode，如果不同进程对应的文件的inode相同说明两个进程是在同一个namespace中。  </p><h2 id="Cgroup"><a href="#Cgroup" class="headerlink" title="Cgroup"></a>Cgroup</h2><p>Cgroups(Control Groups) 是Linux内核提供的一种可以限制、记录、隔离进程组（process groups）所使用的物理资源（如：cpu,memory,IO等等）的机制。可以对一组进程及将来的子进程的资源的限制、控制和统计的能力，这些资源包括CPU，内存，存储，网络等。通过Cgroups，可以方便的限制某个进程的资源占用，并且可以实时的监控进程的监控和统计信息。Cgroups也是LXC为实现虚拟化所使用的资源管理手段，可以说没有cgroups就没有LXC (Linux Container)。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">]#</span><span class="bash"> ll /sys/fs/cgroup/</span></span><br><span class="line">total 0</span><br><span class="line">drwxr-xr-x 2 root root  0 Jun 30 23:27 blkio                        #​​​定​​​输​​​入​​​/输​​​出​​​限​​​制​​​</span><br><span class="line">lrwxrwxrwx 1 root root 11 Jun 30 23:27 cpu -&gt; cpu,cpuacct           #使​​​用​​​调​​​度​​​程​​​序​​​提​​​供​​​对​​​CPU的​​​cgroup任​​​务访​​问</span><br><span class="line">​lrwxrwxrwx 1 root root 11 Jun 30 23:27 cpuacct -&gt; cpu,cpuacct       #自​​​动​​​生​​​成​​​cgroup中​​​任​​​务​​​所​​​使​​​用​​​的​​​CPU报​​​告</span><br><span class="line">drwxr-xr-x 3 root root  0 Jun 30 23:27 cpu,cpuacct</span><br><span class="line">drwxr-xr-x 2 root root  0 Jun 30 23:27 cpuset                       #​​​为​​​cgroup中​​​的​​​任​​​务​​​分​​​配​​​独​​​立​​​CPU（在​​​多​​​核​​​系​​​统​​​）和​​​内​​​存​​​节​​​点​​​</span><br><span class="line">drwxr-xr-x 2 root root  0 Jun 30 23:27 devices                      #允​​​许​​​或​​​者​​​拒​​​绝​​​ cgroup 中​​​的​​​任​​​务​​​访​​​问​​​设​​​备</span><br><span class="line">drwxr-xr-x 2 root root  0 Jun 30 23:27 freezer                      #挂​​​起​​​或​​​者​​​恢​​​复​​​ cgroup 中​​​的​​​任​​​务</span><br><span class="line">drwxr-xr-x 2 root root  0 Jun 30 23:27 hugetlb                      #主要针对于HugeTLB系统进行限制，这是一个大页文件系统</span><br><span class="line">drwxr-xr-x 3 root root  0 Jun 30 23:27 memory                       #设​​​定​​​ cgroup 中​​​任​​​务​​​使​​​用​​​的​​​内​​​存​​​限​​​制​​​，并​​​自​​​动​​​生​​​成​​​​​内​​​存​​​资​​​源使用​​​报​​​告</span><br><span class="line">lrwxrwxrwx 1 root root 16 Jun 30 23:27 net_cls -&gt; net_cls,net_prio</span><br><span class="line">drwxr-xr-x 2 root root  0 Jun 30 23:27 net_cls,net_prio</span><br><span class="line">lrwxrwxrwx 1 root root 16 Jun 30 23:27 net_prio -&gt; net_cls,net_prio</span><br><span class="line">drwxr-xr-x 2 root root  0 Jun 30 23:27 perf_event</span><br><span class="line">drwxr-xr-x 2 root root  0 Jun 30 23:27 pids</span><br><span class="line">drwxr-xr-x 4 root root  0 Jun 30 23:27 systemd</span><br></pre></td></tr></table></figure><h3 id="Cgroup分配限制资源"><a href="#Cgroup分配限制资源" class="headerlink" title="Cgroup分配限制资源"></a>Cgroup分配限制资源</h3><p>拿menory为例，进入<code>/sys/fs/cgroup/memory</code>下创建<code>test</code>，这样就相当创建一个menory的控制组，进入到test下会发现自动创建了许多文件，每个文件对应不同的限制条件，再将需要进行限制进程的PID添加到tasks中，这样就对这个进程的menory进行了限制，需要删除的话将这个目录删除即可  </p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://i.loli.net/2021/08/02/cX51yi4KrLYRfJU.jpg&quot; alt=&quot;linux.jpg&quot;&gt;  &lt;/p&gt;</summary>
    
    
    
    <category term="Linux" scheme="http://example.com/categories/Linux/"/>
    
    
    <category term="namespace" scheme="http://example.com/tags/namespace/"/>
    
  </entry>
  
  <entry>
    <title>5-K8S核心技术pod</title>
    <link href="http://example.com/2022/06/29/K8s/5-K8S%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AFpod/"/>
    <id>http://example.com/2022/06/29/K8s/5-K8S%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AFpod/</id>
    <published>2022-06-29T02:05:09.000Z</published>
    <updated>2022-07-02T14:37:30.250Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://s2.loli.net/2022/06/27/5UbYtS64yAIPXzM.jpg" alt="k8s.jpg">  </p><span id="more"></span><h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>pod是k8s中最小的单元，是一个抽象的概念，是一组容器的集合，是资源对象模型中用户创建或部署的最小的资源对象模型，也是k8s上运行容器化应用的资源对象，其他对象都是用来支撑或扩展pod对象功能的。每一个pod都有一个特殊的被称为“根容器”的pause容器，pause容器对应的镜像属于k8s平台的一部分。<br>pause容器又叫infra容器，后面将介绍改容器的作用。<br><img src="/2022/06/29/K8s/5-K8S%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AFpod/pod.png" alt="pod">  </p><h2 id="pod基本概念"><a href="#pod基本概念" class="headerlink" title="pod基本概念"></a>pod基本概念</h2><ul><li>最小部署单元  </li><li>pod是由一个或多个容器组成  </li><li>一个pod内的容器共享网络命名空间  </li><li>pod是短暂的  </li><li>每个pod包含一个或多个紧密相关的用户业务容器  </li></ul><h2 id="pod存在的意义"><a href="#pod存在的意义" class="headerlink" title="pod存在的意义"></a>pod存在的意义</h2><ol><li>容器是但进程设计，一个容器运行一个应用进程  </li><li>pod是多进程设计，一个pod中可以有多个容器，可以运行多个应用进程  </li><li>pod的存在是为了亲密作用  <ul><li>多应用之间进行交互  </li><li>网络之间的调用  </li><li>多个应用之间需要频繁调用  </li></ul></li></ol><p>pod的设计理念是支持多个容器在pod中共享网络地址和文件系统，可以通过进程通信和文件共享这种简单高效的方式完成组合。可以将pod看做是运行在k8s上的小机器人，k8s的业务可以分为以下几种：  </p><ul><li>长期伺服型：long-running  </li><li>批处理：batch  </li><li>节点后台支撑型：node-deamon  </li><li>有状态应用型：stateful application<br>对应的控制器分别为:deployment、job、deamonSet、statefulSet  </li></ul><h2 id="pod实现机制"><a href="#pod实现机制" class="headerlink" title="pod实现机制"></a>pod实现机制</h2><p>容器本身之间是隔离的，一般通过namespace和group进行隔离，而pod中共享网络、共享存储是通过pause容器来实现的  </p><h3 id="pause容器"><a href="#pause容器" class="headerlink" title="pause容器"></a>pause容器</h3><p>pause容器又叫infra容器，每个pod中都会有一个pause容器，其他容器称为业务容器，这些业务容器共享pause容器的网络和volume挂载卷；因此容器之间的通信和数据交换更为高效，可以充分利用这一点将一组密切关系的服务放在一个pod中；同一个pod中的容器之间使用localhost就能互相通信。这样pause容器就实现了pod内的共享网络与共享存储。  </p><h3 id="pause提供的功能"><a href="#pause提供的功能" class="headerlink" title="pause提供的功能"></a>pause提供的功能</h3><ul><li><em><strong>PID命名空间：作为Pod的“init进程”（pid=1，也即所有其它容器的父容器，所有其它进程的父进程），负责僵尸进程的回收，1.8之后的版本默认不共享PID</strong></em></li><li>网络命名空间：pod中的多个通容器可以访问同一个IP和端口范围  </li><li>IPC命名空间：pod中的多个容器能够使用systemV IPC或POSIX消息队列进行通信  </li><li>UTS命名空间：pod中的多个容器共享一个主机名、volume  </li></ul><h3 id="pause代码"><a href="#pause代码" class="headerlink" title="pause代码"></a>pause代码</h3><p><a href="https://github.com/kubernetes/kubernetes/blob/master/build/pause/linux/pause.c">github pause代码</a>  </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Copyright 2016 The Kubernetes Authors.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);</span></span><br><span class="line"><span class="comment">you may not use this file except in compliance with the License.</span></span><br><span class="line"><span class="comment">You may obtain a copy of the License at</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    http://www.apache.org/licenses/LICENSE-2.0</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Unless required by applicable law or agreed to in writing, software</span></span><br><span class="line"><span class="comment">distributed under the License is distributed on an &quot;AS IS&quot; BASIS,</span></span><br><span class="line"><span class="comment">WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span></span><br><span class="line"><span class="comment">See the License for the specific language governing permissions and</span></span><br><span class="line"><span class="comment">limitations under the License.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;signal.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/wait.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> STRINGIFY(x) #x</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> VERSION_STRING(x) STRINGIFY(x)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> VERSION</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> VERSION HEAD</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sigdown</span><span class="params">(<span class="keyword">int</span> signo)</span> </span>&#123;</span><br><span class="line">  psignal(signo, <span class="string">&quot;Shutting down, got signal&quot;</span>);</span><br><span class="line">  <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sigreap</span><span class="params">(<span class="keyword">int</span> signo)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">while</span> (waitpid(<span class="number">-1</span>, <span class="literal">NULL</span>, WNOHANG) &gt; <span class="number">0</span>)</span><br><span class="line">    ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> i;</span><br><span class="line">  <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt; argc; ++i) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!strcasecmp(argv[i], <span class="string">&quot;-v&quot;</span>)) &#123;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;pause.c %s\n&quot;</span>, VERSION_STRING(VERSION));</span><br><span class="line">      <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (getpid() != <span class="number">1</span>)</span><br><span class="line">    <span class="comment">/* Not an error because pause sees use outside of infra containers. */</span></span><br><span class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;Warning: pause should be the first process\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (sigaction(SIGINT, &amp;(struct sigaction)&#123;.sa_handler = sigdown&#125;, <span class="literal">NULL</span>) &lt; <span class="number">0</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">if</span> (sigaction(SIGTERM, &amp;(struct sigaction)&#123;.sa_handler = sigdown&#125;, <span class="literal">NULL</span>) &lt; <span class="number">0</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">  <span class="keyword">if</span> (sigaction(SIGCHLD, &amp;(struct sigaction)&#123;.sa_handler = sigreap,</span><br><span class="line">                                             .sa_flags = SA_NOCLDSTOP&#125;,</span><br><span class="line">                <span class="literal">NULL</span>) &lt; <span class="number">0</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (;;)</span><br><span class="line">    pause();</span><br><span class="line">  <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;Error: infinite loop terminated\n&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">42</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="共享namespace"><a href="#共享namespace" class="headerlink" title="共享namespace"></a>共享namespace</h3><p>在Linux系统中，创建一个新的子进程的时候，该进程就会集成父进程的namespace，k8s的pod就是模拟这种方式。创建pod时，里面第一个被创建的容器永远都是pause容器（系统自动创建），pause容器创建完成后才会创建用户业务容器，系统会为pause创建namespace，同一个pod内创建的业务容器都加入到pause容器的namespace，这样就处于同一个namespace中。从pause代码中可以发现最后是一个死循环+pause函数调用，pause函数的作用是让当前进程暂停，因为要维持namespace的存在就必须有一个属于这个namespace的进程或者文件存在，所以为了维护Pod里面pause创建的Namespace，pause就必须一直存在。  </p><h3 id="充当系统init进程"><a href="#充当系统init进程" class="headerlink" title="充当系统init进程"></a>充当系统init进程</h3><p>在Linux系统中，pid=1的进程我们称之为“init”进程，是内核启动的第一个用户级进程，现在比较新的Linux发行版的init进程就是systemd进程。这个进程有许多工作，其中一个重要工作就是负责“收养孤儿进程”，防止产生太多僵尸进程。简单介绍一下相关的基本概念：Linux系统维护了一个进程表，记录每个进程的状态信息和退出码（exit code），当一个进程退出时，它在表中的信息会一直保留，直到其父进程调用wait（包括waitpid）获取其退出码。所谓僵尸进程就是进程已经退出了，但它的信息还在进程表里面。正常情况下，进程退出时父进程会马上查询该表，并回收子进程的相关资源，所以僵尸进程的持续状态一般都很短。但如果（1）父进程启动子进程之后没有调用wait或者（2）父进程先于子进程挂掉了，那子进程就会变成僵尸进程。如果是第2种情况，即父进程先于子进程死掉了，那操作系统就会把init进程设置为该父进程所有子进程的父进程，即init进程收养了该父进程的所有子进程。当这些子进程退出时，init进程就会充当父进程的角色，从而避免长时间的僵尸进程。但对于第1种情况，一般认为是代码有缺陷，这种情况因为子进程的父进程存在（只是没有调用wait而已），init进程是不会做处理的。此时子进程会成为僵尸进程长期存在，如果要消除这种僵尸进程，只能kill掉父进程。<br>而pause容器的第二个功能就是充当这个init进程，负责回收僵尸进程。从上面的代码可以看到，pause启动的时候会判断自己的pid是否为1。不过如果要实现该功能，则Pod内的所有容器必须和pause共享PID Namespace。在K8s 1.8版本之前默认是开启PID Namespace共享的，之后版本默认关闭了，用户可以通过–docker-disable-shared-pid=true/false自行设置。开启PID Namespace的好处就是可以享受pause回收僵尸进程的功能，并且因为容器同处于一个PID Namespace，进程间通信也会变得非常方便。但也有一些弊端，比如有些容器进程的PID也必须为1（比如systemd进程），这就会和pause容器产生冲突，另外也会涉及一些安全问题。  </p><h2 id="影响pod调度的属性"><a href="#影响pod调度的属性" class="headerlink" title="影响pod调度的属性"></a>影响pod调度的属性</h2><h3 id="根据request进行调度"><a href="#根据request进行调度" class="headerlink" title="根据request进行调度"></a>根据request进行调度</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">resources:</span> <span class="comment">#资源管理</span></span><br><span class="line">  <span class="attr">requests:</span> <span class="comment">#容器运行时，最低资源需求，也就是说最少需要多少资源容器才能正常运行</span></span><br><span class="line">    <span class="attr">cpu:</span> <span class="number">0.1</span> <span class="comment">#CPU资源（核数），两种方式，浮点数或者是整数+m，0.1=100m，最少值为0.001核（1m）</span></span><br><span class="line">    <span class="attr">memory:</span> <span class="string">32Mi</span> <span class="comment">#内存使用量</span></span><br><span class="line">  <span class="attr">limits:</span> <span class="comment">#资源限制，表示最大占用的资源</span></span><br><span class="line">    <span class="attr">cpu:</span> <span class="number">0.5</span></span><br><span class="line">    <span class="attr">memory:</span> <span class="string">32Mi</span></span><br></pre></td></tr></table></figure><h3 id="根据nodeSelector调度"><a href="#根据nodeSelector调度" class="headerlink" title="根据nodeSelector调度"></a>根据nodeSelector调度</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">nodeSelector:</span></span><br><span class="line">    <span class="attr">KEY:</span> <span class="string">VALUE</span>   <span class="comment">#会将pod调度到设定有该标签的node上</span></span><br></pre></td></tr></table></figure><p>Label 是 Kubernetes 系统中另一个核心概念。一个 Label 是一个 key=value 的键值对，其中 key 与 value 由用户自己指 定。Label 可以附加到各种资源对象上，如 Node、Pod、Service、RC，一个资源对象可以定义任意数量的 Label， 同一个 Label 也可以被添加到任意数量的资源对象上，Label 通常在资源对象定义时确定，也可以在对象创建后动态 添加或删除。  </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 为node节点设定标签</span></span><br><span class="line">kubectl label node NODE_NAME KEY: VALUE</span><br></pre></td></tr></table></figure><h3 id="节点亲和性-nodeAffinity"><a href="#节点亲和性-nodeAffinity" class="headerlink" title="节点亲和性 nodeAffinity"></a>节点亲和性 nodeAffinity</h3><p><strong>硬亲和</strong>  </p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">affinity:</span> </span><br><span class="line">  <span class="attr">nodeAffinity:</span> </span><br><span class="line">    <span class="attr">requiredDuringSchedulingIgnoredDuringExecution:</span> </span><br><span class="line">      <span class="attr">nodeSelectorTerms:</span>   <span class="comment">#写多个满足其中一条就可以</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">matchExpressions:</span>  <span class="comment">#可以写多个满足必须同时满足</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">key:</span> <span class="string">KEY</span> <span class="comment">#node节点的标签 </span></span><br><span class="line">              <span class="attr">operator:</span> <span class="string">In</span>  <span class="comment"># 运算关系</span></span><br><span class="line">              <span class="attr">values:</span> </span><br><span class="line">                <span class="bullet">-</span> <span class="string">VALUE1</span> </span><br><span class="line">                <span class="bullet">-</span> <span class="string">VALUE2</span> </span><br></pre></td></tr></table></figure><p>通过<strong>required</strong>DuringSchedulingIgnoredDuringExecution硬亲和，约束条件必须满足。<br>上面的例子则表示为pod将会调度到标签KEY为VALUE1或VALUE2的节点上。  </p><p><strong>软亲和</strong>  </p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">affinity:</span></span><br><span class="line">  <span class="attr">nodeAffinity:</span></span><br><span class="line">    <span class="attr">preferredDuringSchedulingIgnoredDuringExecution:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">weight:</span>  <span class="number">60</span>  <span class="comment">#权重，1-100越大优先级越高</span></span><br><span class="line">      <span class="attr">preference:</span></span><br><span class="line">        <span class="attr">matchExpressions:</span></span><br><span class="line">        <span class="bullet">-</span> &#123;<span class="attr">key:</span> <span class="string">xxx</span>, <span class="attr">operator:</span> <span class="string">In</span>, <span class="attr">values:</span> <span class="string">xxx</span>&#125;</span><br><span class="line">    <span class="bullet">-</span> <span class="attr">weight:</span>  <span class="number">30</span></span><br><span class="line">      <span class="attr">preference:</span></span><br><span class="line">        <span class="attr">matchExpressions:</span></span><br><span class="line">        <span class="bullet">-</span> &#123;<span class="attr">key:</span> <span class="string">xxx</span>, <span class="attr">operator:</span> <span class="string">Exists</span>, <span class="attr">values:</span> <span class="string">xxx</span>&#125;</span><br></pre></td></tr></table></figure><p><strong>preferred</strong>DuringSchedulingIgnoredDuringExecution软亲和为尝试满足约束条件  </p><table><thead><tr><th align="center">operator参数</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">In</td><td align="center">label 的值在某个列表中</td></tr><tr><td align="center">NotIn</td><td align="center">label 的值不在某个列表中</td></tr><tr><td align="center">Gt</td><td align="center">label 的值大于某个值</td></tr><tr><td align="center">Lt</td><td align="center">label 的值小于某个值</td></tr><tr><td align="center">Exists</td><td align="center">某个 label 存在</td></tr><tr><td align="center">DoesNotExist</td><td align="center">某个 label 不存在</td></tr></tbody></table><h2 id="污点与污点容忍"><a href="#污点与污点容忍" class="headerlink" title="污点与污点容忍"></a>污点与污点容忍</h2><h3 id="污点"><a href="#污点" class="headerlink" title="污点"></a>污点</h3><p>使用kubectl taint可以为node设置污点，node被设置污点后将会与pod存在一种互斥关系，可以让node拒绝pod的调度，甚至将已经存在的pod驱逐出去<br>污点的组成  KEY=VALUE:EFFECT  其中value可以为空，EFFECT描述污点的作用，有以下三个选项：  </p><ul><li>NoSchedule ： 不会将pod调度到具有该污点的node上 </li><li>PreferNoSchedule：尽量避免将pod调度到有该污点的node上  </li><li>NoExecute：不会将pod调度到有该污点的node上，同时会将node上已有的pod驱逐  </li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 设置污点</span></span><br><span class="line">kubectl taint nodes NODENAME  KEY=VAULE:EFFECT</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看node的污点</span></span><br><span class="line">kubectl describe node NODENAME|grep Taint</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 去除污点</span></span><br><span class="line">kubectl taint nodes NODENAME KEY:EFFECT-</span><br></pre></td></tr></table></figure><h3 id="污点容忍"><a href="#污点容忍" class="headerlink" title="污点容忍"></a>污点容忍</h3><p>设置了污点的node和pod之间产生互斥关系，pod将一定程度上不会调度到这个node上，但可以为pod设置容忍度，设置了容忍度的pod将会容忍指定的污点，从而可以调度到该node上，污点与污点容忍组合使用，避免pod调度到不适合的node上。每个node可以有一个或多个污点，不能忍受这些污点的pod是不会被节点接受的  </p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">tolerations:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">key:</span> <span class="string">“key1”</span>            <span class="comment">#要与污点key保持一致才会生效</span></span><br><span class="line">    <span class="attr">operator:</span> <span class="string">“Equal”</span>    </span><br><span class="line">    <span class="attr">value:</span> <span class="string">“value1”</span>      <span class="comment">#要与污点value保持一致才会生效</span></span><br><span class="line">    <span class="attr">effect:</span> <span class="string">“NoExecute”</span></span><br><span class="line">    <span class="attr">tolerationSeconds:</span> <span class="number">3600</span>  <span class="comment"># 表示pod即使被驱逐可以继续运行时间</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">key:</span> <span class="string">“key1”</span></span><br><span class="line">    <span class="attr">operator:</span> <span class="string">“Equal”</span></span><br><span class="line">    <span class="attr">value:</span> <span class="string">“value1”</span></span><br><span class="line">    <span class="attr">effect:</span> <span class="string">“NoExecute”</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">key:</span> <span class="string">“key2”</span></span><br><span class="line">    <span class="attr">operator:</span> <span class="string">“Exists”</span>   <span class="comment">#若为Exists，则会忽略value</span></span><br><span class="line">    <span class="attr">effect:</span> <span class="string">“NoSchedule”</span></span><br></pre></td></tr></table></figure><p>当有多个master时，防止资源浪费，可以进行设置，让master也启动pod</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl taint nodes NODENAME node-role.kubernetes.io/master=:PreferNoSchedule</span><br></pre></td></tr></table></figure><p>当node有多个污点时，pod必须忍受所有的污点才可以调度到该node </p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://s2.loli.net/2022/06/27/5UbYtS64yAIPXzM.jpg&quot; alt=&quot;k8s.jpg&quot;&gt;  &lt;/p&gt;</summary>
    
    
    
    <category term="Kubernetes" scheme="http://example.com/categories/Kubernetes/"/>
    
    
    <category term="pod" scheme="http://example.com/tags/pod/"/>
    
  </entry>
  
  <entry>
    <title>4-YAML文件介绍</title>
    <link href="http://example.com/2022/06/29/K8s/4-YAML%E6%96%87%E4%BB%B6%E4%BB%8B%E7%BB%8D/"/>
    <id>http://example.com/2022/06/29/K8s/4-YAML%E6%96%87%E4%BB%B6%E4%BB%8B%E7%BB%8D/</id>
    <published>2022-06-28T16:48:35.000Z</published>
    <updated>2022-08-23T02:06:23.245Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://s2.loli.net/2022/06/27/5UbYtS64yAIPXzM.jpg" alt="k8s.jpg">  </p><span id="more"></span><h1 id="YAMl"><a href="#YAMl" class="headerlink" title="YAMl"></a>YAMl</h1><p>跳转至 <a href="/2022/03/24/YAML/YAML%E5%9F%BA%E7%A1%80/" title="YAML基础">YAML基础</a> 进行YAML学习。  </p><h2 id="k8s中YAML"><a href="#k8s中YAML" class="headerlink" title="k8s中YAML"></a>k8s中YAML</h2><p>k8s集群中对资源管理和资源对象编排部署都可由通过YAML文件来解决，也就是把需要对资源对象操作编辑到YAML文件中，把这种文件叫做<strong>资源清单文件</strong>，通过kubectl命令直接使用资源清单文件可以实现对大量的资源对象进行编排部署。  </p><h2 id="k8s中YAML文件组成部分"><a href="#k8s中YAML文件组成部分" class="headerlink" title="k8s中YAML文件组成部分"></a>k8s中YAML文件组成部分</h2><p><img src="/2022/06/29/K8s/4-YAML%E6%96%87%E4%BB%B6%E4%BB%8B%E7%BB%8D/YAML.png" alt="YAML">  </p><h2 id="属性说明"><a href="#属性说明" class="headerlink" title="属性说明"></a>属性说明</h2><table><thead><tr><th align="center">属性名称</th><th align="center">介绍</th></tr></thead><tbody><tr><td align="center">apiVersion</td><td align="center">API版本</td></tr><tr><td align="center">kind</td><td align="center">资源类型</td></tr><tr><td align="center">metadata</td><td align="center">资源元数据</td></tr><tr><td align="center">spec</td><td align="center">资源规格</td></tr><tr><td align="center">replicas</td><td align="center">副本数量</td></tr><tr><td align="center">selector</td><td align="center">标签选择器</td></tr><tr><td align="center">template</td><td align="center">pod模板</td></tr><tr><td align="center">containers</td><td align="center">容器配置</td></tr></tbody></table><h2 id="快速编写YAML文件"><a href="#快速编写YAML文件" class="headerlink" title="快速编写YAML文件"></a>快速编写YAML文件</h2><p>一般很少手写YAML文件，一般会借助工具来创建  </p><h3 id="使用kubectl-create"><a href="#使用kubectl-create" class="headerlink" title="使用kubectl create"></a>使用kubectl create</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl create deployment web --image=nginx -o yaml --dry-run &gt; lmy.yml</span><br></pre></td></tr></table></figure><h3 id="使用kubectl-get-deployment"><a href="#使用kubectl-get-deployment" class="headerlink" title="使用kubectl get deployment"></a>使用kubectl get deployment</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl get deployment web -o yaml --export &gt; lmy.yml</span><br></pre></td></tr></table></figure><h2 id="使用yaml文件创建资源"><a href="#使用yaml文件创建资源" class="headerlink" title="使用yaml文件创建资源"></a>使用yaml文件创建资源</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">kubectl create -f FILENAME  #资源不存在则创建资源，资源存在则抛出异常</span><br><span class="line">kubectl apply -f FILENAME   #资源不存在则创建资源，资源存在且文件中的配置改变则修改资源</span><br></pre></td></tr></table></figure><h2 id="yaml参数说明"><a href="#yaml参数说明" class="headerlink" title="yaml参数说明"></a>yaml参数说明</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span> <span class="comment">#指定api版本，此值必须在kubectl apiversion中</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span> <span class="comment">#指定创建资源的角色/类型</span></span><br><span class="line"><span class="attr">metadata:</span> <span class="comment">#资源的元数据/属性</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">web04-pod</span> <span class="comment">#资源的名字，在同一个namespace中必须唯一</span></span><br><span class="line">  <span class="attr">labels:</span> <span class="comment">#设定资源的标签</span></span><br><span class="line">    <span class="attr">k8s-app:</span> <span class="string">apache</span></span><br><span class="line">    <span class="attr">version:</span> <span class="string">v1</span></span><br><span class="line">    <span class="attr">kubernetes.io/cluster-service:</span> <span class="string">&quot;true&quot;</span></span><br><span class="line">  <span class="attr">annotations:</span>            <span class="comment">#自定义注解列表</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">String</span>        <span class="comment">#自定义注解名字</span></span><br><span class="line"><span class="attr">spec:</span> <span class="comment">#specification of the resource content 指定该资源的内容，定义，规范，目标状态，用户定义</span></span><br><span class="line">  <span class="attr">restartPolicy:</span> <span class="string">Always</span> <span class="comment">#表明该容器一直运行，默认k8s的策略，在此容器退出后，会立即创建一个相同的容器</span></span><br><span class="line">                        <span class="comment">#Onfailure，当容器停止且退出状态码不为0时，由kubelet自动重启该容器</span></span><br><span class="line">                        <span class="comment">#Never，不论容器运行状态如何，kubelet都不会重启该容器</span></span><br><span class="line">  <span class="attr">nodeSelector:</span>     <span class="comment">#节点选择，先给主机打标签kubectl label nodes kube-node1 zone=node1</span></span><br><span class="line">    <span class="attr">zone:</span> <span class="string">node1</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">web04-pod</span> <span class="comment">#容器的名字</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">web:apache</span> <span class="comment">#容器使用的镜像地址</span></span><br><span class="line">    <span class="attr">imagePullPolicy:</span> <span class="string">Never</span> <span class="comment">#三个选择Always、Never、IfNotPresent，每次启动时检查和更新（从registery）images的策略，</span></span><br><span class="line">                           <span class="comment"># Always，每次都重新拉取镜像</span></span><br><span class="line">                           <span class="comment"># Never，仅使用本地镜像</span></span><br><span class="line">                           <span class="comment"># IfNotPresent，如果本地有就用本地镜像，如果没有就拉取</span></span><br><span class="line">    <span class="attr">command:</span> [<span class="string">&#x27;sh&#x27;</span>] <span class="comment">#启动容器的运行命令，将覆盖容器中的Entrypoint,对应Dockefile中的ENTRYPOINT</span></span><br><span class="line">    <span class="attr">args:</span> [<span class="string">&quot;$(str)&quot;</span>] <span class="comment">#启动容器的命令参数，对应Dockerfile中CMD参数</span></span><br><span class="line">    <span class="attr">env:</span> <span class="comment">#指定容器中的环境变量</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">str</span> <span class="comment">#变量的名字</span></span><br><span class="line">      <span class="attr">value:</span> <span class="string">&quot;/etc/run.sh&quot;</span> <span class="comment">#变量的值</span></span><br><span class="line">    <span class="attr">resources:</span> <span class="comment">#资源管理</span></span><br><span class="line">      <span class="attr">requests:</span> <span class="comment">#容器运行时，最低资源需求，也就是说最少需要多少资源容器才能正常运行</span></span><br><span class="line">        <span class="attr">cpu:</span> <span class="number">0.1</span> <span class="comment">#CPU资源（核数），两种方式，浮点数或者是整数+m，0.1=100m，最少值为0.001核（1m）</span></span><br><span class="line">        <span class="attr">memory:</span> <span class="string">32Mi</span> <span class="comment">#内存使用量</span></span><br><span class="line">      <span class="attr">limits:</span> <span class="comment">#资源限制，表示最大占用的资源</span></span><br><span class="line">        <span class="attr">cpu:</span> <span class="number">0.5</span></span><br><span class="line">        <span class="attr">memory:</span> <span class="string">32Mi</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">80</span> <span class="comment">#容器开发对外的端口</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">httpd</span>  <span class="comment">#名称</span></span><br><span class="line">      <span class="attr">protocol:</span> <span class="string">TCP</span></span><br><span class="line">    <span class="attr">livenessProbe:</span> <span class="comment"># pod内容器健康检查的设置，检查失败将会杀死容器，然后根据restartPolicy来进行操作</span></span><br><span class="line">      <span class="attr">httpGet:</span> <span class="comment">#通过httpget检查健康，返回200-399之间，则认为容器正常</span></span><br><span class="line">        <span class="attr">path:</span> <span class="string">/</span> <span class="comment">#URI地址</span></span><br><span class="line">        <span class="attr">port:</span> <span class="number">80</span></span><br><span class="line">        <span class="comment">#host: 127.0.0.1 #主机地址</span></span><br><span class="line">        <span class="attr">scheme:</span> <span class="string">HTTP</span></span><br><span class="line">      <span class="attr">initialDelaySeconds:</span> <span class="number">180</span> <span class="comment">#表明第一次检测在容器启动后多长时间后开始</span></span><br><span class="line">      <span class="attr">timeoutSeconds:</span> <span class="number">5</span> <span class="comment">#检测的超时时间</span></span><br><span class="line">      <span class="attr">periodSeconds:</span> <span class="number">15</span>  <span class="comment">#检查间隔时间</span></span><br><span class="line">      <span class="comment">#也可以用这种方法</span></span><br><span class="line">      <span class="comment">#exec: 执行命令的方法进行监测，如果其退出码不为0，则认为容器正常</span></span><br><span class="line">      <span class="comment">#  command:</span></span><br><span class="line">      <span class="comment">#    - cat</span></span><br><span class="line">      <span class="comment">#    - /tmp/health</span></span><br><span class="line">      <span class="comment">#也可以用这种方法</span></span><br><span class="line">      <span class="comment">#tcpSocket: //通过tcpSocket检查健康</span></span><br><span class="line">      <span class="comment">#  port: number</span></span><br><span class="line">    <span class="attr">lifecycle:</span> <span class="comment">#生命周期管理</span></span><br><span class="line">      <span class="attr">postStart:</span> <span class="comment">#容器运行之前运行的任务</span></span><br><span class="line">        <span class="attr">exec:</span></span><br><span class="line">          <span class="attr">command:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">&#x27;sh&#x27;</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">&#x27;yum upgrade -y&#x27;</span></span><br><span class="line">      <span class="attr">preStop:</span> <span class="comment">#容器关闭之前运行的任务</span></span><br><span class="line">        <span class="attr">exec:</span></span><br><span class="line">          <span class="attr">command:</span> [<span class="string">&#x27;service httpd stop&#x27;</span>]</span><br><span class="line">    <span class="attr">volumeMounts:</span>  </span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">volume</span> <span class="comment">#挂载设备的名字，与volumes[*].name 需要对应</span></span><br><span class="line">      <span class="attr">mountPath:</span> <span class="string">/data</span> <span class="comment">#挂载到容器的某个路径下</span></span><br><span class="line">      <span class="attr">readOnly:</span> <span class="literal">True</span></span><br><span class="line">  <span class="attr">volumes:</span> <span class="comment">#定义一组挂载设备</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">volume</span> <span class="comment">#定义一个挂载设备的名字</span></span><br><span class="line">    <span class="comment">#meptyDir: &#123;&#125;</span></span><br><span class="line">    <span class="attr">hostPath:</span></span><br><span class="line">      <span class="attr">path:</span> <span class="string">/opt</span> <span class="comment">#挂载设备类型为hostPath，路径为宿主机下的/opt,这里设备类型支持很多种</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://s2.loli.net/2022/06/27/5UbYtS64yAIPXzM.jpg&quot; alt=&quot;k8s.jpg&quot;&gt;  &lt;/p&gt;</summary>
    
    
    
    <category term="Kubernetes" scheme="http://example.com/categories/Kubernetes/"/>
    
    
    <category term="YAML文件介绍" scheme="http://example.com/tags/YAML%E6%96%87%E4%BB%B6%E4%BB%8B%E7%BB%8D/"/>
    
  </entry>
  
  <entry>
    <title>3-k8s集群管理工具kubectl</title>
    <link href="http://example.com/2022/06/28/K8s/3-k8s%E9%9B%86%E7%BE%A4%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7kubectl/"/>
    <id>http://example.com/2022/06/28/K8s/3-k8s%E9%9B%86%E7%BE%A4%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7kubectl/</id>
    <published>2022-06-28T14:45:32.000Z</published>
    <updated>2022-08-23T02:10:16.167Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://s2.loli.net/2022/06/27/5UbYtS64yAIPXzM.jpg" alt="k8s.jpg">  </p><span id="more"></span><h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>kubectl是k8s集群的命令行工具，通过kubectl能够对集群本身进行管理，并能够在集群上进行容器化应用的安装和部署  </p><h1 id="命令格式"><a href="#命令格式" class="headerlink" title="命令格式"></a>命令格式</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl [command] [type] [name] [flags]</span><br></pre></td></tr></table></figure><p><strong>参数</strong><br><strong>command</strong>：指定要对资源执行的操作，例如：create、get、describe、delete<br><strong>type</strong>：指定资源类型，资源类型是大小写敏感的，可以使用单数、复数、缩略的形式<br><strong>name</strong>：资源的名称，大小写敏感，且可以省略，省略则会显示所有的资源<br><strong>flags</strong>：指定可选参数  </p><h2 id="kubectl中的简写"><a href="#kubectl中的简写" class="headerlink" title="kubectl中的简写"></a>kubectl中的简写</h2><p>certificatesigningrequests (缩写 csr)<br>componentstatuses (缩写 cs)<br>configmaps (缩写 cm)<br>customresourcedefinition (缩写 crd)<br><strong>daemonsets (缩写 ds)</strong><br><strong>deployments (缩写 deploy)</strong><br>endpoints (缩写 ep)<br>events (缩写 ev)<br>horizontalpodautoscalers (缩写 hpa)<br>ingresses (缩写 ing)<br>limitranges (缩写 limits)<br>namespaces (缩写 ns)<br>networkpolicies (缩写 netpol)<br><strong>nodes (缩写 no)</strong><br>persistentvolumeclaims (缩写 pvc)<br>persistentvolumes (缩写 pv)<br>poddisruptionbudgets (缩写 pdb)<br><strong>pods (缩写 po)</strong><br>podsecuritypolicies (缩写 psp)<br><strong>replicasets (缩写 rs)</strong><br>replicationcontrollers (缩写 rc)<br>resourcequotas (缩写 quota)<br>serviceaccounts (缩写 sa)<br><strong>services (缩写 svc)</strong><br><strong>statefulsets (缩写 sts)</strong><br>storageclasses (缩写 sc)</p><h2 id="获取帮助信息"><a href="#获取帮助信息" class="headerlink" title="获取帮助信息"></a>获取帮助信息</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 获取kubectl帮助信息</span></span><br><span class="line">kubectl --help</span><br><span class="line"><span class="meta">#</span><span class="bash"> 获取某个命令的介绍和使用</span>  </span><br><span class="line">kubectl get --help</span><br></pre></td></tr></table></figure><h2 id="基础命令"><a href="#基础命令" class="headerlink" title="基础命令"></a>基础命令</h2><table><thead><tr><th align="center">命令</th><th align="center">介绍</th></tr></thead><tbody><tr><td align="center">create</td><td align="center">通过文件名或者标准输入创建资源</td></tr><tr><td align="center">expose</td><td align="center">使用 replication controller, service, deployment 或者 pod并暴露它作为一个 新的 Kubernetes Service</td></tr><tr><td align="center">run</td><td align="center">在集群中运行一个指定镜像</td></tr><tr><td align="center">set</td><td align="center">在对象上设定特定的功能</td></tr><tr><td align="center">get</td><td align="center">显示一个或多个资源</td></tr><tr><td align="center">edit</td><td align="center">编辑一个资源</td></tr><tr><td align="center">delete</td><td align="center">通过文件名、标准输入、资源名、标签来删除资源</td></tr></tbody></table><h2 id="create"><a href="#create" class="headerlink" title="create"></a>create</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">kubectl create -f FILENAEM  #使用yaml文件创建资源</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="部署命令"><a href="#部署命令" class="headerlink" title="部署命令"></a>部署命令</h2><table><thead><tr><th align="center">命令</th><th align="center">介绍</th></tr></thead><tbody><tr><td align="center">rollout</td><td align="center">管理资源的发布</td></tr><tr><td align="center">scale</td><td align="center">为deployment、replicaSet、replicaController、job设置一个新的副本数量</td></tr><tr><td align="center">autoscale</td><td align="center">动调整一个 Deployment, ReplicaSet, 或者 ReplicationController的副本数量</td></tr></tbody></table><h2 id="集群管理命令"><a href="#集群管理命令" class="headerlink" title="集群管理命令"></a>集群管理命令</h2><table><thead><tr><th align="center">命令</th><th align="center">介绍</th></tr></thead><tbody><tr><td align="center">certificate</td><td align="center">修改证书资源</td></tr><tr><td align="center">cluster-info</td><td align="center">显示集群信息</td></tr><tr><td align="center">top</td><td align="center">显示资源</td></tr><tr><td align="center">cordon</td><td align="center">标记 node 为不可被调度</td></tr><tr><td align="center">uncordon</td><td align="center">标记 node 为 可被调度</td></tr><tr><td align="center">drain</td><td align="center">驱逐节点上的应用，准备下线维护</td></tr><tr><td align="center">taint</td><td align="center">更新一个或者多个 node 上的 taints</td></tr></tbody></table><h2 id="故障和调试命令"><a href="#故障和调试命令" class="headerlink" title="故障和调试命令"></a>故障和调试命令</h2><table><thead><tr><th align="center">命令</th><th align="center">介绍</th></tr></thead><tbody><tr><td align="center">describe</td><td align="center">显示特定资源或资源组的详细信息</td></tr><tr><td align="center">log</td><td align="center">输出容器在 pod 中的日志</td></tr><tr><td align="center">attach</td><td align="center">连接到现有容器中一个正在运行的进程</td></tr><tr><td align="center">exec</td><td align="center">执行命令到容器</td></tr><tr><td align="center">port-forward</td><td align="center">将一个或多个本地端口转发到pod</td></tr><tr><td align="center">proxy</td><td align="center">运行一个 proxy 到 Kubernetes API server</td></tr><tr><td align="center">cp</td><td align="center">拷贝文件或目录到容器中</td></tr><tr><td align="center">auth</td><td align="center">检查授权</td></tr></tbody></table><h2 id="其他命令"><a href="#其他命令" class="headerlink" title="其他命令"></a>其他命令</h2><table><thead><tr><th align="center">命令</th><th align="center">介绍</th></tr></thead><tbody><tr><td align="center">apply</td><td align="center">通过文件名或标准输入对资源应用的配置</td></tr><tr><td align="center">patch</td><td align="center">使用补丁修改、更新资源的字段</td></tr><tr><td align="center">replace</td><td align="center">通过文件名或标准输入替换一个资源</td></tr><tr><td align="center">convert</td><td align="center">不同API版本之前转换配置文件</td></tr><tr><td align="center">label</td><td align="center">更新资源上的标签</td></tr><tr><td align="center">annotate</td><td align="center">更新资源上的注释</td></tr><tr><td align="center">completion</td><td align="center">用于实现kubectl工具自动补全</td></tr><tr><td align="center">config</td><td align="center">修改k8s文件</td></tr><tr><td align="center">plugin</td><td align="center">运行一个命令行插件</td></tr><tr><td align="center">version</td><td align="center">打印客户端和服务版本信息</td></tr></tbody></table>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://s2.loli.net/2022/06/27/5UbYtS64yAIPXzM.jpg&quot; alt=&quot;k8s.jpg&quot;&gt;  &lt;/p&gt;</summary>
    
    
    
    <category term="Kubernetes" scheme="http://example.com/categories/Kubernetes/"/>
    
    
    <category term="K8S集群管理工具kubectl" scheme="http://example.com/tags/K8S%E9%9B%86%E7%BE%A4%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7kubectl/"/>
    
  </entry>
  
  <entry>
    <title>2-K8S集群部署</title>
    <link href="http://example.com/2022/06/27/K8s/2-K8S%E9%9B%86%E7%BE%A4%E9%83%A8%E7%BD%B2/"/>
    <id>http://example.com/2022/06/27/K8s/2-K8S%E9%9B%86%E7%BE%A4%E9%83%A8%E7%BD%B2/</id>
    <published>2022-06-27T02:38:09.000Z</published>
    <updated>2022-08-16T07:29:46.853Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://s2.loli.net/2022/06/27/5UbYtS64yAIPXzM.jpg" alt="k8s.jpg">  </p><span id="more"></span><h1 id="测试环境硬件要求"><a href="#测试环境硬件要求" class="headerlink" title="测试环境硬件要求"></a>测试环境硬件要求</h1><ul><li>master：2核、4G、20G  </li><li>node：4核 8G 40G  </li></ul><h1 id="k8s集群搭建方式"><a href="#k8s集群搭建方式" class="headerlink" title="k8s集群搭建方式"></a>k8s集群搭建方式</h1><ol><li>kubeadm<br>kubeadm是一个k8s部署工具，提供kubeadm init和kubeadm join  </li><li>二进制包<br>下载发行版二进制包，手动部署每个组件，组成k8s  </li></ol><h1 id="kubeadm部署方式介绍"><a href="#kubeadm部署方式介绍" class="headerlink" title="kubeadm部署方式介绍"></a>kubeadm部署方式介绍</h1><p>kubeadm是官方社区推出的一个用于快速部署k8s集群的工具，这个工具能通过两条指令完成一个k8s集群的部署<br>第一、创建一个master节点  kubeadm init<br>第二、将node节点加入到当前集群中 kubeadm join  </p><h2 id="安装部署要求"><a href="#安装部署要求" class="headerlink" title="安装部署要求"></a>安装部署要求</h2><ol><li>硬件配置：2G或更多，2个CPU或更多，硬盘30G或更多  </li><li>集群中所有机器网络互通  </li><li>可以访问外网，需要拉取镜像  </li><li>禁止swap分区  </li></ol><h2 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h2><ol><li>在所有节点上安装docker、kubeadm  </li><li>部署k8s master  </li><li>部署容器网络插件  </li><li>部署k8s node节点，将节点加入到k8s集群中  </li><li>部署 dashboard web页面，可视化查看k8s资源  </li></ol><h2 id="准备环境"><a href="#准备环境" class="headerlink" title="准备环境"></a>准备环境</h2><table><thead><tr><th align="center">角色</th><th align="center">IP</th></tr></thead><tbody><tr><td align="center">master</td><td align="center">192.168.27.8</td></tr><tr><td align="center">node1</td><td align="center">192.168.27.9</td></tr><tr><td align="center">node1</td><td align="center">192.168.27.10</td></tr></tbody></table><h2 id="系统初始化"><a href="#系统初始化" class="headerlink" title="系统初始化"></a>系统初始化</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">关闭防火墙</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> systemctl stop firewalld</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> systemctl <span class="built_in">disable</span> firewalld</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">关闭 selinux</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sed -i <span class="string">&#x27;s/enforcing/disabled/&#x27;</span> /etc/selinux/config <span class="comment"># 永久</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> setenforce 0 <span class="comment"># 临时</span></span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">关闭 swap</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> swapoff -a <span class="comment"># 临时</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> vim /etc/fstab <span class="comment"># 永久</span></span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">主机名</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> hostnamectl set-hostname &lt;hostname&gt;</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">在 master 添加 hosts</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> cat &gt;&gt; /etc/hosts &lt;&lt; <span class="string">EOF</span></span></span><br><span class="line">192.168.27.8 k8s-master</span><br><span class="line">192.168.27.9 k8s-node1</span><br><span class="line">192.168.27.10 k8s-node2</span><br><span class="line">EOF</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="string">将桥接的 IPv4 流量传递到 iptables 的链</span></span>  </span><br><span class="line"><span class="meta">$</span><span class="bash"><span class="string"> cat &gt; /etc/sysctl.d/k8s.conf &lt;&lt; EOF</span></span></span><br><span class="line">net.bridge.bridge-nf-call-ip6tables = 1</span><br><span class="line">net.bridge.bridge-nf-call-iptables = 1</span><br><span class="line">EOF</span><br><span class="line"><span class="meta">$</span><span class="bash"> sysctl --system <span class="comment"># 生效</span></span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">时间同步</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> yum install ntpdate -y</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> ntpdate time.windows.com</span></span><br></pre></td></tr></table></figure><h2 id="所有节点安装docker-kubeadm-kubelet"><a href="#所有节点安装docker-kubeadm-kubelet" class="headerlink" title="所有节点安装docker/kubeadm/kubelet"></a>所有节点安装docker/kubeadm/kubelet</h2><ol><li><p>安装docker  </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">wget https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo -O /etc/yum.repos.d/docker-ce.repo</span><br><span class="line">yum -y install docker-ce-18.06.1.ce-3.el7</span><br><span class="line">systemctl enable docker &amp;&amp; systemctl start docker</span><br><span class="line">docker --version</span><br></pre></td></tr></table></figure></li><li><p>设置镜像加速器  </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">sudo mkdir -p /etc/docker</span><br><span class="line">sudo tee /etc/docker/daemon.json &lt;&lt;-&#x27;EOF&#x27;</span><br><span class="line">&#123;</span><br><span class="line">  &quot;registry-mirrors&quot;: [&quot;https://det35a19.mirror.aliyuncs.com&quot;]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line">sudo systemctl daemon-reload</span><br><span class="line">sudo systemctl restart docker</span><br></pre></td></tr></table></figure></li><li><p>添加k8s软件源<br>使用的是阿里云镜像</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">cat &lt;&lt;EOF &gt; /etc/yum.repos.d/kubernetes.repo</span><br><span class="line">[kubernetes]</span><br><span class="line">name=Kubernetes</span><br><span class="line">baseurl=https://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64/</span><br><span class="line">enabled=1</span><br><span class="line">gpgcheck=1</span><br><span class="line">repo_gpgcheck=1</span><br><span class="line">gpgkey=https://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg https://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpg</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure></li><li><p>安装kubelet/kubeadm/kubectl  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yum install -y kubelet kubeadm kubectl</span><br><span class="line">systemctl enable kubelet &amp;&amp; systemctl start kubelet</span><br></pre></td></tr></table></figure></li></ol><h2 id="部署k8s-master"><a href="#部署k8s-master" class="headerlink" title="部署k8s master"></a>部署k8s master</h2><ol><li>在master节点执行  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">apiserver后的IP为master节点IP</span></span><br><span class="line"><span class="meta">#</span><span class="bash">image-repository指定阿里云镜像仓库</span></span><br><span class="line"><span class="meta">#</span><span class="bash">指定k8s版本</span></span><br><span class="line"> kubeadm init \</span><br><span class="line">--apiserver-advertise-address=192.168.27.8 \    </span><br><span class="line">--image-repository registry.aliyuncs.com/google_containers \</span><br><span class="line">--kubernetes-version v1.17.0 \</span><br><span class="line">--service-cidr=10.96.0.0/12 \</span><br><span class="line">--pod-network-cidr=10.244.0.0/16</span><br></pre></td></tr></table></figure></li></ol><p><strong>执行完成后会在末尾显示kubeadm join….内容，此为node节点添加到集群中时使用的命令，有效时长为24小时,过期后就需要重新创建token</strong>  </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">kubeadm token create --print-join-command</span><br><span class="line">kubeadm token list</span><br></pre></td></tr></table></figure><ol start="2"><li>根据上一步执行提示执行以下命令  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p $HOME/.kube</span><br><span class="line">sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config</span><br><span class="line">sudo chown $(id -u):$(id -g) $HOME/.kube/config</span><br></pre></td></tr></table></figure></li></ol><h2 id="安装pod网络插件"><a href="#安装pod网络插件" class="headerlink" title="安装pod网络插件"></a>安装pod网络插件</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">kubectl apply –f https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-sflannel.yml</span><br><span class="line"></span><br><span class="line">kubectl get pods -n kube-system </span><br></pre></td></tr></table></figure><p>因为是国外的源，可能会失败，可以尝试多试几次或者找国内的源  </p><h2 id="将node节点加入到k8s集群中"><a href="#将node节点加入到k8s集群中" class="headerlink" title="将node节点加入到k8s集群中"></a>将node节点加入到k8s集群中</h2><p>在执行kubeadm init 后末尾显示的命令在其他node中执行  </p><h2 id="测试k8s集群"><a href="#测试k8s集群" class="headerlink" title="测试k8s集群"></a>测试k8s集群</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">kubectl create deployment nginx --image=nginx</span><br><span class="line">kubectl expose deployment nginx --port=80 --type=NodePort</span><br><span class="line">kubectl get pod,svc</span><br></pre></td></tr></table></figure><p>访问地址：http://NodeIP:Port  </p><h1 id="二进制方式部署【待】"><a href="#二进制方式部署【待】" class="headerlink" title="二进制方式部署【待】"></a>二进制方式部署【待】</h1><h2 id="安装部署要求-1"><a href="#安装部署要求-1" class="headerlink" title="安装部署要求"></a>安装部署要求</h2><ol><li>硬件配置：2G或更多，2个CPU或更多，硬盘30G或更多  </li><li>集群中所有机器网络互通  </li><li>可以访问外网，需要拉取镜像  </li><li>禁止swap分区  </li></ol><h2 id="准备环境-1"><a href="#准备环境-1" class="headerlink" title="准备环境"></a>准备环境</h2><h3 id="软件环境"><a href="#软件环境" class="headerlink" title="软件环境"></a>软件环境</h3><table><thead><tr><th align="center">软件</th><th align="center">版本</th></tr></thead><tbody><tr><td align="center">docker</td><td align="center">19-ce</td></tr><tr><td align="center">kubernetes</td><td align="center">1.19</td></tr></tbody></table><h3 id="服务器规划"><a href="#服务器规划" class="headerlink" title="服务器规划"></a>服务器规划</h3><table><thead><tr><th align="center">角色</th><th align="center">IP</th><th align="center">组件</th></tr></thead><tbody><tr><td align="center">k8s-master</td><td align="center">192.168.27.8</td><td align="center">kube-apiserver，kube-controller-manager，kube-scheduler，etcd</td></tr><tr><td align="center">k8s-node1</td><td align="center">192.168.27.9</td><td align="center">kubelet，kube-proxy，docker etcd</td></tr><tr><td align="center">k8s-node2</td><td align="center">192.168.27.10</td><td align="center">kubelet，kube-proxy，docker，etcd</td></tr></tbody></table><h2 id="系统初始化-1"><a href="#系统初始化-1" class="headerlink" title="系统初始化"></a>系统初始化</h2><p>相关操作与kuneadm部署中系统初始化一样  </p><h2 id="部署etcd集群"><a href="#部署etcd集群" class="headerlink" title="部署etcd集群"></a>部署etcd集群</h2><p>etcd是一个分布式的键值存储系统，kubernetes使用功能etcd进行数据存储</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://s2.loli.net/2022/06/27/5UbYtS64yAIPXzM.jpg&quot; alt=&quot;k8s.jpg&quot;&gt;  &lt;/p&gt;</summary>
    
    
    
    <category term="Kubernetes" scheme="http://example.com/categories/Kubernetes/"/>
    
    
    <category term="K8S集群部署" scheme="http://example.com/tags/K8S%E9%9B%86%E7%BE%A4%E9%83%A8%E7%BD%B2/"/>
    
  </entry>
  
  <entry>
    <title>1-Kubernetes基本概念</title>
    <link href="http://example.com/2022/06/27/K8s/1-Kubernetes%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/"/>
    <id>http://example.com/2022/06/27/K8s/1-Kubernetes%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/</id>
    <published>2022-06-26T16:30:20.000Z</published>
    <updated>2022-08-08T08:30:16.730Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://s2.loli.net/2022/06/27/5UbYtS64yAIPXzM.jpg" alt="k8s.jpg">  </p><span id="more"></span><h1 id="K8S概述"><a href="#K8S概述" class="headerlink" title="K8S概述"></a>K8S概述</h1><p>k8s是谷歌开源的容器化集群管理系统<br>使用k8s进行容器化应用部署<br>使用k8s利于应用扩展<br>k8s目标是让部署容器化应用更加简洁和高效  </p><h1 id="K8S特性"><a href="#K8S特性" class="headerlink" title="K8S特性"></a>K8S特性</h1><ol><li>自动装箱：基于容器对应用运行环境的资源配置要求自动化部署应用容器  </li><li>自我修复（自愈能力）：当容器失败时，会对容器进行重启  </li><li>水平扩展：对应用容器进行规模扩大或者规模剪裁  </li><li>服务发现：通过K8S自身实现服务发现和负载均衡  </li><li>滚动更新：进行一次性或者批量式更新  </li><li>版本回退：历史版本即时回退  </li><li>秘钥和配置管理：在不需要重新构建镜像的情况下，可以部署和更新秘钥和应用配置，类似热部署  </li><li>存储编排：自动实现存储系统挂载和应用，存储系统可以来自于本地目录、网络存储、公有云存储服务  </li><li>批处理：一次性任务、定时任务</li></ol><h1 id="K8S集群架构组件"><a href="#K8S集群架构组件" class="headerlink" title="K8S集群架构组件"></a>K8S集群架构组件</h1><p><img src="/2022/06/27/K8s/1-Kubernetes%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/k8s%E6%9E%B6%E6%9E%84%E5%9B%BE.png" alt="K8s架构图">  </p><h2 id="master组件"><a href="#master组件" class="headerlink" title="master组件"></a>master组件</h2><ol><li>APIserver：集群统一入口，以restful方式，交给etcd存储  </li><li>scheduler：资源调度，选择node节点部署应用  </li><li>controller-manager：处理集群中常规后台任务，一个资源对应一个控制器  </li><li>etcd：存储系统，用于保存集群相关的数据   </li></ol><h2 id="node组件"><a href="#node组件" class="headerlink" title="node组件"></a>node组件</h2><ol><li>kubelet：master在node中的代表，管理本机容器  </li><li>kube-proxy：提供网络代理，负载均衡  </li></ol><h2 id="其他插件说明"><a href="#其他插件说明" class="headerlink" title="其他插件说明"></a>其他插件说明</h2><ol><li>COREDNS：可以为集群中的SVC创建一个域名IP的对应关系解析</li><li>DASHBOARD：给 K8S 集群提供一个 B/S 结构访问体系</li><li>INGRESS CONTROLLER：官方只能实现四层代理，INGRESS 可以实现七层代理</li><li>FEDERATION：提供一个可以跨集群中心多K8S统一管理功能</li><li>PROMETHEUS：提供K8S集群的监控能力</li><li>ELK：提供 K8S 集群日志统一分析介入平台</li><li>Flannel：网络插件，Flannel可分配的IP地址段资源保存在ETCD中，监控ETCD中每个pod的实际地址，并在内存中建立维护pod节点路由表  </li></ol><h1 id="K8S核心概念"><a href="#K8S核心概念" class="headerlink" title="K8S核心概念"></a>K8S核心概念</h1><ol><li>pod  </li></ol><ul><li>最小部署单元  </li><li>一组容器的集合  </li><li>pod内共享网络  </li><li>生命周期是短暂的（服务器重启后就找不到了）  </li></ul><ol start="2"><li>controller  </li></ol><ul><li>确保预期的pod副本数量（replicaSet）  </li><li>一次性任务和定时任务（job和cronjob）  </li><li>有状态应用部署（statefulSet）与无状态应用部署（Depoltment）（无状态应用部署即无部署或使用条件，有条件应用部署反之）  </li><li>确保所有的node同时运行一个pod（DaemonSet）  </li></ul><ol start="3"><li>service  </li></ol><ul><li>定义一组pod的访问规则  </li><li>pod的负载均衡，提供一个或多个pod的稳定的访问地址  </li></ul><ol start="4"><li>volume  </li></ol><ul><li>声明在pod中可以访问的文件目录  </li><li>可以被挂载到一个或多个容器指定路径下</li><li>支持多种后端存储  </li></ul><ol start="5"><li>deployment  </li></ol><ul><li>定义一组pod副本数目，版本等  </li><li>通过控制器controller维持pod数目  </li><li>通过控制器以指定的策略控制版本  </li></ul><ol start="6"><li>label  </li></ol><ul><li>标签，用于对对象资源查询、筛选  </li></ul><ol start="7"><li>namespace  </li></ol><ul><li>命名空间，逻辑隔离  </li><li>一个集群内部的逻辑隔离机制（鉴权、资源）  </li><li>每一个资源都属于一个namespace  </li><li>同一个namespace中所有资源不能重复  </li><li>不同namespace中的资源名可以重复  </li></ul><h1 id="完整流程"><a href="#完整流程" class="headerlink" title="完整流程"></a>完整流程</h1><ol><li>通过kubectl提交一个创建replication controller（RC），亲通过APIserver写入到etcd中  </li><li>controller-manager通过APIserver监听到此RC  </li><li>分析之后发现集群中还没有它对应的pod  </li><li>根据RC中的pod模板定义一个生成pod对象，通过APIserver写入到etcd中  </li><li>此事件被scheduler发现，立即执行一个复杂的调度流程，为这个pod选定一个node，然后通过APIserver将这一事件写入到etcd中  </li><li>目标node上云心给的kubelet进程通过APIserver检测到这个新的pod，并按照他的定义启动该pod，并进行管理  </li><li>随后通过kubectl提交一个新的映射到该pod的service的创建请求  </li><li>controller-manager通过label标签查询到关联的pod实例，然后生成service的endpoints信息，并通过APIserver写入到etcd中  </li><li>所有node上运行的proxy进程通过APIserver查询并监听service对象与对应的endpoints信息，建立一个软件方式的负载均衡来实现service访问到后端pod的流量转发功能  </li></ol><p>endpoints：endpoint是k8s集群中的一个资源对象，存储在etcd中，用来记录一个service对应的所有pod的访问地址。service配置selector，endpoint controller才会自动创建对应的endpoint对象；否则，不会生成endpoint对象  </p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://s2.loli.net/2022/06/27/5UbYtS64yAIPXzM.jpg&quot; alt=&quot;k8s.jpg&quot;&gt;  &lt;/p&gt;</summary>
    
    
    
    <category term="Kubernetes" scheme="http://example.com/categories/Kubernetes/"/>
    
    
    <category term="K8s基本概念" scheme="http://example.com/tags/K8s%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/"/>
    
  </entry>
  
  <entry>
    <title>2-MongoDB基础</title>
    <link href="http://example.com/2022/05/26/mongoDB/2-MongoDB%E5%9F%BA%E7%A1%80/"/>
    <id>http://example.com/2022/05/26/mongoDB/2-MongoDB%E5%9F%BA%E7%A1%80/</id>
    <published>2022-05-26T02:06:19.000Z</published>
    <updated>2022-06-08T02:46:44.526Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://s2.loli.net/2022/05/25/cnIFxBYjKNfkvA7.jpg" alt="mongoDB.png">  </p><span id="more"></span><h1 id="MOngoDB概念"><a href="#MOngoDB概念" class="headerlink" title="MOngoDB概念"></a>MOngoDB概念</h1><table><thead><tr><th>SQL</th><th>MongoDB</th><th>说明</th></tr></thead><tbody><tr><td>database</td><td>database</td><td>数据库</td></tr><tr><td>table</td><td>collection</td><td>数据库表/集合</td></tr><tr><td>row</td><td>document</td><td>行/文档</td></tr><tr><td>column</td><td>field</td><td>字段/域</td></tr><tr><td>index</td><td>index</td><td>索引</td></tr><tr><td>primary key</td><td>primary key</td><td>主键，mongodb自动将_id设置为主键</td></tr></tbody></table><h2 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">show dbs            #显示所有数据的列表</span><br><span class="line">db                  #显示当前数据库对象或集合</span><br><span class="line">use  [database]     #连接到一个指定的数据库</span><br></pre></td></tr></table></figure><h3 id="数据库命名规则"><a href="#数据库命名规则" class="headerlink" title="数据库命名规则"></a>数据库命名规则</h3><ol><li>不能是空字符串  </li><li>不能含有空格、点、$、/、\  </li><li><strong>应全部小写</strong>  </li><li>最多64字节  </li></ol><h3 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h3><p>使用<code>use DATABASE_NAME</code>进行创建数据库，若没有该数据库则创建，若有则切换。<br>需要注意的是创建完成数据库是空的，使用<code>show dbs</code>不会显示，若要显示改数据库，则需要在该库中添加一些数据</p><h3 id="删除数据库"><a href="#删除数据库" class="headerlink" title="删除数据库"></a>删除数据库</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; use DATABASE_NAME </span><br><span class="line">&gt; db.dropDatabase()</span><br></pre></td></tr></table></figure><h2 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h2><p>集合存在于数据库中，集合没有固定给的结构，可以插入不同格式和类型的数据。当第一个文档插入时，集合就会被创建。  </p><h3 id="集合命名规则"><a href="#集合命名规则" class="headerlink" title="集合命名规则"></a>集合命名规则</h3><ol><li>不能是空字符串  </li><li>不能以system开头，这些是系统合集保留的前缀</li><li>不应包含$  </li></ol><h3 id="capped-collection"><a href="#capped-collection" class="headerlink" title="capped collection"></a>capped collection</h3><p>固定大小的collection，具有很高的性能以及队列过期的特性，可以按照文档的插入顺序保存到集合中，而且这些文档在磁盘上存放位置也是按照插入顺序来保存的，所以当我们更新Capped collections 中文档的时候，更新后的文档不可以超过之前文档的大小，这样话就可以确保所有文档在磁盘上的位置一直保持不变，创建时指定collection的大小，单位是字节，collection的空间是提前分配的。  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.createCollection(&quot;test&quot;, &#123;capped:true, size:100000&#125;)</span><br></pre></td></tr></table></figure><h3 id="创建集合"><a href="#创建集合" class="headerlink" title="创建集合"></a>创建集合</h3><p><code>db.createCollection(NAME，OPTIONS)</code><br>capped：true时创建固定合集<br>size：为固定合集指定一个最大值，单位是字节<br>max：固定合集中包含文档的最大数量  </p><p><code>show collections</code>或者<code>show tables</code>查看已有合集。  </p><h3 id="删除合集"><a href="#删除合集" class="headerlink" title="删除合集"></a>删除合集</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.COLLECTION_NAME.drop()</span><br></pre></td></tr></table></figure><h2 id="文档"><a href="#文档" class="headerlink" title="文档"></a>文档</h2><p>文档是一组键值对，不需要设置相同的字段，并且相同的字段不需要相同的数据类型。  </p><ul><li>键值对是有序的  </li><li>区分类型与大小写  </li><li>文档中不能有重复的键  </li><li>文档的键是字符串</li></ul><h3 id="插入文档"><a href="#插入文档" class="headerlink" title="插入文档"></a>插入文档</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">db.COLLECTION_NAME.insert()  # 插入文档，不用遍历，效率高，插入的文档主键已在合集中存在时会报错  </span><br><span class="line">db.COLLECTION_NAME.save()    # 插入文档，插入时需要遍历列表，插入的文档主键已在合集中存在时会将原有文档更新</span><br><span class="line">db.COLLECTION_NAME.insertOne()  #插入一个新文档</span><br><span class="line">db.COLLECTION_NAME.inserMany()  #插入多个新文档，插入方式为有序插入</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># insertMany插入</span><br><span class="line">&gt; db.test.insertMany([&#123;&quot;name&quot;:&quot;yyg&quot;&#125;,&#123;&quot;name&quot;:&quot;yang&quot;&#125;,&#123;&quot;name&quot;:&quot;guang&quot;&#125;])</span><br><span class="line">&#123;</span><br><span class="line">        &quot;acknowledged&quot; : true,</span><br><span class="line">        &quot;insertedIds&quot; : [</span><br><span class="line">                ObjectId(&quot;629080043373edb925a0056f&quot;),</span><br><span class="line">                ObjectId(&quot;629080043373edb925a00570&quot;),</span><br><span class="line">                ObjectId(&quot;629080043373edb925a00571&quot;)</span><br><span class="line">        ]</span><br><span class="line">&#125;</span><br><span class="line">&gt; db.test.find()</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;629080043373edb925a0056f&quot;), &quot;name&quot; : &quot;yyg&quot; &#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;629080043373edb925a00570&quot;), &quot;name&quot; : &quot;yang&quot; &#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;629080043373edb925a00571&quot;), &quot;name&quot; : &quot;guang&quot; &#125;</span><br></pre></td></tr></table></figure><h3 id="更新文档"><a href="#更新文档" class="headerlink" title="更新文档"></a>更新文档</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">db.COLLECTION_NAME.update(&lt;query&gt;,&lt;update&gt;,</span><br><span class="line">   &#123;</span><br><span class="line">     upsert: &lt;boolean&gt;,</span><br><span class="line">     multi: &lt;boolean&gt;,</span><br><span class="line">     writeConcern: &lt;document&gt;</span><br><span class="line">   &#125;</span><br><span class="line">)</span><br><span class="line"># query : update的查询条件，类似sql update查询内where后面的</span><br><span class="line"># update : update的对象和一些更新的操作符（如$,$inc...）等，也可以理解为sql update查询内set后面的</span><br><span class="line"># upsert : 可选，这个参数的意思是，如果不存在update的记录，是否插入objNew,true为插入，默认是false，不插入。</span><br><span class="line"># multi : 可选，mongodb 默认是false,只更新找到的第一条记录，如果这个参数为true,就把按条件查出来多条记录全部更新。</span><br><span class="line"># writeConcern :可选，抛出异常的级别。</span><br><span class="line"></span><br><span class="line">db.COLLECTION_NAME.save()     #将传入的文档替换原有的文档，主键不存在就插入，存在就替换</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h3 id="删除文档"><a href="#删除文档" class="headerlink" title="删除文档"></a>删除文档</h3>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://s2.loli.net/2022/05/25/cnIFxBYjKNfkvA7.jpg&quot; alt=&quot;mongoDB.png&quot;&gt;  &lt;/p&gt;</summary>
    
    
    
    <category term="MongoDB" scheme="http://example.com/categories/MongoDB/"/>
    
    
    <category term="MongoDB基础" scheme="http://example.com/tags/MongoDB%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>1-MongoDB安装部署</title>
    <link href="http://example.com/2022/05/25/mongoDB/1-MongoDB%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2/"/>
    <id>http://example.com/2022/05/25/mongoDB/1-MongoDB%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2/</id>
    <published>2022-05-25T07:38:07.000Z</published>
    <updated>2022-06-20T05:46:51.337Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://s2.loli.net/2022/05/25/cnIFxBYjKNfkvA7.jpg" alt="mongoDB.png">  </p><span id="more"></span><h2 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h2><ul><li>面向集合存储，易存储对象类型的数据  </li><li>支持查询以及动态查询  </li><li>文件存储为BSON（类似JSON）</li><li>支持复制、故障恢复、分片 </li></ul><h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><ul><li>游戏应用：存储用户信息，用户的游戏装备，积分等直接内嵌文档的方式存储，方便进行查询与更新  </li><li>物流应用：存储订单信息，订单状态在运送过程中不断更新，以内嵌数组来进行存储，一次查询就能将订单所有的变更读取</li><li>社交应用：存储用户信息以及用户发表的朋友圈信息  </li><li></li></ul><h2 id="MongoDB安装包下载"><a href="#MongoDB安装包下载" class="headerlink" title="MongoDB安装包下载"></a>MongoDB安装包下载</h2><p><img src="/2022/05/25/mongoDB/1-MongoDB%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2/%E4%B8%8B%E8%BD%BD%E4%BD%8D%E7%BD%AE.png" alt="下载位置">  </p><!--more-->    <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">yum install libcurl openssl   #两个依赖包</span><br><span class="line">wget https://fastdl.mongodb.org/linux/mongodb-linux-x86_64-rhel70-5.0.8.tgz</span><br><span class="line">mkdir /usr/local/MongoDB</span><br><span class="line">mkdir /usr/local/MongoDB/data           #数据存储目录</span><br><span class="line">mkdir /usr/local/MongoDB/log            #日志文件目录</span><br><span class="line">mkdir /usr/local/MongoDB/source         #源包目录</span><br><span class="line">mv mongodb-linux-x86_64-rhel70-5.0.8.tgz  /usr/local/MongoDB #将安装包解压后的文件目录名修改为mongodbServer，以方便后期操作</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">将/ety/profile 中添加一下两行</span></span><br><span class="line">export MONGODB_HOME=/usr/local/MongoDB/mongodbServer</span><br><span class="line">export PATH=$PATH:$MONGODB_HOME/bin</span><br></pre></td></tr></table></figure><p>编辑配置文件  </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">]#</span><span class="bash"> more /usr/<span class="built_in">local</span>/MongoDB/mongodbServer/bin/mongod.conf</span></span><br><span class="line">storage:</span><br><span class="line">    dbPath: &quot;/usr/local/MongoDB/data&quot;           #数据存放位置</span><br><span class="line">systemLog:</span><br><span class="line">    destination: file</span><br><span class="line">    path: &quot;/usr/local/MongoDB/log/mongod.log&quot;   #日持存放位置</span><br><span class="line">    logAppend: true</span><br><span class="line">net:</span><br><span class="line">    port: 27017       #指定端口，默认即使27017</span><br><span class="line">    bindIpAll: true</span><br><span class="line">processManagement:</span><br><span class="line">    fork: true        #后台执行</span><br></pre></td></tr></table></figure><h2 id="文件介绍"><a href="#文件介绍" class="headerlink" title="文件介绍"></a>文件介绍</h2><p>/usr/local/MongoDB/mongodbServer/bin下脚本文件介绍<br>install_compass：安装compass工具<br>mongo：mongo客户端工具<br>mongod：mongo启动脚本<br>mongos：路由脚本  </p><h2 id="启动MongoDB"><a href="#启动MongoDB" class="headerlink" title="启动MongoDB"></a>启动MongoDB</h2><ol><li><p>方式一</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">]#</span><span class="bash"> mongod --config /usr/<span class="built_in">local</span>/MongoDB/mongodbServer/bin/mongod.conf</span></span><br><span class="line">about to fork child process, waiting until server is ready for connections.</span><br><span class="line">forked process: 15646</span><br><span class="line">child process started successfully, parent exiting</span><br></pre></td></tr></table></figure></li><li><p>方式二  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mongod  --port=27017 --dbpath=/usr/local/MongoDB/data  --logpath=/usr/local/MongoDB/log/mongod.log</span><br></pre></td></tr></table></figure></li></ol><h2 id="停止MongoDB"><a href="#停止MongoDB" class="headerlink" title="停止MongoDB"></a>停止MongoDB</h2><ul><li><p>方法一  </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">]#</span><span class="bash"> mongo</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> use admin</span></span><br><span class="line">switched to db admin</span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> db</span></span><br><span class="line">admin</span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> db.shutdownServer()</span></span><br><span class="line">server should be down...</span><br></pre></td></tr></table></figure></li><li><p>方法二  </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">]#</span><span class="bash"> mongod --config /usr/<span class="built_in">local</span>/MongoDB/mongodbServer/bin/mongod.conf --shutdown</span></span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://s2.loli.net/2022/05/25/cnIFxBYjKNfkvA7.jpg&quot; alt=&quot;mongoDB.png&quot;&gt;  &lt;/p&gt;</summary>
    
    
    
    <category term="MongoDB" scheme="http://example.com/categories/MongoDB/"/>
    
    
    <category term="MongoDB安装部署" scheme="http://example.com/tags/MongoDB%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2/"/>
    
  </entry>
  
  <entry>
    <title>3-zabbix快速配置</title>
    <link href="http://example.com/2022/03/28/zabbix/3-zabbix%E5%BF%AB%E9%80%9F%E9%85%8D%E7%BD%AE/"/>
    <id>http://example.com/2022/03/28/zabbix/3-zabbix%E5%BF%AB%E9%80%9F%E9%85%8D%E7%BD%AE/</id>
    <published>2022-03-28T01:02:33.000Z</published>
    <updated>2022-05-24T04:47:29.876Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://s2.loli.net/2022/03/25/BC4LOAv1sp89SnY.jpg" alt="zabbix.jpg">  </p><span id="more"></span><h1 id="配置流程"><a href="#配置流程" class="headerlink" title="配置流程"></a>配置流程</h1><p>完整的配置流程：主机组–&gt;主机–&gt;监控项组–&gt;监控项–&gt;触发器–&gt;故障–&gt;处理动作–&gt;用户组–&gt;用户–&gt;告警方式–&gt;日记审计。  </p><h1 id="主机组"><a href="#主机组" class="headerlink" title="主机组"></a>主机组</h1><h2 id="添加主机组"><a href="#添加主机组" class="headerlink" title="添加主机组"></a>添加主机组</h2><p><img src="/2022/03/28/zabbix/3-zabbix%E5%BF%AB%E9%80%9F%E9%85%8D%E7%BD%AE/%E6%B7%BB%E5%8A%A0%E4%B8%BB%E6%9C%BA%E7%BB%84.png" alt="添加主机组"><br>添加主机组的相关信息保存在数据库中  </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> zabbix.hstgrp;</span><br></pre></td></tr></table></figure><h2 id="层级主机组分组"><a href="#层级主机组分组" class="headerlink" title="层级主机组分组"></a>层级主机组分组</h2>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://s2.loli.net/2022/03/25/BC4LOAv1sp89SnY.jpg&quot; alt=&quot;zabbix.jpg&quot;&gt;  &lt;/p&gt;</summary>
    
    
    
    <category term="zabbix" scheme="http://example.com/categories/zabbix/"/>
    
    
    <category term="zabbix安装" scheme="http://example.com/tags/zabbix%E5%AE%89%E8%A3%85/"/>
    
  </entry>
  
  <entry>
    <title>2-zabbix部署</title>
    <link href="http://example.com/2022/03/25/zabbix/2-zabbix%E9%83%A8%E7%BD%B2/"/>
    <id>http://example.com/2022/03/25/zabbix/2-zabbix%E9%83%A8%E7%BD%B2/</id>
    <published>2022-03-25T14:22:21.000Z</published>
    <updated>2022-05-24T04:47:55.054Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://s2.loli.net/2022/03/25/BC4LOAv1sp89SnY.jpg" alt="zabbix.jpg">  </p><span id="more"></span><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>系统版本为centos 7.6，按照<a href="https://www.zabbix.com/documentation/5.2/zh/manual/installation/install_from_packages/rhel_centos">zabbix指导文档</a> 进行安装。注意使用不同版本系统进行安装时有所不同，需参考官方指导文档进行部署安装。  </p><h1 id="server端部署"><a href="#server端部署" class="headerlink" title="server端部署"></a>server端部署</h1><h2 id="添加-Zabbix-软件仓库"><a href="#添加-Zabbix-软件仓库" class="headerlink" title="添加 Zabbix 软件仓库"></a>添加 Zabbix 软件仓库</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rpm -ivh http://repo.zabbix.com/zabbix/4.0/rhel/7/x86_64/zabbix-release-4.0-1.el7.noarch.rpm</span><br></pre></td></tr></table></figure><p>执行完成后在/etc/yum.repos.d会生成一个zabbix.repo文件。在安装zabbix是除了zabbix.repo，也要准备好centos 7的相关安装源，以便安装zabbix需要的依赖包。  </p><h2 id="启用可选-rpms-的软件仓库"><a href="#启用可选-rpms-的软件仓库" class="headerlink" title="启用可选 rpms 的软件仓库"></a>启用可选 rpms 的软件仓库</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># yum -y install yum-utils</span><br><span class="line"># yum-config-manager --enable rhel-7-server-optional-rpms</span><br></pre></td></tr></table></figure><h2 id="安装-Server-前端-agent"><a href="#安装-Server-前端-agent" class="headerlink" title="安装 Server/前端/agent"></a>安装 Server/前端/agent</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># yum -y install zabbix-server-mysql zabbix-web-mysql zabbix-agent</span><br></pre></td></tr></table></figure><h2 id="安装MariaDB-Mysql数据库"><a href="#安装MariaDB-Mysql数据库" class="headerlink" title="安装MariaDB/Mysql数据库"></a>安装MariaDB/Mysql数据库</h2><p>这一步可以选择安装MariaDB或者Mysql数据库  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># yum install -y mariadb mariadb-server</span><br><span class="line"># systemctl start mariadb</span><br><span class="line"># systemctl enable mariadb</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"># mysql_secure_installation  #数据库配置</span><br><span class="line"></span><br><span class="line">Enter current password for root (enter for none):  # 输入数据库超级管理员root的密码(注意不是系统root的密码)，第一次进入还没有设置密码则直接回车</span><br><span class="line"></span><br><span class="line">Set root password? [Y/n]  # 设置密码，y</span><br><span class="line"></span><br><span class="line">New password:  # 新密码</span><br><span class="line">Re-enter new password:  # 再次输入密码</span><br><span class="line"></span><br><span class="line">Remove anonymous users? [Y/n]  # 移除匿名用户， y</span><br><span class="line"></span><br><span class="line">Disallow root login remotely? [Y/n]  # 拒绝root远程登录，n，不管y/n，都会拒绝root远程登录</span><br><span class="line"></span><br><span class="line">Remove test database and access to it? [Y/n]  # 删除test数据库，y：删除。n：不删除，数据库中会有一个test数据库，一般不需要</span><br><span class="line"></span><br><span class="line">Reload privilege tables now? [Y/n]  # 重新加载权限表，y。或者重启服务也许</span><br></pre></td></tr></table></figure><h2 id="初始化zabbix-database"><a href="#初始化zabbix-database" class="headerlink" title="初始化zabbix database"></a>初始化zabbix database</h2><ul><li>创建初识数据库  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; create database zabbix character set utf8 collate utf8_bin;</span><br><span class="line">mysql&gt; grant all privileges on zabbix.* to zabbix@localhost identified by &#x27;123456&#x27;;</span><br></pre></td></tr></table></figure></li><li>导入初始架构和数据，系统将提示您输入新创建的密码。  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">zcat /usr/share/doc/zabbix-server-mysql*/create.sql.gz | mysql -uzabbix -p zabbix</span><br></pre></td></tr></table></figure></li></ul><h2 id="配置zabbix-server"><a href="#配置zabbix-server" class="headerlink" title="配置zabbix server"></a>配置zabbix server</h2><p>配置server端，编辑/etc/zabbix/zabbix_server.conf。  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">#服务监听的端口，保持默认即可。</span><br><span class="line"># ListenPort=10051</span><br><span class="line"></span><br><span class="line">#当服务端有多个IP时，通过该参数指定通过哪个IP采集被监控主机的数据</span><br><span class="line"># SourceIP=</span><br><span class="line"></span><br><span class="line">#记录日志的方式，system表示将日志发往syslog；file表示使用指定的文件当做日志文件（默认方式）；console表示将日志发往控制台</span><br><span class="line"># LogType=file</span><br><span class="line"></span><br><span class="line">#当LogType=file时，通过该参数指定日志文件</span><br><span class="line">LogFile=/var/log/zabbix/zabbix_server.log</span><br><span class="line"></span><br><span class="line">#设定当日志文件达到多大时进行自动滚动，设置为0时不进行滚动。</span><br><span class="line">LogFileSize=0</span><br><span class="line"></span><br><span class="line">#定义日志文件的详细程度，即日志级别</span><br><span class="line">DebugLevel=3</span><br><span class="line"></span><br><span class="line">#zabbix服务端程序PID路径 </span><br><span class="line">PidFile=/var/run/zabbix/zabbix_server.pid</span><br><span class="line"></span><br><span class="line">#zabbix数据库所在IP</span><br><span class="line"># DBHost=localhost</span><br><span class="line"></span><br><span class="line">#zabbix数据库名称</span><br><span class="line">DBName=zabbix</span><br><span class="line"></span><br><span class="line">#zabbix数据库用户名</span><br><span class="line">DBUser=zabbix</span><br><span class="line"></span><br><span class="line">#zabbix数据库用户对应的密码</span><br><span class="line">DBPassword=123456</span><br><span class="line"></span><br><span class="line">#zabbix所在数据库服务监听的端口号</span><br><span class="line"># DBPort=3306</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在进行配置时只将zabbix数据库用户名对应的密码填写即可使用，并将zabbix server 启动，并将其设置为开机启动。  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl start zabbix-server.service</span><br><span class="line">systemctl enable zabbix-server.service</span><br></pre></td></tr></table></figure><h2 id="zabbix-web配置"><a href="#zabbix-web配置" class="headerlink" title="zabbix web配置"></a>zabbix web配置</h2><p>安装完成后需要对zabbix web进行配置,其配置文件为<code>/etc/httpd/conf.d/zabbix.conf</code>。  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">#将该时区修改</span><br><span class="line"># php_value date.timezone Europe/Riga</span><br><span class="line">                 ||</span><br><span class="line">                 ||</span><br><span class="line">                 \/</span><br><span class="line">#将时区修改为亚洲上海，并将注释符去除 </span><br><span class="line">php_value date.timezone Asia/Shanghai</span><br></pre></td></tr></table></figure><p>启动httpd服务，并将其设置为开机启动。  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl start httpd.service</span><br><span class="line">systemctl enable httpd.service</span><br></pre></td></tr></table></figure><h2 id="初始化配置"><a href="#初始化配置" class="headerlink" title="初始化配置"></a>初始化配置</h2><p>使用浏览器登录 zabbix—web_IP/zabbix。  </p><ul><li><p>前端安装向导<br><img src="/2022/03/25/zabbix/2-zabbix%E9%83%A8%E7%BD%B2/zabbix-web%E7%95%8C%E9%9D%A21.png" alt="zabbix web界面1">  </p></li><li><p>自动检测安装环境是否满足需要,全部满足后点击下一步<br><img src="/2022/03/25/zabbix/2-zabbix%E9%83%A8%E7%BD%B2/%E8%87%AA%E5%8A%A8%E6%A3%80%E6%B5%8B%E7%8E%AF%E5%A2%83.png" alt="自动检测环境">  </p></li><li><p>配置数据库连接<br><img src="/2022/03/25/zabbix/2-zabbix%E9%83%A8%E7%BD%B2/%E9%85%8D%E7%BD%AE%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9E%E6%8E%A5.png" alt="配置数据库连接">  </p></li><li><p>配置zabbix server信息<br><img src="/2022/03/25/zabbix/2-zabbix%E9%83%A8%E7%BD%B2/%E9%85%8D%E7%BD%AEzabbixserver%E4%BF%A1%E6%81%AF.png" alt="配置zabbixserver信息"></p></li><li><p>确定概要信息正确，点击下一步  </p></li><li><p>初始化配置完成<br>并有提示：配置信息保存到了<code>/etc/zabbix/web/zabbix.conf.php</code>中，若需要修改可对该文件中参数进行修改。<br><img src="/2022/03/25/zabbix/2-zabbix%E9%83%A8%E7%BD%B2/%E5%AE%8C%E6%88%90.png" alt="完成">  </p></li></ul><h2 id="登录zabbix-web界面"><a href="#登录zabbix-web界面" class="headerlink" title="登录zabbix web界面"></a>登录zabbix web界面</h2><p>默认管理员用户名为：Admin，密码为：zabbix  </p><h2 id="修改界面语言"><a href="#修改界面语言" class="headerlink" title="修改界面语言"></a>修改界面语言</h2><p>点击红框中的图标，修改language选项。</p><ol><li><p>若选项中无Chinese(zh_CN)选项<br>修改zabbix web的配置文件<code>/usr/share/zabbix/include/locales.inc.php</code>中zh_CN属性行中<code>display</code>修改为true  </p></li><li><p>若将界面修改为中文后，有文字出现乱码<br>可以在windows系统C:\Windows\Fonts（win7）中，选择一个字体，将该字体的后缀名修改为<strong>小写ttf</strong>，将其放置在zabbix字体文件下中，并修改<code>/usr/share/zabbix/include/defines.inc.php</code>配置文件（<code>define(&#39;ZBX_FONTPATH&#39;,                          realpath(&#39;XXXXXXXX&#39;));</code>可以看到字体文件的路径）。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#将两处的 graphfort 修改为 MSYH（MSYH为刚刚放置的字体文件的文件名，这里我使用的是黑体所以文件名为MSYH）</span><br><span class="line">define(&#x27;ZBX_FONT_NAME&#x27;, &#x27;MSYH&#x27;);</span><br><span class="line">define(&#x27;ZBX_GRAPH_FONT_NAME&#x27;,           &#x27;MSYH&#x27;);</span><br></pre></td></tr></table></figure><p>修改完成后，重启刷新网页就可以正常显示文字了。  </p></li></ol><h1 id="zabbix-agent"><a href="#zabbix-agent" class="headerlink" title="zabbix agent"></a>zabbix agent</h1><p>上面介绍过zabbix agent部署在被监控主机。下面进行安装  </p><h2 id="安装zabbix-agent"><a href="#安装zabbix-agent" class="headerlink" title="安装zabbix agent"></a>安装zabbix agent</h2><p>agent端的安装比较简单。  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y zabbix-agent zabbix-sender</span><br></pre></td></tr></table></figure><h2 id="配置agent"><a href="#配置agent" class="headerlink" title="配置agent"></a>配置agent</h2><p>修改<code>/etc/zabbix/zabbix_agentd.conf</code>，下面主要介绍上一章中agent的主动模式与被动模式。  </p><ul><li><p>Passive checks related<br>该模块为agent被动模式相关的参数  </p><ul><li>Server<br>允许拉取agent端数据的IP，也就是server端IP；多个IP时使用逗号将IP分隔  </li><li>ListenPort<br>被动模式所监听端口号，默认为10050，即server端访问10050端口拉取数据  </li><li>ListenIP<br>被动模式所监听的IP，默认为0.0.0.0，即为监听本地的所有的IP  </li><li>StartAgents<br>指定预计生成的agent进程数量  </li></ul></li><li><p>Active checks related<br>该模块为主动模式的相关参数  </p><ul><li>ServerActive<br>主动推送到server端的IP；多个IP时使用逗号将IP分隔  </li><li>Hostname<br>当前主机的主机名</li><li>RefreshActiveChecks<br>agent端每多少秒主动推送数据</li></ul></li></ul><p>这里我们只要将Server、ServerActive、Hostname修改即可。然后重启agent进程，并将其设置为开机启动。  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl start zabbix-agent.service</span><br><span class="line">systemctl enable zabbix-agent.service</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://s2.loli.net/2022/03/25/BC4LOAv1sp89SnY.jpg&quot; alt=&quot;zabbix.jpg&quot;&gt;  &lt;/p&gt;</summary>
    
    
    
    <category term="zabbix" scheme="http://example.com/categories/zabbix/"/>
    
    
    <category term="zabbix安装" scheme="http://example.com/tags/zabbix%E5%AE%89%E8%A3%85/"/>
    
  </entry>
  
  <entry>
    <title>1.zabbix概念</title>
    <link href="http://example.com/2022/03/25/zabbix/1-zabbix%E6%A6%82%E5%BF%B5/"/>
    <id>http://example.com/2022/03/25/zabbix/1-zabbix%E6%A6%82%E5%BF%B5/</id>
    <published>2022-03-25T12:45:46.000Z</published>
    <updated>2022-05-24T04:47:58.233Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://s2.loli.net/2022/03/25/BC4LOAv1sp89SnY.jpg" alt="zabbix.jpg">  </p><span id="more"></span><p>&emsp;&emsp;zabbix可以监控的硬件理论上是与我们的业务有关的硬件资源都可以被监控，比如：主机、交换机、路由器等。这就要求zabbix可以与这些监控对象能够进行通信。  </p><h2 id="zabbix支持的通信方式"><a href="#zabbix支持的通信方式" class="headerlink" title="zabbix支持的通信方式"></a>zabbix支持的通信方式</h2><ul><li>agent<br>通过专用的代理程序进行监控，与常见的master/agent模型类似，如果被监控对象支持对应的agent，推荐首先该形式。  </li><li>ssh/telnet<br>通过远程控制协议进行通讯，比如：ssh、telnet。  </li><li>SNMP<br>通过SNMP协议与被监控对象进行通信，SNMNP协议的全称是“简单网络管理协议”。  </li><li>IPMI<br>通过IPMI接口进行监控，我们可以通过标准的IPMI硬件接口，监控被监控对象的物理特征，比如电压，温度，风扇状态，电源状态等。  </li><li>JMX<br>JMX即java管理扩展，监控JVM时，可以使用这种方法也是很不错的。<br><img src="/2022/03/25/zabbix/1-zabbix%E6%A6%82%E5%BF%B5/%E4%B8%8E%E7%9B%91%E6%8E%A7%E8%AE%BE%E5%A4%87%E7%9A%84%E9%80%9A%E8%AE%AF%E6%96%B9%E5%BC%8F.png" alt="通信方式">  </li></ul><p>&emsp;&emsp;当监控规模变得庞大时，可能有成千上万台设备需要监控时。zabbix支持分布式监控，我们可以把所有的被监控对象分成不同的区域，每个区域中设置一台代理主机，区域内的每个被监控对象的信息被agent采集，提交给代理主机，在这个区域内，在理主机的作用就相当于是zabbix server，我们将代理主机为zabbix proxy，代理主机再将收集到的监控对象的信息统一提交给真正的zabbix server处理，这样zabbix proxy分摊了zabbix server的压力，还能通过统一的监控入口，监控所有的对象。  </p><h2 id="zabbix组件"><a href="#zabbix组件" class="headerlink" title="zabbix组件"></a>zabbix组件</h2><ul><li>zabbix agent<br>部署在被监控主机上，负责被监控主机的数据，并加数据发送给zabbix server。</li><li>zabbix server<br>负责接受agent发送的报告信息，并且负责组织配置信息、统计信息、操作数据等。</li><li>zabbix database<br>用于存储所有zabbix的配置信息、监控数据的数据库。</li><li>zabbix web<br>zabbix的web界面，管理员通过web界面管理zabbix配置以及查看zabbix相关监控信息，可以单独部署在独立的服务器上。  </li><li>zabbix proxy<br>可选组件，用于分布式监控环境中，zabbix proxy代表server端，完成局部区域内的信息收集，最终统一发往server端。采用中间代理将大大提高监控服务器端的处理速度，从而支撑构建大型分布式监控环境，从架构上支持异地多机房的需求。  </li></ul><h2 id="zabbix工作模式"><a href="#zabbix工作模式" class="headerlink" title="zabbix工作模式"></a>zabbix工作模式</h2><p>&emsp;&emsp;agent端会将采集完的数据主动发送给server端，这种模式称之为<strong>主动模式</strong>（对于agent端来说是主动的）；agent端也可以不发送数据，而是等待server端来拉取数据，这种模式称之为<strong>被动模式</strong>。一般来说，被动模式对监控控制端服务器的开销较大，适合小规模的监控环境；主动模式对监控控制端服务器的开销较小，适合大规模的监控环境。<br>&emsp;&emsp;可以在<strong>agent端使用zabbix_sender</strong>工具，测试是否能够向server端发送数据。<br>&emsp;&emsp;可以在<strong>server端使用zabbix_get</strong>工具，测试是否能够向agent端发送数据。<br>&emsp;&emsp;两种模式可以同时存在，并不会冲突。  </p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://s2.loli.net/2022/03/25/BC4LOAv1sp89SnY.jpg&quot; alt=&quot;zabbix.jpg&quot;&gt;  &lt;/p&gt;</summary>
    
    
    
    <category term="zabbix" scheme="http://example.com/categories/zabbix/"/>
    
    
    <category term="zabbix概念" scheme="http://example.com/tags/zabbix%E6%A6%82%E5%BF%B5/"/>
    
  </entry>
  
  <entry>
    <title>性能分析</title>
    <link href="http://example.com/2022/03/24/Linux/%E6%80%A7%E8%83%BD%E5%88%86%E6%9E%90/"/>
    <id>http://example.com/2022/03/24/Linux/%E6%80%A7%E8%83%BD%E5%88%86%E6%9E%90/</id>
    <published>2022-03-24T03:07:45.000Z</published>
    <updated>2022-06-28T03:08:45.896Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://i.loli.net/2021/08/02/cX51yi4KrLYRfJU.jpg" alt="linux.jpg">  </p><span id="more"></span><h2 id="vmstat"><a href="#vmstat" class="headerlink" title="vmstat"></a>vmstat</h2><p>其含义为虚拟内存状态，属于sysstat包。  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"> ~]# vmstat 1  4  </span><br><span class="line">procs -----------memory---------- ---swap-- -----io---- -system-- ------cpu-----</span><br><span class="line"> r  b   swpd   free   buff  cache   si   so    bi    bo   in   cs us sy id wa st</span><br><span class="line"> 2  0      0 434196   2124 379168    0    0     8     3  105  195  0  1 98  0  0</span><br><span class="line"> 3  0      0 434196   2124 379168    0    0     0     0   74  168  1  1 98  0  0</span><br><span class="line"> 2  0      0 434208   2124 379168    0    0     0     0  114  204  0  1 99  0  0</span><br><span class="line"> 1  0      0 434200   2124 379168    0    0     0     0  102  181  0  2 98  0  0</span><br></pre></td></tr></table></figure><p>每1秒检测一次，检测四次。  </p><h3 id="字段说明"><a href="#字段说明" class="headerlink" title="字段说明"></a>字段说明</h3><p><strong>procs 字段</strong>  </p><ul><li>r:运行队列中进程数量  </li><li>b:等待IOde进程数量  </li></ul><p><strong>memory 字段</strong>  </p><ul><li>swpd：使用虚拟内存大小  </li><li>free：空闲物理内存大小  </li><li>buff：用作缓冲内存的大小  </li><li>cache：用作缓存的大小  </li></ul><p><strong>swap</strong>  </p><ul><li>si:每秒从交换区写到内存的大小，由磁盘调入内存  </li><li>so：每秒写入交换区的内存大小，由内存调入磁盘  </li></ul><p><strong>IO</strong>  </p><ul><li>bi：每秒读取的块数  </li><li>bo：每秒写入的块数  </li></ul><p><strong>system</strong><br>in：每秒中断数，包括时钟中断<br>cs：每秒上下文切换数  </p><p><strong>cpu</strong><br>us：用户进程执行时间百分比<br>sy：内核系统进程执行时间百分比<br>id：空闲时间百分比<br>wa：IO等待时间百分比  </p><h2 id="iostat"><a href="#iostat" class="headerlink" title="iostat"></a>iostat</h2><p>属于sysstat包，用于监视系统输入输出设备和CPU的使用情况  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">~]# iostat -x /dev/sda1</span><br><span class="line">Linux 3.10.0-957.el7.x86_64 (test3)     2022年06月08日  _x86_64_        (1 CPU)</span><br><span class="line"></span><br><span class="line">avg-cpu:  %user   %nice %system %iowait  %steal   %idle</span><br><span class="line">           0.39    0.00    1.14    0.03    0.00   98.44</span><br><span class="line"></span><br><span class="line">Device:         rrqm/s   wrqm/s     r/s     w/s    rkB/s    wkB/s avgrq-sz avgqu-sz   await r_await w_await  svctm  %util</span><br><span class="line">sda1              0.00     0.00    0.01    0.00     0.12     0.04    31.63     0.00    1.83    1.05   41.40   1.71   0.00</span><br></pre></td></tr></table></figure><h3 id="字段说明-1"><a href="#字段说明-1" class="headerlink" title="字段说明"></a>字段说明</h3><table><thead><tr><th align="center">Device</th><th align="center">rrqm/s</th><th align="center">wrqm/s</th><th align="center">r/s</th><th align="center">w/s</th><th align="center">rkB/s</th><th align="center">wkB/s</th><th align="center">avgrq-sz</th><th align="center">avgqu-sz</th><th align="center">await</th><th align="center">r_await</th><th align="center">w_await</th><th align="center">svctm</th><th align="center">%util</th></tr></thead><tbody><tr><td align="center">设备名称</td><td align="center">每秒需要读取需求</td><td align="center">每秒需要写入需求</td><td align="center">实际读取需求</td><td align="center">实际写入需求</td><td align="center">实际读取的大小</td><td align="center">实际写入的大小</td><td align="center"></td><td align="center"></td><td align="center">等待IO</td><td align="center"></td><td align="center"></td><td align="center">IO需求完成的平均时间</td><td align="center">IO消耗的CPU百分比</td></tr></tbody></table><h2 id="dstat"><a href="#dstat" class="headerlink" title="dstat"></a>dstat</h2><p>属于dstat包，</p><h2 id="iotop"><a href="#iotop" class="headerlink" title="iotop"></a>iotop</h2><p>安装iotop</p><h2 id="pidstat"><a href="#pidstat" class="headerlink" title="pidstat"></a>pidstat</h2><p>安装sysstat</p><h2 id="top"><a href="#top" class="headerlink" title="top"></a>top</h2><h2 id="htop"><a href="#htop" class="headerlink" title="htop"></a>htop</h2><p>安装htop</p><h2 id="mpstat"><a href="#mpstat" class="headerlink" title="mpstat"></a>mpstat</h2><p>安装sysstat</p><h2 id="netstat"><a href="#netstat" class="headerlink" title="netstat"></a>netstat</h2><h2 id="ps"><a href="#ps" class="headerlink" title="ps"></a>ps</h2><h2 id="strace"><a href="#strace" class="headerlink" title="strace"></a>strace</h2><p>安装strace</p><h2 id="uptime"><a href="#uptime" class="headerlink" title="uptime"></a>uptime</h2><h2 id="lsof"><a href="#lsof" class="headerlink" title="lsof"></a>lsof</h2><h2 id="perf"><a href="#perf" class="headerlink" title="perf"></a>perf</h2>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://i.loli.net/2021/08/02/cX51yi4KrLYRfJU.jpg&quot; alt=&quot;linux.jpg&quot;&gt;  &lt;/p&gt;</summary>
    
    
    
    <category term="Linux" scheme="http://example.com/categories/Linux/"/>
    
    
    <category term="vmstat" scheme="http://example.com/tags/vmstat/"/>
    
    <category term="iostat" scheme="http://example.com/tags/iostat/"/>
    
    <category term="dstat" scheme="http://example.com/tags/dstat/"/>
    
    <category term="iotop" scheme="http://example.com/tags/iotop/"/>
    
    <category term="pidstat" scheme="http://example.com/tags/pidstat/"/>
    
    <category term="top" scheme="http://example.com/tags/top/"/>
    
    <category term="htop" scheme="http://example.com/tags/htop/"/>
    
    <category term="mpstat" scheme="http://example.com/tags/mpstat/"/>
    
    <category term="netstat" scheme="http://example.com/tags/netstat/"/>
    
    <category term="ps" scheme="http://example.com/tags/ps/"/>
    
    <category term="strace" scheme="http://example.com/tags/strace/"/>
    
    <category term="uptime" scheme="http://example.com/tags/uptime/"/>
    
    <category term="lsof" scheme="http://example.com/tags/lsof/"/>
    
    <category term="perf" scheme="http://example.com/tags/perf/"/>
    
  </entry>
  
</feed>
