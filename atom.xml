<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>DaGuang</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2022-06-29T14:36:20.393Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>DaGuang</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Linux之Namespace</title>
    <link href="http://example.com/2022/06/29/Linux/Linux%E4%B9%8BNamespace/"/>
    <id>http://example.com/2022/06/29/Linux/Linux%E4%B9%8BNamespace/</id>
    <published>2022-06-29T13:24:38.000Z</published>
    <updated>2022-06-29T14:36:20.393Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://i.loli.net/2021/08/02/cX51yi4KrLYRfJU.jpg" alt="linux.jpg">  </p><span id="more"></span><h1 id="Namespace"><a href="#Namespace" class="headerlink" title="Namespace"></a>Namespace</h1>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://i.loli.net/2021/08/02/cX51yi4KrLYRfJU.jpg&quot; alt=&quot;linux.jpg&quot;&gt;  &lt;/p&gt;</summary>
    
    
    
    <category term="Linux" scheme="http://example.com/categories/Linux/"/>
    
    
    <category term="namespace" scheme="http://example.com/tags/namespace/"/>
    
  </entry>
  
  <entry>
    <title>5-K8S核心技术pod</title>
    <link href="http://example.com/2022/06/29/K8s/5-K8S%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AFpod/"/>
    <id>http://example.com/2022/06/29/K8s/5-K8S%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AFpod/</id>
    <published>2022-06-29T02:05:09.000Z</published>
    <updated>2022-06-30T15:59:24.907Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://s2.loli.net/2022/06/27/5UbYtS64yAIPXzM.jpg" alt="k8s.jpg">  </p><span id="more"></span><h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>pod是k8s中最小的单元，是一个抽象的概念，是一组容器的集合，是资源对象模型中用户创建或部署的最小的资源对象模型，也是k8s上运行容器化应用的资源对象，其他对象都是用来支撑或扩展pod对象功能的。每一个pod都有一个特殊的被称为“根容器”的pause容器，pause容器对应的镜像属于k8s平台的一部分。<br>pause容器又叫infra容器，后面将介绍改容器的作用。<br><img src="/2022/06/29/K8s/5-K8S%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AFpod/pod.png" alt="pod">  </p><h2 id="pod基本概念"><a href="#pod基本概念" class="headerlink" title="pod基本概念"></a>pod基本概念</h2><ul><li>最小部署单元  </li><li>pod是由一个或多个容器组成  </li><li>一个pod内的容器共享网络命名空间  </li><li>pod是短暂的  </li><li>每个pod包含一个或多个紧密相关的用户业务容器  </li></ul><h2 id="pod存在的意义"><a href="#pod存在的意义" class="headerlink" title="pod存在的意义"></a>pod存在的意义</h2><ol><li>容器是但进程设计，一个容器运行一个应用进程  </li><li>pod是多进程设计，一个pod中可以有多个容器，可以运行多个应用进程  </li><li>pod的存在是为了亲密作用  <ul><li>多应用之间进行交互  </li><li>网络之间的调用  </li><li>多个应用之间需要频繁调用  </li></ul></li></ol><p>pod的设计理念是支持多个容器在pod中共享网络地址和文件系统，可以通过进程通信和文件共享这种简单高效的方式完成组合。可以将pod看做是运行在k8s上的小机器人，k8s的业务可以分为以下几种：  </p><ul><li>长期伺服型：long-running  </li><li>批处理：batch  </li><li>节点后台支撑型：node-deamon  </li><li>有状态应用型：stateful application<br>对应的控制器分别为:deployment、job、deamonSet、statefulSet  </li></ul><h2 id="pod实现机制"><a href="#pod实现机制" class="headerlink" title="pod实现机制"></a>pod实现机制</h2><p>容器本身之间是隔离的，一般通过namespace和group进行隔离，而pod中共享网络、共享存储是通过pause容器来实现的  </p><h3 id="pause容器"><a href="#pause容器" class="headerlink" title="pause容器"></a>pause容器</h3><p>pause容器又叫infra容器，每个pod中都会有一个pause容器，其他容器称为业务容器，这些业务容器共享pause容器的网络和volume挂载卷；因此容器之间的通信和数据交换更为高效，可以充分利用这一点将一组密切关系的服务放在一个pod中；同一个pod中的容器之间使用localhost就能互相通信。这样pause容器就实现了pod内的共享网络与共享存储。  </p><h3 id="pause提供的功能"><a href="#pause提供的功能" class="headerlink" title="pause提供的功能"></a>pause提供的功能</h3><ul><li><em><strong>PID命名空间：作为Pod的“init进程”（pid=1，也即所有其它容器的父容器，所有其它进程的父进程），负责僵尸进程的回收，1.8之后的版本默认不共享PID</strong></em></li><li>网络命名空间：pod中的多个通容器可以访问同一个IP和端口范围  </li><li>IPC命名空间：pod中的多个容器能够使用systemV IPC或POSIX消息队列进行通信  </li><li>UTS命名空间：pod中的多个容器共享一个主机名、volume  </li></ul><h3 id="pause代码"><a href="#pause代码" class="headerlink" title="pause代码"></a>pause代码</h3><p><a href="https://github.com/kubernetes/kubernetes/blob/master/build/pause/linux/pause.c">github pause代码</a>  </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Copyright 2016 The Kubernetes Authors.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);</span></span><br><span class="line"><span class="comment">you may not use this file except in compliance with the License.</span></span><br><span class="line"><span class="comment">You may obtain a copy of the License at</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    http://www.apache.org/licenses/LICENSE-2.0</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Unless required by applicable law or agreed to in writing, software</span></span><br><span class="line"><span class="comment">distributed under the License is distributed on an &quot;AS IS&quot; BASIS,</span></span><br><span class="line"><span class="comment">WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span></span><br><span class="line"><span class="comment">See the License for the specific language governing permissions and</span></span><br><span class="line"><span class="comment">limitations under the License.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;signal.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/wait.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> STRINGIFY(x) #x</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> VERSION_STRING(x) STRINGIFY(x)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> VERSION</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> VERSION HEAD</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sigdown</span><span class="params">(<span class="keyword">int</span> signo)</span> </span>&#123;</span><br><span class="line">  psignal(signo, <span class="string">&quot;Shutting down, got signal&quot;</span>);</span><br><span class="line">  <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sigreap</span><span class="params">(<span class="keyword">int</span> signo)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">while</span> (waitpid(<span class="number">-1</span>, <span class="literal">NULL</span>, WNOHANG) &gt; <span class="number">0</span>)</span><br><span class="line">    ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> i;</span><br><span class="line">  <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt; argc; ++i) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!strcasecmp(argv[i], <span class="string">&quot;-v&quot;</span>)) &#123;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;pause.c %s\n&quot;</span>, VERSION_STRING(VERSION));</span><br><span class="line">      <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (getpid() != <span class="number">1</span>)</span><br><span class="line">    <span class="comment">/* Not an error because pause sees use outside of infra containers. */</span></span><br><span class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;Warning: pause should be the first process\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (sigaction(SIGINT, &amp;(struct sigaction)&#123;.sa_handler = sigdown&#125;, <span class="literal">NULL</span>) &lt; <span class="number">0</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">if</span> (sigaction(SIGTERM, &amp;(struct sigaction)&#123;.sa_handler = sigdown&#125;, <span class="literal">NULL</span>) &lt; <span class="number">0</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">  <span class="keyword">if</span> (sigaction(SIGCHLD, &amp;(struct sigaction)&#123;.sa_handler = sigreap,</span><br><span class="line">                                             .sa_flags = SA_NOCLDSTOP&#125;,</span><br><span class="line">                <span class="literal">NULL</span>) &lt; <span class="number">0</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (;;)</span><br><span class="line">    pause();</span><br><span class="line">  <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;Error: infinite loop terminated\n&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">42</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="共享namespace"><a href="#共享namespace" class="headerlink" title="共享namespace"></a>共享namespace</h3><p>在Linux系统中，创建一个新的子进程的时候，该进程就会集成父进程的namespace，k8s的pod就是模拟这种方式。创建pod时，里面第一个被创建的容器永远都是pause容器（系统自动创建），pause容器创建完成后才会创建用户业务容器，系统会为pause创建namespace，同一个pod内创建的业务容器都加入到pause容器的namespace，这样就处于同一个namespace中。从pause代码中可以发现最后是一个死循环+pause函数调用，pause函数的作用是让当前进程暂停，因为要维持namespace的存在就必须有一个属于这个namespace的进程或者文件存在，所以为了维护Pod里面pause创建的Namespace，pause就必须一直存在。  </p><h3 id="充当系统init进程"><a href="#充当系统init进程" class="headerlink" title="充当系统init进程"></a>充当系统init进程</h3><p>在Linux系统中，pid=1的进程我们称之为“init”进程，是内核启动的第一个用户级进程，现在比较新的Linux发行版的init进程就是systemd进程。这个进程有许多工作，其中一个重要工作就是负责“收养孤儿进程”，防止产生太多僵尸进程。简单介绍一下相关的基本概念：Linux系统维护了一个进程表，记录每个进程的状态信息和退出码（exit code），当一个进程退出时，它在表中的信息会一直保留，直到其父进程调用wait（包括waitpid）获取其退出码。所谓僵尸进程就是进程已经退出了，但它的信息还在进程表里面。正常情况下，进程退出时父进程会马上查询该表，并回收子进程的相关资源，所以僵尸进程的持续状态一般都很短。但如果（1）父进程启动子进程之后没有调用wait或者（2）父进程先于子进程挂掉了，那子进程就会变成僵尸进程。如果是第2种情况，即父进程先于子进程死掉了，那操作系统就会把init进程设置为该父进程所有子进程的父进程，即init进程收养了该父进程的所有子进程。当这些子进程退出时，init进程就会充当父进程的角色，从而避免长时间的僵尸进程。但对于第1种情况，一般认为是代码有缺陷，这种情况因为子进程的父进程存在（只是没有调用wait而已），init进程是不会做处理的。此时子进程会成为僵尸进程长期存在，如果要消除这种僵尸进程，只能kill掉父进程。<br>而pause容器的第二个功能就是充当这个init进程，负责回收僵尸进程。从上面的代码可以看到，pause启动的时候会判断自己的pid是否为1。不过如果要实现该功能，则Pod内的所有容器必须和pause共享PID Namespace。在K8s 1.8版本之前默认是开启PID Namespace共享的，之后版本默认关闭了，用户可以通过–docker-disable-shared-pid=true/false自行设置。开启PID Namespace的好处就是可以享受pause回收僵尸进程的功能，并且因为容器同处于一个PID Namespace，进程间通信也会变得非常方便。但也有一些弊端，比如有些容器进程的PID也必须为1（比如systemd进程），这就会和pause容器产生冲突，另外也会涉及一些安全问题。  </p><h2 id="影响pod调度的属性"><a href="#影响pod调度的属性" class="headerlink" title="影响pod调度的属性"></a>影响pod调度的属性</h2><h3 id="根据request进行调度"><a href="#根据request进行调度" class="headerlink" title="根据request进行调度"></a>根据request进行调度</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">resources:</span> <span class="comment">#资源管理</span></span><br><span class="line">  <span class="attr">requests:</span> <span class="comment">#容器运行时，最低资源需求，也就是说最少需要多少资源容器才能正常运行</span></span><br><span class="line">    <span class="attr">cpu:</span> <span class="number">0.1</span> <span class="comment">#CPU资源（核数），两种方式，浮点数或者是整数+m，0.1=100m，最少值为0.001核（1m）</span></span><br><span class="line">    <span class="attr">memory:</span> <span class="string">32Mi</span> <span class="comment">#内存使用量</span></span><br><span class="line">  <span class="attr">limits:</span> <span class="comment">#资源限制，表示最大占用的资源</span></span><br><span class="line">    <span class="attr">cpu:</span> <span class="number">0.5</span></span><br><span class="line">    <span class="attr">memory:</span> <span class="string">32Mi</span></span><br></pre></td></tr></table></figure><h3 id="根据nodeSelector调度"><a href="#根据nodeSelector调度" class="headerlink" title="根据nodeSelector调度"></a>根据nodeSelector调度</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">nodeSelector:</span></span><br><span class="line">    <span class="attr">KEY:</span> <span class="string">VALUE</span>   <span class="comment">#会将pod调度到设定有该标签的node上</span></span><br></pre></td></tr></table></figure><p>Label 是 Kubernetes 系统中另一个核心概念。一个 Label 是一个 key=value 的键值对，其中 key 与 value 由用户自己指 定。Label 可以附加到各种资源对象上，如 Node、Pod、Service、RC，一个资源对象可以定义任意数量的 Label， 同一个 Label 也可以被添加到任意数量的资源对象上，Label 通常在资源对象定义时确定，也可以在对象创建后动态 添加或删除。  </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 为node节点设定标签</span></span><br><span class="line">kubectl label node NODE_NAME KEY: VALUE</span><br></pre></td></tr></table></figure><h3 id="节点亲和性-nodeAffinity"><a href="#节点亲和性-nodeAffinity" class="headerlink" title="节点亲和性 nodeAffinity"></a>节点亲和性 nodeAffinity</h3><p><strong>硬亲和</strong>  </p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">affinity:</span> </span><br><span class="line">  <span class="attr">nodeAffinity:</span> </span><br><span class="line">    <span class="attr">requiredDuringSchedulingIgnoredDuringExecution:</span> </span><br><span class="line">      <span class="attr">nodeSelectorTerms:</span>   <span class="comment">#写多个满足其中一条就可以</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">matchExpressions:</span>  <span class="comment">#可以写多个满足必须同时满足</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">key:</span> <span class="string">KEY</span> <span class="comment">#node节点的标签 </span></span><br><span class="line">              <span class="attr">operator:</span> <span class="string">In</span>  <span class="comment"># 运算关系</span></span><br><span class="line">              <span class="attr">values:</span> </span><br><span class="line">                <span class="bullet">-</span> <span class="string">VALUE1</span> </span><br><span class="line">                <span class="bullet">-</span> <span class="string">VALUE2</span> </span><br></pre></td></tr></table></figure><p>通过<strong>required</strong>DuringSchedulingIgnoredDuringExecution硬亲和，约束条件必须满足。<br>上面的例子则表示为pod将会调度到标签KEY为VALUE1或VALUE2的节点上。  </p><p><strong>软亲和</strong>  </p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">affinity:</span></span><br><span class="line">  <span class="attr">nodeAffinity:</span></span><br><span class="line">    <span class="attr">preferredDuringSchedulingIgnoredDuringExecution:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">weight:</span>  <span class="number">60</span>  <span class="comment">#权重，1-100越大优先级越高</span></span><br><span class="line">      <span class="attr">preference:</span></span><br><span class="line">        <span class="attr">matchExpressions:</span></span><br><span class="line">        <span class="bullet">-</span> &#123;<span class="attr">key:</span> <span class="string">xxx</span>, <span class="attr">operator:</span> <span class="string">In</span>, <span class="attr">values:</span> <span class="string">xxx</span>&#125;</span><br><span class="line">    <span class="bullet">-</span> <span class="attr">weight:</span>  <span class="number">30</span></span><br><span class="line">      <span class="attr">preference:</span></span><br><span class="line">        <span class="attr">matchExpressions:</span></span><br><span class="line">        <span class="bullet">-</span> &#123;<span class="attr">key:</span> <span class="string">xxx</span>, <span class="attr">operator:</span> <span class="string">Exists</span>, <span class="attr">values:</span> <span class="string">xxx</span>&#125;</span><br></pre></td></tr></table></figure><p><strong>preferred</strong>DuringSchedulingIgnoredDuringExecution软亲和为尝试满足约束条件  </p><table><thead><tr><th align="center">operator参数</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">In</td><td align="center">label 的值在某个列表中</td></tr><tr><td align="center">NotIn</td><td align="center">label 的值不在某个列表中</td></tr><tr><td align="center">Gt</td><td align="center">label 的值大于某个值</td></tr><tr><td align="center">Lt</td><td align="center">label 的值小于某个值</td></tr><tr><td align="center">Exists</td><td align="center">某个 label 存在</td></tr><tr><td align="center">DoesNotExist</td><td align="center">某个 label 不存在</td></tr></tbody></table><h2 id="污点与污点容忍"><a href="#污点与污点容忍" class="headerlink" title="污点与污点容忍"></a>污点与污点容忍</h2><h3 id="污点"><a href="#污点" class="headerlink" title="污点"></a>污点</h3><p>使用kubectl taint可以为node设置污点，node被设置污点后将会与pod存在一种互斥关系，可以让node拒绝pod的调度，甚至将已经存在的pod驱逐出去<br>污点的组成  KEY=VALUE:EFFECT  其中value可以为空，EFFECT描述污点的作用，有以下三个选项：  </p><ul><li>NoSchedule ： 不会将pod调度到具有该污点的node上 </li><li>PreferNoSchedule：尽量避免将pod调度到有该污点的node上  </li><li>NoExecute：不会将pod调度到有该污点的node上，同时会将node上已有的pod驱逐  </li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 设置污点</span></span><br><span class="line">kubectl taint nodes NODENAME  KEY=VAULE:EFFECT</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看node的污点</span></span><br><span class="line">kubectl describe node NODENAME|grep Taint</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 去除污点</span></span><br><span class="line">kubectl taint nodes NODENAME KEY:EFFECT-</span><br></pre></td></tr></table></figure><h3 id="污点容忍"><a href="#污点容忍" class="headerlink" title="污点容忍"></a>污点容忍</h3><p>设置了污点的node和pod之间产生互斥关系，pod将一定程度上不会调度到这个node上，但可以为pod设置容忍度，设置了容忍度的pod将会容忍指定的污点，从而可以调度到该node上，污点与污点容忍组合使用，避免pod调度到不适合的node上。每个node可以有一个或多个污点，不能忍受这些污点的pod是不会被节点接受的  </p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">tolerations:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">key:</span> <span class="string">“key1”</span>            <span class="comment">#要与污点key保持一致才会生效</span></span><br><span class="line">    <span class="attr">operator:</span> <span class="string">“Equal”</span>    </span><br><span class="line">    <span class="attr">value:</span> <span class="string">“value1”</span>      <span class="comment">#要与污点value保持一致才会生效</span></span><br><span class="line">    <span class="attr">effect:</span> <span class="string">“NoExecute”</span></span><br><span class="line">    <span class="attr">tolerationSeconds:</span> <span class="number">3600</span>  <span class="comment"># 表示pod即使被驱逐可以继续运行时间</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">key:</span> <span class="string">“key1”</span></span><br><span class="line">    <span class="attr">operator:</span> <span class="string">“Equal”</span></span><br><span class="line">    <span class="attr">value:</span> <span class="string">“value1”</span></span><br><span class="line">    <span class="attr">effect:</span> <span class="string">“NoExecute”</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">key:</span> <span class="string">“key2”</span></span><br><span class="line">    <span class="attr">operator:</span> <span class="string">“Exists”</span>   <span class="comment">#若为Exists，则会忽略value</span></span><br><span class="line">    <span class="attr">effect:</span> <span class="string">“NoSchedule”</span></span><br></pre></td></tr></table></figure><p>当有多个master时，防止资源浪费，可以进行设置，让master也启动pod</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl taint nodes NODENAME node-role.kubernetes.io/master=:PreferNoSchedule</span><br></pre></td></tr></table></figure><p>当node有多个污点时，pod必须忍受所有的污点才可以调度到该node </p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://s2.loli.net/2022/06/27/5UbYtS64yAIPXzM.jpg&quot; alt=&quot;k8s.jpg&quot;&gt;  &lt;/p&gt;</summary>
    
    
    
    <category term="Kubernetes" scheme="http://example.com/categories/Kubernetes/"/>
    
    
    <category term="pod" scheme="http://example.com/tags/pod/"/>
    
  </entry>
  
  <entry>
    <title>4-YAML文件介绍</title>
    <link href="http://example.com/2022/06/29/K8s/4-YAML%E6%96%87%E4%BB%B6%E4%BB%8B%E7%BB%8D/"/>
    <id>http://example.com/2022/06/29/K8s/4-YAML%E6%96%87%E4%BB%B6%E4%BB%8B%E7%BB%8D/</id>
    <published>2022-06-28T16:48:35.000Z</published>
    <updated>2022-06-30T03:04:07.621Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://s2.loli.net/2022/06/27/5UbYtS64yAIPXzM.jpg" alt="k8s.jpg">  </p><span id="more"></span><h1 id="YAMl"><a href="#YAMl" class="headerlink" title="YAMl"></a>YAMl</h1><p>跳转至 <a href="/2022/03/24/YAML/YAML%E5%9F%BA%E7%A1%80/" title="YAML基础">YAML基础</a> 进行YAML学习。  </p><h2 id="k8s中YAML"><a href="#k8s中YAML" class="headerlink" title="k8s中YAML"></a>k8s中YAML</h2><p>k8s集群中对资源管理和资源对象编排部署都可由通过YAML文件来解决，也就是把需要对资源对象操作编辑到YAML文件中，把这种文件叫做<strong>资源清单文件</strong>，通过kubectl命令直接使用资源清单文件可以实现对大量的资源对象进行编排部署。  </p><h2 id="k8s中YAML文件组成部分"><a href="#k8s中YAML文件组成部分" class="headerlink" title="k8s中YAML文件组成部分"></a>k8s中YAML文件组成部分</h2><p><img src="/2022/06/29/K8s/4-YAML%E6%96%87%E4%BB%B6%E4%BB%8B%E7%BB%8D/YAML.png" alt="YAML">  </p><h2 id="属性说明"><a href="#属性说明" class="headerlink" title="属性说明"></a>属性说明</h2><table><thead><tr><th align="center">属性名称</th><th align="center">介绍</th></tr></thead><tbody><tr><td align="center">apiVersion</td><td align="center">API版本</td></tr><tr><td align="center">kind</td><td align="center">资源类型</td></tr><tr><td align="center">metadata</td><td align="center">资源元数据</td></tr><tr><td align="center">spec</td><td align="center">资源规格</td></tr><tr><td align="center">replicas</td><td align="center">副本数量</td></tr><tr><td align="center">selector</td><td align="center">标签选择器</td></tr><tr><td align="center">template</td><td align="center">pod模板</td></tr><tr><td align="center">containers</td><td align="center">容器配置</td></tr></tbody></table><h2 id="快速编写YAML文件"><a href="#快速编写YAML文件" class="headerlink" title="快速编写YAML文件"></a>快速编写YAML文件</h2><p>一般很少手写YAML文件，一般会借助工具来创建  </p><h3 id="使用kubectl-create"><a href="#使用kubectl-create" class="headerlink" title="使用kubectl create"></a>使用kubectl create</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl create deployment web --image=nginx -o yaml --dry-run &gt; lmy.yml</span><br></pre></td></tr></table></figure><h3 id="使用kubectl-get-deployment"><a href="#使用kubectl-get-deployment" class="headerlink" title="使用kubectl get deployment"></a>使用kubectl get deployment</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl get deployment web -0=yaml --export &gt; lmy.yml</span><br></pre></td></tr></table></figure><h2 id="yaml参数说明"><a href="#yaml参数说明" class="headerlink" title="yaml参数说明"></a>yaml参数说明</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span> <span class="comment">#指定api版本，此值必须在kubectl apiversion中</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span> <span class="comment">#指定创建资源的角色/类型</span></span><br><span class="line"><span class="attr">metadata:</span> <span class="comment">#资源的元数据/属性</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">web04-pod</span> <span class="comment">#资源的名字，在同一个namespace中必须唯一</span></span><br><span class="line">  <span class="attr">labels:</span> <span class="comment">#设定资源的标签</span></span><br><span class="line">    <span class="attr">k8s-app:</span> <span class="string">apache</span></span><br><span class="line">    <span class="attr">version:</span> <span class="string">v1</span></span><br><span class="line">    <span class="attr">kubernetes.io/cluster-service:</span> <span class="string">&quot;true&quot;</span></span><br><span class="line">  <span class="attr">annotations:</span>            <span class="comment">#自定义注解列表</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">String</span>        <span class="comment">#自定义注解名字</span></span><br><span class="line"><span class="attr">spec:</span> <span class="comment">#specification of the resource content 指定该资源的内容，定义，规范，目标状态，用户定义</span></span><br><span class="line">  <span class="attr">restartPolicy:</span> <span class="string">Always</span> <span class="comment">#表明该容器一直运行，默认k8s的策略，在此容器退出后，会立即创建一个相同的容器</span></span><br><span class="line">                        <span class="comment">#Onfailure，当容器停止且退出状态码不为0时，由kubelet自动重启该容器</span></span><br><span class="line">                        <span class="comment">#Never，不如容器运行状态如何，kubelet都不会重启该容器</span></span><br><span class="line">  <span class="attr">nodeSelector:</span>     <span class="comment">#节点选择，先给主机打标签kubectl label nodes kube-node1 zone=node1</span></span><br><span class="line">    <span class="attr">zone:</span> <span class="string">node1</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">web04-pod</span> <span class="comment">#容器的名字</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">web:apache</span> <span class="comment">#容器使用的镜像地址</span></span><br><span class="line">    <span class="attr">imagePullPolicy:</span> <span class="string">Never</span> <span class="comment">#三个选择Always、Never、IfNotPresent，每次启动时检查和更新（从registery）images的策略，</span></span><br><span class="line">                           <span class="comment"># Always，每次都检查</span></span><br><span class="line">                           <span class="comment"># Never，每次都不检查（不管本地是否有）</span></span><br><span class="line">                           <span class="comment"># IfNotPresent，如果本地有就不检查，如果没有就拉取</span></span><br><span class="line">    <span class="attr">command:</span> [<span class="string">&#x27;sh&#x27;</span>] <span class="comment">#启动容器的运行命令，将覆盖容器中的Entrypoint,对应Dockefile中的ENTRYPOINT</span></span><br><span class="line">    <span class="attr">args:</span> [<span class="string">&quot;$(str)&quot;</span>] <span class="comment">#启动容器的命令参数，对应Dockerfile中CMD参数</span></span><br><span class="line">    <span class="attr">env:</span> <span class="comment">#指定容器中的环境变量</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">str</span> <span class="comment">#变量的名字</span></span><br><span class="line">      <span class="attr">value:</span> <span class="string">&quot;/etc/run.sh&quot;</span> <span class="comment">#变量的值</span></span><br><span class="line">    <span class="attr">resources:</span> <span class="comment">#资源管理</span></span><br><span class="line">      <span class="attr">requests:</span> <span class="comment">#容器运行时，最低资源需求，也就是说最少需要多少资源容器才能正常运行</span></span><br><span class="line">        <span class="attr">cpu:</span> <span class="number">0.1</span> <span class="comment">#CPU资源（核数），两种方式，浮点数或者是整数+m，0.1=100m，最少值为0.001核（1m）</span></span><br><span class="line">        <span class="attr">memory:</span> <span class="string">32Mi</span> <span class="comment">#内存使用量</span></span><br><span class="line">      <span class="attr">limits:</span> <span class="comment">#资源限制，表示最大占用的资源</span></span><br><span class="line">        <span class="attr">cpu:</span> <span class="number">0.5</span></span><br><span class="line">        <span class="attr">memory:</span> <span class="string">32Mi</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">80</span> <span class="comment">#容器开发对外的端口</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">httpd</span>  <span class="comment">#名称</span></span><br><span class="line">      <span class="attr">protocol:</span> <span class="string">TCP</span></span><br><span class="line">    <span class="attr">livenessProbe:</span> <span class="comment"># pod内容器健康检查的设置，检查失败将会杀死容器，然后根据restartPolicy来进行操作</span></span><br><span class="line">      <span class="attr">httpGet:</span> <span class="comment">#通过httpget检查健康，返回200-399之间，则认为容器正常</span></span><br><span class="line">        <span class="attr">path:</span> <span class="string">/</span> <span class="comment">#URI地址</span></span><br><span class="line">        <span class="attr">port:</span> <span class="number">80</span></span><br><span class="line">        <span class="comment">#host: 127.0.0.1 #主机地址</span></span><br><span class="line">        <span class="attr">scheme:</span> <span class="string">HTTP</span></span><br><span class="line">      <span class="attr">initialDelaySeconds:</span> <span class="number">180</span> <span class="comment">#表明第一次检测在容器启动后多长时间后开始</span></span><br><span class="line">      <span class="attr">timeoutSeconds:</span> <span class="number">5</span> <span class="comment">#检测的超时时间</span></span><br><span class="line">      <span class="attr">periodSeconds:</span> <span class="number">15</span>  <span class="comment">#检查间隔时间</span></span><br><span class="line">      <span class="comment">#也可以用这种方法</span></span><br><span class="line">      <span class="comment">#exec: 执行命令的方法进行监测，如果其退出码不为0，则认为容器正常</span></span><br><span class="line">      <span class="comment">#  command:</span></span><br><span class="line">      <span class="comment">#    - cat</span></span><br><span class="line">      <span class="comment">#    - /tmp/health</span></span><br><span class="line">      <span class="comment">#也可以用这种方法</span></span><br><span class="line">      <span class="comment">#tcpSocket: //通过tcpSocket检查健康</span></span><br><span class="line">      <span class="comment">#  port: number</span></span><br><span class="line">    <span class="attr">lifecycle:</span> <span class="comment">#生命周期管理</span></span><br><span class="line">      <span class="attr">postStart:</span> <span class="comment">#容器运行之前运行的任务</span></span><br><span class="line">        <span class="attr">exec:</span></span><br><span class="line">          <span class="attr">command:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">&#x27;sh&#x27;</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">&#x27;yum upgrade -y&#x27;</span></span><br><span class="line">      <span class="attr">preStop:</span> <span class="comment">#容器关闭之前运行的任务</span></span><br><span class="line">        <span class="attr">exec:</span></span><br><span class="line">          <span class="attr">command:</span> [<span class="string">&#x27;service httpd stop&#x27;</span>]</span><br><span class="line">    <span class="attr">volumeMounts:</span>  </span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">volume</span> <span class="comment">#挂载设备的名字，与volumes[*].name 需要对应</span></span><br><span class="line">      <span class="attr">mountPath:</span> <span class="string">/data</span> <span class="comment">#挂载到容器的某个路径下</span></span><br><span class="line">      <span class="attr">readOnly:</span> <span class="literal">True</span></span><br><span class="line">  <span class="attr">volumes:</span> <span class="comment">#定义一组挂载设备</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">volume</span> <span class="comment">#定义一个挂载设备的名字</span></span><br><span class="line">    <span class="comment">#meptyDir: &#123;&#125;</span></span><br><span class="line">    <span class="attr">hostPath:</span></span><br><span class="line">      <span class="attr">path:</span> <span class="string">/opt</span> <span class="comment">#挂载设备类型为hostPath，路径为宿主机下的/opt,这里设备类型支持很多种</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://s2.loli.net/2022/06/27/5UbYtS64yAIPXzM.jpg&quot; alt=&quot;k8s.jpg&quot;&gt;  &lt;/p&gt;</summary>
    
    
    
    <category term="Kubernetes" scheme="http://example.com/categories/Kubernetes/"/>
    
    
    <category term="YAML文件介绍" scheme="http://example.com/tags/YAML%E6%96%87%E4%BB%B6%E4%BB%8B%E7%BB%8D/"/>
    
  </entry>
  
  <entry>
    <title>3-k8s集群管理工具kubectl</title>
    <link href="http://example.com/2022/06/28/K8s/3-k8s%E9%9B%86%E7%BE%A4%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7kubectl/"/>
    <id>http://example.com/2022/06/28/K8s/3-k8s%E9%9B%86%E7%BE%A4%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7kubectl/</id>
    <published>2022-06-28T14:45:32.000Z</published>
    <updated>2022-06-28T16:49:34.481Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://s2.loli.net/2022/06/27/5UbYtS64yAIPXzM.jpg" alt="k8s.jpg">  </p><span id="more"></span><h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>kubectl是k8s集群的命令行工具，通过kubectl能够对集群本身进行管理，并能够在集群上进行容器化应用的安装和部署  </p><h1 id="命令格式"><a href="#命令格式" class="headerlink" title="命令格式"></a>命令格式</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl [command] [type] [name] [flags]</span><br></pre></td></tr></table></figure><p><strong>参数</strong><br><strong>command</strong>：指定要对资源执行的操作，例如：create、get、describe、delete<br><strong>type</strong>：指定资源类型，资源类型是大小写敏感的，可以使用单数、复数、缩略的形式<br><strong>name</strong>：资源的名称，大小写敏感，且可以省略，省略则会显示所有的资源<br><strong>flags</strong>：指定可选参数  </p><h2 id="kubectl中的简写"><a href="#kubectl中的简写" class="headerlink" title="kubectl中的简写"></a>kubectl中的简写</h2><p>certificatesigningrequests (缩写 csr)<br>componentstatuses (缩写 cs)<br>configmaps (缩写 cm)<br>customresourcedefinition (缩写 crd)<br>daemonsets (缩写 ds)<br>deployments (缩写 deploy)<br>endpoints (缩写 ep)<br>events (缩写 ev)<br>horizontalpodautoscalers (缩写 hpa)<br>ingresses (缩写 ing)<br>limitranges (缩写 limits)<br>namespaces (缩写 ns)<br>networkpolicies (缩写 netpol)<br>nodes (缩写 no)<br>persistentvolumeclaims (缩写 pvc)<br>persistentvolumes (缩写 pv)<br>poddisruptionbudgets (缩写 pdb)<br>pods (缩写 po)<br>podsecuritypolicies (缩写 psp)<br>replicasets (缩写 rs)<br>replicationcontrollers (缩写 rc)<br>resourcequotas (缩写 quota)<br>serviceaccounts (缩写 sa)<br>services (缩写 svc)<br>statefulsets (缩写 sts)<br>storageclasses (缩写 sc)</p><h2 id="获取帮助信息"><a href="#获取帮助信息" class="headerlink" title="获取帮助信息"></a>获取帮助信息</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 获取kubectl帮助信息</span></span><br><span class="line">kubectl --help</span><br><span class="line"><span class="meta">#</span><span class="bash"> 获取某个命令的介绍和使用</span>  </span><br><span class="line">kubectl get --help</span><br></pre></td></tr></table></figure><h2 id="基础命令"><a href="#基础命令" class="headerlink" title="基础命令"></a>基础命令</h2><table><thead><tr><th align="center">命令</th><th align="center">介绍</th></tr></thead><tbody><tr><td align="center">create</td><td align="center">通过文件名或者标准输入创建资源</td></tr><tr><td align="center">expose</td><td align="center">使用 replication controller, service, deployment 或者 pod并暴露它作为一个 新的 Kubernetes Service</td></tr><tr><td align="center">run</td><td align="center">在集群中运行一个指定镜像</td></tr><tr><td align="center">set</td><td align="center">在对象上设定特定的功能</td></tr><tr><td align="center">get</td><td align="center">显示一个或多个资源</td></tr><tr><td align="center">delete</td><td align="center">通过文件名、标准输入、资源名、标签来删除资源</td></tr></tbody></table><h2 id="部署命令"><a href="#部署命令" class="headerlink" title="部署命令"></a>部署命令</h2><table><thead><tr><th align="center">命令</th><th align="center">介绍</th></tr></thead><tbody><tr><td align="center">rollout</td><td align="center">管理资源的发布</td></tr><tr><td align="center">scale</td><td align="center">为deployment、replicaSet、replicaController、job设置一个新的副本数量</td></tr><tr><td align="center">autoscale</td><td align="center">动调整一个 Deployment, ReplicaSet, 或者 ReplicationController的副本数量</td></tr></tbody></table><h2 id="集群管理命令"><a href="#集群管理命令" class="headerlink" title="集群管理命令"></a>集群管理命令</h2><table><thead><tr><th align="center">命令</th><th align="center">介绍</th></tr></thead><tbody><tr><td align="center">certificate</td><td align="center">修改证书资源</td></tr><tr><td align="center">cluster-info</td><td align="center">显示集群信息</td></tr><tr><td align="center">top</td><td align="center">显示资源</td></tr><tr><td align="center">cordon</td><td align="center">标记 node 为不可被调度</td></tr><tr><td align="center">uncordon</td><td align="center">标记 node 为 可被调度</td></tr><tr><td align="center">drain</td><td align="center">驱逐节点上的应用，准备下线维护</td></tr><tr><td align="center">taint</td><td align="center">更新一个或者多个 node 上的 taints</td></tr></tbody></table><h2 id="故障和调试命令"><a href="#故障和调试命令" class="headerlink" title="故障和调试命令"></a>故障和调试命令</h2><table><thead><tr><th align="center">命令</th><th align="center">介绍</th></tr></thead><tbody><tr><td align="center">describe</td><td align="center">显示特定资源或资源组的详细信息</td></tr><tr><td align="center">log</td><td align="center">输出容器在 pod 中的日志</td></tr><tr><td align="center">attach</td><td align="center">连接到现有容器中一个正在运行的进程</td></tr><tr><td align="center">exec</td><td align="center">执行命令到容器</td></tr><tr><td align="center">port-forward</td><td align="center">将一个或多个本地端口转发到pod</td></tr><tr><td align="center">proxy</td><td align="center">运行一个 proxy 到 Kubernetes API server</td></tr><tr><td align="center">cp</td><td align="center">拷贝文件或目录到容器中</td></tr><tr><td align="center">auth</td><td align="center">检查授权</td></tr></tbody></table><h2 id="其他命令"><a href="#其他命令" class="headerlink" title="其他命令"></a>其他命令</h2><table><thead><tr><th align="center">命令</th><th align="center">介绍</th></tr></thead><tbody><tr><td align="center">apply</td><td align="center">通过文件名或标准输入对资源应用的配置</td></tr><tr><td align="center">patch</td><td align="center">使用补丁修改、更新资源的字段</td></tr><tr><td align="center">replace</td><td align="center">通过文件名或标准输入替换一个资源</td></tr><tr><td align="center">convert</td><td align="center">不同API版本之前转换配置文件</td></tr><tr><td align="center">label</td><td align="center">更新资源上的标签</td></tr><tr><td align="center">annotate</td><td align="center">更新资源上的注释</td></tr><tr><td align="center">completion</td><td align="center">用于实现kubectl工具自动补全</td></tr><tr><td align="center">config</td><td align="center">修改k8s文件</td></tr><tr><td align="center">plugin</td><td align="center">运行一个命令行插件</td></tr><tr><td align="center">version</td><td align="center">打印客户端和服务版本信息</td></tr></tbody></table>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://s2.loli.net/2022/06/27/5UbYtS64yAIPXzM.jpg&quot; alt=&quot;k8s.jpg&quot;&gt;  &lt;/p&gt;</summary>
    
    
    
    <category term="Kubernetes" scheme="http://example.com/categories/Kubernetes/"/>
    
    
    <category term="K8S集群管理工具kubectl" scheme="http://example.com/tags/K8S%E9%9B%86%E7%BE%A4%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7kubectl/"/>
    
  </entry>
  
  <entry>
    <title>2-K8S集群部署</title>
    <link href="http://example.com/2022/06/27/K8s/2-K8S%E9%9B%86%E7%BE%A4%E9%83%A8%E7%BD%B2/"/>
    <id>http://example.com/2022/06/27/K8s/2-K8S%E9%9B%86%E7%BE%A4%E9%83%A8%E7%BD%B2/</id>
    <published>2022-06-27T02:38:09.000Z</published>
    <updated>2022-06-29T16:07:37.010Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://s2.loli.net/2022/06/27/5UbYtS64yAIPXzM.jpg" alt="k8s.jpg">  </p><span id="more"></span><h1 id="测试环境硬件要求"><a href="#测试环境硬件要求" class="headerlink" title="测试环境硬件要求"></a>测试环境硬件要求</h1><ul><li>master：2核、4G、20G  </li><li>node：4核 8G 40G  </li></ul><h1 id="k8s集群搭建方式"><a href="#k8s集群搭建方式" class="headerlink" title="k8s集群搭建方式"></a>k8s集群搭建方式</h1><ol><li>kubeadm<br>kubeadm是一个k8s部署工具，提供kubeadm init和kubeadm join  </li><li>二进制包<br>下载发行版二进制包，手动部署每个组件，组成k8s  </li></ol><h1 id="kubeadm部署方式介绍"><a href="#kubeadm部署方式介绍" class="headerlink" title="kubeadm部署方式介绍"></a>kubeadm部署方式介绍</h1><p>kubeadm是官方社区推出的一个用于快速部署k8s集群的工具，这个工具能通过两条指令完成一个k8s集群的部署<br>第一、创建一个master节点  kubeadm init<br>第二、将node节点加入到当前集群中 kubeadm join  </p><h2 id="安装部署要求"><a href="#安装部署要求" class="headerlink" title="安装部署要求"></a>安装部署要求</h2><ol><li>硬件配置：2G或更多，2个CPU或更多，硬盘30G或更多  </li><li>集群中所有机器网络互通  </li><li>可以访问外网，需要拉取镜像  </li><li>禁止swap分区  </li></ol><h2 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h2><ol><li>在所有节点上安装docker、kubeadm  </li><li>部署k8s master  </li><li>部署容器网络插件  </li><li>部署k8s node节点，将节点加入到k8s集群中  </li><li>部署 dashboard web页面，可视化查看k8s资源  </li></ol><h2 id="准备环境"><a href="#准备环境" class="headerlink" title="准备环境"></a>准备环境</h2><table><thead><tr><th align="center">角色</th><th align="center">IP</th></tr></thead><tbody><tr><td align="center">master</td><td align="center">192.168.27.8</td></tr><tr><td align="center">node1</td><td align="center">192.168.27.9</td></tr><tr><td align="center">node1</td><td align="center">192.168.27.10</td></tr></tbody></table><h2 id="系统初始化"><a href="#系统初始化" class="headerlink" title="系统初始化"></a>系统初始化</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">关闭防火墙</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> systemctl stop firewalld</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> systemctl <span class="built_in">disable</span> firewalld</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">关闭 selinux</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sed -i <span class="string">&#x27;s/enforcing/disabled/&#x27;</span> /etc/selinux/config <span class="comment"># 永久</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> setenforce 0 <span class="comment"># 临时</span></span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">关闭 swap</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> swapoff -a <span class="comment"># 临时</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> vim /etc/fstab <span class="comment"># 永久</span></span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">主机名</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> hostnamectl set-hostname &lt;hostname&gt;</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">在 master 添加 hosts</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> cat &gt;&gt; /etc/hosts &lt;&lt; <span class="string">EOF</span></span></span><br><span class="line">192.168.27.8 k8s-master</span><br><span class="line">192.168.27.9 k8s-node1</span><br><span class="line">192.168.27.10 k8s-node2</span><br><span class="line">EOF</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="string">将桥接的 IPv4 流量传递到 iptables 的链</span></span>  </span><br><span class="line"><span class="meta">$</span><span class="bash"><span class="string"> cat &gt; /etc/sysctl.d/k8s.conf &lt;&lt; EOF</span></span></span><br><span class="line">net.bridge.bridge-nf-call-ip6tables = 1</span><br><span class="line">net.bridge.bridge-nf-call-iptables = 1</span><br><span class="line">EOF</span><br><span class="line"><span class="meta">$</span><span class="bash"> sysctl --system <span class="comment"># 生效</span></span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">时间同步</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> yum install ntpdate -y</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> ntpdate time.windows.com</span></span><br></pre></td></tr></table></figure><h2 id="所有节点安装docker-kubeadm-kubelet"><a href="#所有节点安装docker-kubeadm-kubelet" class="headerlink" title="所有节点安装docker/kubeadm/kubelet"></a>所有节点安装docker/kubeadm/kubelet</h2><ol><li><p>安装docker  </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">wget https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo -O /etc/yum.repos.d/docker-ce.repo</span><br><span class="line">yum -y install docker-ce-18.06.1.ce-3.el7</span><br><span class="line">systemctl enable docker &amp;&amp; systemctl start docker</span><br><span class="line">docker --version</span><br></pre></td></tr></table></figure></li><li><p>设置镜像加速器  </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">sudo mkdir -p /etc/docker</span><br><span class="line">sudo tee /etc/docker/daemon.json &lt;&lt;-&#x27;EOF&#x27;</span><br><span class="line">&#123;</span><br><span class="line">  &quot;registry-mirrors&quot;: [&quot;https://det35a19.mirror.aliyuncs.com&quot;]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line">sudo systemctl daemon-reload</span><br><span class="line">sudo systemctl restart docker</span><br></pre></td></tr></table></figure></li><li><p>添加k8s软件源  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">cat &lt;&lt;EOF &gt; /etc/yum.repos.d/kubernetes.repo</span><br><span class="line">[kubernetes]</span><br><span class="line">name=Kubernetes</span><br><span class="line">baseurl=https://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64/</span><br><span class="line">enabled=1</span><br><span class="line">gpgcheck=1</span><br><span class="line">repo_gpgcheck=1</span><br><span class="line">gpgkey=https://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg https://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpg</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure></li><li><p>安装kubelet/kubeadm/kubectl  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yum install -y kubelet kubeadm kubectl</span><br><span class="line">systemctl enable kubelet &amp;&amp; systemctl start kubelet</span><br></pre></td></tr></table></figure></li></ol><h2 id="部署k8s-master"><a href="#部署k8s-master" class="headerlink" title="部署k8s master"></a>部署k8s master</h2><ol><li>在master节点执行  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">apiserver后的IP为master节点IP</span></span><br><span class="line"><span class="meta">#</span><span class="bash">image-repository指定阿里云镜像仓库</span></span><br><span class="line"><span class="meta">#</span><span class="bash">指定k8s版本</span></span><br><span class="line"> kubeadm init \</span><br><span class="line">--apiserver-advertise-address=192.168.27.8 \    </span><br><span class="line">--image-repository registry.aliyuncs.com/google_containers \</span><br><span class="line">--kubernetes-version v1.17.0 \</span><br><span class="line">--service-cidr=10.96.0.0/12 \</span><br><span class="line">--pod-network-cidr=10.244.0.0/16</span><br></pre></td></tr></table></figure></li></ol><p><strong>执行完成后会在末尾显示kubeadm join….内容，此为node节点添加到集群中时使用的命令，有效时长为24小时,过期后就需要重新创建token</strong>  </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">kubeadm token create --print-join-command</span><br><span class="line">kubeadm token list</span><br></pre></td></tr></table></figure><ol start="2"><li>根据上一步执行提示执行以下命令  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p $HOME/.kube</span><br><span class="line">sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config</span><br><span class="line">sudo chown $(id -u):$(id -g) $HOME/.kube/config</span><br></pre></td></tr></table></figure></li></ol><h2 id="安装pod网络插件"><a href="#安装pod网络插件" class="headerlink" title="安装pod网络插件"></a>安装pod网络插件</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">kubectl apply –f https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-sflannel.yml</span><br><span class="line"></span><br><span class="line">kubectl get pods -n kube-system </span><br></pre></td></tr></table></figure><p>因为是国外的源，可能会失败，可以尝试多试几次或者找国内的源  </p><h2 id="将node节点加入到k8s集群中"><a href="#将node节点加入到k8s集群中" class="headerlink" title="将node节点加入到k8s集群中"></a>将node节点加入到k8s集群中</h2><p>在执行kubeadm init 后末尾显示的命令在其他node中执行  </p><h2 id="测试k8s集群"><a href="#测试k8s集群" class="headerlink" title="测试k8s集群"></a>测试k8s集群</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">kubectl create deployment nginx --image=nginx</span><br><span class="line">kubectl expose deployment nginx --port=80 --type=NodePort</span><br><span class="line">kubectl get pod,svc</span><br></pre></td></tr></table></figure><p>访问地址：http://NodeIP:Port   这里应该是任意集群节点都可以访问到  </p><h1 id="二进制方式部署"><a href="#二进制方式部署" class="headerlink" title="二进制方式部署"></a>二进制方式部署</h1><h2 id="安装部署要求-1"><a href="#安装部署要求-1" class="headerlink" title="安装部署要求"></a>安装部署要求</h2><ol><li>硬件配置：2G或更多，2个CPU或更多，硬盘30G或更多  </li><li>集群中所有机器网络互通  </li><li>可以访问外网，需要拉取镜像  </li><li>禁止swap分区  </li></ol><h2 id="准备环境-1"><a href="#准备环境-1" class="headerlink" title="准备环境"></a>准备环境</h2><h3 id="软件环境"><a href="#软件环境" class="headerlink" title="软件环境"></a>软件环境</h3><table><thead><tr><th align="center">软件</th><th align="center">版本</th></tr></thead><tbody><tr><td align="center">docker</td><td align="center">19-ce</td></tr><tr><td align="center">kubernetes</td><td align="center">1.19</td></tr></tbody></table><h3 id="服务器规划"><a href="#服务器规划" class="headerlink" title="服务器规划"></a>服务器规划</h3><table><thead><tr><th align="center">角色</th><th align="center">IP</th><th align="center">组件</th></tr></thead><tbody><tr><td align="center">k8s-master</td><td align="center">192.168.27.8</td><td align="center">kube-apiserver，kube-controller-manager，kube-scheduler，etcd</td></tr><tr><td align="center">k8s-node1</td><td align="center">192.168.27.9</td><td align="center">kubelet，kube-proxy，docker etcd</td></tr><tr><td align="center">k8s-node2</td><td align="center">192.168.27.10</td><td align="center">kubelet，kube-proxy，docker，etcd</td></tr></tbody></table><h2 id="系统初始化-1"><a href="#系统初始化-1" class="headerlink" title="系统初始化"></a>系统初始化</h2><p>相关操作与kuneadm部署中系统初始化一样  </p><h2 id="部署etcd集群"><a href="#部署etcd集群" class="headerlink" title="部署etcd集群"></a>部署etcd集群</h2><p>etcd是一个分布式的键值存储系统，kubernetes使用功能etcd进行数据存储</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://s2.loli.net/2022/06/27/5UbYtS64yAIPXzM.jpg&quot; alt=&quot;k8s.jpg&quot;&gt;  &lt;/p&gt;</summary>
    
    
    
    <category term="Kubernetes" scheme="http://example.com/categories/Kubernetes/"/>
    
    
    <category term="K8S集群部署" scheme="http://example.com/tags/K8S%E9%9B%86%E7%BE%A4%E9%83%A8%E7%BD%B2/"/>
    
  </entry>
  
  <entry>
    <title>1-Kubernetes基本概念</title>
    <link href="http://example.com/2022/06/27/K8s/1-Kubernetes%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/"/>
    <id>http://example.com/2022/06/27/K8s/1-Kubernetes%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/</id>
    <published>2022-06-26T16:30:20.000Z</published>
    <updated>2022-06-28T14:42:24.341Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://s2.loli.net/2022/06/27/5UbYtS64yAIPXzM.jpg" alt="k8s.jpg">  </p><span id="more"></span><h1 id="K8S概述"><a href="#K8S概述" class="headerlink" title="K8S概述"></a>K8S概述</h1><p>k8s是谷歌开源的容器化集群管理系统<br>使用k8s进行容器化应用部署<br>使用k8s利于应用扩展<br>k8s目标是让部署容器化应用更加简洁和高效  </p><h1 id="K8S特性"><a href="#K8S特性" class="headerlink" title="K8S特性"></a>K8S特性</h1><ol><li>自动装箱：基于容器对应用运行环境的资源配置要求自动化部署应用容器  </li><li>自我修复（自愈能力）：当容器失败时，会对容器进行重启  </li><li>水平扩展：对应用容器进行规模扩大或者规模剪裁  </li><li>服务发现：通过K8S自身实现服务发现和负载均衡  </li><li>滚动更新：进行一次性或者批量式更新  </li><li>版本回退：历史版本即时回退  </li><li>秘钥和配置管理：在不需要重新构建镜像的情况下，可以部署和更新秘钥和应用配置，类似热部署  </li><li>存储编排：自动实现存储系统挂载和应用，存储系统可以来自于本地目录、网络存储、公有云存储服务  </li><li>批处理：一次性任务、定时任务</li></ol><h1 id="K8S集群架构组件"><a href="#K8S集群架构组件" class="headerlink" title="K8S集群架构组件"></a>K8S集群架构组件</h1><p><img src="/2022/06/27/K8s/1-Kubernetes%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/k8s%E6%9E%B6%E6%9E%84%E5%9B%BE.png" alt="K8s架构图">  </p><h2 id="master组件"><a href="#master组件" class="headerlink" title="master组件"></a>master组件</h2><ol><li>APIserver：集群统一入口，以restful方式，交给etcd存储  </li><li>scheduler：节点调度，选择node节点部署应用  </li><li>controller-manager：处理集群中常会后台任务，一个资源对应一个控制器  </li><li>etcd：存储系统，用于保存集群相关的数据  </li></ol><h2 id="node组件"><a href="#node组件" class="headerlink" title="node组件"></a>node组件</h2><ol><li>kubelet:master在node中的代表，管理本机容器  </li><li>kube-proxy：提供网络代理，负载均衡  </li></ol><h1 id="K8S核心概念"><a href="#K8S核心概念" class="headerlink" title="K8S核心概念"></a>K8S核心概念</h1><ol><li>pod  </li></ol><ul><li>最小部署单元  </li><li>一组容器的集合  </li><li>pod内共享网络  </li><li>生命周期是短暂的（服务器重启后就找不到了）  </li></ul><ol start="2"><li>controller  </li></ol><ul><li>确保预期的pod副本数量（replicaSet）  </li><li>一次性任务和定时任务（job和cronjob）  </li><li>有状态应用部署（statefulSet）与无状态应用部署（Depoltment）（无状态应用部署即无部署或使用条件，有条件应用部署反之）  </li><li>确保所有的node同时运行一个pod（DaemonSet）  </li></ul><ol start="3"><li>service  </li></ol><ul><li>定义一组pod的访问规则  </li><li>pod的负载均衡，提供一个或多个pod的稳定的访问地址  </li></ul><ol start="4"><li>volume  </li></ol><ul><li>声明在pod中可以访问的文件目录  </li><li>可以被挂载到一个或多个容器指定路径下</li><li>支持多种后端存储  </li></ul><ol start="5"><li>deployment  </li></ol><ul><li>定义一组pod副本数目，版本等  </li><li>通过控制器controller维持pod数目  </li><li>通过控制器以指定的策略控制版本  </li></ul><ol start="6"><li>label  </li></ol><ul><li>标签，用于对对象资源查询、筛选  </li></ul><ol start="7"><li>namespace  </li></ol><ul><li>命名空间，逻辑隔离  </li><li>一个集群内部的逻辑隔离机制（鉴权、资源）  </li><li>每一个资源都属于一个namespace  </li><li>同一个namespace中所有资源不能重复  </li><li>不同namespace中的资源名可以重复  </li></ul><h1 id="完整流程"><a href="#完整流程" class="headerlink" title="完整流程"></a>完整流程</h1><ol><li>通过kubectl提交一个创建replication controller（RC），亲通过APIserver写入到etcd中  </li><li>controller-manager通过APIserver监听到此RC  </li><li>分析之后发现集群中还没有它对应的pod  </li><li>根据RC中的pod模板定义一个生成pod对象，通过APIserver写入到etcd中  </li><li>此事件被scheduler发现，立即执行一个复杂的调度流程，为这个pod选定一个node，然后通过APIserver将这一事件写入到etcd中  </li><li>目标node上云心给的kubelet进程通过APIserver检测到这个新的pod，并按照他的定义启动该pod，并进行管理  </li><li>随后通过kubectl提交一个新的映射到该pod的service的创建请求  </li><li>controller-manager通过label标签查询到关联的pod实例，然后生成service的endpoints信息，并通过APIserver写入到etcd中  </li><li>所有node上运行的proxy进程通过APIserver查询并监听service对象与对应的endpoints信息，建立一个软件方式的负载均衡来实现service访问到后端pod的流量转发功能  </li></ol><p>endpoints：endpoint是k8s集群中的一个资源对象，存储在etcd中，用来记录一个service对应的所有pod的访问地址。service配置selector，endpoint controller才会自动创建对应的endpoint对象；否则，不会生成endpoint对象  </p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://s2.loli.net/2022/06/27/5UbYtS64yAIPXzM.jpg&quot; alt=&quot;k8s.jpg&quot;&gt;  &lt;/p&gt;</summary>
    
    
    
    <category term="Kubernetes" scheme="http://example.com/categories/Kubernetes/"/>
    
    
    <category term="K8s基本概念" scheme="http://example.com/tags/K8s%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/"/>
    
  </entry>
  
  <entry>
    <title>1-python基础</title>
    <link href="http://example.com/2022/06/10/python/1-python%E5%9F%BA%E7%A1%80/"/>
    <id>http://example.com/2022/06/10/python/1-python%E5%9F%BA%E7%A1%80/</id>
    <published>2022-06-10T01:18:21.000Z</published>
    <updated>2022-06-10T02:31:38.650Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://s2.loli.net/2022/06/10/1Ckhj2OT3FMxtsS.png">  </p><span id="more"></span> <h1 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h1><h2 id="整数"><a href="#整数" class="headerlink" title="整数"></a>整数</h2><p>十六进制：<strong>0x</strong>前缀和<strong>0-9</strong>、<strong>a-f</strong>表示<br>对于很大的数，可以使用_进行分隔，如：10000000与10_000_000是完全一样的  </p><h2 id="浮点数"><a href="#浮点数" class="headerlink" title="浮点数"></a>浮点数</h2><p>小数<br>123000可以表示为1.23e5，0.0000123可以表示为1.23e-5<br><strong>整数与浮点数在计算机内部存储的方式不同，整数的运算永远是精确的,浮点数的运算可能会有四舍五入的误差</strong> </p><h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><p>使用单引号 <strong>&#39;&#39;</strong> 或者双引号 <strong>&quot;&quot;</strong> 括起来的文本<br>当文本内部有单引号或者双引号时，需要使用转义符\来标识  </p><h2 id="布尔值"><a href="#布尔值" class="headerlink" title="布尔值"></a>布尔值</h2><p><strong>True</strong>与<strong>False</strong>,注意大小写<br>可以使用and、or、not来进行运算  </p><h2 id="空值"><a href="#空值" class="headerlink" title="空值"></a>空值</h2><p><strong>None</strong></p><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><p>必须是大小写的英文、数字、_下划线的组合，且不能使用数字开头，变量本身类型不固定<br>当创建一个变量时，python解释器在内存中创建了变量的值，并在内存中创建变量指向变量的值，所以当变量重新赋值时其实就是重新进行了指向。  </p><h2 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h2><p>常量就是一个不变的量，但是python没有机制保证不会改变，只是人为的将变量名为全大写的变量认定为常量</p><h2 id><a href="#" class="headerlink" title></a></h2><h1 id="除法"><a href="#除法" class="headerlink" title="除法"></a>除法</h1><p><strong>/</strong> :计算结果为浮点数，即使两个相除的数字都是整数，计算结果也是浮点数<br><strong>//</strong> :取整除，两个整数的计算结果为整数<br><strong>%</strong> ：取余  </p><h1 id="-1"><a href="#-1" class="headerlink" title></a></h1>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://s2.loli.net/2022/06/10/1Ckhj2OT3FMxtsS.png&quot;&gt;  &lt;/p&gt;</summary>
    
    
    
    <category term="python" scheme="http://example.com/categories/python/"/>
    
    
    <category term="python基础" scheme="http://example.com/tags/python%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>2-MongoDB基础</title>
    <link href="http://example.com/2022/05/26/mongoDB/2-MongoDB%E5%9F%BA%E7%A1%80/"/>
    <id>http://example.com/2022/05/26/mongoDB/2-MongoDB%E5%9F%BA%E7%A1%80/</id>
    <published>2022-05-26T02:06:19.000Z</published>
    <updated>2022-06-08T02:46:44.526Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://s2.loli.net/2022/05/25/cnIFxBYjKNfkvA7.jpg" alt="mongoDB.png">  </p><span id="more"></span><h1 id="MOngoDB概念"><a href="#MOngoDB概念" class="headerlink" title="MOngoDB概念"></a>MOngoDB概念</h1><table><thead><tr><th>SQL</th><th>MongoDB</th><th>说明</th></tr></thead><tbody><tr><td>database</td><td>database</td><td>数据库</td></tr><tr><td>table</td><td>collection</td><td>数据库表/集合</td></tr><tr><td>row</td><td>document</td><td>行/文档</td></tr><tr><td>column</td><td>field</td><td>字段/域</td></tr><tr><td>index</td><td>index</td><td>索引</td></tr><tr><td>primary key</td><td>primary key</td><td>主键，mongodb自动将_id设置为主键</td></tr></tbody></table><h2 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">show dbs            #显示所有数据的列表</span><br><span class="line">db                  #显示当前数据库对象或集合</span><br><span class="line">use  [database]     #连接到一个指定的数据库</span><br></pre></td></tr></table></figure><h3 id="数据库命名规则"><a href="#数据库命名规则" class="headerlink" title="数据库命名规则"></a>数据库命名规则</h3><ol><li>不能是空字符串  </li><li>不能含有空格、点、$、/、\  </li><li><strong>应全部小写</strong>  </li><li>最多64字节  </li></ol><h3 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h3><p>使用<code>use DATABASE_NAME</code>进行创建数据库，若没有该数据库则创建，若有则切换。<br>需要注意的是创建完成数据库是空的，使用<code>show dbs</code>不会显示，若要显示改数据库，则需要在该库中添加一些数据</p><h3 id="删除数据库"><a href="#删除数据库" class="headerlink" title="删除数据库"></a>删除数据库</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; use DATABASE_NAME </span><br><span class="line">&gt; db.dropDatabase()</span><br></pre></td></tr></table></figure><h2 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h2><p>集合存在于数据库中，集合没有固定给的结构，可以插入不同格式和类型的数据。当第一个文档插入时，集合就会被创建。  </p><h3 id="集合命名规则"><a href="#集合命名规则" class="headerlink" title="集合命名规则"></a>集合命名规则</h3><ol><li>不能是空字符串  </li><li>不能以system开头，这些是系统合集保留的前缀</li><li>不应包含$  </li></ol><h3 id="capped-collection"><a href="#capped-collection" class="headerlink" title="capped collection"></a>capped collection</h3><p>固定大小的collection，具有很高的性能以及队列过期的特性，可以按照文档的插入顺序保存到集合中，而且这些文档在磁盘上存放位置也是按照插入顺序来保存的，所以当我们更新Capped collections 中文档的时候，更新后的文档不可以超过之前文档的大小，这样话就可以确保所有文档在磁盘上的位置一直保持不变，创建时指定collection的大小，单位是字节，collection的空间是提前分配的。  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.createCollection(&quot;test&quot;, &#123;capped:true, size:100000&#125;)</span><br></pre></td></tr></table></figure><h3 id="创建集合"><a href="#创建集合" class="headerlink" title="创建集合"></a>创建集合</h3><p><code>db.createCollection(NAME，OPTIONS)</code><br>capped：true时创建固定合集<br>size：为固定合集指定一个最大值，单位是字节<br>max：固定合集中包含文档的最大数量  </p><p><code>show collections</code>或者<code>show tables</code>查看已有合集。  </p><h3 id="删除合集"><a href="#删除合集" class="headerlink" title="删除合集"></a>删除合集</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.COLLECTION_NAME.drop()</span><br></pre></td></tr></table></figure><h2 id="文档"><a href="#文档" class="headerlink" title="文档"></a>文档</h2><p>文档是一组键值对，不需要设置相同的字段，并且相同的字段不需要相同的数据类型。  </p><ul><li>键值对是有序的  </li><li>区分类型与大小写  </li><li>文档中不能有重复的键  </li><li>文档的键是字符串</li></ul><h3 id="插入文档"><a href="#插入文档" class="headerlink" title="插入文档"></a>插入文档</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">db.COLLECTION_NAME.insert()  # 插入文档，不用遍历，效率高，插入的文档主键已在合集中存在时会报错  </span><br><span class="line">db.COLLECTION_NAME.save()    # 插入文档，插入时需要遍历列表，插入的文档主键已在合集中存在时会将原有文档更新</span><br><span class="line">db.COLLECTION_NAME.insertOne()  #插入一个新文档</span><br><span class="line">db.COLLECTION_NAME.inserMany()  #插入多个新文档，插入方式为有序插入</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># insertMany插入</span><br><span class="line">&gt; db.test.insertMany([&#123;&quot;name&quot;:&quot;yyg&quot;&#125;,&#123;&quot;name&quot;:&quot;yang&quot;&#125;,&#123;&quot;name&quot;:&quot;guang&quot;&#125;])</span><br><span class="line">&#123;</span><br><span class="line">        &quot;acknowledged&quot; : true,</span><br><span class="line">        &quot;insertedIds&quot; : [</span><br><span class="line">                ObjectId(&quot;629080043373edb925a0056f&quot;),</span><br><span class="line">                ObjectId(&quot;629080043373edb925a00570&quot;),</span><br><span class="line">                ObjectId(&quot;629080043373edb925a00571&quot;)</span><br><span class="line">        ]</span><br><span class="line">&#125;</span><br><span class="line">&gt; db.test.find()</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;629080043373edb925a0056f&quot;), &quot;name&quot; : &quot;yyg&quot; &#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;629080043373edb925a00570&quot;), &quot;name&quot; : &quot;yang&quot; &#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;629080043373edb925a00571&quot;), &quot;name&quot; : &quot;guang&quot; &#125;</span><br></pre></td></tr></table></figure><h3 id="更新文档"><a href="#更新文档" class="headerlink" title="更新文档"></a>更新文档</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">db.COLLECTION_NAME.update(&lt;query&gt;,&lt;update&gt;,</span><br><span class="line">   &#123;</span><br><span class="line">     upsert: &lt;boolean&gt;,</span><br><span class="line">     multi: &lt;boolean&gt;,</span><br><span class="line">     writeConcern: &lt;document&gt;</span><br><span class="line">   &#125;</span><br><span class="line">)</span><br><span class="line"># query : update的查询条件，类似sql update查询内where后面的</span><br><span class="line"># update : update的对象和一些更新的操作符（如$,$inc...）等，也可以理解为sql update查询内set后面的</span><br><span class="line"># upsert : 可选，这个参数的意思是，如果不存在update的记录，是否插入objNew,true为插入，默认是false，不插入。</span><br><span class="line"># multi : 可选，mongodb 默认是false,只更新找到的第一条记录，如果这个参数为true,就把按条件查出来多条记录全部更新。</span><br><span class="line"># writeConcern :可选，抛出异常的级别。</span><br><span class="line"></span><br><span class="line">db.COLLECTION_NAME.save()     #将传入的文档替换原有的文档，主键不存在就插入，存在就替换</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h3 id="删除文档"><a href="#删除文档" class="headerlink" title="删除文档"></a>删除文档</h3>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://s2.loli.net/2022/05/25/cnIFxBYjKNfkvA7.jpg&quot; alt=&quot;mongoDB.png&quot;&gt;  &lt;/p&gt;</summary>
    
    
    
    <category term="MongoDB" scheme="http://example.com/categories/MongoDB/"/>
    
    
    <category term="MongoDB基础" scheme="http://example.com/tags/MongoDB%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>1-MongoDB安装部署</title>
    <link href="http://example.com/2022/05/25/mongoDB/1-MongoDB%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2/"/>
    <id>http://example.com/2022/05/25/mongoDB/1-MongoDB%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2/</id>
    <published>2022-05-25T07:38:07.000Z</published>
    <updated>2022-06-20T05:46:51.337Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://s2.loli.net/2022/05/25/cnIFxBYjKNfkvA7.jpg" alt="mongoDB.png">  </p><span id="more"></span><h2 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h2><ul><li>面向集合存储，易存储对象类型的数据  </li><li>支持查询以及动态查询  </li><li>文件存储为BSON（类似JSON）</li><li>支持复制、故障恢复、分片 </li></ul><h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><ul><li>游戏应用：存储用户信息，用户的游戏装备，积分等直接内嵌文档的方式存储，方便进行查询与更新  </li><li>物流应用：存储订单信息，订单状态在运送过程中不断更新，以内嵌数组来进行存储，一次查询就能将订单所有的变更读取</li><li>社交应用：存储用户信息以及用户发表的朋友圈信息  </li><li></li></ul><h2 id="MongoDB安装包下载"><a href="#MongoDB安装包下载" class="headerlink" title="MongoDB安装包下载"></a>MongoDB安装包下载</h2><p><img src="/2022/05/25/mongoDB/1-MongoDB%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2/%E4%B8%8B%E8%BD%BD%E4%BD%8D%E7%BD%AE.png" alt="下载位置">  </p><!--more-->    <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">yum install libcurl openssl   #两个依赖包</span><br><span class="line">wget https://fastdl.mongodb.org/linux/mongodb-linux-x86_64-rhel70-5.0.8.tgz</span><br><span class="line">mkdir /usr/local/MongoDB</span><br><span class="line">mkdir /usr/local/MongoDB/data           #数据存储目录</span><br><span class="line">mkdir /usr/local/MongoDB/log            #日志文件目录</span><br><span class="line">mkdir /usr/local/MongoDB/source         #源包目录</span><br><span class="line">mv mongodb-linux-x86_64-rhel70-5.0.8.tgz  /usr/local/MongoDB #将安装包解压后的文件目录名修改为mongodbServer，以方便后期操作</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">将/ety/profile 中添加一下两行</span></span><br><span class="line">export MONGODB_HOME=/usr/local/MongoDB/mongodbServer</span><br><span class="line">export PATH=$PATH:$MONGODB_HOME/bin</span><br></pre></td></tr></table></figure><p>编辑配置文件  </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">]#</span><span class="bash"> more /usr/<span class="built_in">local</span>/MongoDB/mongodbServer/bin/mongod.conf</span></span><br><span class="line">storage:</span><br><span class="line">    dbPath: &quot;/usr/local/MongoDB/data&quot;           #数据存放位置</span><br><span class="line">systemLog:</span><br><span class="line">    destination: file</span><br><span class="line">    path: &quot;/usr/local/MongoDB/log/mongod.log&quot;   #日持存放位置</span><br><span class="line">    logAppend: true</span><br><span class="line">net:</span><br><span class="line">    port: 27017       #指定端口，默认即使27017</span><br><span class="line">    bindIpAll: true</span><br><span class="line">processManagement:</span><br><span class="line">    fork: true        #后台执行</span><br></pre></td></tr></table></figure><h2 id="文件介绍"><a href="#文件介绍" class="headerlink" title="文件介绍"></a>文件介绍</h2><p>/usr/local/MongoDB/mongodbServer/bin下脚本文件介绍<br>install_compass：安装compass工具<br>mongo：mongo客户端工具<br>mongod：mongo启动脚本<br>mongos：路由脚本  </p><h2 id="启动MongoDB"><a href="#启动MongoDB" class="headerlink" title="启动MongoDB"></a>启动MongoDB</h2><ol><li><p>方式一</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">]#</span><span class="bash"> mongod --config /usr/<span class="built_in">local</span>/MongoDB/mongodbServer/bin/mongod.conf</span></span><br><span class="line">about to fork child process, waiting until server is ready for connections.</span><br><span class="line">forked process: 15646</span><br><span class="line">child process started successfully, parent exiting</span><br></pre></td></tr></table></figure></li><li><p>方式二  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mongod  --port=27017 --dbpath=/usr/local/MongoDB/data  --logpath=/usr/local/MongoDB/log/mongod.log</span><br></pre></td></tr></table></figure></li></ol><h2 id="停止MongoDB"><a href="#停止MongoDB" class="headerlink" title="停止MongoDB"></a>停止MongoDB</h2><ul><li><p>方法一  </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">]#</span><span class="bash"> mongo</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> use admin</span></span><br><span class="line">switched to db admin</span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> db</span></span><br><span class="line">admin</span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> db.shutdownServer()</span></span><br><span class="line">server should be down...</span><br></pre></td></tr></table></figure></li><li><p>方法二  </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">]#</span><span class="bash"> mongod --config /usr/<span class="built_in">local</span>/MongoDB/mongodbServer/bin/mongod.conf --shutdown</span></span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://s2.loli.net/2022/05/25/cnIFxBYjKNfkvA7.jpg&quot; alt=&quot;mongoDB.png&quot;&gt;  &lt;/p&gt;</summary>
    
    
    
    <category term="MongoDB" scheme="http://example.com/categories/MongoDB/"/>
    
    
    <category term="MongoDB安装部署" scheme="http://example.com/tags/MongoDB%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2/"/>
    
  </entry>
  
  <entry>
    <title>3-zabbix快速配置</title>
    <link href="http://example.com/2022/03/28/zabbix/3-zabbix%E5%BF%AB%E9%80%9F%E9%85%8D%E7%BD%AE/"/>
    <id>http://example.com/2022/03/28/zabbix/3-zabbix%E5%BF%AB%E9%80%9F%E9%85%8D%E7%BD%AE/</id>
    <published>2022-03-28T01:02:33.000Z</published>
    <updated>2022-05-24T04:47:29.876Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://s2.loli.net/2022/03/25/BC4LOAv1sp89SnY.jpg" alt="zabbix.jpg">  </p><span id="more"></span><h1 id="配置流程"><a href="#配置流程" class="headerlink" title="配置流程"></a>配置流程</h1><p>完整的配置流程：主机组–&gt;主机–&gt;监控项组–&gt;监控项–&gt;触发器–&gt;故障–&gt;处理动作–&gt;用户组–&gt;用户–&gt;告警方式–&gt;日记审计。  </p><h1 id="主机组"><a href="#主机组" class="headerlink" title="主机组"></a>主机组</h1><h2 id="添加主机组"><a href="#添加主机组" class="headerlink" title="添加主机组"></a>添加主机组</h2><p><img src="/2022/03/28/zabbix/3-zabbix%E5%BF%AB%E9%80%9F%E9%85%8D%E7%BD%AE/%E6%B7%BB%E5%8A%A0%E4%B8%BB%E6%9C%BA%E7%BB%84.png" alt="添加主机组"><br>添加主机组的相关信息保存在数据库中  </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> zabbix.hstgrp;</span><br></pre></td></tr></table></figure><h2 id="层级主机组分组"><a href="#层级主机组分组" class="headerlink" title="层级主机组分组"></a>层级主机组分组</h2>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://s2.loli.net/2022/03/25/BC4LOAv1sp89SnY.jpg&quot; alt=&quot;zabbix.jpg&quot;&gt;  &lt;/p&gt;</summary>
    
    
    
    <category term="zabbix" scheme="http://example.com/categories/zabbix/"/>
    
    
    <category term="zabbix安装" scheme="http://example.com/tags/zabbix%E5%AE%89%E8%A3%85/"/>
    
  </entry>
  
  <entry>
    <title>2-zabbix部署</title>
    <link href="http://example.com/2022/03/25/zabbix/2-zabbix%E9%83%A8%E7%BD%B2/"/>
    <id>http://example.com/2022/03/25/zabbix/2-zabbix%E9%83%A8%E7%BD%B2/</id>
    <published>2022-03-25T14:22:21.000Z</published>
    <updated>2022-05-24T04:47:55.054Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://s2.loli.net/2022/03/25/BC4LOAv1sp89SnY.jpg" alt="zabbix.jpg">  </p><span id="more"></span><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>系统版本为centos 7.6，按照<a href="https://www.zabbix.com/documentation/5.2/zh/manual/installation/install_from_packages/rhel_centos">zabbix指导文档</a> 进行安装。注意使用不同版本系统进行安装时有所不同，需参考官方指导文档进行部署安装。  </p><h1 id="server端部署"><a href="#server端部署" class="headerlink" title="server端部署"></a>server端部署</h1><h2 id="添加-Zabbix-软件仓库"><a href="#添加-Zabbix-软件仓库" class="headerlink" title="添加 Zabbix 软件仓库"></a>添加 Zabbix 软件仓库</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rpm -ivh http://repo.zabbix.com/zabbix/4.0/rhel/7/x86_64/zabbix-release-4.0-1.el7.noarch.rpm</span><br></pre></td></tr></table></figure><p>执行完成后在/etc/yum.repos.d会生成一个zabbix.repo文件。在安装zabbix是除了zabbix.repo，也要准备好centos 7的相关安装源，以便安装zabbix需要的依赖包。  </p><h2 id="启用可选-rpms-的软件仓库"><a href="#启用可选-rpms-的软件仓库" class="headerlink" title="启用可选 rpms 的软件仓库"></a>启用可选 rpms 的软件仓库</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># yum -y install yum-utils</span><br><span class="line"># yum-config-manager --enable rhel-7-server-optional-rpms</span><br></pre></td></tr></table></figure><h2 id="安装-Server-前端-agent"><a href="#安装-Server-前端-agent" class="headerlink" title="安装 Server/前端/agent"></a>安装 Server/前端/agent</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># yum -y install zabbix-server-mysql zabbix-web-mysql zabbix-agent</span><br></pre></td></tr></table></figure><h2 id="安装MariaDB-Mysql数据库"><a href="#安装MariaDB-Mysql数据库" class="headerlink" title="安装MariaDB/Mysql数据库"></a>安装MariaDB/Mysql数据库</h2><p>这一步可以选择安装MariaDB或者Mysql数据库  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># yum install -y mariadb mariadb-server</span><br><span class="line"># systemctl start mariadb</span><br><span class="line"># systemctl enable mariadb</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"># mysql_secure_installation  #数据库配置</span><br><span class="line"></span><br><span class="line">Enter current password for root (enter for none):  # 输入数据库超级管理员root的密码(注意不是系统root的密码)，第一次进入还没有设置密码则直接回车</span><br><span class="line"></span><br><span class="line">Set root password? [Y/n]  # 设置密码，y</span><br><span class="line"></span><br><span class="line">New password:  # 新密码</span><br><span class="line">Re-enter new password:  # 再次输入密码</span><br><span class="line"></span><br><span class="line">Remove anonymous users? [Y/n]  # 移除匿名用户， y</span><br><span class="line"></span><br><span class="line">Disallow root login remotely? [Y/n]  # 拒绝root远程登录，n，不管y/n，都会拒绝root远程登录</span><br><span class="line"></span><br><span class="line">Remove test database and access to it? [Y/n]  # 删除test数据库，y：删除。n：不删除，数据库中会有一个test数据库，一般不需要</span><br><span class="line"></span><br><span class="line">Reload privilege tables now? [Y/n]  # 重新加载权限表，y。或者重启服务也许</span><br></pre></td></tr></table></figure><h2 id="初始化zabbix-database"><a href="#初始化zabbix-database" class="headerlink" title="初始化zabbix database"></a>初始化zabbix database</h2><ul><li>创建初识数据库  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; create database zabbix character set utf8 collate utf8_bin;</span><br><span class="line">mysql&gt; grant all privileges on zabbix.* to zabbix@localhost identified by &#x27;123456&#x27;;</span><br></pre></td></tr></table></figure></li><li>导入初始架构和数据，系统将提示您输入新创建的密码。  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">zcat /usr/share/doc/zabbix-server-mysql*/create.sql.gz | mysql -uzabbix -p zabbix</span><br></pre></td></tr></table></figure></li></ul><h2 id="配置zabbix-server"><a href="#配置zabbix-server" class="headerlink" title="配置zabbix server"></a>配置zabbix server</h2><p>配置server端，编辑/etc/zabbix/zabbix_server.conf。  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">#服务监听的端口，保持默认即可。</span><br><span class="line"># ListenPort=10051</span><br><span class="line"></span><br><span class="line">#当服务端有多个IP时，通过该参数指定通过哪个IP采集被监控主机的数据</span><br><span class="line"># SourceIP=</span><br><span class="line"></span><br><span class="line">#记录日志的方式，system表示将日志发往syslog；file表示使用指定的文件当做日志文件（默认方式）；console表示将日志发往控制台</span><br><span class="line"># LogType=file</span><br><span class="line"></span><br><span class="line">#当LogType=file时，通过该参数指定日志文件</span><br><span class="line">LogFile=/var/log/zabbix/zabbix_server.log</span><br><span class="line"></span><br><span class="line">#设定当日志文件达到多大时进行自动滚动，设置为0时不进行滚动。</span><br><span class="line">LogFileSize=0</span><br><span class="line"></span><br><span class="line">#定义日志文件的详细程度，即日志级别</span><br><span class="line">DebugLevel=3</span><br><span class="line"></span><br><span class="line">#zabbix服务端程序PID路径 </span><br><span class="line">PidFile=/var/run/zabbix/zabbix_server.pid</span><br><span class="line"></span><br><span class="line">#zabbix数据库所在IP</span><br><span class="line"># DBHost=localhost</span><br><span class="line"></span><br><span class="line">#zabbix数据库名称</span><br><span class="line">DBName=zabbix</span><br><span class="line"></span><br><span class="line">#zabbix数据库用户名</span><br><span class="line">DBUser=zabbix</span><br><span class="line"></span><br><span class="line">#zabbix数据库用户对应的密码</span><br><span class="line">DBPassword=123456</span><br><span class="line"></span><br><span class="line">#zabbix所在数据库服务监听的端口号</span><br><span class="line"># DBPort=3306</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在进行配置时只将zabbix数据库用户名对应的密码填写即可使用，并将zabbix server 启动，并将其设置为开机启动。  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl start zabbix-server.service</span><br><span class="line">systemctl enable zabbix-server.service</span><br></pre></td></tr></table></figure><h2 id="zabbix-web配置"><a href="#zabbix-web配置" class="headerlink" title="zabbix web配置"></a>zabbix web配置</h2><p>安装完成后需要对zabbix web进行配置,其配置文件为<code>/etc/httpd/conf.d/zabbix.conf</code>。  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">#将该时区修改</span><br><span class="line"># php_value date.timezone Europe/Riga</span><br><span class="line">                 ||</span><br><span class="line">                 ||</span><br><span class="line">                 \/</span><br><span class="line">#将时区修改为亚洲上海，并将注释符去除 </span><br><span class="line">php_value date.timezone Asia/Shanghai</span><br></pre></td></tr></table></figure><p>启动httpd服务，并将其设置为开机启动。  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl start httpd.service</span><br><span class="line">systemctl enable httpd.service</span><br></pre></td></tr></table></figure><h2 id="初始化配置"><a href="#初始化配置" class="headerlink" title="初始化配置"></a>初始化配置</h2><p>使用浏览器登录 zabbix—web_IP/zabbix。  </p><ul><li><p>前端安装向导<br><img src="/2022/03/25/zabbix/2-zabbix%E9%83%A8%E7%BD%B2/zabbix-web%E7%95%8C%E9%9D%A21.png" alt="zabbix web界面1">  </p></li><li><p>自动检测安装环境是否满足需要,全部满足后点击下一步<br><img src="/2022/03/25/zabbix/2-zabbix%E9%83%A8%E7%BD%B2/%E8%87%AA%E5%8A%A8%E6%A3%80%E6%B5%8B%E7%8E%AF%E5%A2%83.png" alt="自动检测环境">  </p></li><li><p>配置数据库连接<br><img src="/2022/03/25/zabbix/2-zabbix%E9%83%A8%E7%BD%B2/%E9%85%8D%E7%BD%AE%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9E%E6%8E%A5.png" alt="配置数据库连接">  </p></li><li><p>配置zabbix server信息<br><img src="/2022/03/25/zabbix/2-zabbix%E9%83%A8%E7%BD%B2/%E9%85%8D%E7%BD%AEzabbixserver%E4%BF%A1%E6%81%AF.png" alt="配置zabbixserver信息"></p></li><li><p>确定概要信息正确，点击下一步  </p></li><li><p>初始化配置完成<br>并有提示：配置信息保存到了<code>/etc/zabbix/web/zabbix.conf.php</code>中，若需要修改可对该文件中参数进行修改。<br><img src="/2022/03/25/zabbix/2-zabbix%E9%83%A8%E7%BD%B2/%E5%AE%8C%E6%88%90.png" alt="完成">  </p></li></ul><h2 id="登录zabbix-web界面"><a href="#登录zabbix-web界面" class="headerlink" title="登录zabbix web界面"></a>登录zabbix web界面</h2><p>默认管理员用户名为：Admin，密码为：zabbix  </p><h2 id="修改界面语言"><a href="#修改界面语言" class="headerlink" title="修改界面语言"></a>修改界面语言</h2><p>点击红框中的图标，修改language选项。</p><ol><li><p>若选项中无Chinese(zh_CN)选项<br>修改zabbix web的配置文件<code>/usr/share/zabbix/include/locales.inc.php</code>中zh_CN属性行中<code>display</code>修改为true  </p></li><li><p>若将界面修改为中文后，有文字出现乱码<br>可以在windows系统C:\Windows\Fonts（win7）中，选择一个字体，将该字体的后缀名修改为<strong>小写ttf</strong>，将其放置在zabbix字体文件下中，并修改<code>/usr/share/zabbix/include/defines.inc.php</code>配置文件（<code>define(&#39;ZBX_FONTPATH&#39;,                          realpath(&#39;XXXXXXXX&#39;));</code>可以看到字体文件的路径）。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#将两处的 graphfort 修改为 MSYH（MSYH为刚刚放置的字体文件的文件名，这里我使用的是黑体所以文件名为MSYH）</span><br><span class="line">define(&#x27;ZBX_FONT_NAME&#x27;, &#x27;MSYH&#x27;);</span><br><span class="line">define(&#x27;ZBX_GRAPH_FONT_NAME&#x27;,           &#x27;MSYH&#x27;);</span><br></pre></td></tr></table></figure><p>修改完成后，重启刷新网页就可以正常显示文字了。  </p></li></ol><h1 id="zabbix-agent"><a href="#zabbix-agent" class="headerlink" title="zabbix agent"></a>zabbix agent</h1><p>上面介绍过zabbix agent部署在被监控主机。下面进行安装  </p><h2 id="安装zabbix-agent"><a href="#安装zabbix-agent" class="headerlink" title="安装zabbix agent"></a>安装zabbix agent</h2><p>agent端的安装比较简单。  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y zabbix-agent zabbix-sender</span><br></pre></td></tr></table></figure><h2 id="配置agent"><a href="#配置agent" class="headerlink" title="配置agent"></a>配置agent</h2><p>修改<code>/etc/zabbix/zabbix_agentd.conf</code>，下面主要介绍上一章中agent的主动模式与被动模式。  </p><ul><li><p>Passive checks related<br>该模块为agent被动模式相关的参数  </p><ul><li>Server<br>允许拉取agent端数据的IP，也就是server端IP；多个IP时使用逗号将IP分隔  </li><li>ListenPort<br>被动模式所监听端口号，默认为10050，即server端访问10050端口拉取数据  </li><li>ListenIP<br>被动模式所监听的IP，默认为0.0.0.0，即为监听本地的所有的IP  </li><li>StartAgents<br>指定预计生成的agent进程数量  </li></ul></li><li><p>Active checks related<br>该模块为主动模式的相关参数  </p><ul><li>ServerActive<br>主动推送到server端的IP；多个IP时使用逗号将IP分隔  </li><li>Hostname<br>当前主机的主机名</li><li>RefreshActiveChecks<br>agent端每多少秒主动推送数据</li></ul></li></ul><p>这里我们只要将Server、ServerActive、Hostname修改即可。然后重启agent进程，并将其设置为开机启动。  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl start zabbix-agent.service</span><br><span class="line">systemctl enable zabbix-agent.service</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://s2.loli.net/2022/03/25/BC4LOAv1sp89SnY.jpg&quot; alt=&quot;zabbix.jpg&quot;&gt;  &lt;/p&gt;</summary>
    
    
    
    <category term="zabbix" scheme="http://example.com/categories/zabbix/"/>
    
    
    <category term="zabbix安装" scheme="http://example.com/tags/zabbix%E5%AE%89%E8%A3%85/"/>
    
  </entry>
  
  <entry>
    <title>1.zabbix概念</title>
    <link href="http://example.com/2022/03/25/zabbix/1-zabbix%E6%A6%82%E5%BF%B5/"/>
    <id>http://example.com/2022/03/25/zabbix/1-zabbix%E6%A6%82%E5%BF%B5/</id>
    <published>2022-03-25T12:45:46.000Z</published>
    <updated>2022-05-24T04:47:58.233Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://s2.loli.net/2022/03/25/BC4LOAv1sp89SnY.jpg" alt="zabbix.jpg">  </p><span id="more"></span><p>&emsp;&emsp;zabbix可以监控的硬件理论上是与我们的业务有关的硬件资源都可以被监控，比如：主机、交换机、路由器等。这就要求zabbix可以与这些监控对象能够进行通信。  </p><h2 id="zabbix支持的通信方式"><a href="#zabbix支持的通信方式" class="headerlink" title="zabbix支持的通信方式"></a>zabbix支持的通信方式</h2><ul><li>agent<br>通过专用的代理程序进行监控，与常见的master/agent模型类似，如果被监控对象支持对应的agent，推荐首先该形式。  </li><li>ssh/telnet<br>通过远程控制协议进行通讯，比如：ssh、telnet。  </li><li>SNMP<br>通过SNMP协议与被监控对象进行通信，SNMNP协议的全称是“简单网络管理协议”。  </li><li>IPMI<br>通过IPMI接口进行监控，我们可以通过标准的IPMI硬件接口，监控被监控对象的物理特征，比如电压，温度，风扇状态，电源状态等。  </li><li>JMX<br>JMX即java管理扩展，监控JVM时，可以使用这种方法也是很不错的。<br><img src="/2022/03/25/zabbix/1-zabbix%E6%A6%82%E5%BF%B5/%E4%B8%8E%E7%9B%91%E6%8E%A7%E8%AE%BE%E5%A4%87%E7%9A%84%E9%80%9A%E8%AE%AF%E6%96%B9%E5%BC%8F.png" alt="通信方式">  </li></ul><p>&emsp;&emsp;当监控规模变得庞大时，可能有成千上万台设备需要监控时。zabbix支持分布式监控，我们可以把所有的被监控对象分成不同的区域，每个区域中设置一台代理主机，区域内的每个被监控对象的信息被agent采集，提交给代理主机，在这个区域内，在理主机的作用就相当于是zabbix server，我们将代理主机为zabbix proxy，代理主机再将收集到的监控对象的信息统一提交给真正的zabbix server处理，这样zabbix proxy分摊了zabbix server的压力，还能通过统一的监控入口，监控所有的对象。  </p><h2 id="zabbix组件"><a href="#zabbix组件" class="headerlink" title="zabbix组件"></a>zabbix组件</h2><ul><li>zabbix agent<br>部署在被监控主机上，负责被监控主机的数据，并加数据发送给zabbix server。</li><li>zabbix server<br>负责接受agent发送的报告信息，并且负责组织配置信息、统计信息、操作数据等。</li><li>zabbix database<br>用于存储所有zabbix的配置信息、监控数据的数据库。</li><li>zabbix web<br>zabbix的web界面，管理员通过web界面管理zabbix配置以及查看zabbix相关监控信息，可以单独部署在独立的服务器上。  </li><li>zabbix proxy<br>可选组件，用于分布式监控环境中，zabbix proxy代表server端，完成局部区域内的信息收集，最终统一发往server端。采用中间代理将大大提高监控服务器端的处理速度，从而支撑构建大型分布式监控环境，从架构上支持异地多机房的需求。  </li></ul><h2 id="zabbix工作模式"><a href="#zabbix工作模式" class="headerlink" title="zabbix工作模式"></a>zabbix工作模式</h2><p>&emsp;&emsp;agent端会将采集完的数据主动发送给server端，这种模式称之为<strong>主动模式</strong>（对于agent端来说是主动的）；agent端也可以不发送数据，而是等待server端来拉取数据，这种模式称之为<strong>被动模式</strong>。一般来说，被动模式对监控控制端服务器的开销较大，适合小规模的监控环境；主动模式对监控控制端服务器的开销较小，适合大规模的监控环境。<br>&emsp;&emsp;可以在<strong>agent端使用zabbix_sender</strong>工具，测试是否能够向server端发送数据。<br>&emsp;&emsp;可以在<strong>server端使用zabbix_get</strong>工具，测试是否能够向agent端发送数据。<br>&emsp;&emsp;两种模式可以同时存在，并不会冲突。  </p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://s2.loli.net/2022/03/25/BC4LOAv1sp89SnY.jpg&quot; alt=&quot;zabbix.jpg&quot;&gt;  &lt;/p&gt;</summary>
    
    
    
    <category term="zabbix" scheme="http://example.com/categories/zabbix/"/>
    
    
    <category term="zabbix概念" scheme="http://example.com/tags/zabbix%E6%A6%82%E5%BF%B5/"/>
    
  </entry>
  
  <entry>
    <title>性能分析</title>
    <link href="http://example.com/2022/03/24/Linux/%E6%80%A7%E8%83%BD%E5%88%86%E6%9E%90/"/>
    <id>http://example.com/2022/03/24/Linux/%E6%80%A7%E8%83%BD%E5%88%86%E6%9E%90/</id>
    <published>2022-03-24T03:07:45.000Z</published>
    <updated>2022-06-28T03:08:45.896Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://i.loli.net/2021/08/02/cX51yi4KrLYRfJU.jpg" alt="linux.jpg">  </p><span id="more"></span><h2 id="vmstat"><a href="#vmstat" class="headerlink" title="vmstat"></a>vmstat</h2><p>其含义为虚拟内存状态，属于sysstat包。  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"> ~]# vmstat 1  4  </span><br><span class="line">procs -----------memory---------- ---swap-- -----io---- -system-- ------cpu-----</span><br><span class="line"> r  b   swpd   free   buff  cache   si   so    bi    bo   in   cs us sy id wa st</span><br><span class="line"> 2  0      0 434196   2124 379168    0    0     8     3  105  195  0  1 98  0  0</span><br><span class="line"> 3  0      0 434196   2124 379168    0    0     0     0   74  168  1  1 98  0  0</span><br><span class="line"> 2  0      0 434208   2124 379168    0    0     0     0  114  204  0  1 99  0  0</span><br><span class="line"> 1  0      0 434200   2124 379168    0    0     0     0  102  181  0  2 98  0  0</span><br></pre></td></tr></table></figure><p>每1秒检测一次，检测四次。  </p><h3 id="字段说明"><a href="#字段说明" class="headerlink" title="字段说明"></a>字段说明</h3><p><strong>procs 字段</strong>  </p><ul><li>r:运行队列中进程数量  </li><li>b:等待IOde进程数量  </li></ul><p><strong>memory 字段</strong>  </p><ul><li>swpd：使用虚拟内存大小  </li><li>free：空闲物理内存大小  </li><li>buff：用作缓冲内存的大小  </li><li>cache：用作缓存的大小  </li></ul><p><strong>swap</strong>  </p><ul><li>si:每秒从交换区写到内存的大小，由磁盘调入内存  </li><li>so：每秒写入交换区的内存大小，由内存调入磁盘  </li></ul><p><strong>IO</strong>  </p><ul><li>bi：每秒读取的块数  </li><li>bo：每秒写入的块数  </li></ul><p><strong>system</strong><br>in：每秒中断数，包括时钟中断<br>cs：每秒上下文切换数  </p><p><strong>cpu</strong><br>us：用户进程执行时间百分比<br>sy：内核系统进程执行时间百分比<br>id：空闲时间百分比<br>wa：IO等待时间百分比  </p><h2 id="iostat"><a href="#iostat" class="headerlink" title="iostat"></a>iostat</h2><p>属于sysstat包，用于监视系统输入输出设备和CPU的使用情况  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">~]# iostat -x /dev/sda1</span><br><span class="line">Linux 3.10.0-957.el7.x86_64 (test3)     2022年06月08日  _x86_64_        (1 CPU)</span><br><span class="line"></span><br><span class="line">avg-cpu:  %user   %nice %system %iowait  %steal   %idle</span><br><span class="line">           0.39    0.00    1.14    0.03    0.00   98.44</span><br><span class="line"></span><br><span class="line">Device:         rrqm/s   wrqm/s     r/s     w/s    rkB/s    wkB/s avgrq-sz avgqu-sz   await r_await w_await  svctm  %util</span><br><span class="line">sda1              0.00     0.00    0.01    0.00     0.12     0.04    31.63     0.00    1.83    1.05   41.40   1.71   0.00</span><br></pre></td></tr></table></figure><h3 id="字段说明-1"><a href="#字段说明-1" class="headerlink" title="字段说明"></a>字段说明</h3><table><thead><tr><th align="center">Device</th><th align="center">rrqm/s</th><th align="center">wrqm/s</th><th align="center">r/s</th><th align="center">w/s</th><th align="center">rkB/s</th><th align="center">wkB/s</th><th align="center">avgrq-sz</th><th align="center">avgqu-sz</th><th align="center">await</th><th align="center">r_await</th><th align="center">w_await</th><th align="center">svctm</th><th align="center">%util</th></tr></thead><tbody><tr><td align="center">设备名称</td><td align="center">每秒需要读取需求</td><td align="center">每秒需要写入需求</td><td align="center">实际读取需求</td><td align="center">实际写入需求</td><td align="center">实际读取的大小</td><td align="center">实际写入的大小</td><td align="center"></td><td align="center"></td><td align="center">等待IO</td><td align="center"></td><td align="center"></td><td align="center">IO需求完成的平均时间</td><td align="center">IO消耗的CPU百分比</td></tr></tbody></table><h2 id="dstat"><a href="#dstat" class="headerlink" title="dstat"></a>dstat</h2><p>属于dstat包，</p><h2 id="iotop"><a href="#iotop" class="headerlink" title="iotop"></a>iotop</h2><p>安装iotop</p><h2 id="pidstat"><a href="#pidstat" class="headerlink" title="pidstat"></a>pidstat</h2><p>安装sysstat</p><h2 id="top"><a href="#top" class="headerlink" title="top"></a>top</h2><h2 id="htop"><a href="#htop" class="headerlink" title="htop"></a>htop</h2><p>安装htop</p><h2 id="mpstat"><a href="#mpstat" class="headerlink" title="mpstat"></a>mpstat</h2><p>安装sysstat</p><h2 id="netstat"><a href="#netstat" class="headerlink" title="netstat"></a>netstat</h2><h2 id="ps"><a href="#ps" class="headerlink" title="ps"></a>ps</h2><h2 id="strace"><a href="#strace" class="headerlink" title="strace"></a>strace</h2><p>安装strace</p><h2 id="uptime"><a href="#uptime" class="headerlink" title="uptime"></a>uptime</h2><h2 id="lsof"><a href="#lsof" class="headerlink" title="lsof"></a>lsof</h2><h2 id="perf"><a href="#perf" class="headerlink" title="perf"></a>perf</h2>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://i.loli.net/2021/08/02/cX51yi4KrLYRfJU.jpg&quot; alt=&quot;linux.jpg&quot;&gt;  &lt;/p&gt;</summary>
    
    
    
    <category term="Linux" scheme="http://example.com/categories/Linux/"/>
    
    
    <category term="vmstat" scheme="http://example.com/tags/vmstat/"/>
    
    <category term="iostat" scheme="http://example.com/tags/iostat/"/>
    
    <category term="dstat" scheme="http://example.com/tags/dstat/"/>
    
    <category term="iotop" scheme="http://example.com/tags/iotop/"/>
    
    <category term="pidstat" scheme="http://example.com/tags/pidstat/"/>
    
    <category term="top" scheme="http://example.com/tags/top/"/>
    
    <category term="htop" scheme="http://example.com/tags/htop/"/>
    
    <category term="mpstat" scheme="http://example.com/tags/mpstat/"/>
    
    <category term="netstat" scheme="http://example.com/tags/netstat/"/>
    
    <category term="ps" scheme="http://example.com/tags/ps/"/>
    
    <category term="strace" scheme="http://example.com/tags/strace/"/>
    
    <category term="uptime" scheme="http://example.com/tags/uptime/"/>
    
    <category term="lsof" scheme="http://example.com/tags/lsof/"/>
    
    <category term="perf" scheme="http://example.com/tags/perf/"/>
    
  </entry>
  
  <entry>
    <title>YAML基础</title>
    <link href="http://example.com/2022/03/24/YAML/YAML%E5%9F%BA%E7%A1%80/"/>
    <id>http://example.com/2022/03/24/YAML/YAML%E5%9F%BA%E7%A1%80/</id>
    <published>2022-03-24T02:38:40.000Z</published>
    <updated>2022-05-24T04:48:55.349Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://s2.loli.net/2022/03/24/9bBLo4WtTsJpyAu.png" alt="YAML.png">  </p><span id="more"></span><h1 id="YAML"><a href="#YAML" class="headerlink" title="YAML"></a>YAML</h1><p>YAML不是一种标记语言，是一种表示数据序列化的格式。<br>可以使用<a href="http://nodeca.github.io/js-yaml/"> nodeca.github.io/js-yaml/ </a> 来进行学习  </p><h2 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h2><ul><li>大小写敏感  </li><li>使用缩进表示层级关系  </li><li>缩进不允许使用tab，只允许空格  </li><li>缩进的空格数不重要，只要相同层级的元素左对齐即可  </li><li>‘#’表示注释  </li></ul><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">%YAML</span> <span class="number">1.2</span> <span class="comment">#表示遵循YAML的版本号</span></span><br><span class="line"><span class="string">---</span> <span class="comment">#表示一个新的文件</span></span><br><span class="line"><span class="attr">my:</span> <span class="comment">#对象嵌套</span></span><br><span class="line"> <span class="attr">name :</span> <span class="string">nike</span></span><br><span class="line"> <span class="attr">age :</span> <span class="type">!!str</span> <span class="number">10</span>     <span class="comment">#使用两个感叹号，强制转换数据类型</span></span><br><span class="line"> <span class="attr">score:</span> <span class="type">!!float</span> <span class="number">13.0</span></span><br><span class="line"> <span class="attr">bool :</span> <span class="literal">true</span></span><br><span class="line"> <span class="attr">children :</span> <span class="string">~</span>   <span class="comment">#~表示null</span></span><br><span class="line"> <span class="attr">brithday :</span> <span class="number">1996-04-20 12:00:00</span></span><br><span class="line"> <span class="attr">number :</span> <span class="number">1.34e+3</span></span><br><span class="line"> <span class="attr">interest:</span> <span class="comment">#数组</span></span><br><span class="line">   <span class="bullet">-</span> <span class="string">basketball</span></span><br><span class="line">   <span class="bullet">-</span> <span class="string">football</span></span><br><span class="line"> <span class="attr">friends:</span> <span class="comment">#数组对象</span></span><br><span class="line">   <span class="bullet">-</span> <span class="string">name:ming</span></span><br><span class="line">     <span class="string">age:15</span></span><br><span class="line">   <span class="bullet">-</span> <span class="string">name:hong</span></span><br><span class="line">     <span class="string">age:14</span></span><br><span class="line"> <span class="attr">relations:</span> <span class="comment">#对象</span></span><br><span class="line">   <span class="attr">father :</span> <span class="string">foo1</span></span><br><span class="line">   <span class="attr">monther :</span> <span class="string">foo2</span></span><br><span class="line"><span class="attr">comment:</span> <span class="comment">#表示一个字符串</span></span><br><span class="line">   <span class="string">a</span></span><br><span class="line">   <span class="string">b</span></span><br><span class="line">   <span class="string">c</span></span><br><span class="line">   <span class="string">d</span></span><br><span class="line"><span class="attr">comment1 :</span> <span class="string">&gt;</span> <span class="comment">#‘&gt;’表示字符串尾部换行</span></span><br><span class="line">   <span class="string">a</span></span><br><span class="line">   <span class="string">b</span></span><br><span class="line">   <span class="string">c</span></span><br><span class="line">   <span class="string">d</span></span><br><span class="line"><span class="attr">comment2:</span> <span class="string">|</span>  <span class="comment">#‘|’表示每一行尾部都换行</span></span><br><span class="line">   <span class="string">a</span></span><br><span class="line">   <span class="string">b</span></span><br><span class="line">   <span class="string">c</span></span><br><span class="line">   <span class="string">d</span></span><br><span class="line"><span class="attr">father:</span> <span class="string">&amp;father_info</span> <span class="comment">#定义指针</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">foo1</span></span><br><span class="line">  <span class="attr">age:</span> <span class="number">40</span></span><br><span class="line"><span class="attr">monther:</span> <span class="meta">&amp;monther_info</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">foo2</span></span><br><span class="line">  <span class="attr">age:</span> <span class="number">39</span></span><br><span class="line"><span class="attr">monitor:</span> </span><br><span class="line">  <span class="attr">father:</span> <span class="string">*father_info</span>  <span class="comment">#使用指针</span></span><br><span class="line">  <span class="attr">monther:</span> <span class="meta">*monther_info</span></span><br><span class="line"><span class="string">...</span> <span class="comment">#表示文件结束</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://s2.loli.net/2022/03/24/9bBLo4WtTsJpyAu.png&quot; alt=&quot;YAML.png&quot;&gt;  &lt;/p&gt;</summary>
    
    
    
    <category term="YAML" scheme="http://example.com/categories/YAML/"/>
    
    
    <category term="YAML" scheme="http://example.com/tags/YAML/"/>
    
  </entry>
  
  <entry>
    <title>虚拟机配置本地源</title>
    <link href="http://example.com/2022/03/20/Linux/%E8%99%9A%E6%8B%9F%E6%9C%BA%E9%85%8D%E7%BD%AE%E6%9C%AC%E5%9C%B0%E6%BA%90/"/>
    <id>http://example.com/2022/03/20/Linux/%E8%99%9A%E6%8B%9F%E6%9C%BA%E9%85%8D%E7%BD%AE%E6%9C%AC%E5%9C%B0%E6%BA%90/</id>
    <published>2022-03-19T18:48:51.000Z</published>
    <updated>2022-05-24T04:50:48.603Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://i.loli.net/2021/08/02/cX51yi4KrLYRfJU.jpg" alt="linux.jpg">  </p><span id="more"></span><h2 id="1-确保虚拟机加载了本地镜像"><a href="#1-确保虚拟机加载了本地镜像" class="headerlink" title="1.确保虚拟机加载了本地镜像"></a>1.确保虚拟机加载了本地镜像</h2><p><img src="/2022/03/20/Linux/%E8%99%9A%E6%8B%9F%E6%9C%BA%E9%85%8D%E7%BD%AE%E6%9C%AC%E5%9C%B0%E6%BA%90/%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%8A%A0%E8%BD%BD%E6%9C%AC%E5%9C%B0%E9%95%9C%E5%83%8F.png" alt="虚拟机加载本地镜像"></p><h2 id="2-手动挂载镜像"><a href="#2-手动挂载镜像" class="headerlink" title="2.手动挂载镜像"></a>2.手动挂载镜像</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir /mnt/cdrom</span><br><span class="line">mount /dev/cdrom /mnt/cdrom</span><br></pre></td></tr></table></figure><h2 id="3-配置源文件"><a href="#3-配置源文件" class="headerlink" title="3.配置源文件"></a>3.配置源文件</h2><p>/etc/yum.repos.d/local.repo</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[local]</span><br><span class="line">name=local - repo</span><br><span class="line">baseurl=file:///mnt/cdrom</span><br><span class="line">enabled=1</span><br><span class="line">gpgcheck=1</span><br><span class="line">gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-CentOS-7</span><br></pre></td></tr></table></figure><p><strong>[serid]</strong> : 仓库名，可自定义，但不能重复<br><strong>name</strong> ：随意起<br><strong>baseurl</strong>：指定yum源所在文件，软件包所在文件<br><strong>enabled</strong>：是否启用，1启用，0不启用<br><strong>gpgcheck</strong>：否进行gpg校验<br><strong>gpgkey</strong>：后面接的是gpgkey的地址，如果前面定义gpgcheck=1的话</p><h2 id="4-为保证下次重启后还能够正常使用本地源，将-dev-cdrom设置开机挂载即可"><a href="#4-为保证下次重启后还能够正常使用本地源，将-dev-cdrom设置开机挂载即可" class="headerlink" title="4.为保证下次重启后还能够正常使用本地源，将/dev/cdrom设置开机挂载即可"></a>4.为保证下次重启后还能够正常使用本地源，将/dev/cdrom设置开机挂载即可</h2>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://i.loli.net/2021/08/02/cX51yi4KrLYRfJU.jpg&quot; alt=&quot;linux.jpg&quot;&gt;  &lt;/p&gt;</summary>
    
    
    
    <category term="Linux" scheme="http://example.com/categories/Linux/"/>
    
    
    <category term="本地源" scheme="http://example.com/tags/%E6%9C%AC%E5%9C%B0%E6%BA%90/"/>
    
  </entry>
  
  <entry>
    <title>Linux启动管理</title>
    <link href="http://example.com/2022/03/15/Linux/Linux%E5%90%AF%E5%8A%A8%E7%AE%A1%E7%90%86/"/>
    <id>http://example.com/2022/03/15/Linux/Linux%E5%90%AF%E5%8A%A8%E7%AE%A1%E7%90%86/</id>
    <published>2022-03-15T08:05:03.000Z</published>
    <updated>2022-06-08T07:26:24.574Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://i.loli.net/2021/08/02/cX51yi4KrLYRfJU.jpg" alt="linux.jpg">  </p><span id="more"></span>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://i.loli.net/2021/08/02/cX51yi4KrLYRfJU.jpg&quot; alt=&quot;linux.jpg&quot;&gt;  &lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>文本三剑客</title>
    <link href="http://example.com/2021/12/25/Linux/%E6%96%87%E6%9C%AC%E4%B8%89%E5%89%91%E5%AE%A2/"/>
    <id>http://example.com/2021/12/25/Linux/%E6%96%87%E6%9C%AC%E4%B8%89%E5%89%91%E5%AE%A2/</id>
    <published>2021-12-24T16:24:36.000Z</published>
    <updated>2022-05-24T04:49:32.414Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://i.loli.net/2021/08/02/cX51yi4KrLYRfJU.jpg" alt="linux.jpg">  </p><span id="more"></span><h1 id="文本三剑客之grep"><a href="#文本三剑客之grep" class="headerlink" title="文本三剑客之grep"></a>文本三剑客之grep</h1><p>grep家族总共有三个：<strong>grep</strong>、<strong>egrep</strong>、<strong>fgrep</strong>  </p><h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><p>grep [option] pattern file  </p><h2 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h2><table><thead><tr><th align="center">参数</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">-a</td><td align="center">不要忽略二进制的数据</td></tr><tr><td align="center">-A &lt;显示行数n&gt;</td><td align="center">除了显示符合范本样式的那一列之外，并显示该行之后n行的内容</td></tr><tr><td align="center">-B &lt;显示行数n&gt;</td><td align="center">除了显示符合样式的那一行之外，并显示该行之前n行的内容</td></tr><tr><td align="center">-c</td><td align="center">计算符合样式的列数</td></tr><tr><td align="center">-C &lt;显示行数n&gt;</td><td align="center">除了显示符合样式的那一行之外，并显示该行之前后n行的内容</td></tr><tr><td align="center">-E</td><td align="center">将样式为扩展的正则表达式来使用，相当于egrep</td></tr><tr><td align="center">-i</td><td align="center">忽略大小写</td></tr><tr><td align="center">-o</td><td align="center">只显示符合匹配的部分</td></tr><tr><td align="center">-q</td><td align="center">不显示任何信息，在脚本中判断时使用</td></tr><tr><td align="center">-v</td><td align="center">显示不包含匹配文本的所有行</td></tr><tr><td align="center">-n</td><td align="center">在显示符合样式的那一行之前，标示出该行的列数编号</td></tr><tr><td align="center">-r</td><td align="center">以递归的方式查找符合条件的文件</td></tr></tbody></table><h1 id="文本三剑客之awk"><a href="#文本三剑客之awk" class="headerlink" title="文本三剑客之awk"></a>文本三剑客之awk</h1><h2 id="语法-1"><a href="#语法-1" class="headerlink" title="语法"></a>语法</h2><p><code>awk [option] &#39;BEGIN&#123; commands &#125; pattern &#123; commands &#125; END&#123; commands &#125;&#39;</code><br>第一段：开始块（可选），关键字 BEGIN 必须大写，读输入文件之前执行的代码段，只在开始时执行一次，一般是在开始块中初始化一些变量<br>第二段：主体块（必须），主循环执行输入文件的代码段，每输入一行都执行一次，主体之前可以使用正则表达式进行过滤行，只对符合表达式的行执行主体块。<br>第三段：结束块（可选），关键字END必须大写，与开始块类似  </p><h2 id="参数-1"><a href="#参数-1" class="headerlink" title="参数"></a>参数</h2><table><thead><tr><th align="center">参数</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">-F</td><td align="center">指定文件字段分隔符，相当于内建变量FS</td></tr><tr><td align="center">-v var=value</td><td align="center">定义变量，一个-v只能定义一个变量</td></tr></tbody></table><h2 id="内建变量"><a href="#内建变量" class="headerlink" title="内建变量"></a>内建变量</h2><table><thead><tr><th align="center">参数</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">$n</td><td align="center">当前记录的第n个字段，字段间由FS分隔</td></tr><tr><td align="center">$0</td><td align="center">当前输入的完成行</td></tr><tr><td align="center">NR</td><td align="center">当前处理行的行号，从1开始</td></tr><tr><td align="center">FNR</td><td align="center">各文件分别计数的行号</td></tr><tr><td align="center">FILENAME</td><td align="center">当前文件的文件名</td></tr><tr><td align="center">FS</td><td align="center">字段分隔符,将输入的每一行以FS进行分割</td></tr><tr><td align="center">RS</td><td align="center">记录分隔符,将对象文件以RS划分每一行</td></tr><tr><td align="center">OFS</td><td align="center">输出字段分隔符，默认值与输入字段分隔符一致</td></tr><tr><td align="center">ORS</td><td align="center">输出记录分隔符(默认值是一个换行符)</td></tr><tr><td align="center">IGNORECASE</td><td align="center">忽略如果为真，则进行忽略大小写的匹配，可以将该参数直接定义为</td></tr><tr><td align="center">NF</td><td align="center">字段的数目</td></tr></tbody></table><h2 id="使用正则，字符串匹配"><a href="#使用正则，字符串匹配" class="headerlink" title="使用正则，字符串匹配"></a>使用正则，字符串匹配</h2><p>在主体块前使用正则表达式，<code>~</code>表示正则表达式开始，若不指定第几段，该<code>~</code>可以省略，<code>/ /</code>表示要匹配的正则表达式  </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 打印第一段中有v字符的行以及行号</span></span><br><span class="line">awk &#x27;$1 ~ /v/ &#123;print NR,$0&#125;&#x27; test.txt</span><br><span class="line"><span class="meta">#</span><span class="bash"> 忽略大小写进行匹配</span></span><br><span class="line">awk &#x27;BEGIN&#123; IGNORECASE=1 &#125; /P/ &#123;print $0&#125;&#x27; test.txt</span><br><span class="line"><span class="meta">#</span><span class="bash"> 反向匹配</span></span><br><span class="line">awk &#x27;$1 !~ /p/ &#123;print NR,$0&#125;&#x27; test.txt</span><br><span class="line">awk &#x27;!/p/ &#123;print NR,$0&#125;&#x27; test.txt</span><br></pre></td></tr></table></figure><h2 id="条件语句与循环"><a href="#条件语句与循环" class="headerlink" title="条件语句与循环"></a>条件语句与循环</h2><h3 id="if判断"><a href="#if判断" class="headerlink" title="if判断"></a>if判断</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">if ( ) &#123;&#125; else if () &#123;&#125; else &#123;&#125;</span><br><span class="line"><span class="meta">#</span><span class="bash"> 判断行号是否为10，</span></span><br><span class="line">awk &#x27;&#123;if (NR==10)&#123;print NR,$0&#125; else &#123;print NR,&quot;NO&quot;&#125;&#125;&#x27; test.txt</span><br></pre></td></tr></table></figure><h3 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">for (i = 1; i &lt;= 5; ++i) print i </span><br></pre></td></tr></table></figure><h3 id="while循环"><a href="#while循环" class="headerlink" title="while循环"></a>while循环</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">i=1 ; while (i &lt; 100) &#123;print i;++i&#125;</span><br></pre></td></tr></table></figure><h1 id="文本三剑客之sed"><a href="#文本三剑客之sed" class="headerlink" title="文本三剑客之sed"></a>文本三剑客之sed</h1><h2 id="参数-2"><a href="#参数-2" class="headerlink" title="参数"></a>参数</h2><table><thead><tr><th align="center">参数</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">-n</td><td align="center">只有被sed处理过的行才会被列出来</td></tr><tr><td align="center">-i</td><td align="center">直接对原文件进行修改</td></tr><tr><td align="center">-r</td><td align="center">支持扩展正则表达式</td></tr></tbody></table>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://i.loli.net/2021/08/02/cX51yi4KrLYRfJU.jpg&quot; alt=&quot;linux.jpg&quot;&gt;  &lt;/p&gt;</summary>
    
    
    
    <category term="Linux" scheme="http://example.com/categories/Linux/"/>
    
    
    <category term="grep" scheme="http://example.com/tags/grep/"/>
    
  </entry>
  
  <entry>
    <title>Cobbler自动化部署</title>
    <link href="http://example.com/2021/09/23/Linux/Cobbler%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2/"/>
    <id>http://example.com/2021/09/23/Linux/Cobbler%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2/</id>
    <published>2021-09-23T11:40:15.000Z</published>
    <updated>2022-05-24T04:50:41.272Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2021/09/23/Linux/Cobbler%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2/Cobbler.png" alt="cobbler">  </p><span id="more"></span><h2 id="cobbler安装"><a href="#cobbler安装" class="headerlink" title="cobbler安装"></a>cobbler安装</h2><p>虚拟机网卡使用建议使用NAT模式，并且将NAT模式的DHCP服务关闭。<br><img src="/2021/09/23/Linux/Cobbler%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2/DHCP%E6%9C%8D%E5%8A%A1.png" alt="DHCP服务">  </p><ol><li><strong>环境准备</strong><br>将主机的防火墙和selinux关闭。  </li><li><strong>安装cobbler</strong><br>这里使用阿里镜像站中的epel源进行安装。  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">yum -y install cobbler cobbler-web tftp-server dhcp httpd xinetd</span><br><span class="line">systemctl start httpd cobblerd</span><br><span class="line">systemctl enable httpd cobblerd</span><br></pre></td></tr></table></figure></li><li><strong>查看安装后的相关文件</strong>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">/etc/cobbler                  # 配置文件目录</span><br><span class="line">/etc/cobbler/settings         # cobbler主配置文件，这个文件是YAML格式，Cobbler是python写的程序。</span><br><span class="line">/etc/cobbler/dhcp.template    # DHCP服务的配置模板</span><br><span class="line">/etc/cobbler/tftpd.template   # tftp服务的配置模板</span><br><span class="line">/etc/cobbler/rsync.template   # rsync服务的配置模板</span><br><span class="line">/etc/cobbler/iso              # iso模板配置文件目录 </span><br><span class="line">/etc/cobbler/pxe              # pxe模板文件目录</span><br><span class="line">/etc/cobbler/power            # 电源的配置文件目录</span><br><span class="line">/etc/cobbler/users.conf       # Web服务授权配置文件</span><br><span class="line">/etc/cobbler/users.digest     # 用于web访问的用户名密码配置文件</span><br><span class="line">/etc/cobbler/dnsmasq.template # DNS服务的配置模板</span><br><span class="line">/etc/cobbler/modules.conf     # Cobbler模块配置文件</span><br><span class="line">/var/lib/cobbler              # Cobbler数据目录</span><br><span class="line">/var/lib/cobbler/config       # 配置文件</span><br><span class="line">/var/lib/cobbler/kickstarts   # 默认存放kickstart文件</span><br><span class="line">/var/lib/cobbler/loaders      # 存放的各种引导程序</span><br><span class="line">/var/www/cobbler              # 系统安装镜像目录</span><br><span class="line">/var/www/cobbler/ks_mirror    # 导入的系统镜像列表</span><br><span class="line">/var/www/cobbler/images       # 导入的系统镜像启动文件</span><br><span class="line">/var/www/cobbler/repo_mirror  # yum源存储目录</span><br><span class="line">/var/log/cobbler              # 日志目录</span><br><span class="line">/var/log/cobbler/install.log  # 客户端系统安装日志</span><br><span class="line">/var/log/cobbler/cobbler.log  # cobbler日志</span><br></pre></td></tr></table></figure></li></ol><h2 id="配置cobbler"><a href="#配置cobbler" class="headerlink" title="配置cobbler"></a>配置cobbler</h2><ol><li><strong>检查cobbler</strong>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">~]# cobbler check</span><br><span class="line">The following are potential configuration items that you may want to fix:</span><br><span class="line"></span><br><span class="line">1 : The &#x27;server&#x27; field in /etc/cobbler/settings must be set to something other than localhost, or kickstarting features will not work.  This should be a resolvable hostname or IP for the boot server as reachable by all machines that will use it.</span><br><span class="line">2 : For PXE to be functional, the &#x27;next_server&#x27; field in /etc/cobbler/settings must be set to something other than 127.0.0.1, and should match the IP of the boot server on the PXE network.</span><br><span class="line">3 : change &#x27;disable&#x27; to &#x27;no&#x27; in /etc/xinetd.d/tftp</span><br><span class="line">4 : Some network boot-loaders are missing from /var/lib/cobbler/loaders, you may run &#x27;cobbler get-loaders&#x27; to download them, or, if you only want to handle x86/x86_64 netbooting, you may ensure that you have installed a *recent* version of the syslinux package installed and can ignore this message entirely.  Files in this directory, should you want to support all architectures, should include pxelinux.0, menu.c32, elilo.efi, and yaboot. The &#x27;cobbler get-loaders&#x27; command is the easiest way to resolve these requirements.</span><br><span class="line">5 : enable and start rsyncd.service with systemctl</span><br><span class="line">6 : debmirror package is not installed, it will be required to manage debian deployments and repositories</span><br><span class="line">7 : ksvalidator was not found, install pykickstart</span><br><span class="line">8 : The default password used by the sample templates for newly installed machines (default_password_crypted in /etc/cobbler/settings) is still set to &#x27;cobbler&#x27; and should be changed, try: &quot;openssl passwd -1 -salt &#x27;random-phrase-here&#x27; &#x27;your-password-here&#x27;&quot; to generate new one</span><br><span class="line">9 : fencing tools were not found, and are required to use the (optional) power management features. install cman or fence-agents to use them</span><br><span class="line"></span><br><span class="line">Restart cobblerd and then run &#x27;cobbler sync&#x27; to apply changes.</span><br></pre></td></tr></table></figure>上面列出来的问题需要进行修改,cobbler的配置都存储在<code>/etc/cobbler/settings</code>。  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">1. server   修改/etc/cobbler/settings</span><br><span class="line">server: 192.168.27.3</span><br><span class="line"></span><br><span class="line">2. next_server   修改/etc/cobbler/settings</span><br><span class="line">next_server: 192.168.27.3</span><br><span class="line"></span><br><span class="line">3. tftp_server   修改/etc/xinetd.d/tftp</span><br><span class="line">disable = no</span><br><span class="line"></span><br><span class="line">4. boot-loaders</span><br><span class="line">cobbler get-loaders</span><br><span class="line"></span><br><span class="line">5. rsyncd</span><br><span class="line">systemctl start rsyncd</span><br><span class="line">systemctl enable rsyncd</span><br><span class="line"></span><br><span class="line">6. debmirror 可忽略</span><br><span class="line"></span><br><span class="line">7. pykickstart </span><br><span class="line">yum -y install pykickstart</span><br><span class="line"></span><br><span class="line">8. 设置后面安装系统的初始化登录密码</span><br><span class="line">openssl passwd -1 -salt `openssl rand -hex 4` &#x27;admin&#x27;</span><br><span class="line"></span><br><span class="line">9. fencing tools</span><br><span class="line">yum -y install fence-agents</span><br></pre></td></tr></table></figure></li></ol><h2 id="配置DHCP"><a href="#配置DHCP" class="headerlink" title="配置DHCP"></a>配置DHCP</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">1.修改/etc/cobbler/settings</span><br><span class="line">manage_dhcp = 1 </span><br><span class="line"></span><br><span class="line">2. vim /etc/cobbler/dhcp.template</span><br><span class="line">subnet 192.168.27.0 netmask 255.255.255.0 &#123;         #分配的网段和掩码</span><br><span class="line">     option routers             192.168.27.1;       #网关地址</span><br><span class="line">     option domain-name-servers 8.8.8.8;            #dns地址</span><br><span class="line">     option subnet-mask         255.255.255.0;      #分配的IP的掩码</span><br><span class="line">     range dynamic-bootp        192.168.27.100 192.168.27.254;      #分配的IP的范围</span><br></pre></td></tr></table></figure><h2 id="同步cobbler配置"><a href="#同步cobbler配置" class="headerlink" title="同步cobbler配置"></a>同步cobbler配置</h2><p>同步cobbler配置，它会根据配置自动修改dhcp等服务。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cobbler sync</span><br></pre></td></tr></table></figure><p>同步完成后就可以创建一个新的虚拟机开启后，查看是否可以从DHCP中拉取到。  </p><h2 id="cobbler命令"><a href="#cobbler命令" class="headerlink" title="cobbler命令"></a>cobbler命令</h2><table><thead><tr><th align="left">命令</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">cobbler check</td><td align="left">核对当前设置是否有问题</td></tr><tr><td align="left">cobbler list</td><td align="left">列出所有的cobbler元素</td></tr><tr><td align="left">cobbler report</td><td align="left">列出元素的详细信息</td></tr><tr><td align="left">cobbler sync</td><td align="left">同步配置到数据目录，更改配置最好都执行一下</td></tr><tr><td align="left">cobbler reposync</td><td align="left">同步yum仓库</td></tr><tr><td align="left">cobbler distro</td><td align="left">查看导入的发行版系统信息</td></tr><tr><td align="left">cobbler system</td><td align="left">查看添加的系统信息</td></tr><tr><td align="left">cobbler profile</td><td align="left">查看配置信息</td></tr></tbody></table><h2 id="cobbler安装配置centos"><a href="#cobbler安装配置centos" class="headerlink" title="cobbler安装配置centos"></a>cobbler安装配置centos</h2><h3 id="将镜像挂载"><a href="#将镜像挂载" class="headerlink" title="将镜像挂载"></a>将镜像挂载</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir /mnt/cdrom </span><br><span class="line">mount /dev/cdrom /mnt/cdrom</span><br></pre></td></tr></table></figure><h3 id="导入镜像"><a href="#导入镜像" class="headerlink" title="导入镜像"></a>导入镜像</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cobbler import --path=/mnt/cdrom --name=centos7.6 --arch=x86_64</span><br></pre></td></tr></table></figure><h3 id="查看导入后镜像信息"><a href="#查看导入后镜像信息" class="headerlink" title="查看导入后镜像信息"></a>查看导入后镜像信息</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">cobbler distro report --name=centos7.6-x86_64</span><br><span class="line"></span><br><span class="line">Name                           : centos7.6-x86_64</span><br><span class="line">Architecture                   : x86_64</span><br><span class="line">TFTP Boot Files                : &#123;&#125;</span><br><span class="line">Breed                          : redhat</span><br><span class="line">Comment                        : </span><br><span class="line">Fetchable Files                : &#123;&#125;</span><br><span class="line">Initrd                         : /var/www/cobbler/ks_mirror/centos7.6-x86_64/images/pxeboot/initrd.img</span><br><span class="line">Kernel                         : /var/www/cobbler/ks_mirror/centos7.6-x86_64/images/pxeboot/vmlinuz</span><br><span class="line">Kernel Options                 : &#123;&#125;</span><br><span class="line">Kernel Options (Post Install)  : &#123;&#125;</span><br><span class="line">Kickstart Metadata             : &#123;&#x27;tree&#x27;: &#x27;http://@@http_server@@/cblr/links/centos7.6-x86_64&#x27;&#125;</span><br><span class="line">Management Classes             : []</span><br><span class="line">OS Version                     : rhel6</span><br><span class="line">Owners                         : [&#x27;admin&#x27;]</span><br><span class="line">Red Hat Management Key         : &lt;&lt;inherit&gt;&gt;</span><br><span class="line">Red Hat Management Server      : &lt;&lt;inherit&gt;&gt;</span><br><span class="line">Template Files                 : &#123;&#125;</span><br></pre></td></tr></table></figure><h3 id="查看profile信息"><a href="#查看profile信息" class="headerlink" title="查看profile信息"></a>查看profile信息</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">[root@clone cdrom]# cobbler profile report --name=centos7.6-x86_64</span><br><span class="line">Name                           : centos7.6-x86_64</span><br><span class="line">TFTP Boot Files                : &#123;&#125;</span><br><span class="line">Comment                        : </span><br><span class="line">DHCP Tag                       : default</span><br><span class="line">Distribution                   : centos7.6-x86_64</span><br><span class="line">Enable gPXE?                   : 0</span><br><span class="line">Enable PXE Menu?               : 1</span><br><span class="line">Fetchable Files                : &#123;&#125;</span><br><span class="line">Kernel Options                 : &#123;&#125;</span><br><span class="line">Kernel Options (Post Install)  : &#123;&#125;</span><br><span class="line">Kickstart                      : /var/lib/cobbler/kickstarts/centos7.ks</span><br><span class="line">Kickstart Metadata             : &#123;&#125;</span><br><span class="line">Management Classes             : []</span><br><span class="line">Management Parameters          : &lt;&lt;inherit&gt;&gt;</span><br><span class="line">Name Servers                   : []</span><br><span class="line">Name Servers Search Path       : []</span><br><span class="line">Owners                         : [&#x27;admin&#x27;]</span><br><span class="line">Parent Profile                 : </span><br><span class="line">Internal proxy                 : </span><br><span class="line">Red Hat Management Key         : &lt;&lt;inherit&gt;&gt;</span><br><span class="line">Red Hat Management Server      : &lt;&lt;inherit&gt;&gt;</span><br><span class="line">Repos                          : []</span><br><span class="line">Server Override                : &lt;&lt;inherit&gt;&gt;</span><br><span class="line">Template Files                 : &#123;&#125;</span><br><span class="line">Virt Auto Boot                 : 1</span><br><span class="line">Virt Bridge                    : xenbr0</span><br><span class="line">Virt CPUs                      : 1</span><br><span class="line">Virt Disk Driver Type          : raw</span><br><span class="line">Virt File Size(GB)             : 5</span><br><span class="line">Virt Path                      : </span><br><span class="line">Virt RAM (MB)                  : 512</span><br><span class="line">Virt Type                      : kvm</span><br></pre></td></tr></table></figure><h3 id="copy一份profile文件-ks-，进行修改"><a href="#copy一份profile文件-ks-，进行修改" class="headerlink" title="copy一份profile文件(ks)，进行修改"></a>copy一份profile文件(ks)，进行修改</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line">cd /var/lib/cobbler/kickstarts/</span><br><span class="line">cp sample_end.ks centos7.ks</span><br><span class="line">vim centos7.ks</span><br><span class="line"></span><br><span class="line"># This kickstart file should only be used with EL &gt; 5 and/or Fedora &gt; 7.</span><br><span class="line"># For older versions please use the sample.ks kickstart file.</span><br><span class="line"></span><br><span class="line">#platform=x86, AMD64, or Intel EM64T</span><br><span class="line"># System authorization information</span><br><span class="line">auth  --useshadow  --enablemd5</span><br><span class="line"># System bootloader configuration</span><br><span class="line">bootloader --location=mbr</span><br><span class="line"># Partition clearing information</span><br><span class="line">clearpart --all --initlabel</span><br><span class="line"># Use text mode install</span><br><span class="line">text      ## 使用文本模式安装</span><br><span class="line"># Firewall configuration</span><br><span class="line">firewall --disable   ## 防火墙选项</span><br><span class="line"># Run the Setup Agent on first boot</span><br><span class="line">firstboot --disable</span><br><span class="line"># System keyboard</span><br><span class="line">keyboard us    ## 选择键盘</span><br><span class="line"># System language</span><br><span class="line">lang en_US     ## 选择语言</span><br><span class="line"># Use network installation</span><br><span class="line">url --url=$tree</span><br><span class="line"># If any cobbler repo definitions were referenced in the kickstart profile, include them here.</span><br><span class="line">$yum_repo_stanza</span><br><span class="line"># Network information</span><br><span class="line">$SNIPPET(&#x27;network_config&#x27;)</span><br><span class="line"># Reboot after installation</span><br><span class="line">reboot</span><br><span class="line"></span><br><span class="line">#Root password</span><br><span class="line">rootpw --iscrypted $default_password_crypted   </span><br><span class="line"># SELinux configuration  </span><br><span class="line">selinux --disabled  ## SELinux配置</span><br><span class="line"># Do not configure the X Window System</span><br><span class="line">skipx</span><br><span class="line"># System timezone</span><br><span class="line">timezone  America/New_York</span><br><span class="line"># Install OS instead of upgrade</span><br><span class="line">install        ##安装系统而不是升级</span><br><span class="line"># Clear the Master Boot Record</span><br><span class="line">zerombr</span><br><span class="line"># Allow anaconda to partition the system as needed</span><br><span class="line">autopart</span><br><span class="line"></span><br><span class="line">%pre</span><br><span class="line">$SNIPPET(&#x27;log_ks_pre&#x27;)</span><br><span class="line">$SNIPPET(&#x27;kickstart_start&#x27;)</span><br><span class="line">$SNIPPET(&#x27;pre_install_network_config&#x27;)</span><br><span class="line"># Enable installation monitoring</span><br><span class="line">$SNIPPET(&#x27;pre_anamon&#x27;)</span><br><span class="line">%end</span><br><span class="line"></span><br><span class="line">%packages  ## 想安装的软件包</span><br><span class="line">$SNIPPET(&#x27;func_install_if_enabled&#x27;)</span><br><span class="line">tree</span><br><span class="line">vim</span><br><span class="line">nmap</span><br><span class="line">wget</span><br><span class="line">lftp</span><br><span class="line">net-tools</span><br><span class="line">lrzsz</span><br><span class="line">telnet</span><br><span class="line">%end</span><br><span class="line"></span><br><span class="line">%post --nochroot</span><br><span class="line">$SNIPPET(&#x27;log_ks_post_nochroot&#x27;)</span><br><span class="line">%end</span><br><span class="line"></span><br><span class="line">%post</span><br><span class="line">$SNIPPET(&#x27;log_ks_post&#x27;)</span><br><span class="line"># Start yum configuration</span><br><span class="line">$yum_config_stanza</span><br><span class="line"># End yum configuration</span><br><span class="line">$SNIPPET(&#x27;post_install_kernel_options&#x27;)</span><br><span class="line">$SNIPPET(&#x27;post_install_network_config&#x27;)</span><br><span class="line">$SNIPPET(&#x27;func_register_if_enabled&#x27;)</span><br><span class="line">$SNIPPET(&#x27;download_config_files&#x27;)</span><br><span class="line">$SNIPPET(&#x27;koan_environment&#x27;)</span><br><span class="line">$SNIPPET(&#x27;redhat_register&#x27;)</span><br><span class="line">$SNIPPET(&#x27;cobbler_register&#x27;)</span><br><span class="line"># Enable post-install boot notification</span><br><span class="line">$SNIPPET(&#x27;post_anamon&#x27;)</span><br><span class="line"># Start final steps</span><br><span class="line">$SNIPPET(&#x27;kickstart_done&#x27;)</span><br><span class="line"># End final steps</span><br><span class="line">%end</span><br></pre></td></tr></table></figure><h3 id="编辑centos7-6镜像所使用的kickstart文件"><a href="#编辑centos7-6镜像所使用的kickstart文件" class="headerlink" title="编辑centos7.6镜像所使用的kickstart文件"></a>编辑centos7.6镜像所使用的kickstart文件</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cobbler profile edit --name=centos7.6-x86_64 --kickstart=/var/lib/cobbler/kickstarts/centos7.ks</span><br></pre></td></tr></table></figure><h3 id="同步cobbler配置-1"><a href="#同步cobbler配置-1" class="headerlink" title="同步cobbler配置"></a>同步cobbler配置</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cobbler sync</span><br></pre></td></tr></table></figure><h3 id="创建一个虚拟机进行测试"><a href="#创建一个虚拟机进行测试" class="headerlink" title="创建一个虚拟机进行测试"></a>创建一个虚拟机进行测试</h3><p>创建的虚拟内存要大于2G<br><img src="/2021/09/23/Linux/Cobbler%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2/test.png" alt="test"><br>选中后回车即可进行安装。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;/2021/09/23/Linux/Cobbler%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2/Cobbler.png&quot; alt=&quot;cobbler&quot;&gt;  &lt;/p&gt;</summary>
    
    
    
    <category term="Linux" scheme="http://example.com/categories/Linux/"/>
    
    
    <category term="cobbler" scheme="http://example.com/tags/cobbler/"/>
    
  </entry>
  
  <entry>
    <title>FTP服务</title>
    <link href="http://example.com/2021/09/03/Linux/FTP%E6%9C%8D%E5%8A%A1/"/>
    <id>http://example.com/2021/09/03/Linux/FTP%E6%9C%8D%E5%8A%A1/</id>
    <published>2021-09-03T15:02:17.000Z</published>
    <updated>2022-05-24T04:49:59.963Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://i.loli.net/2021/08/02/cX51yi4KrLYRfJU.jpg" alt="linux.jpg">  </p><span id="more"></span><h1 id="FTP服务"><a href="#FTP服务" class="headerlink" title="FTP服务"></a>FTP服务</h1><h2 id="FTP简介"><a href="#FTP简介" class="headerlink" title="FTP简介"></a>FTP简介</h2><p>FTP（File Transfer Protocol，文件传输协议） 是 TCP/IP 协议组中的协议之一，FTP协议包括两个组成部分，其一为FTP服务器，其二为FTP客户端，其中FTP服务器用来存储文件，用户可以使用FTP客户端通过FTP协议访问位于FTP服务器上的资源，在开发网站的时候，通常利用FTP协议把网页或程序传到Web服务器上，由于FTP传输效率非常高，在网络上传输大的文件时，一般也采用该协议，默认情况下FTP协议使用TCP端口中的 20和21这两个端口，其中20用于传输数据，21用于传输控制信息，但是，是否使用20作为传输数据的端口与FTP使用的传输模式有关，如果采用主动模式，那么数据传输端口就是20；如果采用被动模式，则具体最终使用哪个端口要服务器端和客户端协商决定  </p><h2 id="工作模式"><a href="#工作模式" class="headerlink" title="工作模式"></a>工作模式</h2><ol><li>FTP连接及传输模式  <ul><li>控制连接：TCP 21，用于发送FTP命令  </li><li>数据连接：TCP 20，用于上传、下载数据  </li></ul></li><li>数据连接的建立类型  <ul><li>主动模式：服务器从20端口主动向客户端发起连接  </li><li>被动模式：服务器在指定范围内某个端口被动等待客户端连接  </li></ul></li></ol>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://i.loli.net/2021/08/02/cX51yi4KrLYRfJU.jpg&quot; alt=&quot;linux.jpg&quot;&gt;  &lt;/p&gt;</summary>
    
    
    
    <category term="Linux" scheme="http://example.com/categories/Linux/"/>
    
    
    <category term="FTP" scheme="http://example.com/tags/FTP/"/>
    
  </entry>
  
  <entry>
    <title>Supervisor进程守护监控</title>
    <link href="http://example.com/2021/09/02/Linux/Supervisor%E8%BF%9B%E7%A8%8B%E5%AE%88%E6%8A%A4%E7%9B%91%E6%8E%A7/"/>
    <id>http://example.com/2021/09/02/Linux/Supervisor%E8%BF%9B%E7%A8%8B%E5%AE%88%E6%8A%A4%E7%9B%91%E6%8E%A7/</id>
    <published>2021-09-02T13:55:50.000Z</published>
    <updated>2022-05-24T04:50:20.256Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://i.loli.net/2021/08/02/cX51yi4KrLYRfJU.jpg" alt="linux.jpg">  </p><span id="more"></span><h1 id="Supervisor"><a href="#Supervisor" class="headerlink" title="Supervisor"></a>Supervisor</h1><p><a href="http://supervisord.org/">Supervisor官网</a>  </p><h2 id="Supervisor简介"><a href="#Supervisor简介" class="headerlink" title="Supervisor简介"></a>Supervisor简介</h2><p>Supervisor是用Python开发的一套通用的进程管理程序，能将一个普通的命令行进程变为后台daemon，并监控进程状态，异常退出时能自动重启。它是通过fork/exec的方式把这些被管理的进程当作supervisor的子进程来启动，这样只要在supervisor的配置文件中，把要管理的进程的可执行文件的路径写进去即可。也实现当子进程挂掉的时候，父进程可以准确获取子进程挂掉的信息的，可以选择是否自己启动和报警。supervisor还提供了一个功能，可以为supervisord或者每个子进程，设置一个非root的user，这个user就可以管理它对应的进程。  </p><h2 id="安装方式"><a href="#安装方式" class="headerlink" title="安装方式"></a>安装方式</h2><ol><li>通过pip安装  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install supervisor</span><br></pre></td></tr></table></figure></li><li>通过yum安装  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y supervisor</span><br></pre></td></tr></table></figure></li><li>通过apt安装  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get install supervisor</span><br></pre></td></tr></table></figure></li></ol><h2 id="介绍Supervisor"><a href="#介绍Supervisor" class="headerlink" title="介绍Supervisor"></a>介绍Supervisor</h2><ul><li><strong>supervisord</strong><br>运行 Supervisor 时会启动一个进程 supervisord，它负责启动所管理的进程，并将所管理的进程作为自己的子进程来启动，而且可以在所管理的进程出现崩溃时自动重启。  </li><li><strong>supervisorctl</strong><br>是命令行管理工具，可以用来执行 stop、start、restart 等命令，来对这些子进程进行管理。supervisor是所有进程的父进程，管理着启动的子进程，supervisor以子进程的PID来管理子进程，当子进程异常退出时supervisor可以收到相应的信号量。  </li></ul><h2 id="创建配置文件"><a href="#创建配置文件" class="headerlink" title="创建配置文件"></a>创建配置文件</h2><p>安装完成后执行<code>echo_supervisord_conf</code>,会将Supervisor的示例配置文件打印到终端标准输出。<br>然后使用root权限可以将示例配置文件重定向输出到<code>echo_supervisord_conf &gt; /etc/supervisord.conf</code>中，若没有root权限或者要将配置文件放在其他目录中可以执行<code>echo_supervisor_conf &gt; /xxx/supervisord.conf</code>中，启动supervisord时指明配置文件即可<code>superisord -c /xxx/supervisord.conf</code>。  </p><h2 id="配置文件详解"><a href="#配置文件详解" class="headerlink" title="配置文件详解"></a>配置文件详解</h2><p>/etc/supervisord.conf，/etc/supervisord.d中可以编写子进程的配置文件，也就是/etc/supervisord.conf中的[program:xxx]模块(例如创建test.conf)</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[unix_http_server]</span></span><br><span class="line"><span class="attr">file</span>=/var/run/supervisor/supervisor.sock   <span class="comment">; socket 路径,supervisorctl 会使用，注意修改，默认为/tmp下容易被删除</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">;chmod=0700                 ; socket 文件的权限</span></span><br><span class="line"><span class="comment">;chown=nobody:nogroup       ; socket 所属用户及组</span></span><br><span class="line"><span class="comment">;username=user              ; 用户名</span></span><br><span class="line"><span class="comment">;password=123               ; 密码</span></span><br><span class="line"> </span><br><span class="line"><span class="section">[inet_http_server]</span>         <span class="comment">; 是否启用服务，默认是关闭的（启用的话可以看到supervisor 管理的服务状态）</span></span><br><span class="line"><span class="attr">port</span>=<span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">9001</span>        <span class="comment">; 监听的IP及端口</span></span><br><span class="line"><span class="attr">username</span>=user              <span class="comment">; 用户名</span></span><br><span class="line"><span class="attr">password</span>=<span class="number">123</span>               <span class="comment">; 密码</span></span><br><span class="line"> </span><br><span class="line"><span class="section">[supervisord]</span>               <span class="comment">; supervisord 全局配置</span></span><br><span class="line"><span class="attr">logfile</span>=/var/log/supervisor/supervisord.log  <span class="comment">; supervisor 日志路径，注意修改，默认为/tmp下容易被删除</span></span><br><span class="line"><span class="attr">logfile_maxbytes</span>=<span class="number">50</span>MB       <span class="comment">; 单个日志文件最大数</span></span><br><span class="line"><span class="attr">logfile_backups</span>=<span class="number">10</span>          <span class="comment">; 保留多少个日志文件（默认10个）</span></span><br><span class="line"><span class="attr">loglevel</span>=info               <span class="comment">; (log level;default info; others: debug,warn,trace)</span></span><br><span class="line"><span class="attr">pidfile</span>=/var/run/supervisord.pid <span class="comment">; pid 文件路径，注意修改，默认为/tmp下容易被删除</span></span><br><span class="line"><span class="attr">nodaemon</span>=<span class="literal">false</span>              <span class="comment">; 启动是否丢到前台，设置为false ，表示以daemon 的方式启动</span></span><br><span class="line"><span class="attr">minfds</span>=<span class="number">1024</span>                 <span class="comment">; 最小文件打开数，对应系统limit.conf 中的nofile ,默认最小为1024，最大为4096</span></span><br><span class="line"><span class="attr">minprocs</span>=<span class="number">200</span>                <span class="comment">; 最小的进程打开数，对应系统的limit.conf 中的nproc,默认为200</span></span><br><span class="line"><span class="comment">;umask=022                  ; (process file creation umask;default 022)</span></span><br><span class="line"><span class="comment">;user=chrism                 ; 启动supervisord 服务的用户，默认为root</span></span><br><span class="line"><span class="comment">;identifier=supervisor       ; (supervisord identifier, default is &#x27;supervisor&#x27;)</span></span><br><span class="line"><span class="comment">;directory=/tmp              ; 这里的目录指的是服务的工作目录</span></span><br><span class="line"><span class="comment">;nocleanup=true              ; (don&#x27;t clean up tempfiles at start;default false)</span></span><br><span class="line"><span class="comment">;childlogdir=/tmp            ; (&#x27;AUTO&#x27; child log dir, default $TEMP)</span></span><br><span class="line"><span class="comment">;environment=KEY=value       ; (key value pairs to add to environment)</span></span><br><span class="line"><span class="comment">;strip_ansi=false            ; (strip ansi escape codes in logs; def. false)</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">; the below section must remain in the config file for RPC</span></span><br><span class="line"><span class="comment">; (supervisorctl/web interface) to work, additional interfaces may be</span></span><br><span class="line"><span class="comment">; added by defining them in separate rpcinterface: sections</span></span><br><span class="line"><span class="section">[rpcinterface:supervisor]</span></span><br><span class="line"><span class="attr">supervisor.rpcinterface_factory</span> = supervisor.rpcinterface:make_main_rpcinterface</span><br><span class="line"> </span><br><span class="line"><span class="section">[supervisorctl]</span></span><br><span class="line"><span class="attr">serverurl</span>=unix:///var/run/supervisor/supervisor.sock <span class="comment">; 通过UNIX socket连接supervisord，路径与unix_http_server部分的file一致</span></span><br><span class="line"><span class="comment">;serverurl=http://127.0.0.1:9001 ; 通过HTTP的方式连接supervisord</span></span><br><span class="line"><span class="comment">;username=chris              ; should be same as http_username if set</span></span><br><span class="line"><span class="comment">;password=123                ; should be same as http_password if set</span></span><br><span class="line"><span class="comment">;prompt=mysupervisor         ; cmd line prompt (default &quot;supervisor&quot;)</span></span><br><span class="line"><span class="comment">;history_file=~/.sc_history  ; use readline history if available</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">; The below sample program section shows all possible program subsection values,</span></span><br><span class="line"><span class="comment">; create one or more &#x27;real&#x27; program: sections to be able to control them under</span></span><br><span class="line"><span class="comment">; supervisor.</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">;[program:theprogramname]      ; 定义一个守护进程 </span></span><br><span class="line"><span class="comment">;command=/bin/cat              ; 启动程序使用的命令，可以是绝对路径或者相对路径</span></span><br><span class="line"><span class="comment">;process_name=%(program_name)s ; 一个python字符串表达式，用来表示supervisor进程启动的这个的名称，默认值是%(program_name)s</span></span><br><span class="line"><span class="comment">;numprocs=1                    ; Supervisor启动这个程序的多个实例，如果numprocs&gt;1，则process_name的表达式必须包含%(process_num)s，默认是1</span></span><br><span class="line"><span class="comment">;directory=/tmp                ; supervisord在生成子进程的时候会切换到该目录</span></span><br><span class="line"><span class="comment">;umask=022                     ; umask for process (default None)</span></span><br><span class="line"><span class="comment">;priority=999                  ; 权重，可以控制程序启动和关闭时的顺序，权重越低：越早启动，越晚关闭。默认值是999</span></span><br><span class="line"><span class="comment">;autostart=true                ; 如果设置为true，当supervisord启动的时候，进程会自动启动</span></span><br><span class="line"><span class="comment">;autorestart=true              ; 设置为随 supervisord 重启而重启，值可以是false、true、unexpected。false：进程不会自动重启,unexpected：进程意外杀死后才重启</span></span><br><span class="line"><span class="comment">;startsecs=10                  ; 程序启动后等待多长时间后才认为程序启动成功，默认是10秒</span></span><br><span class="line"><span class="comment">;startretries=3                ; supervisord尝试启动一个程序时尝试的次数。默认是3</span></span><br><span class="line"><span class="comment">;exitcodes=0,2                 ; 一个预期的退出返回码，默认是0,2。</span></span><br><span class="line"><span class="comment">;stopsignal=QUIT               ; 当收到stop请求的时候，发送信号给程序，默认是TERM信号，也可以是 HUP, INT, QUIT, KILL, USR1, or USR2</span></span><br><span class="line"><span class="comment">;stopwaitsecs=10               ; 在操作系统给supervisord发送SIGCHILD信号时等待的时间</span></span><br><span class="line"><span class="comment">;user=chrism                   ; 如果supervisord以root运行，则会使用这个设置用户启动子程序</span></span><br><span class="line"><span class="comment">;redirect_stderr=true          ; 如果设置为true，进程则会把标准错误输出到supervisord后台的标准输出文件描述符</span></span><br><span class="line"><span class="comment">;stdout_logfile=/a/path        ; 把进程的标准输出写入文件中，如果stdout_logfile没有设置或者设置为AUTO，则supervisor会自动选择一个文件位置</span></span><br><span class="line"><span class="comment">;stdout_logfile_maxbytes=1MB   ; 标准输出log文件达到多少后自动进行轮转，单位是KB、MB、GB。如果设置为0则表示不限制日志文件大小</span></span><br><span class="line"><span class="comment">;stdout_logfile_backups=10     ; 标准输出日志轮转备份的数量，默认是10，如果设置为0，则不备份</span></span><br><span class="line"><span class="comment">;stdout_capture_maxbytes=1MB   ; 当进程处于stderr capture mode模式的时候，写入FIFO队列的最大bytes值，单位可以是KB、MB、GB</span></span><br><span class="line"><span class="comment">;stdout_events_enabled=false   ; 如果设置为true，当进程在写它的stderr</span></span><br><span class="line"><span class="comment">;stderr_logfile=/a/path        ; 把进程的错误日志输出一个文件中，除非redirect_stderr参数被设置为true</span></span><br><span class="line"><span class="comment">;stderr_logfile_maxbytes=1MB   ; 错误log文件达到多少后自动进行轮转，单位是KB、MB、GB。如果设置为0则表示不限制日志文件大小</span></span><br><span class="line"><span class="comment">;stderr_logfile_backups=10     ; 错误日志轮转备份的数量，默认是10，如果设置为0，则不备份</span></span><br><span class="line"><span class="comment">;stderr_capture_maxbytes=1MB   ; 当进程处于stderr capture mode模式的时候，写入FIFO队列的最大bytes值，单位可以是KB、MB、GB</span></span><br><span class="line"><span class="comment">;stderr_events_enabled=false   ; 如果设置为true，当进程在写它的stderr到文件描述符的时候，PROCESS_LOG_STDERR事件会被触发</span></span><br><span class="line"><span class="comment">;environment=A=1,B=2           ; 一个k/v对的list列表</span></span><br><span class="line"><span class="comment">;serverurl=AUTO                ; 是否允许子进程和内部的HTTP服务通讯，如果设置为AUTO，supervisor会自动的构造一个url</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">; The below sample eventlistener section shows all possible</span></span><br><span class="line"><span class="comment">; eventlistener subsection values, create one or more &#x27;real&#x27;</span></span><br><span class="line"><span class="comment">; eventlistener: sections to be able to handle event notifications</span></span><br><span class="line"><span class="comment">; sent by supervisor.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">;这个地方是自定义一个守护进程</span></span><br><span class="line"><span class="section">[program:test]</span></span><br><span class="line"><span class="attr">user</span>=root</span><br><span class="line"><span class="attr">directory</span>=/home/supervisor_test</span><br><span class="line"><span class="attr">command</span>=/bin/bash /home/supervisor_test/test.sh</span><br><span class="line"><span class="attr">stdout_logfile</span>=/home/supervisor_test/test.txt    </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">;[eventlistener:theeventlistenername]</span></span><br><span class="line"><span class="comment">;command=/bin/eventlistener    ; the program (relative uses PATH, can take args)</span></span><br><span class="line"><span class="comment">;process_name=%(program_name)s ; process_name expr (default %(program_name)s)</span></span><br><span class="line"><span class="comment">;numprocs=1                    ; number of processes copies to start (def 1)</span></span><br><span class="line"><span class="comment">;events=EVENT                  ; event notif. types to subscribe to (req&#x27;d)</span></span><br><span class="line"><span class="comment">;buffer_size=10                ; event buffer queue size (default 10)</span></span><br><span class="line"><span class="comment">;directory=/tmp                ; directory to cwd to before exec (def no cwd)</span></span><br><span class="line"><span class="comment">;umask=022                     ; umask for process (default None)</span></span><br><span class="line"><span class="comment">;priority=-1                   ; the relative start priority (default -1)</span></span><br><span class="line"><span class="comment">;autostart=true                ; start at supervisord start (default: true)</span></span><br><span class="line"><span class="comment">;startsecs=1                   ; # of secs prog must stay up to be running (def. 1)</span></span><br><span class="line"><span class="comment">;startretries=3                ; max # of serial start failures when starting (default 3)</span></span><br><span class="line"><span class="comment">;autorestart=unexpected        ; autorestart if exited after running (def: unexpected)</span></span><br><span class="line"><span class="comment">;exitcodes=0,2                 ; &#x27;expected&#x27; exit codes used with autorestart (default 0,2)</span></span><br><span class="line"><span class="comment">;stopsignal=QUIT               ; signal used to kill process (default TERM)</span></span><br><span class="line"><span class="comment">;stopwaitsecs=10               ; max num secs to wait b4 SIGKILL (default 10)</span></span><br><span class="line"><span class="comment">;stopasgroup=false             ; send stop signal to the UNIX process group (default false)</span></span><br><span class="line"><span class="comment">;killasgroup=false             ; SIGKILL the UNIX process group (def false)</span></span><br><span class="line"><span class="comment">;user=chrism                   ; setuid to this UNIX account to run the program</span></span><br><span class="line"><span class="comment">;redirect_stderr=false         ; redirect_stderr=true is not allowed for eventlisteners</span></span><br><span class="line"><span class="comment">;stdout_logfile=/a/path        ; stdout log path, NONE for none; default AUTO</span></span><br><span class="line"><span class="comment">;stdout_logfile_maxbytes=1MB   ; max # logfile bytes b4 rotation (default 50MB)</span></span><br><span class="line"><span class="comment">;stdout_logfile_backups=10     ; # of stdout logfile backups (0 means none, default 10)</span></span><br><span class="line"><span class="comment">;stdout_events_enabled=false   ; emit events on stdout writes (default false)</span></span><br><span class="line"><span class="comment">;stderr_logfile=/a/path        ; stderr log path, NONE for none; default AUTO</span></span><br><span class="line"><span class="comment">;stderr_logfile_maxbytes=1MB   ; max # logfile bytes b4 rotation (default 50MB)</span></span><br><span class="line"><span class="comment">;stderr_logfile_backups=10     ; # of stderr logfile backups (0 means none, default 10)</span></span><br><span class="line"><span class="comment">;stderr_events_enabled=false   ; emit events on stderr writes (default false)</span></span><br><span class="line"><span class="comment">;environment=A=&quot;1&quot;,B=&quot;2&quot;       ; process environment additions</span></span><br><span class="line"><span class="comment">;serverurl=AUTO                ; override serverurl computation (childutils)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">; The sample group section below shows all possible group values.  Create one</span></span><br><span class="line"><span class="comment">; or more &#x27;real&#x27; group: sections to create &quot;heterogeneous&quot; process groups.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">;[group:thegroupname]   ;定义一个组</span></span><br><span class="line"><span class="comment">;programs=progname1,progname2  ; 组内的成员模块有哪些   </span></span><br><span class="line"><span class="comment">;priority=999                  ; the relative start priority (default 999)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">; The [include] section can just contain the &quot;files&quot; setting.  This</span></span><br><span class="line"><span class="comment">; setting can list multiple files (separated by whitespace or</span></span><br><span class="line"><span class="comment">; newlines).  It can also contain wildcards.  The filenames are</span></span><br><span class="line"><span class="comment">; interpreted as relative to this file.  Included files *cannot*</span></span><br><span class="line"><span class="comment">; include files themselves.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">;[include]</span></span><br><span class="line"><span class="comment">;files = relative/directory/*.ini</span></span><br></pre></td></tr></table></figure><p>编写一个简单的死循环脚本</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line">while true</span><br><span class="line">do</span><br><span class="line">  date  &gt;&gt; /home/supervisor_test/test.txt</span><br><span class="line">  sleep 10s</span><br><span class="line">  date &gt;&gt; /home/supervisor_test/test.txt</span><br><span class="line">  sleep 10s</span><br><span class="line">done</span><br></pre></td></tr></table></figure><p>此处的配置文件中启动了web，可以在web中进行查看进程状态以及相关操作</p><h2 id="启动Supervisor"><a href="#启动Supervisor" class="headerlink" title="启动Supervisor"></a>启动Supervisor</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">supervisord   # 此处因为配置文件为默认的/etc/supervisord.conf,若使用其他配置文件需要加 -c 配置文件路径</span><br><span class="line">supervisord -c /xxx/xxxx</span><br></pre></td></tr></table></figure><p><strong>注意</strong>在启动时可能会出现以下错误  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Error: Another program is already listening on a port that one of our HTTP servers is configured to use.  Shut this program down first before starting supervisord.For help, use /usr/bin/supervisord -h</span><br></pre></td></tr></table></figure><p>这表示已经supervisor已经启动，若配置进行了修改可以使用<code>supervisorctl update</code>  </p><h2 id="supervisorctl命令讲解"><a href="#supervisorctl命令讲解" class="headerlink" title="supervisorctl命令讲解"></a>supervisorctl命令讲解</h2><ul><li>supervisorctl ：进入到交互式命令行，在交互式命令行中以下命令可以不加supervisorctl直接执行</li><li>supervisorctl shutdown ：停止supervisord  </li><li>supervisorctl status ：查看监控进程的状态  </li><li>supervisorctl stop xxx ：停止xxx模块的进程  </li><li>supervisorctl start xxx ：启动xxx模块的进程  </li><li>supervisorctl restart xxx ：重启xxx模块的进程</li><li>supervisorctl stop all ：停止所有监控的进程  </li><li>supervisorctl update ：更新新的配置到supervisord（不会重启原来已运行的程序）  </li><li>supervisorctl reload ：载入所有配置文件，并按新的配置启动、管理所有进程（会重启原来已运行的程序）  </li></ul><p><strong>注意执行supervisorctl时可能会出现以下报错</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">unix:///var/run/supervisor/supervisor.sock no such file</span><br></pre></td></tr></table></figure><p>这表示supervisord服务可能没有启动，需要先启动supervisord</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://i.loli.net/2021/08/02/cX51yi4KrLYRfJU.jpg&quot; alt=&quot;linux.jpg&quot;&gt;  &lt;/p&gt;</summary>
    
    
    
    <category term="Linux" scheme="http://example.com/categories/Linux/"/>
    
    
    <category term="Supervisor" scheme="http://example.com/tags/Supervisor/"/>
    
  </entry>
  
</feed>
